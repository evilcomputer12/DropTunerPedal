
DropTunerPedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009328  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  080095f8  080095f8  0000a5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009880  08009880  0000a880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08009884  08009884  0000a884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000060  24000000  08009888  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000a73c  24000060  080098e8  0000b060  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400a79c  080098e8  0000b79c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001338d  00000000  00000000  0000b08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000026e6  00000000  00000000  0001e41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001178  00000000  00000000  00020b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000d7a  00000000  00000000  00021c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000343cc  00000000  00000000  000229fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001659f  00000000  00000000  00056dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015c0d9  00000000  00000000  0006d365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001c943e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004d40  00000000  00000000  001c9484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000072  00000000  00000000  001ce1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000060 	.word	0x24000060
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080095e0 	.word	0x080095e0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000064 	.word	0x24000064
 800030c:	080095e0 	.word	0x080095e0

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fda9 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f83f 	bl	800039c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  WtrP = 0;
 800031e:	4b16      	ldr	r3, [pc, #88]	@ (8000378 <main+0x68>)
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
  Rd_P = 0.0f;
 8000324:	4b15      	ldr	r3, [pc, #84]	@ (800037c <main+0x6c>)
 8000326:	f04f 0200 	mov.w	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
  Shift = 0.0f;  // Pitch shift amount (adjust as needed)
 800032c:	4b14      	ldr	r3, [pc, #80]	@ (8000380 <main+0x70>)
 800032e:	f04f 0200 	mov.w	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
  CrossFade = 1.0f;
 8000334:	4b13      	ldr	r3, [pc, #76]	@ (8000384 <main+0x74>)
 8000336:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800033a:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800033c:	f000 f9a2 	bl	8000684 <MX_GPIO_Init>
  MX_DMA_Init();
 8000340:	f000 f978 	bl	8000634 <MX_DMA_Init>
  MX_ADC3_Init();
 8000344:	f000 f89a 	bl	800047c <MX_ADC3_Init>
  MX_DAC1_Init();
 8000348:	f000 f90c 	bl	8000564 <MX_DAC1_Init>
  MX_TIM6_Init();
 800034c:	f000 f93c 	bl	80005c8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc3, adc_buffer, N);
 8000350:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000354:	490c      	ldr	r1, [pc, #48]	@ (8000388 <main+0x78>)
 8000356:	480d      	ldr	r0, [pc, #52]	@ (800038c <main+0x7c>)
 8000358:	f001 fb3a 	bl	80019d0 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, dac_buffer, N, DAC_ALIGN_12B_R);
 800035c:	2300      	movs	r3, #0
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	f640 53ac 	movw	r3, #3500	@ 0xdac
 8000364:	4a0a      	ldr	r2, [pc, #40]	@ (8000390 <main+0x80>)
 8000366:	2110      	movs	r1, #16
 8000368:	480a      	ldr	r0, [pc, #40]	@ (8000394 <main+0x84>)
 800036a:	f002 fc85 	bl	8002c78 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 800036e:	480a      	ldr	r0, [pc, #40]	@ (8000398 <main+0x88>)
 8000370:	f008 fd70 	bl	8008e54 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <main+0x64>
 8000378:	2400372c 	.word	0x2400372c
 800037c:	24003730 	.word	0x24003730
 8000380:	24003734 	.word	0x24003734
 8000384:	24003738 	.word	0x24003738
 8000388:	24003900 	.word	0x24003900
 800038c:	24003740 	.word	0x24003740
 8000390:	24006fb0 	.word	0x24006fb0
 8000394:	24003828 	.word	0x24003828
 8000398:	240038b4 	.word	0x240038b4

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b09c      	sub	sp, #112	@ 0x70
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003a6:	224c      	movs	r2, #76	@ 0x4c
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f009 f8e5 	bl	800957a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2220      	movs	r2, #32
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f009 f8df 	bl	800957a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003bc:	2002      	movs	r0, #2
 80003be:	f005 f981 	bl	80056c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003c2:	2300      	movs	r3, #0
 80003c4:	603b      	str	r3, [r7, #0]
 80003c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000478 <SystemClock_Config+0xdc>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000478 <SystemClock_Config+0xdc>)
 80003cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80003d0:	6193      	str	r3, [r2, #24]
 80003d2:	4b29      	ldr	r3, [pc, #164]	@ (8000478 <SystemClock_Config+0xdc>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003de:	bf00      	nop
 80003e0:	4b25      	ldr	r3, [pc, #148]	@ (8000478 <SystemClock_Config+0xdc>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003ec:	d1f8      	bne.n	80003e0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ee:	2302      	movs	r3, #2
 80003f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003f2:	2301      	movs	r3, #1
 80003f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003f6:	2340      	movs	r3, #64	@ 0x40
 80003f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fa:	2302      	movs	r3, #2
 80003fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003fe:	2300      	movs	r3, #0
 8000400:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000402:	2304      	movs	r3, #4
 8000404:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8000406:	2322      	movs	r3, #34	@ 0x22
 8000408:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800040a:	2301      	movs	r3, #1
 800040c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800040e:	2302      	movs	r3, #2
 8000410:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000412:	2302      	movs	r3, #2
 8000414:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000416:	230c      	movs	r3, #12
 8000418:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800041a:	2300      	movs	r3, #0
 800041c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 800041e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000422:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000424:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000428:	4618      	mov	r0, r3
 800042a:	f005 f985 	bl	8005738 <HAL_RCC_OscConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000434:	f000 faba 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000438:	233f      	movs	r3, #63	@ 0x3f
 800043a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043c:	2303      	movs	r3, #3
 800043e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000444:	2308      	movs	r3, #8
 8000446:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000448:	2340      	movs	r3, #64	@ 0x40
 800044a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800044c:	2340      	movs	r3, #64	@ 0x40
 800044e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000450:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000454:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000456:	2340      	movs	r3, #64	@ 0x40
 8000458:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2103      	movs	r1, #3
 800045e:	4618      	mov	r0, r3
 8000460:	f005 fd44 	bl	8005eec <HAL_RCC_ClockConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800046a:	f000 fa9f 	bl	80009ac <Error_Handler>
  }
}
 800046e:	bf00      	nop
 8000470:	3770      	adds	r7, #112	@ 0x70
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	58024800 	.word	0x58024800

0800047c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08a      	sub	sp, #40	@ 0x28
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2224      	movs	r2, #36	@ 0x24
 8000486:	2100      	movs	r1, #0
 8000488:	4618      	mov	r0, r3
 800048a:	f009 f876 	bl	800957a <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800048e:	4b32      	ldr	r3, [pc, #200]	@ (8000558 <MX_ADC3_Init+0xdc>)
 8000490:	4a32      	ldr	r2, [pc, #200]	@ (800055c <MX_ADC3_Init+0xe0>)
 8000492:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000494:	4b30      	ldr	r3, [pc, #192]	@ (8000558 <MX_ADC3_Init+0xdc>)
 8000496:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800049a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800049c:	4b2e      	ldr	r3, [pc, #184]	@ (8000558 <MX_ADC3_Init+0xdc>)
 800049e:	2208      	movs	r2, #8
 80004a0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80004a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000558 <MX_ADC3_Init+0xdc>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000558 <MX_ADC3_Init+0xdc>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000558 <MX_ADC3_Init+0xdc>)
 80004b0:	2204      	movs	r2, #4
 80004b2:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80004b4:	4b28      	ldr	r3, [pc, #160]	@ (8000558 <MX_ADC3_Init+0xdc>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80004ba:	4b27      	ldr	r3, [pc, #156]	@ (8000558 <MX_ADC3_Init+0xdc>)
 80004bc:	2200      	movs	r2, #0
 80004be:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80004c0:	4b25      	ldr	r3, [pc, #148]	@ (8000558 <MX_ADC3_Init+0xdc>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80004c6:	4b24      	ldr	r3, [pc, #144]	@ (8000558 <MX_ADC3_Init+0xdc>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80004ce:	4b22      	ldr	r3, [pc, #136]	@ (8000558 <MX_ADC3_Init+0xdc>)
 80004d0:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80004d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004d6:	4b20      	ldr	r3, [pc, #128]	@ (8000558 <MX_ADC3_Init+0xdc>)
 80004d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80004de:	4b1e      	ldr	r3, [pc, #120]	@ (8000558 <MX_ADC3_Init+0xdc>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80004e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000558 <MX_ADC3_Init+0xdc>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80004ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000558 <MX_ADC3_Init+0xdc>)
 80004ee:	2203      	movs	r2, #3
 80004f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004f2:	4b19      	ldr	r3, [pc, #100]	@ (8000558 <MX_ADC3_Init+0xdc>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80004f8:	4b17      	ldr	r3, [pc, #92]	@ (8000558 <MX_ADC3_Init+0xdc>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80004fe:	4b16      	ldr	r3, [pc, #88]	@ (8000558 <MX_ADC3_Init+0xdc>)
 8000500:	2200      	movs	r2, #0
 8000502:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8000506:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <MX_ADC3_Init+0xdc>)
 8000508:	2200      	movs	r2, #0
 800050a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800050c:	4812      	ldr	r0, [pc, #72]	@ (8000558 <MX_ADC3_Init+0xdc>)
 800050e:	f001 f857 	bl	80015c0 <HAL_ADC_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 8000518:	f000 fa48 	bl	80009ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800051c:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <MX_ADC3_Init+0xe4>)
 800051e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000520:	2306      	movs	r3, #6
 8000522:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000524:	2300      	movs	r3, #0
 8000526:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000528:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800052c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800052e:	2304      	movs	r3, #4
 8000530:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000536:	2300      	movs	r3, #0
 8000538:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4619      	mov	r1, r3
 800053e:	4806      	ldr	r0, [pc, #24]	@ (8000558 <MX_ADC3_Init+0xdc>)
 8000540:	f001 fb2c 	bl	8001b9c <HAL_ADC_ConfigChannel>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 800054a:	f000 fa2f 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	3728      	adds	r7, #40	@ 0x28
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	24003740 	.word	0x24003740
 800055c:	58026000 	.word	0x58026000
 8000560:	2e300800 	.word	0x2e300800

08000564 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	@ 0x28
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2224      	movs	r2, #36	@ 0x24
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f009 f802 	bl	800957a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000576:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <MX_DAC1_Init+0x5c>)
 8000578:	4a12      	ldr	r2, [pc, #72]	@ (80005c4 <MX_DAC1_Init+0x60>)
 800057a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800057c:	4810      	ldr	r0, [pc, #64]	@ (80005c0 <MX_DAC1_Init+0x5c>)
 800057e:	f002 fb58 	bl	8002c32 <HAL_DAC_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000588:	f000 fa10 	bl	80009ac <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000590:	2316      	movs	r3, #22
 8000592:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000598:	2301      	movs	r3, #1
 800059a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2210      	movs	r2, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <MX_DAC1_Init+0x5c>)
 80005a8:	f002 fc44 	bl	8002e34 <HAL_DAC_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005b2:	f000 f9fb 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	3728      	adds	r7, #40	@ 0x28
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	24003828 	.word	0x24003828
 80005c4:	40007400 	.word	0x40007400

080005c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005d8:	4b14      	ldr	r3, [pc, #80]	@ (800062c <MX_TIM6_Init+0x64>)
 80005da:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <MX_TIM6_Init+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80005de:	4b13      	ldr	r3, [pc, #76]	@ (800062c <MX_TIM6_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e4:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_TIM6_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2865;
 80005ea:	4b10      	ldr	r3, [pc, #64]	@ (800062c <MX_TIM6_Init+0x64>)
 80005ec:	f640 3231 	movw	r2, #2865	@ 0xb31
 80005f0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <MX_TIM6_Init+0x64>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005f8:	480c      	ldr	r0, [pc, #48]	@ (800062c <MX_TIM6_Init+0x64>)
 80005fa:	f008 fbd3 	bl	8008da4 <HAL_TIM_Base_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000604:	f000 f9d2 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000608:	2320      	movs	r3, #32
 800060a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	@ (800062c <MX_TIM6_Init+0x64>)
 8000616:	f008 fd4d 	bl	80090b4 <HAL_TIMEx_MasterConfigSynchronization>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000620:	f000 f9c4 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	240038b4 	.word	0x240038b4
 8000630:	40001000 	.word	0x40001000

08000634 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_DMA_Init+0x4c>)
 800063c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000640:	4a0f      	ldr	r2, [pc, #60]	@ (8000680 <MX_DMA_Init+0x4c>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800064a:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <MX_DMA_Init+0x4c>)
 800064c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	200b      	movs	r0, #11
 800065e:	f002 fab4 	bl	8002bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000662:	200b      	movs	r0, #11
 8000664:	f002 facb 	bl	8002bfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	200c      	movs	r0, #12
 800066e:	f002 faac 	bl	8002bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000672:	200c      	movs	r0, #12
 8000674:	f002 fac3 	bl	8002bfe <HAL_NVIC_EnableIRQ>

}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	58024400 	.word	0x58024400

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <MX_GPIO_Init+0x50>)
 800068c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000690:	4a10      	ldr	r2, [pc, #64]	@ (80006d4 <MX_GPIO_Init+0x50>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_GPIO_Init+0x50>)
 800069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <MX_GPIO_Init+0x50>)
 80006aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ae:	4a09      	ldr	r2, [pc, #36]	@ (80006d4 <MX_GPIO_Init+0x50>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_GPIO_Init+0x50>)
 80006ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	58024400 	.word	0x58024400

080006d8 <Do_PitchShift>:

/* USER CODE BEGIN 4 */
// Pitch shifting function (downward only)
uint32_t Do_PitchShift(uint32_t sample) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	@ 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    // Write the original sample to the ring buffer
    Buf[WtrP] = sample;
 80006e0:	4b84      	ldr	r3, [pc, #528]	@ (80008f4 <Do_PitchShift+0x21c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	4984      	ldr	r1, [pc, #528]	@ (80008f8 <Do_PitchShift+0x220>)
 80006e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // Ensure semitoneShift is within the valid range (0 to MAX_DOWN_SHIFT)
    if (semitoneShift > MAX_DOWN_SHIFT) {
 80006ec:	4b83      	ldr	r3, [pc, #524]	@ (80008fc <Do_PitchShift+0x224>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b0c      	cmp	r3, #12
 80006f2:	d902      	bls.n	80006fa <Do_PitchShift+0x22>
        semitoneShift = MAX_DOWN_SHIFT;
 80006f4:	4b81      	ldr	r3, [pc, #516]	@ (80008fc <Do_PitchShift+0x224>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	601a      	str	r2, [r3, #0]
    }

    // Calculate the pitch shift ratio based on downward semitone shift
    float pitchShiftRatio = powf(2.0f, -(float)semitoneShift / 12.0f); // Only downshift
 80006fa:	4b80      	ldr	r3, [pc, #512]	@ (80008fc <Do_PitchShift+0x224>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	ee07 3a90 	vmov	s15, r3
 8000702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000706:	eef1 7a67 	vneg.f32	s15, s15
 800070a:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800070e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000712:	eef0 0a47 	vmov.f32	s1, s14
 8000716:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800071a:	f008 fd81 	bl	8009220 <powf>
 800071e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

    // Update the read pointer based on the pitch shift ratio
    Rd_P += pitchShiftRatio;
 8000722:	4b77      	ldr	r3, [pc, #476]	@ (8000900 <Do_PitchShift+0x228>)
 8000724:	ed93 7a00 	vldr	s14, [r3]
 8000728:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800072c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000730:	4b73      	ldr	r3, [pc, #460]	@ (8000900 <Do_PitchShift+0x228>)
 8000732:	edc3 7a00 	vstr	s15, [r3]

    // Clamp the read pointer to prevent overflow
    if (Rd_P >= BufSize) Rd_P -= BufSize;
 8000736:	4b72      	ldr	r3, [pc, #456]	@ (8000900 <Do_PitchShift+0x228>)
 8000738:	edd3 7a00 	vldr	s15, [r3]
 800073c:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8000904 <Do_PitchShift+0x22c>
 8000740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000748:	db09      	blt.n	800075e <Do_PitchShift+0x86>
 800074a:	4b6d      	ldr	r3, [pc, #436]	@ (8000900 <Do_PitchShift+0x228>)
 800074c:	edd3 7a00 	vldr	s15, [r3]
 8000750:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8000904 <Do_PitchShift+0x22c>
 8000754:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000758:	4b69      	ldr	r3, [pc, #420]	@ (8000900 <Do_PitchShift+0x228>)
 800075a:	edc3 7a00 	vstr	s15, [r3]

    // Compute integer read pointers for pitch-shifting (0° and 180° phases)
    int RdPtr_Int = (int)Rd_P % BufSize;             // Main read pointer
 800075e:	4b68      	ldr	r3, [pc, #416]	@ (8000900 <Do_PitchShift+0x228>)
 8000760:	edd3 7a00 	vldr	s15, [r3]
 8000764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000768:	ee17 3a90 	vmov	r3, s15
 800076c:	4a66      	ldr	r2, [pc, #408]	@ (8000908 <Do_PitchShift+0x230>)
 800076e:	fb82 1203 	smull	r1, r2, r2, r3
 8000772:	1251      	asrs	r1, r2, #9
 8000774:	17da      	asrs	r2, r3, #31
 8000776:	1a8a      	subs	r2, r1, r2
 8000778:	f640 51ac 	movw	r1, #3500	@ 0xdac
 800077c:	fb01 f202 	mul.w	r2, r1, r2
 8000780:	1a9b      	subs	r3, r3, r2
 8000782:	623b      	str	r3, [r7, #32]
    int RdPtr_Int2 = (RdPtr_Int + (BufSize / 2)) % BufSize; // 180° phase pointer
 8000784:	6a3b      	ldr	r3, [r7, #32]
 8000786:	f203 63d6 	addw	r3, r3, #1750	@ 0x6d6
 800078a:	4a5f      	ldr	r2, [pc, #380]	@ (8000908 <Do_PitchShift+0x230>)
 800078c:	fb82 1203 	smull	r1, r2, r2, r3
 8000790:	1251      	asrs	r1, r2, #9
 8000792:	17da      	asrs	r2, r3, #31
 8000794:	1a8a      	subs	r2, r1, r2
 8000796:	f640 51ac 	movw	r1, #3500	@ 0xdac
 800079a:	fb01 f202 	mul.w	r2, r1, r2
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	61fb      	str	r3, [r7, #28]

    // Read the two samples from the buffer
    float Rd0 = (float)Buf[RdPtr_Int];
 80007a2:	4a55      	ldr	r2, [pc, #340]	@ (80008f8 <Do_PitchShift+0x220>)
 80007a4:	6a3b      	ldr	r3, [r7, #32]
 80007a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007aa:	ee07 3a90 	vmov	s15, r3
 80007ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007b2:	edc7 7a06 	vstr	s15, [r7, #24]
    float Rd1 = (float)Buf[RdPtr_Int2];
 80007b6:	4a50      	ldr	r2, [pc, #320]	@ (80008f8 <Do_PitchShift+0x220>)
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007be:	ee07 3a90 	vmov	s15, r3
 80007c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007c6:	edc7 7a05 	vstr	s15, [r7, #20]

    // Cross-fade between two read pointers if overlap occurs
    if (Overlap >= (WtrP - RdPtr_Int) && (WtrP - RdPtr_Int) >= 0 && Shift != 1.0f) {
 80007ca:	4b4a      	ldr	r3, [pc, #296]	@ (80008f4 <Do_PitchShift+0x21c>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	6a3b      	ldr	r3, [r7, #32]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 80007d6:	dc21      	bgt.n	800081c <Do_PitchShift+0x144>
 80007d8:	4b46      	ldr	r3, [pc, #280]	@ (80008f4 <Do_PitchShift+0x21c>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	6a3b      	ldr	r3, [r7, #32]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db1b      	blt.n	800081c <Do_PitchShift+0x144>
 80007e4:	4b49      	ldr	r3, [pc, #292]	@ (800090c <Do_PitchShift+0x234>)
 80007e6:	edd3 7a00 	vldr	s15, [r3]
 80007ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80007ee:	eef4 7a47 	vcmp.f32	s15, s14
 80007f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f6:	d011      	beq.n	800081c <Do_PitchShift+0x144>
        int rel = WtrP - RdPtr_Int;
 80007f8:	4b3e      	ldr	r3, [pc, #248]	@ (80008f4 <Do_PitchShift+0x21c>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	6a3b      	ldr	r3, [r7, #32]
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	613b      	str	r3, [r7, #16]
        CrossFade = ((float)rel) / (float)Overlap;
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	ee07 3a90 	vmov	s15, r3
 8000808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800080c:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8000910 <Do_PitchShift+0x238>
 8000810:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000814:	4b3f      	ldr	r3, [pc, #252]	@ (8000914 <Do_PitchShift+0x23c>)
 8000816:	edc3 7a00 	vstr	s15, [r3]
    if (Overlap >= (WtrP - RdPtr_Int) && (WtrP - RdPtr_Int) >= 0 && Shift != 1.0f) {
 800081a:	e008      	b.n	800082e <Do_PitchShift+0x156>
    } else if (WtrP - RdPtr_Int == 0) {
 800081c:	4b35      	ldr	r3, [pc, #212]	@ (80008f4 <Do_PitchShift+0x21c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	6a3a      	ldr	r2, [r7, #32]
 8000822:	429a      	cmp	r2, r3
 8000824:	d103      	bne.n	800082e <Do_PitchShift+0x156>
        CrossFade = 0.0f;
 8000826:	4b3b      	ldr	r3, [pc, #236]	@ (8000914 <Do_PitchShift+0x23c>)
 8000828:	f04f 0200 	mov.w	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
    }

    if (Overlap >= (WtrP - RdPtr_Int2) && (WtrP - RdPtr_Int2) >= 0 && Shift != 1.0f) {
 800082e:	4b31      	ldr	r3, [pc, #196]	@ (80008f4 <Do_PitchShift+0x21c>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 800083a:	dc25      	bgt.n	8000888 <Do_PitchShift+0x1b0>
 800083c:	4b2d      	ldr	r3, [pc, #180]	@ (80008f4 <Do_PitchShift+0x21c>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	db1f      	blt.n	8000888 <Do_PitchShift+0x1b0>
 8000848:	4b30      	ldr	r3, [pc, #192]	@ (800090c <Do_PitchShift+0x234>)
 800084a:	edd3 7a00 	vldr	s15, [r3]
 800084e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000852:	eef4 7a47 	vcmp.f32	s15, s14
 8000856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800085a:	d015      	beq.n	8000888 <Do_PitchShift+0x1b0>
        int rel = WtrP - RdPtr_Int2;
 800085c:	4b25      	ldr	r3, [pc, #148]	@ (80008f4 <Do_PitchShift+0x21c>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	60fb      	str	r3, [r7, #12]
        CrossFade = 1.0f - ((float)rel) / (float)Overlap;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000870:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8000910 <Do_PitchShift+0x238>
 8000874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000878:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800087c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000880:	4b24      	ldr	r3, [pc, #144]	@ (8000914 <Do_PitchShift+0x23c>)
 8000882:	edc3 7a00 	vstr	s15, [r3]
    if (Overlap >= (WtrP - RdPtr_Int2) && (WtrP - RdPtr_Int2) >= 0 && Shift != 1.0f) {
 8000886:	e008      	b.n	800089a <Do_PitchShift+0x1c2>
    } else if (WtrP - RdPtr_Int2 == 0) {
 8000888:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <Do_PitchShift+0x21c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	69fa      	ldr	r2, [r7, #28]
 800088e:	429a      	cmp	r2, r3
 8000890:	d103      	bne.n	800089a <Do_PitchShift+0x1c2>
        CrossFade = 1.0f;
 8000892:	4b20      	ldr	r3, [pc, #128]	@ (8000914 <Do_PitchShift+0x23c>)
 8000894:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000898:	601a      	str	r2, [r3, #0]
    }

    // Perform cross-fading and combine the two read samples
    sample = (uint32_t)(Rd0 * CrossFade + Rd1 * (1.0f - CrossFade));
 800089a:	4b1e      	ldr	r3, [pc, #120]	@ (8000914 <Do_PitchShift+0x23c>)
 800089c:	ed93 7a00 	vldr	s14, [r3]
 80008a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80008a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <Do_PitchShift+0x23c>)
 80008aa:	edd3 7a00 	vldr	s15, [r3]
 80008ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80008b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80008b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80008ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008c6:	ee17 3a90 	vmov	r3, s15
 80008ca:	607b      	str	r3, [r7, #4]

    // Increment the write pointer and handle wrap-around
    WtrP++;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <Do_PitchShift+0x21c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	3301      	adds	r3, #1
 80008d2:	4a08      	ldr	r2, [pc, #32]	@ (80008f4 <Do_PitchShift+0x21c>)
 80008d4:	6013      	str	r3, [r2, #0]
    if (WtrP == BufSize) WtrP = 0;
 80008d6:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <Do_PitchShift+0x21c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80008de:	4293      	cmp	r3, r2
 80008e0:	d102      	bne.n	80008e8 <Do_PitchShift+0x210>
 80008e2:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <Do_PitchShift+0x21c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]

    return sample;
 80008e8:	687b      	ldr	r3, [r7, #4]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3728      	adds	r7, #40	@ 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2400372c 	.word	0x2400372c
 80008f8:	2400007c 	.word	0x2400007c
 80008fc:	2400373c 	.word	0x2400373c
 8000900:	24003730 	.word	0x24003730
 8000904:	455ac000 	.word	0x455ac000
 8000908:	2572fb07 	.word	0x2572fb07
 800090c:	24003734 	.word	0x24003734
 8000910:	43af0000 	.word	0x43af0000
 8000914:	24003738 	.word	0x24003738

08000918 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	for(int n = 0; n < halfN; n++)
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e00e      	b.n	8000944 <HAL_ADC_ConvHalfCpltCallback+0x2c>
	{
		dac_buffer[n] = Do_PitchShift(adc_buffer[n]);
 8000926:	4a0c      	ldr	r2, [pc, #48]	@ (8000958 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fed2 	bl	80006d8 <Do_PitchShift>
 8000934:	4602      	mov	r2, r0
 8000936:	4909      	ldr	r1, [pc, #36]	@ (800095c <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int n = 0; n < halfN; n++)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3301      	adds	r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 800094a:	4293      	cmp	r3, r2
 800094c:	ddeb      	ble.n	8000926 <HAL_ADC_ConvHalfCpltCallback+0xe>
	}
}
 800094e:	bf00      	nop
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	24003900 	.word	0x24003900
 800095c:	24006fb0 	.word	0x24006fb0

08000960 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	for(int n = halfN; n < N; n++)
 8000968:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e00e      	b.n	800098e <HAL_ADC_ConvCpltCallback+0x2e>
	{
		dac_buffer[n] =  Do_PitchShift(adc_buffer[n]);
 8000970:	4a0c      	ldr	r2, [pc, #48]	@ (80009a4 <HAL_ADC_ConvCpltCallback+0x44>)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fead 	bl	80006d8 <Do_PitchShift>
 800097e:	4602      	mov	r2, r0
 8000980:	4909      	ldr	r1, [pc, #36]	@ (80009a8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int n = halfN; n < N; n++)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	3301      	adds	r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8000994:	4293      	cmp	r3, r2
 8000996:	ddeb      	ble.n	8000970 <HAL_ADC_ConvCpltCallback+0x10>
	}
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	24003900 	.word	0x24003900
 80009a8:	24006fb0 	.word	0x24006fb0

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <Error_Handler+0x8>

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009c4:	4a13      	ldr	r2, [pc, #76]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80009dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 fac8 	bl	8000f90 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000a00:	f000 faee 	bl	8000fe0 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 fad7 	bl	8000fb8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	58024400 	.word	0x58024400

08000a18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b0b8      	sub	sp, #224	@ 0xe0
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	22b8      	movs	r2, #184	@ 0xb8
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f008 fd9e 	bl	800957a <memset>
  if(hadc->Instance==ADC3)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a44      	ldr	r2, [pc, #272]	@ (8000b54 <HAL_ADC_MspInit+0x13c>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	f040 8081 	bne.w	8000b4c <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a4a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a4e:	f04f 0300 	mov.w	r3, #0
 8000a52:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000a56:	2304      	movs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a6a:	23c0      	movs	r3, #192	@ 0xc0
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	4618      	mov	r0, r3
 8000a82:	f005 fda9 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000a8c:	f7ff ff8e 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a90:	4b31      	ldr	r3, [pc, #196]	@ (8000b58 <HAL_ADC_MspInit+0x140>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a96:	4a30      	ldr	r2, [pc, #192]	@ (8000b58 <HAL_ADC_MspInit+0x140>)
 8000a98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b58 <HAL_ADC_MspInit+0x140>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b2a      	ldr	r3, [pc, #168]	@ (8000b58 <HAL_ADC_MspInit+0x140>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab4:	4a28      	ldr	r2, [pc, #160]	@ (8000b58 <HAL_ADC_MspInit+0x140>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000abe:	4b26      	ldr	r3, [pc, #152]	@ (8000b58 <HAL_ADC_MspInit+0x140>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC1     ------> ADC3_INP11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000acc:	2302      	movs	r3, #2
 8000ace:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ade:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	481d      	ldr	r0, [pc, #116]	@ (8000b5c <HAL_ADC_MspInit+0x144>)
 8000ae6:	f004 fc45 	bl	8005374 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	@ (8000b60 <HAL_ADC_MspInit+0x148>)
 8000aec:	4a1d      	ldr	r2, [pc, #116]	@ (8000b64 <HAL_ADC_MspInit+0x14c>)
 8000aee:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <HAL_ADC_MspInit+0x148>)
 8000af2:	2273      	movs	r2, #115	@ 0x73
 8000af4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <HAL_ADC_MspInit+0x148>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afc:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <HAL_ADC_MspInit+0x148>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <HAL_ADC_MspInit+0x148>)
 8000b04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b08:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <HAL_ADC_MspInit+0x148>)
 8000b0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b10:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b12:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <HAL_ADC_MspInit+0x148>)
 8000b14:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b18:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <HAL_ADC_MspInit+0x148>)
 8000b1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b20:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <HAL_ADC_MspInit+0x148>)
 8000b24:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b28:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <HAL_ADC_MspInit+0x148>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b30:	480b      	ldr	r0, [pc, #44]	@ (8000b60 <HAL_ADC_MspInit+0x148>)
 8000b32:	f002 fb4b 	bl	80031cc <HAL_DMA_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8000b3c:	f7ff ff36 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a07      	ldr	r2, [pc, #28]	@ (8000b60 <HAL_ADC_MspInit+0x148>)
 8000b44:	659a      	str	r2, [r3, #88]	@ 0x58
 8000b46:	4a06      	ldr	r2, [pc, #24]	@ (8000b60 <HAL_ADC_MspInit+0x148>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000b4c:	bf00      	nop
 8000b4e:	37e0      	adds	r7, #224	@ 0xe0
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	58026000 	.word	0x58026000
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58020800 	.word	0x58020800
 8000b60:	240037b0 	.word	0x240037b0
 8000b64:	40020010 	.word	0x40020010

08000b68 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a30      	ldr	r2, [pc, #192]	@ (8000c48 <HAL_DAC_MspInit+0xe0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d15a      	bne.n	8000c40 <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000b8a:	4b30      	ldr	r3, [pc, #192]	@ (8000c4c <HAL_DAC_MspInit+0xe4>)
 8000b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b90:	4a2e      	ldr	r2, [pc, #184]	@ (8000c4c <HAL_DAC_MspInit+0xe4>)
 8000b92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000b96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c4c <HAL_DAC_MspInit+0xe4>)
 8000b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b28      	ldr	r3, [pc, #160]	@ (8000c4c <HAL_DAC_MspInit+0xe4>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bae:	4a27      	ldr	r2, [pc, #156]	@ (8000c4c <HAL_DAC_MspInit+0xe4>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb8:	4b24      	ldr	r3, [pc, #144]	@ (8000c4c <HAL_DAC_MspInit+0xe4>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bc6:	2320      	movs	r3, #32
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	481d      	ldr	r0, [pc, #116]	@ (8000c50 <HAL_DAC_MspInit+0xe8>)
 8000bda:	f004 fbcb 	bl	8005374 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8000bde:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <HAL_DAC_MspInit+0xec>)
 8000be0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c58 <HAL_DAC_MspInit+0xf0>)
 8000be2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <HAL_DAC_MspInit+0xec>)
 8000be6:	2244      	movs	r2, #68	@ 0x44
 8000be8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <HAL_DAC_MspInit+0xec>)
 8000bec:	2240      	movs	r2, #64	@ 0x40
 8000bee:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <HAL_DAC_MspInit+0xec>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <HAL_DAC_MspInit+0xec>)
 8000bf8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bfc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_DAC_MspInit+0xec>)
 8000c00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c04:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c06:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <HAL_DAC_MspInit+0xec>)
 8000c08:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c0c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <HAL_DAC_MspInit+0xec>)
 8000c10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c14:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <HAL_DAC_MspInit+0xec>)
 8000c18:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c1c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <HAL_DAC_MspInit+0xec>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8000c24:	480b      	ldr	r0, [pc, #44]	@ (8000c54 <HAL_DAC_MspInit+0xec>)
 8000c26:	f002 fad1 	bl	80031cc <HAL_DMA_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8000c30:	f7ff febc 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a07      	ldr	r2, [pc, #28]	@ (8000c54 <HAL_DAC_MspInit+0xec>)
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	4a06      	ldr	r2, [pc, #24]	@ (8000c54 <HAL_DAC_MspInit+0xec>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	@ 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40007400 	.word	0x40007400
 8000c4c:	58024400 	.word	0x58024400
 8000c50:	58020000 	.word	0x58020000
 8000c54:	2400383c 	.word	0x2400383c
 8000c58:	40020028 	.word	0x40020028

08000c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0b      	ldr	r2, [pc, #44]	@ (8000c98 <HAL_TIM_Base_MspInit+0x3c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d10e      	bne.n	8000c8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <HAL_TIM_Base_MspInit+0x40>)
 8000c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c74:	4a09      	ldr	r2, [pc, #36]	@ (8000c9c <HAL_TIM_Base_MspInit+0x40>)
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c7e:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <HAL_TIM_Base_MspInit+0x40>)
 8000c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c84:	f003 0310 	and.w	r3, r3, #16
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	40001000 	.word	0x40001000
 8000c9c:	58024400 	.word	0x58024400

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf6:	f000 f92b 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000d04:	4802      	ldr	r0, [pc, #8]	@ (8000d10 <DMA1_Stream0_IRQHandler+0x10>)
 8000d06:	f003 f823 	bl	8003d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	240037b0 	.word	0x240037b0

08000d14 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8000d18:	4802      	ldr	r0, [pc, #8]	@ (8000d24 <DMA1_Stream1_IRQHandler+0x10>)
 8000d1a:	f003 f819 	bl	8003d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2400383c 	.word	0x2400383c

08000d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d2c:	4b32      	ldr	r3, [pc, #200]	@ (8000df8 <SystemInit+0xd0>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d32:	4a31      	ldr	r2, [pc, #196]	@ (8000df8 <SystemInit+0xd0>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000dfc <SystemInit+0xd4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 030f 	and.w	r3, r3, #15
 8000d44:	2b06      	cmp	r3, #6
 8000d46:	d807      	bhi.n	8000d58 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d48:	4b2c      	ldr	r3, [pc, #176]	@ (8000dfc <SystemInit+0xd4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f023 030f 	bic.w	r3, r3, #15
 8000d50:	4a2a      	ldr	r2, [pc, #168]	@ (8000dfc <SystemInit+0xd4>)
 8000d52:	f043 0307 	orr.w	r3, r3, #7
 8000d56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d58:	4b29      	ldr	r3, [pc, #164]	@ (8000e00 <SystemInit+0xd8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a28      	ldr	r2, [pc, #160]	@ (8000e00 <SystemInit+0xd8>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d64:	4b26      	ldr	r3, [pc, #152]	@ (8000e00 <SystemInit+0xd8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d6a:	4b25      	ldr	r3, [pc, #148]	@ (8000e00 <SystemInit+0xd8>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4924      	ldr	r1, [pc, #144]	@ (8000e00 <SystemInit+0xd8>)
 8000d70:	4b24      	ldr	r3, [pc, #144]	@ (8000e04 <SystemInit+0xdc>)
 8000d72:	4013      	ands	r3, r2
 8000d74:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d76:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <SystemInit+0xd4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d007      	beq.n	8000d92 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d82:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <SystemInit+0xd4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 030f 	bic.w	r3, r3, #15
 8000d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dfc <SystemInit+0xd4>)
 8000d8c:	f043 0307 	orr.w	r3, r3, #7
 8000d90:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d92:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <SystemInit+0xd8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d98:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <SystemInit+0xd8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <SystemInit+0xd8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000da4:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <SystemInit+0xd8>)
 8000da6:	4a18      	ldr	r2, [pc, #96]	@ (8000e08 <SystemInit+0xe0>)
 8000da8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <SystemInit+0xd8>)
 8000dac:	4a17      	ldr	r2, [pc, #92]	@ (8000e0c <SystemInit+0xe4>)
 8000dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <SystemInit+0xd8>)
 8000db2:	4a17      	ldr	r2, [pc, #92]	@ (8000e10 <SystemInit+0xe8>)
 8000db4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000db6:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <SystemInit+0xd8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dbc:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <SystemInit+0xd8>)
 8000dbe:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <SystemInit+0xe8>)
 8000dc0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <SystemInit+0xd8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <SystemInit+0xd8>)
 8000dca:	4a11      	ldr	r2, [pc, #68]	@ (8000e10 <SystemInit+0xe8>)
 8000dcc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <SystemInit+0xd8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <SystemInit+0xd8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a09      	ldr	r2, [pc, #36]	@ (8000e00 <SystemInit+0xd8>)
 8000dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <SystemInit+0xd8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <SystemInit+0xec>)
 8000de8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000dec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00
 8000dfc:	52002000 	.word	0x52002000
 8000e00:	58024400 	.word	0x58024400
 8000e04:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e08:	02020200 	.word	0x02020200
 8000e0c:	01ff0000 	.word	0x01ff0000
 8000e10:	01010280 	.word	0x01010280
 8000e14:	52004000 	.word	0x52004000

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e1c:	f7ff ff84 	bl	8000d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	@ (8000e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	@ (8000e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e46:	f008 fba7 	bl	8009598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fa61 	bl	8000310 <main>
  bx  lr
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e50:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000e54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e58:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000e5c:	08009888 	.word	0x08009888
  ldr r2, =_sbss
 8000e60:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000e64:	2400a79c 	.word	0x2400a79c

08000e68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC3_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e72:	2003      	movs	r0, #3
 8000e74:	f001 fe9e 	bl	8002bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e78:	f005 f9ee 	bl	8006258 <HAL_RCC_GetSysClockFreq>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <HAL_Init+0x68>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	0a1b      	lsrs	r3, r3, #8
 8000e84:	f003 030f 	and.w	r3, r3, #15
 8000e88:	4913      	ldr	r1, [pc, #76]	@ (8000ed8 <HAL_Init+0x6c>)
 8000e8a:	5ccb      	ldrb	r3, [r1, r3]
 8000e8c:	f003 031f 	and.w	r3, r3, #31
 8000e90:	fa22 f303 	lsr.w	r3, r2, r3
 8000e94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <HAL_Init+0x68>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed8 <HAL_Init+0x6c>)
 8000ea0:	5cd3      	ldrb	r3, [r2, r3]
 8000ea2:	f003 031f 	and.w	r3, r3, #31
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	4a0b      	ldr	r2, [pc, #44]	@ (8000edc <HAL_Init+0x70>)
 8000eae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee0 <HAL_Init+0x74>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f000 f814 	bl	8000ee4 <HAL_InitTick>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e002      	b.n	8000ecc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec6:	f7ff fd77 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	080095f8 	.word	0x080095f8
 8000edc:	24000004 	.word	0x24000004
 8000ee0:	24000000 	.word	0x24000000

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <HAL_InitTick+0x60>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e021      	b.n	8000f3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <HAL_InitTick+0x64>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <HAL_InitTick+0x60>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fe83 	bl	8002c1a <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f001 fe4d 	bl	8002bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	@ (8000f4c <HAL_InitTick+0x68>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2400000c 	.word	0x2400000c
 8000f48:	24000000 	.word	0x24000000
 8000f4c:	24000008 	.word	0x24000008

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	2400000c 	.word	0x2400000c
 8000f74:	2400a660 	.word	0x2400a660

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2400a660 	.word	0x2400a660

08000f90 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000fa0:	4904      	ldr	r1, [pc, #16]	@ (8000fb4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	600b      	str	r3, [r1, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	58003c00 	.word	0x58003c00

08000fb8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f023 0202 	bic.w	r2, r3, #2
 8000fc8:	4904      	ldr	r1, [pc, #16]	@ (8000fdc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	600b      	str	r3, [r1, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	58003c00 	.word	0x58003c00

08000fe0 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a0e      	ldr	r2, [pc, #56]	@ (8001024 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000ff2:	f7ff ffc1 	bl	8000f78 <HAL_GetTick>
 8000ff6:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8000ff8:	e008      	b.n	800100c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8000ffa:	f7ff ffbd 	bl	8000f78 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b0a      	cmp	r3, #10
 8001006:	d901      	bls.n	800100c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e006      	b.n	800101a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f0      	beq.n	8000ffa <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	58003c00 	.word	0x58003c00

08001028 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	609a      	str	r2, [r3, #8]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	431a      	orrs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	609a      	str	r2, [r3, #8]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3360      	adds	r3, #96	@ 0x60
 80010a2:	461a      	mov	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <LL_ADC_SetOffset+0x60>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d10b      	bne.n	80010cc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80010ca:	e00b      	b.n	80010e4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	430b      	orrs	r3, r1
 80010de:	431a      	orrs	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	601a      	str	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	371c      	adds	r7, #28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	58026000 	.word	0x58026000

080010f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3360      	adds	r3, #96	@ 0x60
 8001102:	461a      	mov	r2, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001114:	4618      	mov	r0, r3
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	431a      	orrs	r2, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	611a      	str	r2, [r3, #16]
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4a0c      	ldr	r2, [pc, #48]	@ (8001194 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d00e      	beq.n	8001186 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3360      	adds	r3, #96	@ 0x60
 800116c:	461a      	mov	r2, r3
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	431a      	orrs	r2, r3
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	601a      	str	r2, [r3, #0]
  }
}
 8001186:	bf00      	nop
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	58026000 	.word	0x58026000

08001198 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4a0c      	ldr	r2, [pc, #48]	@ (80011d8 <LL_ADC_SetOffsetSaturation+0x40>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d10e      	bne.n	80011ca <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3360      	adds	r3, #96	@ 0x60
 80011b0:	461a      	mov	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	431a      	orrs	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80011ca:	bf00      	nop
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	58026000 	.word	0x58026000

080011dc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4a0c      	ldr	r2, [pc, #48]	@ (800121c <LL_ADC_SetOffsetSign+0x40>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d10e      	bne.n	800120e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3360      	adds	r3, #96	@ 0x60
 80011f4:	461a      	mov	r2, r3
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	431a      	orrs	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800120e:	bf00      	nop
 8001210:	371c      	adds	r7, #28
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	58026000 	.word	0x58026000

08001220 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3360      	adds	r3, #96	@ 0x60
 8001230:	461a      	mov	r2, r3
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4a0c      	ldr	r2, [pc, #48]	@ (8001270 <LL_ADC_SetOffsetState+0x50>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d108      	bne.n	8001254 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	431a      	orrs	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001252:	e007      	b.n	8001264 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	431a      	orrs	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	601a      	str	r2, [r3, #0]
}
 8001264:	bf00      	nop
 8001266:	371c      	adds	r7, #28
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	58026000 	.word	0x58026000

08001274 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800129a:	b480      	push	{r7}
 800129c:	b087      	sub	sp, #28
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	3330      	adds	r3, #48	@ 0x30
 80012aa:	461a      	mov	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	0a1b      	lsrs	r3, r3, #8
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	4413      	add	r3, r2
 80012b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	f003 031f 	and.w	r3, r3, #31
 80012c4:	211f      	movs	r1, #31
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	401a      	ands	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	0e9b      	lsrs	r3, r3, #26
 80012d2:	f003 011f 	and.w	r1, r3, #31
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	f023 0203 	bic.w	r2, r3, #3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	60da      	str	r2, [r3, #12]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	f043 0201 	orr.w	r2, r3, #1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	60da      	str	r2, [r3, #12]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a08      	ldr	r2, [pc, #32]	@ (8001368 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d107      	bne.n	800135a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f023 0203 	bic.w	r2, r3, #3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60da      	str	r2, [r3, #12]
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	58026000 	.word	0x58026000

0800136c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3314      	adds	r3, #20
 800137c:	461a      	mov	r2, r3
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	0e5b      	lsrs	r3, r3, #25
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	0d1b      	lsrs	r3, r3, #20
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	2107      	movs	r1, #7
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	401a      	ands	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	0d1b      	lsrs	r3, r3, #20
 80013a6:	f003 031f 	and.w	r3, r3, #31
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	431a      	orrs	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013b6:	bf00      	nop
 80013b8:	371c      	adds	r7, #28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4a1a      	ldr	r2, [pc, #104]	@ (800143c <LL_ADC_SetChannelSingleDiff+0x78>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d115      	bne.n	8001404 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013e4:	43db      	mvns	r3, r3
 80013e6:	401a      	ands	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0318 	and.w	r3, r3, #24
 80013ee:	4914      	ldr	r1, [pc, #80]	@ (8001440 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80013f0:	40d9      	lsrs	r1, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	400b      	ands	r3, r1
 80013f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013fa:	431a      	orrs	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001402:	e014      	b.n	800142e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001410:	43db      	mvns	r3, r3
 8001412:	401a      	ands	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0318 	and.w	r3, r3, #24
 800141a:	4909      	ldr	r1, [pc, #36]	@ (8001440 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800141c:	40d9      	lsrs	r1, r3
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	400b      	ands	r3, r1
 8001422:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001426:	431a      	orrs	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	58026000 	.word	0x58026000
 8001440:	000fffff 	.word	0x000fffff

08001444 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 031f 	and.w	r3, r3, #31
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <LL_ADC_DisableDeepPowerDown+0x20>)
 800146e:	4013      	ands	r3, r2
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6093      	str	r3, [r2, #8]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	5fffffc0 	.word	0x5fffffc0

08001484 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001498:	d101      	bne.n	800149e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	6fffffc0 	.word	0x6fffffc0

080014d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80014e8:	d101      	bne.n	80014ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <LL_ADC_Enable+0x24>)
 800150a:	4013      	ands	r3, r2
 800150c:	f043 0201 	orr.w	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	7fffffc0 	.word	0x7fffffc0

08001524 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <LL_ADC_IsEnabled+0x18>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <LL_ADC_IsEnabled+0x1a>
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <LL_ADC_REG_StartConversion+0x24>)
 800155a:	4013      	ands	r3, r2
 800155c:	f043 0204 	orr.w	r2, r3, #4
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	7fffffc0 	.word	0x7fffffc0

08001574 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b04      	cmp	r3, #4
 8001586:	d101      	bne.n	800158c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d101      	bne.n	80015b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b089      	sub	sp, #36	@ 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e1ee      	b.n	80019b8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d109      	bne.n	80015fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fa15 	bl	8000a18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff3f 	bl	8001484 <LL_ADC_IsDeepPowerDownEnabled>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff25 	bl	8001460 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff5a 	bl	80014d4 <LL_ADC_IsInternalRegulatorEnabled>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d114      	bne.n	8001650 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff3e 	bl	80014ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001630:	4b8e      	ldr	r3, [pc, #568]	@ (800186c <HAL_ADC_Init+0x2ac>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	099b      	lsrs	r3, r3, #6
 8001636:	4a8e      	ldr	r2, [pc, #568]	@ (8001870 <HAL_ADC_Init+0x2b0>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	099b      	lsrs	r3, r3, #6
 800163e:	3301      	adds	r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001642:	e002      	b.n	800164a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	3b01      	subs	r3, #1
 8001648:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f9      	bne.n	8001644 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff3d 	bl	80014d4 <LL_ADC_IsInternalRegulatorEnabled>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10d      	bne.n	800167c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001664:	f043 0210 	orr.w	r2, r3, #16
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001670:	f043 0201 	orr.w	r2, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff77 	bl	8001574 <LL_ADC_REG_IsConversionOngoing>
 8001686:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	2b00      	cmp	r3, #0
 8001692:	f040 8188 	bne.w	80019a6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2b00      	cmp	r3, #0
 800169a:	f040 8184 	bne.w	80019a6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80016a6:	f043 0202 	orr.w	r2, r3, #2
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff36 	bl	8001524 <LL_ADC_IsEnabled>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d136      	bne.n	800172c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a6c      	ldr	r2, [pc, #432]	@ (8001874 <HAL_ADC_Init+0x2b4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d004      	beq.n	80016d2 <HAL_ADC_Init+0x112>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a6a      	ldr	r2, [pc, #424]	@ (8001878 <HAL_ADC_Init+0x2b8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10e      	bne.n	80016f0 <HAL_ADC_Init+0x130>
 80016d2:	4868      	ldr	r0, [pc, #416]	@ (8001874 <HAL_ADC_Init+0x2b4>)
 80016d4:	f7ff ff26 	bl	8001524 <LL_ADC_IsEnabled>
 80016d8:	4604      	mov	r4, r0
 80016da:	4867      	ldr	r0, [pc, #412]	@ (8001878 <HAL_ADC_Init+0x2b8>)
 80016dc:	f7ff ff22 	bl	8001524 <LL_ADC_IsEnabled>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4323      	orrs	r3, r4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	e008      	b.n	8001702 <HAL_ADC_Init+0x142>
 80016f0:	4862      	ldr	r0, [pc, #392]	@ (800187c <HAL_ADC_Init+0x2bc>)
 80016f2:	f7ff ff17 	bl	8001524 <LL_ADC_IsEnabled>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d012      	beq.n	800172c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a5a      	ldr	r2, [pc, #360]	@ (8001874 <HAL_ADC_Init+0x2b4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d004      	beq.n	800171a <HAL_ADC_Init+0x15a>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a58      	ldr	r2, [pc, #352]	@ (8001878 <HAL_ADC_Init+0x2b8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_ADC_Init+0x15e>
 800171a:	4a59      	ldr	r2, [pc, #356]	@ (8001880 <HAL_ADC_Init+0x2c0>)
 800171c:	e000      	b.n	8001720 <HAL_ADC_Init+0x160>
 800171e:	4a59      	ldr	r2, [pc, #356]	@ (8001884 <HAL_ADC_Init+0x2c4>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4619      	mov	r1, r3
 8001726:	4610      	mov	r0, r2
 8001728:	f7ff fc7e 	bl	8001028 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a52      	ldr	r2, [pc, #328]	@ (800187c <HAL_ADC_Init+0x2bc>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d129      	bne.n	800178a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7e5b      	ldrb	r3, [r3, #25]
 800173a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001740:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001746:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b08      	cmp	r3, #8
 800174e:	d013      	beq.n	8001778 <HAL_ADC_Init+0x1b8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b0c      	cmp	r3, #12
 8001756:	d00d      	beq.n	8001774 <HAL_ADC_Init+0x1b4>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b1c      	cmp	r3, #28
 800175e:	d007      	beq.n	8001770 <HAL_ADC_Init+0x1b0>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b18      	cmp	r3, #24
 8001766:	d101      	bne.n	800176c <HAL_ADC_Init+0x1ac>
 8001768:	2318      	movs	r3, #24
 800176a:	e006      	b.n	800177a <HAL_ADC_Init+0x1ba>
 800176c:	2300      	movs	r3, #0
 800176e:	e004      	b.n	800177a <HAL_ADC_Init+0x1ba>
 8001770:	2310      	movs	r3, #16
 8001772:	e002      	b.n	800177a <HAL_ADC_Init+0x1ba>
 8001774:	2308      	movs	r3, #8
 8001776:	e000      	b.n	800177a <HAL_ADC_Init+0x1ba>
 8001778:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800177a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001782:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
 8001788:	e00e      	b.n	80017a8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7e5b      	ldrb	r3, [r3, #25]
 800178e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001794:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800179a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d106      	bne.n	80017c0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	3b01      	subs	r3, #1
 80017b8:	045b      	lsls	r3, r3, #17
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d009      	beq.n	80017dc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a26      	ldr	r2, [pc, #152]	@ (800187c <HAL_ADC_Init+0x2bc>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d115      	bne.n	8001812 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	4b26      	ldr	r3, [pc, #152]	@ (8001888 <HAL_ADC_Init+0x2c8>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	69b9      	ldr	r1, [r7, #24]
 80017f6:	430b      	orrs	r3, r1
 80017f8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	e009      	b.n	8001826 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	4b1c      	ldr	r3, [pc, #112]	@ (800188c <HAL_ADC_Init+0x2cc>)
 800181a:	4013      	ands	r3, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	69b9      	ldr	r1, [r7, #24]
 8001822:	430b      	orrs	r3, r1
 8001824:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fea2 	bl	8001574 <LL_ADC_REG_IsConversionOngoing>
 8001830:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff feaf 	bl	800159a <LL_ADC_INJ_IsConversionOngoing>
 800183c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	f040 808e 	bne.w	8001962 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	f040 808a 	bne.w	8001962 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <HAL_ADC_Init+0x2bc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d11b      	bne.n	8001890 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7e1b      	ldrb	r3, [r3, #24]
 800185c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001864:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	e018      	b.n	800189e <HAL_ADC_Init+0x2de>
 800186c:	24000000 	.word	0x24000000
 8001870:	053e2d63 	.word	0x053e2d63
 8001874:	40022000 	.word	0x40022000
 8001878:	40022100 	.word	0x40022100
 800187c:	58026000 	.word	0x58026000
 8001880:	40022300 	.word	0x40022300
 8001884:	58026300 	.word	0x58026300
 8001888:	fff04007 	.word	0xfff04007
 800188c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7e1b      	ldrb	r3, [r3, #24]
 8001894:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	4b46      	ldr	r3, [pc, #280]	@ (80019c0 <HAL_ADC_Init+0x400>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	69b9      	ldr	r1, [r7, #24]
 80018ae:	430b      	orrs	r3, r1
 80018b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d137      	bne.n	800192c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a3f      	ldr	r2, [pc, #252]	@ (80019c4 <HAL_ADC_Init+0x404>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d116      	bne.n	80018fa <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691a      	ldr	r2, [r3, #16]
 80018d2:	4b3d      	ldr	r3, [pc, #244]	@ (80019c8 <HAL_ADC_Init+0x408>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80018de:	4311      	orrs	r1, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018e4:	4311      	orrs	r1, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80018ea:	430a      	orrs	r2, r1
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	611a      	str	r2, [r3, #16]
 80018f8:	e020      	b.n	800193c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	4b32      	ldr	r3, [pc, #200]	@ (80019cc <HAL_ADC_Init+0x40c>)
 8001902:	4013      	ands	r3, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001908:	3a01      	subs	r2, #1
 800190a:	0411      	lsls	r1, r2, #16
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001910:	4311      	orrs	r1, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001916:	4311      	orrs	r1, r2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800191c:	430a      	orrs	r2, r1
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0201 	orr.w	r2, r2, #1
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	e007      	b.n	800193c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1b      	ldr	r2, [pc, #108]	@ (80019c4 <HAL_ADC_Init+0x404>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d002      	beq.n	8001962 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 ff6b 	bl	8002838 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d10c      	bne.n	8001984 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001970:	f023 010f 	bic.w	r1, r3, #15
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	1e5a      	subs	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	631a      	str	r2, [r3, #48]	@ 0x30
 8001982:	e007      	b.n	8001994 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 020f 	bic.w	r2, r2, #15
 8001992:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001998:	f023 0303 	bic.w	r3, r3, #3
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	661a      	str	r2, [r3, #96]	@ 0x60
 80019a4:	e007      	b.n	80019b6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019aa:	f043 0210 	orr.w	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3724      	adds	r7, #36	@ 0x24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}
 80019c0:	ffffbffc 	.word	0xffffbffc
 80019c4:	58026000 	.word	0x58026000
 80019c8:	fc00f81f 	.word	0xfc00f81f
 80019cc:	fc00f81e 	.word	0xfc00f81e

080019d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a60      	ldr	r2, [pc, #384]	@ (8001b64 <HAL_ADC_Start_DMA+0x194>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d004      	beq.n	80019f0 <HAL_ADC_Start_DMA+0x20>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a5f      	ldr	r2, [pc, #380]	@ (8001b68 <HAL_ADC_Start_DMA+0x198>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d101      	bne.n	80019f4 <HAL_ADC_Start_DMA+0x24>
 80019f0:	4b5e      	ldr	r3, [pc, #376]	@ (8001b6c <HAL_ADC_Start_DMA+0x19c>)
 80019f2:	e000      	b.n	80019f6 <HAL_ADC_Start_DMA+0x26>
 80019f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001b70 <HAL_ADC_Start_DMA+0x1a0>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fd24 	bl	8001444 <LL_ADC_GetMultimode>
 80019fc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fdb6 	bl	8001574 <LL_ADC_REG_IsConversionOngoing>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 80a2 	bne.w	8001b54 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_ADC_Start_DMA+0x4e>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e09d      	b.n	8001b5a <HAL_ADC_Start_DMA+0x18a>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d003      	beq.n	8001a3a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	2b09      	cmp	r3, #9
 8001a36:	f040 8086 	bne.w	8001b46 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 fdde 	bl	80025fc <ADC_Enable>
 8001a40:	4603      	mov	r3, r0
 8001a42:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a44:	7dfb      	ldrb	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d178      	bne.n	8001b3c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a4e:	4b49      	ldr	r3, [pc, #292]	@ (8001b74 <HAL_ADC_Start_DMA+0x1a4>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a42      	ldr	r2, [pc, #264]	@ (8001b68 <HAL_ADC_Start_DMA+0x198>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d002      	beq.n	8001a6a <HAL_ADC_Start_DMA+0x9a>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	e000      	b.n	8001a6c <HAL_ADC_Start_DMA+0x9c>
 8001a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b64 <HAL_ADC_Start_DMA+0x194>)
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d002      	beq.n	8001a7a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d105      	bne.n	8001a86 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a7e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a96:	f023 0206 	bic.w	r2, r3, #6
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	665a      	str	r2, [r3, #100]	@ 0x64
 8001a9e:	e002      	b.n	8001aa6 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aaa:	4a33      	ldr	r2, [pc, #204]	@ (8001b78 <HAL_ADC_Start_DMA+0x1a8>)
 8001aac:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab2:	4a32      	ldr	r2, [pc, #200]	@ (8001b7c <HAL_ADC_Start_DMA+0x1ac>)
 8001ab4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aba:	4a31      	ldr	r2, [pc, #196]	@ (8001b80 <HAL_ADC_Start_DMA+0x1b0>)
 8001abc:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	221c      	movs	r2, #28
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0210 	orr.w	r2, r2, #16
 8001adc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a28      	ldr	r2, [pc, #160]	@ (8001b84 <HAL_ADC_Start_DMA+0x1b4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d10f      	bne.n	8001b08 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f7ff fc1e 	bl	8001338 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fc09 	bl	8001318 <LL_ADC_EnableDMAReq>
 8001b06:	e007      	b.n	8001b18 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f7ff fbed 	bl	80012f2 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3340      	adds	r3, #64	@ 0x40
 8001b22:	4619      	mov	r1, r3
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f001 fea8 	bl	800387c <HAL_DMA_Start_IT>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fd09 	bl	800154c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001b3a:	e00d      	b.n	8001b58 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8001b44:	e008      	b.n	8001b58 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8001b52:	e001      	b.n	8001b58 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b54:	2302      	movs	r3, #2
 8001b56:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40022000 	.word	0x40022000
 8001b68:	40022100 	.word	0x40022100
 8001b6c:	40022300 	.word	0x40022300
 8001b70:	58026300 	.word	0x58026300
 8001b74:	fffff0fe 	.word	0xfffff0fe
 8001b78:	08002711 	.word	0x08002711
 8001b7c:	080027e9 	.word	0x080027e9
 8001b80:	08002805 	.word	0x08002805
 8001b84:	58026000 	.word	0x58026000

08001b88 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b0b9      	sub	sp, #228	@ 0xe4
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001bb6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4aab      	ldr	r2, [pc, #684]	@ (8001e6c <HAL_ADC_ConfigChannel+0x2d0>)
 8001bbe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d102      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x34>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	f000 bcfe 	b.w	80025cc <HAL_ADC_ConfigChannel+0xa30>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fcc9 	bl	8001574 <LL_ADC_REG_IsConversionOngoing>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f040 84e2 	bne.w	80025ae <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db38      	blt.n	8001c64 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a9e      	ldr	r2, [pc, #632]	@ (8001e70 <HAL_ADC_ConfigChannel+0x2d4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d033      	beq.n	8001c64 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d108      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x7e>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0e9b      	lsrs	r3, r3, #26
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	2201      	movs	r2, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	e01d      	b.n	8001c56 <HAL_ADC_ConfigChannel+0xba>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e004      	b.n	8001c4c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8001c42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	2201      	movs	r2, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	69d1      	ldr	r1, [r2, #28]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	430b      	orrs	r3, r1
 8001c62:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	f7ff fb12 	bl	800129a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fc7a 	bl	8001574 <LL_ADC_REG_IsConversionOngoing>
 8001c80:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fc86 	bl	800159a <LL_ADC_INJ_IsConversionOngoing>
 8001c8e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 8270 	bne.w	800217c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f040 826b 	bne.w	800217c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f7ff fb5a 	bl	800136c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a6c      	ldr	r2, [pc, #432]	@ (8001e70 <HAL_ADC_ConfigChannel+0x2d4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10d      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	08db      	lsrs	r3, r3, #3
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001cdc:	e032      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001cde:	4b65      	ldr	r3, [pc, #404]	@ (8001e74 <HAL_ADC_ConfigChannel+0x2d8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001ce6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cea:	d10b      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x168>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	695a      	ldr	r2, [r3, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	e01d      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x1a4>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10b      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x18e>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	089b      	lsrs	r3, r3, #2
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	e00a      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x1a4>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d048      	beq.n	8001dde <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	6919      	ldr	r1, [r3, #16]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d5c:	f7ff f998 	bl	8001090 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a42      	ldr	r2, [pc, #264]	@ (8001e70 <HAL_ADC_ConfigChannel+0x2d4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d119      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6919      	ldr	r1, [r3, #16]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	461a      	mov	r2, r3
 8001d78:	f7ff fa30 	bl	80011dc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6919      	ldr	r1, [r3, #16]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d102      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x1f8>
 8001d8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d92:	e000      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1fa>
 8001d94:	2300      	movs	r3, #0
 8001d96:	461a      	mov	r2, r3
 8001d98:	f7ff f9fe 	bl	8001198 <LL_ADC_SetOffsetSaturation>
 8001d9c:	e1ee      	b.n	800217c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6919      	ldr	r1, [r3, #16]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d102      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x21a>
 8001db0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001db4:	e000      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x21c>
 8001db6:	2300      	movs	r3, #0
 8001db8:	461a      	mov	r2, r3
 8001dba:	f7ff f9cb 	bl	8001154 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6919      	ldr	r1, [r3, #16]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	7e1b      	ldrb	r3, [r3, #24]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d102      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x238>
 8001dce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001dd2:	e000      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x23a>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f7ff f9a2 	bl	8001120 <LL_ADC_SetDataRightShift>
 8001ddc:	e1ce      	b.n	800217c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a23      	ldr	r2, [pc, #140]	@ (8001e70 <HAL_ADC_ConfigChannel+0x2d4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	f040 8181 	bne.w	80020ec <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f97f 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x27a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff f974 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	0e9b      	lsrs	r3, r3, #26
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	e01e      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x2b8>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff f969 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8001e34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8001e3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8001e44:	2320      	movs	r3, #32
 8001e46:	e004      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8001e48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10b      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x2dc>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	0e9b      	lsrs	r3, r3, #26
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	e01e      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x30e>
 8001e6c:	47ff0000 	.word	0x47ff0000
 8001e70:	58026000 	.word	0x58026000
 8001e74:	5c001000 	.word	0x5c001000
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001e8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001e94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	e004      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8001ea0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ea4:	fab3 f383 	clz	r3, r3
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d106      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f9b2 	bl	8001220 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f916 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10a      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x34c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff f90b 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	0e9b      	lsrs	r3, r3, #26
 8001ee2:	f003 021f 	and.w	r2, r3, #31
 8001ee6:	e01e      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x38a>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f900 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001f06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001f0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001f16:	2320      	movs	r3, #32
 8001f18:	e004      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8001f1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x3a2>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	0e9b      	lsrs	r3, r3, #26
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	e018      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x3d4>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001f52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f56:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001f5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8001f62:	2320      	movs	r3, #32
 8001f64:	e004      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8001f66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d106      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff f94f 	bl	8001220 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2102      	movs	r1, #2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff f8b3 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x412>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f8a8 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	0e9b      	lsrs	r3, r3, #26
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	e01e      	b.n	8001fec <HAL_ADC_ConfigChannel+0x450>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f89d 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	e004      	b.n	8001fea <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8001fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d105      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x468>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0e9b      	lsrs	r3, r3, #26
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	e014      	b.n	800202e <HAL_ADC_ConfigChannel+0x492>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002012:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002014:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002018:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002020:	2320      	movs	r3, #32
 8002022:	e004      	b.n	800202e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002024:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	429a      	cmp	r2, r3
 8002030:	d106      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2200      	movs	r2, #0
 8002038:	2102      	movs	r1, #2
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f8f0 	bl	8001220 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2103      	movs	r1, #3
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff f854 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10a      	bne.n	800206c <HAL_ADC_ConfigChannel+0x4d0>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2103      	movs	r1, #3
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff f849 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	0e9b      	lsrs	r3, r3, #26
 8002066:	f003 021f 	and.w	r2, r3, #31
 800206a:	e017      	b.n	800209c <HAL_ADC_ConfigChannel+0x500>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2103      	movs	r1, #3
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f83e 	bl	80010f4 <LL_ADC_GetOffsetChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002084:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002086:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002088:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800208e:	2320      	movs	r3, #32
 8002090:	e003      	b.n	800209a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8002092:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x518>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0e9b      	lsrs	r3, r3, #26
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	e011      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x53c>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80020c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80020c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e003      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80020d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	429a      	cmp	r2, r3
 80020da:	d14f      	bne.n	800217c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2200      	movs	r2, #0
 80020e2:	2103      	movs	r1, #3
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff f89b 	bl	8001220 <LL_ADC_SetOffsetState>
 80020ea:	e047      	b.n	800217c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	069b      	lsls	r3, r3, #26
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d107      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800210e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002116:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	069b      	lsls	r3, r3, #26
 8002120:	429a      	cmp	r2, r3
 8002122:	d107      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002132:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800213a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	069b      	lsls	r3, r3, #26
 8002144:	429a      	cmp	r2, r3
 8002146:	d107      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002156:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800215e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	069b      	lsls	r3, r3, #26
 8002168:	429a      	cmp	r2, r3
 800216a:	d107      	bne.n	800217c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800217a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff f9cf 	bl	8001524 <LL_ADC_IsEnabled>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	f040 8219 	bne.w	80025c0 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6819      	ldr	r1, [r3, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	461a      	mov	r2, r3
 800219c:	f7ff f912 	bl	80013c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4aa1      	ldr	r2, [pc, #644]	@ (800242c <HAL_ADC_ConfigChannel+0x890>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	f040 812e 	bne.w	8002408 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10b      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x638>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0e9b      	lsrs	r3, r3, #26
 80021c2:	3301      	adds	r3, #1
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	2b09      	cmp	r3, #9
 80021ca:	bf94      	ite	ls
 80021cc:	2301      	movls	r3, #1
 80021ce:	2300      	movhi	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	e019      	b.n	8002208 <HAL_ADC_ConfigChannel+0x66c>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80021e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80021e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80021ec:	2320      	movs	r3, #32
 80021ee:	e003      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80021f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	3301      	adds	r3, #1
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	2b09      	cmp	r3, #9
 8002200:	bf94      	ite	ls
 8002202:	2301      	movls	r3, #1
 8002204:	2300      	movhi	r3, #0
 8002206:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002208:	2b00      	cmp	r3, #0
 800220a:	d079      	beq.n	8002300 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002214:	2b00      	cmp	r3, #0
 8002216:	d107      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x68c>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0e9b      	lsrs	r3, r3, #26
 800221e:	3301      	adds	r3, #1
 8002220:	069b      	lsls	r3, r3, #26
 8002222:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002226:	e015      	b.n	8002254 <HAL_ADC_ConfigChannel+0x6b8>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002230:	fa93 f3a3 	rbit	r3, r3
 8002234:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002238:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800223a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002240:	2320      	movs	r3, #32
 8002242:	e003      	b.n	800224c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8002244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	3301      	adds	r3, #1
 800224e:	069b      	lsls	r3, r3, #26
 8002250:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800225c:	2b00      	cmp	r3, #0
 800225e:	d109      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x6d8>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0e9b      	lsrs	r3, r3, #26
 8002266:	3301      	adds	r3, #1
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	e017      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x708>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002284:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 800228c:	2320      	movs	r3, #32
 800228e:	e003      	b.n	8002298 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8002290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3301      	adds	r3, #1
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	2101      	movs	r1, #1
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	ea42 0103 	orr.w	r1, r2, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10a      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x72e>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0e9b      	lsrs	r3, r3, #26
 80022ba:	3301      	adds	r3, #1
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	051b      	lsls	r3, r3, #20
 80022c8:	e018      	b.n	80022fc <HAL_ADC_ConfigChannel+0x760>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80022d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022da:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80022dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80022e2:	2320      	movs	r3, #32
 80022e4:	e003      	b.n	80022ee <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80022e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	3301      	adds	r3, #1
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022fc:	430b      	orrs	r3, r1
 80022fe:	e07e      	b.n	80023fe <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002308:	2b00      	cmp	r3, #0
 800230a:	d107      	bne.n	800231c <HAL_ADC_ConfigChannel+0x780>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	3301      	adds	r3, #1
 8002314:	069b      	lsls	r3, r3, #26
 8002316:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800231a:	e015      	b.n	8002348 <HAL_ADC_ConfigChannel+0x7ac>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800232e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8002334:	2320      	movs	r3, #32
 8002336:	e003      	b.n	8002340 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8002338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3301      	adds	r3, #1
 8002342:	069b      	lsls	r3, r3, #26
 8002344:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x7cc>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	0e9b      	lsrs	r3, r3, #26
 800235a:	3301      	adds	r3, #1
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2101      	movs	r1, #1
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	e017      	b.n	8002398 <HAL_ADC_ConfigChannel+0x7fc>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	61bb      	str	r3, [r7, #24]
  return result;
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8002380:	2320      	movs	r3, #32
 8002382:	e003      	b.n	800238c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3301      	adds	r3, #1
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	2101      	movs	r1, #1
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	ea42 0103 	orr.w	r1, r2, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10d      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x828>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0e9b      	lsrs	r3, r3, #26
 80023ae:	3301      	adds	r3, #1
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	3b1e      	subs	r3, #30
 80023bc:	051b      	lsls	r3, r3, #20
 80023be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023c2:	e01b      	b.n	80023fc <HAL_ADC_ConfigChannel+0x860>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	60fb      	str	r3, [r7, #12]
  return result;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80023dc:	2320      	movs	r3, #32
 80023de:	e003      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	3301      	adds	r3, #1
 80023ea:	f003 021f 	and.w	r2, r3, #31
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	3b1e      	subs	r3, #30
 80023f6:	051b      	lsls	r3, r3, #20
 80023f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023fc:	430b      	orrs	r3, r1
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	6892      	ldr	r2, [r2, #8]
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe ffb2 	bl	800136c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	f280 80d7 	bge.w	80025c0 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a06      	ldr	r2, [pc, #24]	@ (8002430 <HAL_ADC_ConfigChannel+0x894>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_ADC_ConfigChannel+0x88a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a04      	ldr	r2, [pc, #16]	@ (8002434 <HAL_ADC_ConfigChannel+0x898>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d10a      	bne.n	800243c <HAL_ADC_ConfigChannel+0x8a0>
 8002426:	4b04      	ldr	r3, [pc, #16]	@ (8002438 <HAL_ADC_ConfigChannel+0x89c>)
 8002428:	e009      	b.n	800243e <HAL_ADC_ConfigChannel+0x8a2>
 800242a:	bf00      	nop
 800242c:	47ff0000 	.word	0x47ff0000
 8002430:	40022000 	.word	0x40022000
 8002434:	40022100 	.word	0x40022100
 8002438:	40022300 	.word	0x40022300
 800243c:	4b65      	ldr	r3, [pc, #404]	@ (80025d4 <HAL_ADC_ConfigChannel+0xa38>)
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fe18 	bl	8001074 <LL_ADC_GetCommonPathInternalCh>
 8002444:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a62      	ldr	r2, [pc, #392]	@ (80025d8 <HAL_ADC_ConfigChannel+0xa3c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d004      	beq.n	800245c <HAL_ADC_ConfigChannel+0x8c0>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a61      	ldr	r2, [pc, #388]	@ (80025dc <HAL_ADC_ConfigChannel+0xa40>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d10e      	bne.n	800247a <HAL_ADC_ConfigChannel+0x8de>
 800245c:	485e      	ldr	r0, [pc, #376]	@ (80025d8 <HAL_ADC_ConfigChannel+0xa3c>)
 800245e:	f7ff f861 	bl	8001524 <LL_ADC_IsEnabled>
 8002462:	4604      	mov	r4, r0
 8002464:	485d      	ldr	r0, [pc, #372]	@ (80025dc <HAL_ADC_ConfigChannel+0xa40>)
 8002466:	f7ff f85d 	bl	8001524 <LL_ADC_IsEnabled>
 800246a:	4603      	mov	r3, r0
 800246c:	4323      	orrs	r3, r4
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	e008      	b.n	800248c <HAL_ADC_ConfigChannel+0x8f0>
 800247a:	4859      	ldr	r0, [pc, #356]	@ (80025e0 <HAL_ADC_ConfigChannel+0xa44>)
 800247c:	f7ff f852 	bl	8001524 <LL_ADC_IsEnabled>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	bf0c      	ite	eq
 8002486:	2301      	moveq	r3, #1
 8002488:	2300      	movne	r3, #0
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8084 	beq.w	800259a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a53      	ldr	r2, [pc, #332]	@ (80025e4 <HAL_ADC_ConfigChannel+0xa48>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d132      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x966>
 800249c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d12c      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a4c      	ldr	r2, [pc, #304]	@ (80025e0 <HAL_ADC_ConfigChannel+0xa44>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	f040 8086 	bne.w	80025c0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a47      	ldr	r2, [pc, #284]	@ (80025d8 <HAL_ADC_ConfigChannel+0xa3c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d004      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0x92c>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a46      	ldr	r2, [pc, #280]	@ (80025dc <HAL_ADC_ConfigChannel+0xa40>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x930>
 80024c8:	4a47      	ldr	r2, [pc, #284]	@ (80025e8 <HAL_ADC_ConfigChannel+0xa4c>)
 80024ca:	e000      	b.n	80024ce <HAL_ADC_ConfigChannel+0x932>
 80024cc:	4a41      	ldr	r2, [pc, #260]	@ (80025d4 <HAL_ADC_ConfigChannel+0xa38>)
 80024ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024d6:	4619      	mov	r1, r3
 80024d8:	4610      	mov	r0, r2
 80024da:	f7fe fdb8 	bl	800104e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024de:	4b43      	ldr	r3, [pc, #268]	@ (80025ec <HAL_ADC_ConfigChannel+0xa50>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	099b      	lsrs	r3, r3, #6
 80024e4:	4a42      	ldr	r2, [pc, #264]	@ (80025f0 <HAL_ADC_ConfigChannel+0xa54>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	099b      	lsrs	r3, r3, #6
 80024ec:	3301      	adds	r3, #1
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024f2:	e002      	b.n	80024fa <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f9      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002500:	e05e      	b.n	80025c0 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a3b      	ldr	r2, [pc, #236]	@ (80025f4 <HAL_ADC_ConfigChannel+0xa58>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d120      	bne.n	800254e <HAL_ADC_ConfigChannel+0x9b2>
 800250c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002510:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d11a      	bne.n	800254e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a30      	ldr	r2, [pc, #192]	@ (80025e0 <HAL_ADC_ConfigChannel+0xa44>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d14e      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a2c      	ldr	r2, [pc, #176]	@ (80025d8 <HAL_ADC_ConfigChannel+0xa3c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d004      	beq.n	8002536 <HAL_ADC_ConfigChannel+0x99a>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a2a      	ldr	r2, [pc, #168]	@ (80025dc <HAL_ADC_ConfigChannel+0xa40>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d101      	bne.n	800253a <HAL_ADC_ConfigChannel+0x99e>
 8002536:	4a2c      	ldr	r2, [pc, #176]	@ (80025e8 <HAL_ADC_ConfigChannel+0xa4c>)
 8002538:	e000      	b.n	800253c <HAL_ADC_ConfigChannel+0x9a0>
 800253a:	4a26      	ldr	r2, [pc, #152]	@ (80025d4 <HAL_ADC_ConfigChannel+0xa38>)
 800253c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002540:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002544:	4619      	mov	r1, r3
 8002546:	4610      	mov	r0, r2
 8002548:	f7fe fd81 	bl	800104e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800254c:	e038      	b.n	80025c0 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a29      	ldr	r2, [pc, #164]	@ (80025f8 <HAL_ADC_ConfigChannel+0xa5c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d133      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0xa24>
 8002558:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800255c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d12d      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1d      	ldr	r2, [pc, #116]	@ (80025e0 <HAL_ADC_ConfigChannel+0xa44>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d128      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a19      	ldr	r2, [pc, #100]	@ (80025d8 <HAL_ADC_ConfigChannel+0xa3c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d004      	beq.n	8002582 <HAL_ADC_ConfigChannel+0x9e6>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a17      	ldr	r2, [pc, #92]	@ (80025dc <HAL_ADC_ConfigChannel+0xa40>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x9ea>
 8002582:	4a19      	ldr	r2, [pc, #100]	@ (80025e8 <HAL_ADC_ConfigChannel+0xa4c>)
 8002584:	e000      	b.n	8002588 <HAL_ADC_ConfigChannel+0x9ec>
 8002586:	4a13      	ldr	r2, [pc, #76]	@ (80025d4 <HAL_ADC_ConfigChannel+0xa38>)
 8002588:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800258c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f7fe fd5b 	bl	800104e <LL_ADC_SetCommonPathInternalCh>
 8002598:	e012      	b.n	80025c0 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800259e:	f043 0220 	orr.w	r2, r3, #32
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80025ac:	e008      	b.n	80025c0 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b2:	f043 0220 	orr.w	r2, r3, #32
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80025c8:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	37e4      	adds	r7, #228	@ 0xe4
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd90      	pop	{r4, r7, pc}
 80025d4:	58026300 	.word	0x58026300
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40022100 	.word	0x40022100
 80025e0:	58026000 	.word	0x58026000
 80025e4:	c7520000 	.word	0xc7520000
 80025e8:	40022300 	.word	0x40022300
 80025ec:	24000000 	.word	0x24000000
 80025f0:	053e2d63 	.word	0x053e2d63
 80025f4:	c3210000 	.word	0xc3210000
 80025f8:	cb840000 	.word	0xcb840000

080025fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7fe ff8b 	bl	8001524 <LL_ADC_IsEnabled>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d16e      	bne.n	80026f2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	4b38      	ldr	r3, [pc, #224]	@ (80026fc <ADC_Enable+0x100>)
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00d      	beq.n	800263e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002626:	f043 0210 	orr.w	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e05a      	b.n	80026f4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe ff5a 	bl	80014fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002648:	f7fe fc96 	bl	8000f78 <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a2b      	ldr	r2, [pc, #172]	@ (8002700 <ADC_Enable+0x104>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d004      	beq.n	8002662 <ADC_Enable+0x66>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a29      	ldr	r2, [pc, #164]	@ (8002704 <ADC_Enable+0x108>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <ADC_Enable+0x6a>
 8002662:	4b29      	ldr	r3, [pc, #164]	@ (8002708 <ADC_Enable+0x10c>)
 8002664:	e000      	b.n	8002668 <ADC_Enable+0x6c>
 8002666:	4b29      	ldr	r3, [pc, #164]	@ (800270c <ADC_Enable+0x110>)
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe feeb 	bl	8001444 <LL_ADC_GetMultimode>
 800266e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a23      	ldr	r2, [pc, #140]	@ (8002704 <ADC_Enable+0x108>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d002      	beq.n	8002680 <ADC_Enable+0x84>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	e000      	b.n	8002682 <ADC_Enable+0x86>
 8002680:	4b1f      	ldr	r3, [pc, #124]	@ (8002700 <ADC_Enable+0x104>)
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	4293      	cmp	r3, r2
 8002688:	d02c      	beq.n	80026e4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d130      	bne.n	80026f2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002690:	e028      	b.n	80026e4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe ff44 	bl	8001524 <LL_ADC_IsEnabled>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d104      	bne.n	80026ac <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe ff28 	bl	80014fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026ac:	f7fe fc64 	bl	8000f78 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d914      	bls.n	80026e4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d00d      	beq.n	80026e4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026cc:	f043 0210 	orr.w	r2, r3, #16
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e007      	b.n	80026f4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d1cf      	bne.n	8002692 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	8000003f 	.word	0x8000003f
 8002700:	40022000 	.word	0x40022000
 8002704:	40022100 	.word	0x40022100
 8002708:	40022300 	.word	0x40022300
 800270c:	58026300 	.word	0x58026300

08002710 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002722:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002726:	2b00      	cmp	r3, #0
 8002728:	d14b      	bne.n	80027c2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800272e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d021      	beq.n	8002788 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fd93 	bl	8001274 <LL_ADC_REG_IsTriggerSourceSWStart>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d032      	beq.n	80027ba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d12b      	bne.n	80027ba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002766:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002772:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d11f      	bne.n	80027ba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277e:	f043 0201 	orr.w	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	661a      	str	r2, [r3, #96]	@ 0x60
 8002786:	e018      	b.n	80027ba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d111      	bne.n	80027ba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d105      	bne.n	80027ba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027b2:	f043 0201 	orr.w	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7fe f8d0 	bl	8000960 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027c0:	e00e      	b.n	80027e0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f7ff f9da 	bl	8001b88 <HAL_ADC_ErrorCallback>
}
 80027d4:	e004      	b.n	80027e0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	4798      	blx	r3
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7fe f88e 	bl	8000918 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002810:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002816:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002822:	f043 0204 	orr.w	r2, r3, #4
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7ff f9ac 	bl	8001b88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002830:	bf00      	nop
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6c      	ldr	r2, [pc, #432]	@ (80029f8 <ADC_ConfigureBoostMode+0x1c0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d004      	beq.n	8002854 <ADC_ConfigureBoostMode+0x1c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a6b      	ldr	r2, [pc, #428]	@ (80029fc <ADC_ConfigureBoostMode+0x1c4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d109      	bne.n	8002868 <ADC_ConfigureBoostMode+0x30>
 8002854:	4b6a      	ldr	r3, [pc, #424]	@ (8002a00 <ADC_ConfigureBoostMode+0x1c8>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf14      	ite	ne
 8002860:	2301      	movne	r3, #1
 8002862:	2300      	moveq	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	e008      	b.n	800287a <ADC_ConfigureBoostMode+0x42>
 8002868:	4b66      	ldr	r3, [pc, #408]	@ (8002a04 <ADC_ConfigureBoostMode+0x1cc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf14      	ite	ne
 8002874:	2301      	movne	r3, #1
 8002876:	2300      	moveq	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01c      	beq.n	80028b8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800287e:	f003 fe65 	bl	800654c <HAL_RCC_GetHCLKFreq>
 8002882:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800288c:	d010      	beq.n	80028b0 <ADC_ConfigureBoostMode+0x78>
 800288e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002892:	d873      	bhi.n	800297c <ADC_ConfigureBoostMode+0x144>
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002898:	d002      	beq.n	80028a0 <ADC_ConfigureBoostMode+0x68>
 800289a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800289e:	d16d      	bne.n	800297c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	0c1b      	lsrs	r3, r3, #16
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	60fb      	str	r3, [r7, #12]
        break;
 80028ae:	e068      	b.n	8002982 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	089b      	lsrs	r3, r3, #2
 80028b4:	60fb      	str	r3, [r7, #12]
        break;
 80028b6:	e064      	b.n	8002982 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80028b8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80028bc:	f04f 0100 	mov.w	r1, #0
 80028c0:	f005 f82a 	bl	8007918 <HAL_RCCEx_GetPeriphCLKFreq>
 80028c4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80028ce:	d051      	beq.n	8002974 <ADC_ConfigureBoostMode+0x13c>
 80028d0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80028d4:	d854      	bhi.n	8002980 <ADC_ConfigureBoostMode+0x148>
 80028d6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80028da:	d047      	beq.n	800296c <ADC_ConfigureBoostMode+0x134>
 80028dc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80028e0:	d84e      	bhi.n	8002980 <ADC_ConfigureBoostMode+0x148>
 80028e2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80028e6:	d03d      	beq.n	8002964 <ADC_ConfigureBoostMode+0x12c>
 80028e8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80028ec:	d848      	bhi.n	8002980 <ADC_ConfigureBoostMode+0x148>
 80028ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028f2:	d033      	beq.n	800295c <ADC_ConfigureBoostMode+0x124>
 80028f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028f8:	d842      	bhi.n	8002980 <ADC_ConfigureBoostMode+0x148>
 80028fa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80028fe:	d029      	beq.n	8002954 <ADC_ConfigureBoostMode+0x11c>
 8002900:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002904:	d83c      	bhi.n	8002980 <ADC_ConfigureBoostMode+0x148>
 8002906:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800290a:	d01a      	beq.n	8002942 <ADC_ConfigureBoostMode+0x10a>
 800290c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002910:	d836      	bhi.n	8002980 <ADC_ConfigureBoostMode+0x148>
 8002912:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002916:	d014      	beq.n	8002942 <ADC_ConfigureBoostMode+0x10a>
 8002918:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800291c:	d830      	bhi.n	8002980 <ADC_ConfigureBoostMode+0x148>
 800291e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002922:	d00e      	beq.n	8002942 <ADC_ConfigureBoostMode+0x10a>
 8002924:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002928:	d82a      	bhi.n	8002980 <ADC_ConfigureBoostMode+0x148>
 800292a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800292e:	d008      	beq.n	8002942 <ADC_ConfigureBoostMode+0x10a>
 8002930:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002934:	d824      	bhi.n	8002980 <ADC_ConfigureBoostMode+0x148>
 8002936:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800293a:	d002      	beq.n	8002942 <ADC_ConfigureBoostMode+0x10a>
 800293c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002940:	d11e      	bne.n	8002980 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	0c9b      	lsrs	r3, r3, #18
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002950:	60fb      	str	r3, [r7, #12]
        break;
 8002952:	e016      	b.n	8002982 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	60fb      	str	r3, [r7, #12]
        break;
 800295a:	e012      	b.n	8002982 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	60fb      	str	r3, [r7, #12]
        break;
 8002962:	e00e      	b.n	8002982 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	60fb      	str	r3, [r7, #12]
        break;
 800296a:	e00a      	b.n	8002982 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	09db      	lsrs	r3, r3, #7
 8002970:	60fb      	str	r3, [r7, #12]
        break;
 8002972:	e006      	b.n	8002982 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	60fb      	str	r3, [r7, #12]
        break;
 800297a:	e002      	b.n	8002982 <ADC_ConfigureBoostMode+0x14a>
        break;
 800297c:	bf00      	nop
 800297e:	e000      	b.n	8002982 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002980:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a1f      	ldr	r2, [pc, #124]	@ (8002a08 <ADC_ConfigureBoostMode+0x1d0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d808      	bhi.n	80029a2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800299e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80029a0:	e025      	b.n	80029ee <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a19      	ldr	r2, [pc, #100]	@ (8002a0c <ADC_ConfigureBoostMode+0x1d4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d80a      	bhi.n	80029c0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029bc:	609a      	str	r2, [r3, #8]
}
 80029be:	e016      	b.n	80029ee <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a13      	ldr	r2, [pc, #76]	@ (8002a10 <ADC_ConfigureBoostMode+0x1d8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d80a      	bhi.n	80029de <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029da:	609a      	str	r2, [r3, #8]
}
 80029dc:	e007      	b.n	80029ee <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80029ec:	609a      	str	r2, [r3, #8]
}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40022000 	.word	0x40022000
 80029fc:	40022100 	.word	0x40022100
 8002a00:	40022300 	.word	0x40022300
 8002a04:	58026300 	.word	0x58026300
 8002a08:	005f5e10 	.word	0x005f5e10
 8002a0c:	00bebc20 	.word	0x00bebc20
 8002a10:	017d7840 	.word	0x017d7840

08002a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a24:	4b0b      	ldr	r3, [pc, #44]	@ (8002a54 <__NVIC_SetPriorityGrouping+0x40>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a30:	4013      	ands	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a3c:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a42:	4a04      	ldr	r2, [pc, #16]	@ (8002a54 <__NVIC_SetPriorityGrouping+0x40>)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	60d3      	str	r3, [r2, #12]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000ed00 	.word	0xe000ed00
 8002a58:	05fa0000 	.word	0x05fa0000

08002a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a60:	4b04      	ldr	r3, [pc, #16]	@ (8002a74 <__NVIC_GetPriorityGrouping+0x18>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	f003 0307 	and.w	r3, r3, #7
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	db0b      	blt.n	8002aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	f003 021f 	and.w	r2, r3, #31
 8002a90:	4907      	ldr	r1, [pc, #28]	@ (8002ab0 <__NVIC_EnableIRQ+0x38>)
 8002a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2001      	movs	r0, #1
 8002a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000e100 	.word	0xe000e100

08002ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	db0a      	blt.n	8002ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	490c      	ldr	r1, [pc, #48]	@ (8002b00 <__NVIC_SetPriority+0x4c>)
 8002ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002adc:	e00a      	b.n	8002af4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4908      	ldr	r1, [pc, #32]	@ (8002b04 <__NVIC_SetPriority+0x50>)
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	3b04      	subs	r3, #4
 8002aec:	0112      	lsls	r2, r2, #4
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	440b      	add	r3, r1
 8002af2:	761a      	strb	r2, [r3, #24]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000e100 	.word	0xe000e100
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	@ 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f1c3 0307 	rsb	r3, r3, #7
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	bf28      	it	cs
 8002b26:	2304      	movcs	r3, #4
 8002b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d902      	bls.n	8002b38 <NVIC_EncodePriority+0x30>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3b03      	subs	r3, #3
 8002b36:	e000      	b.n	8002b3a <NVIC_EncodePriority+0x32>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b50:	f04f 31ff 	mov.w	r1, #4294967295
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43d9      	mvns	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	4313      	orrs	r3, r2
         );
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3724      	adds	r7, #36	@ 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b80:	d301      	bcc.n	8002b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00f      	b.n	8002ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b86:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb0 <SysTick_Config+0x40>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8e:	210f      	movs	r1, #15
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	f7ff ff8e 	bl	8002ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b98:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <SysTick_Config+0x40>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9e:	4b04      	ldr	r3, [pc, #16]	@ (8002bb0 <SysTick_Config+0x40>)
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	e000e010 	.word	0xe000e010

08002bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff29 	bl	8002a14 <__NVIC_SetPriorityGrouping>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd8:	f7ff ff40 	bl	8002a5c <__NVIC_GetPriorityGrouping>
 8002bdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	6978      	ldr	r0, [r7, #20]
 8002be4:	f7ff ff90 	bl	8002b08 <NVIC_EncodePriority>
 8002be8:	4602      	mov	r2, r0
 8002bea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff5f 	bl	8002ab4 <__NVIC_SetPriority>
}
 8002bf6:	bf00      	nop
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff33 	bl	8002a78 <__NVIC_EnableIRQ>
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ffa4 	bl	8002b70 <SysTick_Config>
 8002c28:	4603      	mov	r3, r0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e014      	b.n	8002c6e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	791b      	ldrb	r3, [r3, #4]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d105      	bne.n	8002c5a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7fd ff87 	bl	8000b68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0a2      	b.n	8002dd6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	795b      	ldrb	r3, [r3, #5]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_DAC_Start_DMA+0x24>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e09c      	b.n	8002dd6 <HAL_DAC_Start_DMA+0x15e>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d129      	bne.n	8002d02 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	4a4b      	ldr	r2, [pc, #300]	@ (8002de0 <HAL_DAC_Start_DMA+0x168>)
 8002cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	4a4a      	ldr	r2, [pc, #296]	@ (8002de4 <HAL_DAC_Start_DMA+0x16c>)
 8002cbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	4a49      	ldr	r2, [pc, #292]	@ (8002de8 <HAL_DAC_Start_DMA+0x170>)
 8002cc4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cd4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_DAC_Start_DMA+0x6c>
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d005      	beq.n	8002cee <HAL_DAC_Start_DMA+0x76>
 8002ce2:	e009      	b.n	8002cf8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3308      	adds	r3, #8
 8002cea:	613b      	str	r3, [r7, #16]
        break;
 8002cec:	e033      	b.n	8002d56 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	330c      	adds	r3, #12
 8002cf4:	613b      	str	r3, [r7, #16]
        break;
 8002cf6:	e02e      	b.n	8002d56 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3310      	adds	r3, #16
 8002cfe:	613b      	str	r3, [r7, #16]
        break;
 8002d00:	e029      	b.n	8002d56 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	4a39      	ldr	r2, [pc, #228]	@ (8002dec <HAL_DAC_Start_DMA+0x174>)
 8002d08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	4a38      	ldr	r2, [pc, #224]	@ (8002df0 <HAL_DAC_Start_DMA+0x178>)
 8002d10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4a37      	ldr	r2, [pc, #220]	@ (8002df4 <HAL_DAC_Start_DMA+0x17c>)
 8002d18:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002d28:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_DAC_Start_DMA+0xc0>
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d005      	beq.n	8002d42 <HAL_DAC_Start_DMA+0xca>
 8002d36:	e009      	b.n	8002d4c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3314      	adds	r3, #20
 8002d3e:	613b      	str	r3, [r7, #16]
        break;
 8002d40:	e009      	b.n	8002d56 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3318      	adds	r3, #24
 8002d48:	613b      	str	r3, [r7, #16]
        break;
 8002d4a:	e004      	b.n	8002d56 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	331c      	adds	r3, #28
 8002d52:	613b      	str	r3, [r7, #16]
        break;
 8002d54:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d111      	bne.n	8002d80 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6898      	ldr	r0, [r3, #8]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	f000 fd81 	bl	800387c <HAL_DMA_Start_IT>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	75fb      	strb	r3, [r7, #23]
 8002d7e:	e010      	b.n	8002da2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002d8e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68d8      	ldr	r0, [r3, #12]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	f000 fd6f 	bl	800387c <HAL_DMA_Start_IT>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10c      	bne.n	8002dc8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6819      	ldr	r1, [r3, #0]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2201      	movs	r2, #1
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	e005      	b.n	8002dd4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f043 0204 	orr.w	r2, r3, #4
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	080030b9 	.word	0x080030b9
 8002de4:	080030db 	.word	0x080030db
 8002de8:	080030f7 	.word	0x080030f7
 8002dec:	08003161 	.word	0x08003161
 8002df0:	08003183 	.word	0x08003183
 8002df4:	0800319f 	.word	0x0800319f

08002df8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	@ 0x28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_DAC_ConfigChannel+0x1e>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e12a      	b.n	80030ac <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	795b      	ldrb	r3, [r3, #5]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_DAC_ConfigChannel+0x2e>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e124      	b.n	80030ac <HAL_DAC_ConfigChannel+0x278>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d17a      	bne.n	8002f6c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002e76:	f7fe f87f 	bl	8000f78 <HAL_GetTick>
 8002e7a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d13d      	bne.n	8002efe <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e82:	e018      	b.n	8002eb6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e84:	f7fe f878 	bl	8000f78 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d911      	bls.n	8002eb6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e98:	4b86      	ldr	r3, [pc, #536]	@ (80030b4 <HAL_DAC_ConfigChannel+0x280>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f043 0208 	orr.w	r2, r3, #8
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2203      	movs	r2, #3
 8002eb0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e0fa      	b.n	80030ac <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ebc:	4b7d      	ldr	r3, [pc, #500]	@ (80030b4 <HAL_DAC_ConfigChannel+0x280>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1df      	bne.n	8002e84 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	6992      	ldr	r2, [r2, #24]
 8002ecc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ece:	e020      	b.n	8002f12 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ed0:	f7fe f852 	bl	8000f78 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d90f      	bls.n	8002efe <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	da0a      	bge.n	8002efe <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f043 0208 	orr.w	r2, r3, #8
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e0d6      	b.n	80030ac <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	dbe3      	blt.n	8002ed0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	6992      	ldr	r2, [r2, #24]
 8002f10:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002f22:	fa01 f303 	lsl.w	r3, r1, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	ea02 0103 	and.w	r1, r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	69da      	ldr	r2, [r3, #28]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	409a      	lsls	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	21ff      	movs	r1, #255	@ 0xff
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	ea02 0103 	and.w	r1, r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6a1a      	ldr	r2, [r3, #32]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	409a      	lsls	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d11d      	bne.n	8002fb0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	221f      	movs	r2, #31
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2207      	movs	r2, #7
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d102      	bne.n	8002fda <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd8:	e00f      	b.n	8002ffa <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d102      	bne.n	8002fe8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe6:	e008      	b.n	8002ffa <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff4:	e001      	b.n	8002ffa <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	4313      	orrs	r3, r2
 8003004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6819      	ldr	r1, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43da      	mvns	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	400a      	ands	r2, r1
 8003040:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6819      	ldr	r1, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	22c0      	movs	r2, #192	@ 0xc0
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43da      	mvns	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	400a      	ands	r2, r1
 800309a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80030a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3728      	adds	r7, #40	@ 0x28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20008000 	.word	0x20008000

080030b8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f7ff fe96 	bl	8002df8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	711a      	strb	r2, [r3, #4]
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f7ff fe8f 	bl	8002e0c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003102:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f043 0204 	orr.w	r2, r3, #4
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7ff fe85 	bl	8002e20 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	711a      	strb	r2, [r3, #4]
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f7ff ffd8 	bl	8003124 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	711a      	strb	r2, [r3, #4]
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7ff ffd1 	bl	8003138 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f043 0204 	orr.w	r2, r3, #4
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f7ff ffc7 	bl	800314c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	711a      	strb	r2, [r3, #4]
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80031d4:	f7fd fed0 	bl	8000f78 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e312      	b.n	800380a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a66      	ldr	r2, [pc, #408]	@ (8003384 <HAL_DMA_Init+0x1b8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d04a      	beq.n	8003284 <HAL_DMA_Init+0xb8>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a65      	ldr	r2, [pc, #404]	@ (8003388 <HAL_DMA_Init+0x1bc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d045      	beq.n	8003284 <HAL_DMA_Init+0xb8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a63      	ldr	r2, [pc, #396]	@ (800338c <HAL_DMA_Init+0x1c0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d040      	beq.n	8003284 <HAL_DMA_Init+0xb8>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a62      	ldr	r2, [pc, #392]	@ (8003390 <HAL_DMA_Init+0x1c4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d03b      	beq.n	8003284 <HAL_DMA_Init+0xb8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a60      	ldr	r2, [pc, #384]	@ (8003394 <HAL_DMA_Init+0x1c8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d036      	beq.n	8003284 <HAL_DMA_Init+0xb8>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a5f      	ldr	r2, [pc, #380]	@ (8003398 <HAL_DMA_Init+0x1cc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d031      	beq.n	8003284 <HAL_DMA_Init+0xb8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a5d      	ldr	r2, [pc, #372]	@ (800339c <HAL_DMA_Init+0x1d0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d02c      	beq.n	8003284 <HAL_DMA_Init+0xb8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a5c      	ldr	r2, [pc, #368]	@ (80033a0 <HAL_DMA_Init+0x1d4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d027      	beq.n	8003284 <HAL_DMA_Init+0xb8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a5a      	ldr	r2, [pc, #360]	@ (80033a4 <HAL_DMA_Init+0x1d8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d022      	beq.n	8003284 <HAL_DMA_Init+0xb8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a59      	ldr	r2, [pc, #356]	@ (80033a8 <HAL_DMA_Init+0x1dc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d01d      	beq.n	8003284 <HAL_DMA_Init+0xb8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a57      	ldr	r2, [pc, #348]	@ (80033ac <HAL_DMA_Init+0x1e0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d018      	beq.n	8003284 <HAL_DMA_Init+0xb8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a56      	ldr	r2, [pc, #344]	@ (80033b0 <HAL_DMA_Init+0x1e4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d013      	beq.n	8003284 <HAL_DMA_Init+0xb8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a54      	ldr	r2, [pc, #336]	@ (80033b4 <HAL_DMA_Init+0x1e8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00e      	beq.n	8003284 <HAL_DMA_Init+0xb8>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a53      	ldr	r2, [pc, #332]	@ (80033b8 <HAL_DMA_Init+0x1ec>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d009      	beq.n	8003284 <HAL_DMA_Init+0xb8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a51      	ldr	r2, [pc, #324]	@ (80033bc <HAL_DMA_Init+0x1f0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d004      	beq.n	8003284 <HAL_DMA_Init+0xb8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a50      	ldr	r2, [pc, #320]	@ (80033c0 <HAL_DMA_Init+0x1f4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d101      	bne.n	8003288 <HAL_DMA_Init+0xbc>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <HAL_DMA_Init+0xbe>
 8003288:	2300      	movs	r3, #0
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 813c 	beq.w	8003508 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a37      	ldr	r2, [pc, #220]	@ (8003384 <HAL_DMA_Init+0x1b8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d04a      	beq.n	8003340 <HAL_DMA_Init+0x174>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a36      	ldr	r2, [pc, #216]	@ (8003388 <HAL_DMA_Init+0x1bc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d045      	beq.n	8003340 <HAL_DMA_Init+0x174>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a34      	ldr	r2, [pc, #208]	@ (800338c <HAL_DMA_Init+0x1c0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d040      	beq.n	8003340 <HAL_DMA_Init+0x174>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a33      	ldr	r2, [pc, #204]	@ (8003390 <HAL_DMA_Init+0x1c4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d03b      	beq.n	8003340 <HAL_DMA_Init+0x174>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a31      	ldr	r2, [pc, #196]	@ (8003394 <HAL_DMA_Init+0x1c8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d036      	beq.n	8003340 <HAL_DMA_Init+0x174>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a30      	ldr	r2, [pc, #192]	@ (8003398 <HAL_DMA_Init+0x1cc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d031      	beq.n	8003340 <HAL_DMA_Init+0x174>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a2e      	ldr	r2, [pc, #184]	@ (800339c <HAL_DMA_Init+0x1d0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d02c      	beq.n	8003340 <HAL_DMA_Init+0x174>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2d      	ldr	r2, [pc, #180]	@ (80033a0 <HAL_DMA_Init+0x1d4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d027      	beq.n	8003340 <HAL_DMA_Init+0x174>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a2b      	ldr	r2, [pc, #172]	@ (80033a4 <HAL_DMA_Init+0x1d8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d022      	beq.n	8003340 <HAL_DMA_Init+0x174>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a2a      	ldr	r2, [pc, #168]	@ (80033a8 <HAL_DMA_Init+0x1dc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d01d      	beq.n	8003340 <HAL_DMA_Init+0x174>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a28      	ldr	r2, [pc, #160]	@ (80033ac <HAL_DMA_Init+0x1e0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d018      	beq.n	8003340 <HAL_DMA_Init+0x174>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a27      	ldr	r2, [pc, #156]	@ (80033b0 <HAL_DMA_Init+0x1e4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <HAL_DMA_Init+0x174>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a25      	ldr	r2, [pc, #148]	@ (80033b4 <HAL_DMA_Init+0x1e8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00e      	beq.n	8003340 <HAL_DMA_Init+0x174>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a24      	ldr	r2, [pc, #144]	@ (80033b8 <HAL_DMA_Init+0x1ec>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d009      	beq.n	8003340 <HAL_DMA_Init+0x174>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a22      	ldr	r2, [pc, #136]	@ (80033bc <HAL_DMA_Init+0x1f0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <HAL_DMA_Init+0x174>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a21      	ldr	r2, [pc, #132]	@ (80033c0 <HAL_DMA_Init+0x1f4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d108      	bne.n	8003352 <HAL_DMA_Init+0x186>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e007      	b.n	8003362 <HAL_DMA_Init+0x196>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003362:	e02f      	b.n	80033c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003364:	f7fd fe08 	bl	8000f78 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b05      	cmp	r3, #5
 8003370:	d928      	bls.n	80033c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2203      	movs	r2, #3
 800337c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e242      	b.n	800380a <HAL_DMA_Init+0x63e>
 8003384:	40020010 	.word	0x40020010
 8003388:	40020028 	.word	0x40020028
 800338c:	40020040 	.word	0x40020040
 8003390:	40020058 	.word	0x40020058
 8003394:	40020070 	.word	0x40020070
 8003398:	40020088 	.word	0x40020088
 800339c:	400200a0 	.word	0x400200a0
 80033a0:	400200b8 	.word	0x400200b8
 80033a4:	40020410 	.word	0x40020410
 80033a8:	40020428 	.word	0x40020428
 80033ac:	40020440 	.word	0x40020440
 80033b0:	40020458 	.word	0x40020458
 80033b4:	40020470 	.word	0x40020470
 80033b8:	40020488 	.word	0x40020488
 80033bc:	400204a0 	.word	0x400204a0
 80033c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1c8      	bne.n	8003364 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4b83      	ldr	r3, [pc, #524]	@ (80035ec <HAL_DMA_Init+0x420>)
 80033de:	4013      	ands	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80033ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003402:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	2b04      	cmp	r3, #4
 8003416:	d107      	bne.n	8003428 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	4313      	orrs	r3, r2
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b28      	cmp	r3, #40	@ 0x28
 800342e:	d903      	bls.n	8003438 <HAL_DMA_Init+0x26c>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b2e      	cmp	r3, #46	@ 0x2e
 8003436:	d91f      	bls.n	8003478 <HAL_DMA_Init+0x2ac>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b3e      	cmp	r3, #62	@ 0x3e
 800343e:	d903      	bls.n	8003448 <HAL_DMA_Init+0x27c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b42      	cmp	r3, #66	@ 0x42
 8003446:	d917      	bls.n	8003478 <HAL_DMA_Init+0x2ac>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b46      	cmp	r3, #70	@ 0x46
 800344e:	d903      	bls.n	8003458 <HAL_DMA_Init+0x28c>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b48      	cmp	r3, #72	@ 0x48
 8003456:	d90f      	bls.n	8003478 <HAL_DMA_Init+0x2ac>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b4e      	cmp	r3, #78	@ 0x4e
 800345e:	d903      	bls.n	8003468 <HAL_DMA_Init+0x29c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b52      	cmp	r3, #82	@ 0x52
 8003466:	d907      	bls.n	8003478 <HAL_DMA_Init+0x2ac>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b73      	cmp	r3, #115	@ 0x73
 800346e:	d905      	bls.n	800347c <HAL_DMA_Init+0x2b0>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b77      	cmp	r3, #119	@ 0x77
 8003476:	d801      	bhi.n	800347c <HAL_DMA_Init+0x2b0>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <HAL_DMA_Init+0x2b2>
 800347c:	2300      	movs	r3, #0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003488:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f023 0307 	bic.w	r3, r3, #7
 80034a0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d117      	bne.n	80034e4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00e      	beq.n	80034e4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f001 fdca 	bl	8005060 <DMA_CheckFifoParam>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2240      	movs	r2, #64	@ 0x40
 80034d6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e192      	b.n	800380a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f001 fd05 	bl	8004efc <DMA_CalcBaseAndBitshift>
 80034f2:	4603      	mov	r3, r0
 80034f4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	223f      	movs	r2, #63	@ 0x3f
 8003500:	409a      	lsls	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	609a      	str	r2, [r3, #8]
 8003506:	e0c8      	b.n	800369a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a38      	ldr	r2, [pc, #224]	@ (80035f0 <HAL_DMA_Init+0x424>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d022      	beq.n	8003558 <HAL_DMA_Init+0x38c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a37      	ldr	r2, [pc, #220]	@ (80035f4 <HAL_DMA_Init+0x428>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d01d      	beq.n	8003558 <HAL_DMA_Init+0x38c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a35      	ldr	r2, [pc, #212]	@ (80035f8 <HAL_DMA_Init+0x42c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d018      	beq.n	8003558 <HAL_DMA_Init+0x38c>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a34      	ldr	r2, [pc, #208]	@ (80035fc <HAL_DMA_Init+0x430>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d013      	beq.n	8003558 <HAL_DMA_Init+0x38c>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a32      	ldr	r2, [pc, #200]	@ (8003600 <HAL_DMA_Init+0x434>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00e      	beq.n	8003558 <HAL_DMA_Init+0x38c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a31      	ldr	r2, [pc, #196]	@ (8003604 <HAL_DMA_Init+0x438>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d009      	beq.n	8003558 <HAL_DMA_Init+0x38c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a2f      	ldr	r2, [pc, #188]	@ (8003608 <HAL_DMA_Init+0x43c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d004      	beq.n	8003558 <HAL_DMA_Init+0x38c>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2e      	ldr	r2, [pc, #184]	@ (800360c <HAL_DMA_Init+0x440>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d101      	bne.n	800355c <HAL_DMA_Init+0x390>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <HAL_DMA_Init+0x392>
 800355c:	2300      	movs	r3, #0
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 8092 	beq.w	8003688 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a21      	ldr	r2, [pc, #132]	@ (80035f0 <HAL_DMA_Init+0x424>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d021      	beq.n	80035b2 <HAL_DMA_Init+0x3e6>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a20      	ldr	r2, [pc, #128]	@ (80035f4 <HAL_DMA_Init+0x428>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d01c      	beq.n	80035b2 <HAL_DMA_Init+0x3e6>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1e      	ldr	r2, [pc, #120]	@ (80035f8 <HAL_DMA_Init+0x42c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d017      	beq.n	80035b2 <HAL_DMA_Init+0x3e6>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1d      	ldr	r2, [pc, #116]	@ (80035fc <HAL_DMA_Init+0x430>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d012      	beq.n	80035b2 <HAL_DMA_Init+0x3e6>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1b      	ldr	r2, [pc, #108]	@ (8003600 <HAL_DMA_Init+0x434>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00d      	beq.n	80035b2 <HAL_DMA_Init+0x3e6>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1a      	ldr	r2, [pc, #104]	@ (8003604 <HAL_DMA_Init+0x438>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d008      	beq.n	80035b2 <HAL_DMA_Init+0x3e6>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a18      	ldr	r2, [pc, #96]	@ (8003608 <HAL_DMA_Init+0x43c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d003      	beq.n	80035b2 <HAL_DMA_Init+0x3e6>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a17      	ldr	r2, [pc, #92]	@ (800360c <HAL_DMA_Init+0x440>)
 80035b0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4b10      	ldr	r3, [pc, #64]	@ (8003610 <HAL_DMA_Init+0x444>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b40      	cmp	r3, #64	@ 0x40
 80035d8:	d01c      	beq.n	8003614 <HAL_DMA_Init+0x448>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	2b80      	cmp	r3, #128	@ 0x80
 80035e0:	d102      	bne.n	80035e8 <HAL_DMA_Init+0x41c>
 80035e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80035e6:	e016      	b.n	8003616 <HAL_DMA_Init+0x44a>
 80035e8:	2300      	movs	r3, #0
 80035ea:	e014      	b.n	8003616 <HAL_DMA_Init+0x44a>
 80035ec:	fe10803f 	.word	0xfe10803f
 80035f0:	58025408 	.word	0x58025408
 80035f4:	5802541c 	.word	0x5802541c
 80035f8:	58025430 	.word	0x58025430
 80035fc:	58025444 	.word	0x58025444
 8003600:	58025458 	.word	0x58025458
 8003604:	5802546c 	.word	0x5802546c
 8003608:	58025480 	.word	0x58025480
 800360c:	58025494 	.word	0x58025494
 8003610:	fffe000f 	.word	0xfffe000f
 8003614:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68d2      	ldr	r2, [r2, #12]
 800361a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800361c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003624:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800362c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003634:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800363c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003644:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	4b6e      	ldr	r3, [pc, #440]	@ (8003814 <HAL_DMA_Init+0x648>)
 800365c:	4413      	add	r3, r2
 800365e:	4a6e      	ldr	r2, [pc, #440]	@ (8003818 <HAL_DMA_Init+0x64c>)
 8003660:	fba2 2303 	umull	r2, r3, r2, r3
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	009a      	lsls	r2, r3, #2
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f001 fc45 	bl	8004efc <DMA_CalcBaseAndBitshift>
 8003672:	4603      	mov	r3, r0
 8003674:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	2201      	movs	r2, #1
 8003680:	409a      	lsls	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	e008      	b.n	800369a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2240      	movs	r2, #64	@ 0x40
 800368c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2203      	movs	r2, #3
 8003692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e0b7      	b.n	800380a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a5f      	ldr	r2, [pc, #380]	@ (800381c <HAL_DMA_Init+0x650>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d072      	beq.n	800378a <HAL_DMA_Init+0x5be>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003820 <HAL_DMA_Init+0x654>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d06d      	beq.n	800378a <HAL_DMA_Init+0x5be>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a5c      	ldr	r2, [pc, #368]	@ (8003824 <HAL_DMA_Init+0x658>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d068      	beq.n	800378a <HAL_DMA_Init+0x5be>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a5a      	ldr	r2, [pc, #360]	@ (8003828 <HAL_DMA_Init+0x65c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d063      	beq.n	800378a <HAL_DMA_Init+0x5be>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a59      	ldr	r2, [pc, #356]	@ (800382c <HAL_DMA_Init+0x660>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d05e      	beq.n	800378a <HAL_DMA_Init+0x5be>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a57      	ldr	r2, [pc, #348]	@ (8003830 <HAL_DMA_Init+0x664>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d059      	beq.n	800378a <HAL_DMA_Init+0x5be>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a56      	ldr	r2, [pc, #344]	@ (8003834 <HAL_DMA_Init+0x668>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d054      	beq.n	800378a <HAL_DMA_Init+0x5be>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a54      	ldr	r2, [pc, #336]	@ (8003838 <HAL_DMA_Init+0x66c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d04f      	beq.n	800378a <HAL_DMA_Init+0x5be>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a53      	ldr	r2, [pc, #332]	@ (800383c <HAL_DMA_Init+0x670>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d04a      	beq.n	800378a <HAL_DMA_Init+0x5be>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a51      	ldr	r2, [pc, #324]	@ (8003840 <HAL_DMA_Init+0x674>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d045      	beq.n	800378a <HAL_DMA_Init+0x5be>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a50      	ldr	r2, [pc, #320]	@ (8003844 <HAL_DMA_Init+0x678>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d040      	beq.n	800378a <HAL_DMA_Init+0x5be>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a4e      	ldr	r2, [pc, #312]	@ (8003848 <HAL_DMA_Init+0x67c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d03b      	beq.n	800378a <HAL_DMA_Init+0x5be>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a4d      	ldr	r2, [pc, #308]	@ (800384c <HAL_DMA_Init+0x680>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d036      	beq.n	800378a <HAL_DMA_Init+0x5be>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a4b      	ldr	r2, [pc, #300]	@ (8003850 <HAL_DMA_Init+0x684>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d031      	beq.n	800378a <HAL_DMA_Init+0x5be>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a4a      	ldr	r2, [pc, #296]	@ (8003854 <HAL_DMA_Init+0x688>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d02c      	beq.n	800378a <HAL_DMA_Init+0x5be>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a48      	ldr	r2, [pc, #288]	@ (8003858 <HAL_DMA_Init+0x68c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d027      	beq.n	800378a <HAL_DMA_Init+0x5be>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a47      	ldr	r2, [pc, #284]	@ (800385c <HAL_DMA_Init+0x690>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d022      	beq.n	800378a <HAL_DMA_Init+0x5be>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a45      	ldr	r2, [pc, #276]	@ (8003860 <HAL_DMA_Init+0x694>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01d      	beq.n	800378a <HAL_DMA_Init+0x5be>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a44      	ldr	r2, [pc, #272]	@ (8003864 <HAL_DMA_Init+0x698>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d018      	beq.n	800378a <HAL_DMA_Init+0x5be>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a42      	ldr	r2, [pc, #264]	@ (8003868 <HAL_DMA_Init+0x69c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <HAL_DMA_Init+0x5be>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a41      	ldr	r2, [pc, #260]	@ (800386c <HAL_DMA_Init+0x6a0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00e      	beq.n	800378a <HAL_DMA_Init+0x5be>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a3f      	ldr	r2, [pc, #252]	@ (8003870 <HAL_DMA_Init+0x6a4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d009      	beq.n	800378a <HAL_DMA_Init+0x5be>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a3e      	ldr	r2, [pc, #248]	@ (8003874 <HAL_DMA_Init+0x6a8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d004      	beq.n	800378a <HAL_DMA_Init+0x5be>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a3c      	ldr	r2, [pc, #240]	@ (8003878 <HAL_DMA_Init+0x6ac>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <HAL_DMA_Init+0x5c2>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <HAL_DMA_Init+0x5c4>
 800378e:	2300      	movs	r3, #0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d032      	beq.n	80037fa <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f001 fcdf 	bl	8005158 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b80      	cmp	r3, #128	@ 0x80
 80037a0:	d102      	bne.n	80037a8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80037bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d010      	beq.n	80037e8 <HAL_DMA_Init+0x61c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d80c      	bhi.n	80037e8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f001 fd5c 	bl	800528c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	e008      	b.n	80037fa <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	a7fdabf8 	.word	0xa7fdabf8
 8003818:	cccccccd 	.word	0xcccccccd
 800381c:	40020010 	.word	0x40020010
 8003820:	40020028 	.word	0x40020028
 8003824:	40020040 	.word	0x40020040
 8003828:	40020058 	.word	0x40020058
 800382c:	40020070 	.word	0x40020070
 8003830:	40020088 	.word	0x40020088
 8003834:	400200a0 	.word	0x400200a0
 8003838:	400200b8 	.word	0x400200b8
 800383c:	40020410 	.word	0x40020410
 8003840:	40020428 	.word	0x40020428
 8003844:	40020440 	.word	0x40020440
 8003848:	40020458 	.word	0x40020458
 800384c:	40020470 	.word	0x40020470
 8003850:	40020488 	.word	0x40020488
 8003854:	400204a0 	.word	0x400204a0
 8003858:	400204b8 	.word	0x400204b8
 800385c:	58025408 	.word	0x58025408
 8003860:	5802541c 	.word	0x5802541c
 8003864:	58025430 	.word	0x58025430
 8003868:	58025444 	.word	0x58025444
 800386c:	58025458 	.word	0x58025458
 8003870:	5802546c 	.word	0x5802546c
 8003874:	58025480 	.word	0x58025480
 8003878:	58025494 	.word	0x58025494

0800387c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e226      	b.n	8003ce6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_DMA_Start_IT+0x2a>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e21f      	b.n	8003ce6 <HAL_DMA_Start_IT+0x46a>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	f040 820a 	bne.w	8003cd0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a68      	ldr	r2, [pc, #416]	@ (8003a70 <HAL_DMA_Start_IT+0x1f4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d04a      	beq.n	800396a <HAL_DMA_Start_IT+0xee>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a66      	ldr	r2, [pc, #408]	@ (8003a74 <HAL_DMA_Start_IT+0x1f8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d045      	beq.n	800396a <HAL_DMA_Start_IT+0xee>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a65      	ldr	r2, [pc, #404]	@ (8003a78 <HAL_DMA_Start_IT+0x1fc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d040      	beq.n	800396a <HAL_DMA_Start_IT+0xee>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a63      	ldr	r2, [pc, #396]	@ (8003a7c <HAL_DMA_Start_IT+0x200>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d03b      	beq.n	800396a <HAL_DMA_Start_IT+0xee>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a62      	ldr	r2, [pc, #392]	@ (8003a80 <HAL_DMA_Start_IT+0x204>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d036      	beq.n	800396a <HAL_DMA_Start_IT+0xee>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a60      	ldr	r2, [pc, #384]	@ (8003a84 <HAL_DMA_Start_IT+0x208>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d031      	beq.n	800396a <HAL_DMA_Start_IT+0xee>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a5f      	ldr	r2, [pc, #380]	@ (8003a88 <HAL_DMA_Start_IT+0x20c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d02c      	beq.n	800396a <HAL_DMA_Start_IT+0xee>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a5d      	ldr	r2, [pc, #372]	@ (8003a8c <HAL_DMA_Start_IT+0x210>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d027      	beq.n	800396a <HAL_DMA_Start_IT+0xee>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a5c      	ldr	r2, [pc, #368]	@ (8003a90 <HAL_DMA_Start_IT+0x214>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d022      	beq.n	800396a <HAL_DMA_Start_IT+0xee>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a5a      	ldr	r2, [pc, #360]	@ (8003a94 <HAL_DMA_Start_IT+0x218>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01d      	beq.n	800396a <HAL_DMA_Start_IT+0xee>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a59      	ldr	r2, [pc, #356]	@ (8003a98 <HAL_DMA_Start_IT+0x21c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d018      	beq.n	800396a <HAL_DMA_Start_IT+0xee>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a57      	ldr	r2, [pc, #348]	@ (8003a9c <HAL_DMA_Start_IT+0x220>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_DMA_Start_IT+0xee>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a56      	ldr	r2, [pc, #344]	@ (8003aa0 <HAL_DMA_Start_IT+0x224>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00e      	beq.n	800396a <HAL_DMA_Start_IT+0xee>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a54      	ldr	r2, [pc, #336]	@ (8003aa4 <HAL_DMA_Start_IT+0x228>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_DMA_Start_IT+0xee>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a53      	ldr	r2, [pc, #332]	@ (8003aa8 <HAL_DMA_Start_IT+0x22c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_DMA_Start_IT+0xee>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a51      	ldr	r2, [pc, #324]	@ (8003aac <HAL_DMA_Start_IT+0x230>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d108      	bne.n	800397c <HAL_DMA_Start_IT+0x100>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0201 	bic.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e007      	b.n	800398c <HAL_DMA_Start_IT+0x110>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f001 f906 	bl	8004ba4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a34      	ldr	r2, [pc, #208]	@ (8003a70 <HAL_DMA_Start_IT+0x1f4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d04a      	beq.n	8003a38 <HAL_DMA_Start_IT+0x1bc>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a33      	ldr	r2, [pc, #204]	@ (8003a74 <HAL_DMA_Start_IT+0x1f8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d045      	beq.n	8003a38 <HAL_DMA_Start_IT+0x1bc>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a31      	ldr	r2, [pc, #196]	@ (8003a78 <HAL_DMA_Start_IT+0x1fc>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d040      	beq.n	8003a38 <HAL_DMA_Start_IT+0x1bc>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a30      	ldr	r2, [pc, #192]	@ (8003a7c <HAL_DMA_Start_IT+0x200>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d03b      	beq.n	8003a38 <HAL_DMA_Start_IT+0x1bc>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003a80 <HAL_DMA_Start_IT+0x204>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d036      	beq.n	8003a38 <HAL_DMA_Start_IT+0x1bc>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003a84 <HAL_DMA_Start_IT+0x208>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d031      	beq.n	8003a38 <HAL_DMA_Start_IT+0x1bc>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a88 <HAL_DMA_Start_IT+0x20c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d02c      	beq.n	8003a38 <HAL_DMA_Start_IT+0x1bc>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a2a      	ldr	r2, [pc, #168]	@ (8003a8c <HAL_DMA_Start_IT+0x210>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d027      	beq.n	8003a38 <HAL_DMA_Start_IT+0x1bc>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a28      	ldr	r2, [pc, #160]	@ (8003a90 <HAL_DMA_Start_IT+0x214>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d022      	beq.n	8003a38 <HAL_DMA_Start_IT+0x1bc>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a27      	ldr	r2, [pc, #156]	@ (8003a94 <HAL_DMA_Start_IT+0x218>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d01d      	beq.n	8003a38 <HAL_DMA_Start_IT+0x1bc>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a25      	ldr	r2, [pc, #148]	@ (8003a98 <HAL_DMA_Start_IT+0x21c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d018      	beq.n	8003a38 <HAL_DMA_Start_IT+0x1bc>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a24      	ldr	r2, [pc, #144]	@ (8003a9c <HAL_DMA_Start_IT+0x220>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d013      	beq.n	8003a38 <HAL_DMA_Start_IT+0x1bc>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a22      	ldr	r2, [pc, #136]	@ (8003aa0 <HAL_DMA_Start_IT+0x224>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00e      	beq.n	8003a38 <HAL_DMA_Start_IT+0x1bc>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a21      	ldr	r2, [pc, #132]	@ (8003aa4 <HAL_DMA_Start_IT+0x228>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d009      	beq.n	8003a38 <HAL_DMA_Start_IT+0x1bc>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa8 <HAL_DMA_Start_IT+0x22c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d004      	beq.n	8003a38 <HAL_DMA_Start_IT+0x1bc>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1e      	ldr	r2, [pc, #120]	@ (8003aac <HAL_DMA_Start_IT+0x230>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d101      	bne.n	8003a3c <HAL_DMA_Start_IT+0x1c0>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_DMA_Start_IT+0x1c2>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d036      	beq.n	8003ab0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f023 021e 	bic.w	r2, r3, #30
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0216 	orr.w	r2, r2, #22
 8003a54:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d03e      	beq.n	8003adc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0208 	orr.w	r2, r2, #8
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e035      	b.n	8003adc <HAL_DMA_Start_IT+0x260>
 8003a70:	40020010 	.word	0x40020010
 8003a74:	40020028 	.word	0x40020028
 8003a78:	40020040 	.word	0x40020040
 8003a7c:	40020058 	.word	0x40020058
 8003a80:	40020070 	.word	0x40020070
 8003a84:	40020088 	.word	0x40020088
 8003a88:	400200a0 	.word	0x400200a0
 8003a8c:	400200b8 	.word	0x400200b8
 8003a90:	40020410 	.word	0x40020410
 8003a94:	40020428 	.word	0x40020428
 8003a98:	40020440 	.word	0x40020440
 8003a9c:	40020458 	.word	0x40020458
 8003aa0:	40020470 	.word	0x40020470
 8003aa4:	40020488 	.word	0x40020488
 8003aa8:	400204a0 	.word	0x400204a0
 8003aac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 020e 	bic.w	r2, r3, #14
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 020a 	orr.w	r2, r2, #10
 8003ac2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0204 	orr.w	r2, r2, #4
 8003ada:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a83      	ldr	r2, [pc, #524]	@ (8003cf0 <HAL_DMA_Start_IT+0x474>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d072      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a82      	ldr	r2, [pc, #520]	@ (8003cf4 <HAL_DMA_Start_IT+0x478>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d06d      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a80      	ldr	r2, [pc, #512]	@ (8003cf8 <HAL_DMA_Start_IT+0x47c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d068      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a7f      	ldr	r2, [pc, #508]	@ (8003cfc <HAL_DMA_Start_IT+0x480>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d063      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a7d      	ldr	r2, [pc, #500]	@ (8003d00 <HAL_DMA_Start_IT+0x484>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d05e      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a7c      	ldr	r2, [pc, #496]	@ (8003d04 <HAL_DMA_Start_IT+0x488>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d059      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a7a      	ldr	r2, [pc, #488]	@ (8003d08 <HAL_DMA_Start_IT+0x48c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d054      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a79      	ldr	r2, [pc, #484]	@ (8003d0c <HAL_DMA_Start_IT+0x490>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d04f      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a77      	ldr	r2, [pc, #476]	@ (8003d10 <HAL_DMA_Start_IT+0x494>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d04a      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a76      	ldr	r2, [pc, #472]	@ (8003d14 <HAL_DMA_Start_IT+0x498>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d045      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a74      	ldr	r2, [pc, #464]	@ (8003d18 <HAL_DMA_Start_IT+0x49c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d040      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a73      	ldr	r2, [pc, #460]	@ (8003d1c <HAL_DMA_Start_IT+0x4a0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d03b      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a71      	ldr	r2, [pc, #452]	@ (8003d20 <HAL_DMA_Start_IT+0x4a4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d036      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a70      	ldr	r2, [pc, #448]	@ (8003d24 <HAL_DMA_Start_IT+0x4a8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d031      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a6e      	ldr	r2, [pc, #440]	@ (8003d28 <HAL_DMA_Start_IT+0x4ac>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d02c      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a6d      	ldr	r2, [pc, #436]	@ (8003d2c <HAL_DMA_Start_IT+0x4b0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d027      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a6b      	ldr	r2, [pc, #428]	@ (8003d30 <HAL_DMA_Start_IT+0x4b4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d022      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a6a      	ldr	r2, [pc, #424]	@ (8003d34 <HAL_DMA_Start_IT+0x4b8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d01d      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a68      	ldr	r2, [pc, #416]	@ (8003d38 <HAL_DMA_Start_IT+0x4bc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d018      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a67      	ldr	r2, [pc, #412]	@ (8003d3c <HAL_DMA_Start_IT+0x4c0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a65      	ldr	r2, [pc, #404]	@ (8003d40 <HAL_DMA_Start_IT+0x4c4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00e      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a64      	ldr	r2, [pc, #400]	@ (8003d44 <HAL_DMA_Start_IT+0x4c8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d009      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a62      	ldr	r2, [pc, #392]	@ (8003d48 <HAL_DMA_Start_IT+0x4cc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <HAL_DMA_Start_IT+0x350>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a61      	ldr	r2, [pc, #388]	@ (8003d4c <HAL_DMA_Start_IT+0x4d0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_DMA_Start_IT+0x354>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_DMA_Start_IT+0x356>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d01a      	beq.n	8003c0c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bf2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d007      	beq.n	8003c0c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c0a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a37      	ldr	r2, [pc, #220]	@ (8003cf0 <HAL_DMA_Start_IT+0x474>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d04a      	beq.n	8003cac <HAL_DMA_Start_IT+0x430>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a36      	ldr	r2, [pc, #216]	@ (8003cf4 <HAL_DMA_Start_IT+0x478>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d045      	beq.n	8003cac <HAL_DMA_Start_IT+0x430>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a34      	ldr	r2, [pc, #208]	@ (8003cf8 <HAL_DMA_Start_IT+0x47c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d040      	beq.n	8003cac <HAL_DMA_Start_IT+0x430>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a33      	ldr	r2, [pc, #204]	@ (8003cfc <HAL_DMA_Start_IT+0x480>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d03b      	beq.n	8003cac <HAL_DMA_Start_IT+0x430>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a31      	ldr	r2, [pc, #196]	@ (8003d00 <HAL_DMA_Start_IT+0x484>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d036      	beq.n	8003cac <HAL_DMA_Start_IT+0x430>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a30      	ldr	r2, [pc, #192]	@ (8003d04 <HAL_DMA_Start_IT+0x488>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d031      	beq.n	8003cac <HAL_DMA_Start_IT+0x430>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003d08 <HAL_DMA_Start_IT+0x48c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d02c      	beq.n	8003cac <HAL_DMA_Start_IT+0x430>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2d      	ldr	r2, [pc, #180]	@ (8003d0c <HAL_DMA_Start_IT+0x490>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d027      	beq.n	8003cac <HAL_DMA_Start_IT+0x430>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a2b      	ldr	r2, [pc, #172]	@ (8003d10 <HAL_DMA_Start_IT+0x494>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d022      	beq.n	8003cac <HAL_DMA_Start_IT+0x430>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d14 <HAL_DMA_Start_IT+0x498>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d01d      	beq.n	8003cac <HAL_DMA_Start_IT+0x430>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a28      	ldr	r2, [pc, #160]	@ (8003d18 <HAL_DMA_Start_IT+0x49c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d018      	beq.n	8003cac <HAL_DMA_Start_IT+0x430>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a27      	ldr	r2, [pc, #156]	@ (8003d1c <HAL_DMA_Start_IT+0x4a0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d013      	beq.n	8003cac <HAL_DMA_Start_IT+0x430>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a25      	ldr	r2, [pc, #148]	@ (8003d20 <HAL_DMA_Start_IT+0x4a4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00e      	beq.n	8003cac <HAL_DMA_Start_IT+0x430>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a24      	ldr	r2, [pc, #144]	@ (8003d24 <HAL_DMA_Start_IT+0x4a8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d009      	beq.n	8003cac <HAL_DMA_Start_IT+0x430>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a22      	ldr	r2, [pc, #136]	@ (8003d28 <HAL_DMA_Start_IT+0x4ac>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_DMA_Start_IT+0x430>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a21      	ldr	r2, [pc, #132]	@ (8003d2c <HAL_DMA_Start_IT+0x4b0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d108      	bne.n	8003cbe <HAL_DMA_Start_IT+0x442>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e012      	b.n	8003ce4 <HAL_DMA_Start_IT+0x468>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0201 	orr.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	e009      	b.n	8003ce4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cd6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40020010 	.word	0x40020010
 8003cf4:	40020028 	.word	0x40020028
 8003cf8:	40020040 	.word	0x40020040
 8003cfc:	40020058 	.word	0x40020058
 8003d00:	40020070 	.word	0x40020070
 8003d04:	40020088 	.word	0x40020088
 8003d08:	400200a0 	.word	0x400200a0
 8003d0c:	400200b8 	.word	0x400200b8
 8003d10:	40020410 	.word	0x40020410
 8003d14:	40020428 	.word	0x40020428
 8003d18:	40020440 	.word	0x40020440
 8003d1c:	40020458 	.word	0x40020458
 8003d20:	40020470 	.word	0x40020470
 8003d24:	40020488 	.word	0x40020488
 8003d28:	400204a0 	.word	0x400204a0
 8003d2c:	400204b8 	.word	0x400204b8
 8003d30:	58025408 	.word	0x58025408
 8003d34:	5802541c 	.word	0x5802541c
 8003d38:	58025430 	.word	0x58025430
 8003d3c:	58025444 	.word	0x58025444
 8003d40:	58025458 	.word	0x58025458
 8003d44:	5802546c 	.word	0x5802546c
 8003d48:	58025480 	.word	0x58025480
 8003d4c:	58025494 	.word	0x58025494

08003d50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08a      	sub	sp, #40	@ 0x28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d5c:	4b67      	ldr	r3, [pc, #412]	@ (8003efc <HAL_DMA_IRQHandler+0x1ac>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a67      	ldr	r2, [pc, #412]	@ (8003f00 <HAL_DMA_IRQHandler+0x1b0>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	0a9b      	lsrs	r3, r3, #10
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d74:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a5f      	ldr	r2, [pc, #380]	@ (8003f04 <HAL_DMA_IRQHandler+0x1b4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d04a      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xd2>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a5d      	ldr	r2, [pc, #372]	@ (8003f08 <HAL_DMA_IRQHandler+0x1b8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d045      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xd2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a5c      	ldr	r2, [pc, #368]	@ (8003f0c <HAL_DMA_IRQHandler+0x1bc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d040      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xd2>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a5a      	ldr	r2, [pc, #360]	@ (8003f10 <HAL_DMA_IRQHandler+0x1c0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d03b      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xd2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a59      	ldr	r2, [pc, #356]	@ (8003f14 <HAL_DMA_IRQHandler+0x1c4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d036      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xd2>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a57      	ldr	r2, [pc, #348]	@ (8003f18 <HAL_DMA_IRQHandler+0x1c8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d031      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xd2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a56      	ldr	r2, [pc, #344]	@ (8003f1c <HAL_DMA_IRQHandler+0x1cc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d02c      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xd2>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a54      	ldr	r2, [pc, #336]	@ (8003f20 <HAL_DMA_IRQHandler+0x1d0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d027      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xd2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a53      	ldr	r2, [pc, #332]	@ (8003f24 <HAL_DMA_IRQHandler+0x1d4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d022      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xd2>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a51      	ldr	r2, [pc, #324]	@ (8003f28 <HAL_DMA_IRQHandler+0x1d8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01d      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xd2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a50      	ldr	r2, [pc, #320]	@ (8003f2c <HAL_DMA_IRQHandler+0x1dc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d018      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xd2>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a4e      	ldr	r2, [pc, #312]	@ (8003f30 <HAL_DMA_IRQHandler+0x1e0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xd2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a4d      	ldr	r2, [pc, #308]	@ (8003f34 <HAL_DMA_IRQHandler+0x1e4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00e      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xd2>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a4b      	ldr	r2, [pc, #300]	@ (8003f38 <HAL_DMA_IRQHandler+0x1e8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d009      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xd2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a4a      	ldr	r2, [pc, #296]	@ (8003f3c <HAL_DMA_IRQHandler+0x1ec>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d004      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xd2>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a48      	ldr	r2, [pc, #288]	@ (8003f40 <HAL_DMA_IRQHandler+0x1f0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d101      	bne.n	8003e26 <HAL_DMA_IRQHandler+0xd6>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <HAL_DMA_IRQHandler+0xd8>
 8003e26:	2300      	movs	r3, #0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 842b 	beq.w	8004684 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	2208      	movs	r2, #8
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80a2 	beq.w	8003f88 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2e      	ldr	r2, [pc, #184]	@ (8003f04 <HAL_DMA_IRQHandler+0x1b4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d04a      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x194>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2d      	ldr	r2, [pc, #180]	@ (8003f08 <HAL_DMA_IRQHandler+0x1b8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d045      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x194>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f0c <HAL_DMA_IRQHandler+0x1bc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d040      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x194>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2a      	ldr	r2, [pc, #168]	@ (8003f10 <HAL_DMA_IRQHandler+0x1c0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d03b      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x194>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a28      	ldr	r2, [pc, #160]	@ (8003f14 <HAL_DMA_IRQHandler+0x1c4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d036      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x194>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a27      	ldr	r2, [pc, #156]	@ (8003f18 <HAL_DMA_IRQHandler+0x1c8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d031      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x194>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a25      	ldr	r2, [pc, #148]	@ (8003f1c <HAL_DMA_IRQHandler+0x1cc>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d02c      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x194>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a24      	ldr	r2, [pc, #144]	@ (8003f20 <HAL_DMA_IRQHandler+0x1d0>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d027      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x194>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a22      	ldr	r2, [pc, #136]	@ (8003f24 <HAL_DMA_IRQHandler+0x1d4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d022      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x194>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a21      	ldr	r2, [pc, #132]	@ (8003f28 <HAL_DMA_IRQHandler+0x1d8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d01d      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x194>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1f      	ldr	r2, [pc, #124]	@ (8003f2c <HAL_DMA_IRQHandler+0x1dc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d018      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x194>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f30 <HAL_DMA_IRQHandler+0x1e0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d013      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x194>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f34 <HAL_DMA_IRQHandler+0x1e4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00e      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x194>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1b      	ldr	r2, [pc, #108]	@ (8003f38 <HAL_DMA_IRQHandler+0x1e8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d009      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x194>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a19      	ldr	r2, [pc, #100]	@ (8003f3c <HAL_DMA_IRQHandler+0x1ec>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d004      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x194>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a18      	ldr	r2, [pc, #96]	@ (8003f40 <HAL_DMA_IRQHandler+0x1f0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d12f      	bne.n	8003f44 <HAL_DMA_IRQHandler+0x1f4>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bf14      	ite	ne
 8003ef2:	2301      	movne	r3, #1
 8003ef4:	2300      	moveq	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	e02e      	b.n	8003f58 <HAL_DMA_IRQHandler+0x208>
 8003efa:	bf00      	nop
 8003efc:	24000000 	.word	0x24000000
 8003f00:	1b4e81b5 	.word	0x1b4e81b5
 8003f04:	40020010 	.word	0x40020010
 8003f08:	40020028 	.word	0x40020028
 8003f0c:	40020040 	.word	0x40020040
 8003f10:	40020058 	.word	0x40020058
 8003f14:	40020070 	.word	0x40020070
 8003f18:	40020088 	.word	0x40020088
 8003f1c:	400200a0 	.word	0x400200a0
 8003f20:	400200b8 	.word	0x400200b8
 8003f24:	40020410 	.word	0x40020410
 8003f28:	40020428 	.word	0x40020428
 8003f2c:	40020440 	.word	0x40020440
 8003f30:	40020458 	.word	0x40020458
 8003f34:	40020470 	.word	0x40020470
 8003f38:	40020488 	.word	0x40020488
 8003f3c:	400204a0 	.word	0x400204a0
 8003f40:	400204b8 	.word	0x400204b8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	bf14      	ite	ne
 8003f52:	2301      	movne	r3, #1
 8003f54:	2300      	moveq	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0204 	bic.w	r2, r2, #4
 8003f6a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	2208      	movs	r2, #8
 8003f76:	409a      	lsls	r2, r3
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f80:	f043 0201 	orr.w	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	fa22 f303 	lsr.w	r3, r2, r3
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d06e      	beq.n	800407c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a69      	ldr	r2, [pc, #420]	@ (8004148 <HAL_DMA_IRQHandler+0x3f8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d04a      	beq.n	800403e <HAL_DMA_IRQHandler+0x2ee>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a67      	ldr	r2, [pc, #412]	@ (800414c <HAL_DMA_IRQHandler+0x3fc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d045      	beq.n	800403e <HAL_DMA_IRQHandler+0x2ee>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a66      	ldr	r2, [pc, #408]	@ (8004150 <HAL_DMA_IRQHandler+0x400>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d040      	beq.n	800403e <HAL_DMA_IRQHandler+0x2ee>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a64      	ldr	r2, [pc, #400]	@ (8004154 <HAL_DMA_IRQHandler+0x404>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d03b      	beq.n	800403e <HAL_DMA_IRQHandler+0x2ee>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a63      	ldr	r2, [pc, #396]	@ (8004158 <HAL_DMA_IRQHandler+0x408>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d036      	beq.n	800403e <HAL_DMA_IRQHandler+0x2ee>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a61      	ldr	r2, [pc, #388]	@ (800415c <HAL_DMA_IRQHandler+0x40c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d031      	beq.n	800403e <HAL_DMA_IRQHandler+0x2ee>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a60      	ldr	r2, [pc, #384]	@ (8004160 <HAL_DMA_IRQHandler+0x410>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d02c      	beq.n	800403e <HAL_DMA_IRQHandler+0x2ee>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a5e      	ldr	r2, [pc, #376]	@ (8004164 <HAL_DMA_IRQHandler+0x414>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d027      	beq.n	800403e <HAL_DMA_IRQHandler+0x2ee>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a5d      	ldr	r2, [pc, #372]	@ (8004168 <HAL_DMA_IRQHandler+0x418>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d022      	beq.n	800403e <HAL_DMA_IRQHandler+0x2ee>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a5b      	ldr	r2, [pc, #364]	@ (800416c <HAL_DMA_IRQHandler+0x41c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d01d      	beq.n	800403e <HAL_DMA_IRQHandler+0x2ee>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a5a      	ldr	r2, [pc, #360]	@ (8004170 <HAL_DMA_IRQHandler+0x420>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d018      	beq.n	800403e <HAL_DMA_IRQHandler+0x2ee>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a58      	ldr	r2, [pc, #352]	@ (8004174 <HAL_DMA_IRQHandler+0x424>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <HAL_DMA_IRQHandler+0x2ee>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a57      	ldr	r2, [pc, #348]	@ (8004178 <HAL_DMA_IRQHandler+0x428>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00e      	beq.n	800403e <HAL_DMA_IRQHandler+0x2ee>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a55      	ldr	r2, [pc, #340]	@ (800417c <HAL_DMA_IRQHandler+0x42c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_DMA_IRQHandler+0x2ee>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a54      	ldr	r2, [pc, #336]	@ (8004180 <HAL_DMA_IRQHandler+0x430>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <HAL_DMA_IRQHandler+0x2ee>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a52      	ldr	r2, [pc, #328]	@ (8004184 <HAL_DMA_IRQHandler+0x434>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d10a      	bne.n	8004054 <HAL_DMA_IRQHandler+0x304>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e003      	b.n	800405c <HAL_DMA_IRQHandler+0x30c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2300      	movs	r3, #0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	2201      	movs	r2, #1
 800406a:	409a      	lsls	r2, r3
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004074:	f043 0202 	orr.w	r2, r3, #2
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	2204      	movs	r2, #4
 8004086:	409a      	lsls	r2, r3
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	4013      	ands	r3, r2
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 808f 	beq.w	80041b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a2c      	ldr	r2, [pc, #176]	@ (8004148 <HAL_DMA_IRQHandler+0x3f8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d04a      	beq.n	8004132 <HAL_DMA_IRQHandler+0x3e2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a2a      	ldr	r2, [pc, #168]	@ (800414c <HAL_DMA_IRQHandler+0x3fc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d045      	beq.n	8004132 <HAL_DMA_IRQHandler+0x3e2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a29      	ldr	r2, [pc, #164]	@ (8004150 <HAL_DMA_IRQHandler+0x400>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d040      	beq.n	8004132 <HAL_DMA_IRQHandler+0x3e2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a27      	ldr	r2, [pc, #156]	@ (8004154 <HAL_DMA_IRQHandler+0x404>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d03b      	beq.n	8004132 <HAL_DMA_IRQHandler+0x3e2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a26      	ldr	r2, [pc, #152]	@ (8004158 <HAL_DMA_IRQHandler+0x408>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d036      	beq.n	8004132 <HAL_DMA_IRQHandler+0x3e2>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a24      	ldr	r2, [pc, #144]	@ (800415c <HAL_DMA_IRQHandler+0x40c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d031      	beq.n	8004132 <HAL_DMA_IRQHandler+0x3e2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a23      	ldr	r2, [pc, #140]	@ (8004160 <HAL_DMA_IRQHandler+0x410>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d02c      	beq.n	8004132 <HAL_DMA_IRQHandler+0x3e2>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a21      	ldr	r2, [pc, #132]	@ (8004164 <HAL_DMA_IRQHandler+0x414>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d027      	beq.n	8004132 <HAL_DMA_IRQHandler+0x3e2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a20      	ldr	r2, [pc, #128]	@ (8004168 <HAL_DMA_IRQHandler+0x418>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d022      	beq.n	8004132 <HAL_DMA_IRQHandler+0x3e2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1e      	ldr	r2, [pc, #120]	@ (800416c <HAL_DMA_IRQHandler+0x41c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d01d      	beq.n	8004132 <HAL_DMA_IRQHandler+0x3e2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004170 <HAL_DMA_IRQHandler+0x420>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d018      	beq.n	8004132 <HAL_DMA_IRQHandler+0x3e2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1b      	ldr	r2, [pc, #108]	@ (8004174 <HAL_DMA_IRQHandler+0x424>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <HAL_DMA_IRQHandler+0x3e2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1a      	ldr	r2, [pc, #104]	@ (8004178 <HAL_DMA_IRQHandler+0x428>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00e      	beq.n	8004132 <HAL_DMA_IRQHandler+0x3e2>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a18      	ldr	r2, [pc, #96]	@ (800417c <HAL_DMA_IRQHandler+0x42c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d009      	beq.n	8004132 <HAL_DMA_IRQHandler+0x3e2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a17      	ldr	r2, [pc, #92]	@ (8004180 <HAL_DMA_IRQHandler+0x430>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d004      	beq.n	8004132 <HAL_DMA_IRQHandler+0x3e2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a15      	ldr	r2, [pc, #84]	@ (8004184 <HAL_DMA_IRQHandler+0x434>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d12a      	bne.n	8004188 <HAL_DMA_IRQHandler+0x438>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf14      	ite	ne
 8004140:	2301      	movne	r3, #1
 8004142:	2300      	moveq	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	e023      	b.n	8004190 <HAL_DMA_IRQHandler+0x440>
 8004148:	40020010 	.word	0x40020010
 800414c:	40020028 	.word	0x40020028
 8004150:	40020040 	.word	0x40020040
 8004154:	40020058 	.word	0x40020058
 8004158:	40020070 	.word	0x40020070
 800415c:	40020088 	.word	0x40020088
 8004160:	400200a0 	.word	0x400200a0
 8004164:	400200b8 	.word	0x400200b8
 8004168:	40020410 	.word	0x40020410
 800416c:	40020428 	.word	0x40020428
 8004170:	40020440 	.word	0x40020440
 8004174:	40020458 	.word	0x40020458
 8004178:	40020470 	.word	0x40020470
 800417c:	40020488 	.word	0x40020488
 8004180:	400204a0 	.word	0x400204a0
 8004184:	400204b8 	.word	0x400204b8
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2300      	movs	r3, #0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00d      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	2204      	movs	r2, #4
 800419e:	409a      	lsls	r2, r3
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a8:	f043 0204 	orr.w	r2, r3, #4
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	2210      	movs	r2, #16
 80041ba:	409a      	lsls	r2, r3
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80a6 	beq.w	8004312 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a85      	ldr	r2, [pc, #532]	@ (80043e0 <HAL_DMA_IRQHandler+0x690>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d04a      	beq.n	8004266 <HAL_DMA_IRQHandler+0x516>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a83      	ldr	r2, [pc, #524]	@ (80043e4 <HAL_DMA_IRQHandler+0x694>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d045      	beq.n	8004266 <HAL_DMA_IRQHandler+0x516>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a82      	ldr	r2, [pc, #520]	@ (80043e8 <HAL_DMA_IRQHandler+0x698>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d040      	beq.n	8004266 <HAL_DMA_IRQHandler+0x516>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a80      	ldr	r2, [pc, #512]	@ (80043ec <HAL_DMA_IRQHandler+0x69c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d03b      	beq.n	8004266 <HAL_DMA_IRQHandler+0x516>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a7f      	ldr	r2, [pc, #508]	@ (80043f0 <HAL_DMA_IRQHandler+0x6a0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d036      	beq.n	8004266 <HAL_DMA_IRQHandler+0x516>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a7d      	ldr	r2, [pc, #500]	@ (80043f4 <HAL_DMA_IRQHandler+0x6a4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d031      	beq.n	8004266 <HAL_DMA_IRQHandler+0x516>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a7c      	ldr	r2, [pc, #496]	@ (80043f8 <HAL_DMA_IRQHandler+0x6a8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d02c      	beq.n	8004266 <HAL_DMA_IRQHandler+0x516>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a7a      	ldr	r2, [pc, #488]	@ (80043fc <HAL_DMA_IRQHandler+0x6ac>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d027      	beq.n	8004266 <HAL_DMA_IRQHandler+0x516>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a79      	ldr	r2, [pc, #484]	@ (8004400 <HAL_DMA_IRQHandler+0x6b0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d022      	beq.n	8004266 <HAL_DMA_IRQHandler+0x516>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a77      	ldr	r2, [pc, #476]	@ (8004404 <HAL_DMA_IRQHandler+0x6b4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d01d      	beq.n	8004266 <HAL_DMA_IRQHandler+0x516>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a76      	ldr	r2, [pc, #472]	@ (8004408 <HAL_DMA_IRQHandler+0x6b8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d018      	beq.n	8004266 <HAL_DMA_IRQHandler+0x516>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a74      	ldr	r2, [pc, #464]	@ (800440c <HAL_DMA_IRQHandler+0x6bc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <HAL_DMA_IRQHandler+0x516>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a73      	ldr	r2, [pc, #460]	@ (8004410 <HAL_DMA_IRQHandler+0x6c0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00e      	beq.n	8004266 <HAL_DMA_IRQHandler+0x516>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a71      	ldr	r2, [pc, #452]	@ (8004414 <HAL_DMA_IRQHandler+0x6c4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d009      	beq.n	8004266 <HAL_DMA_IRQHandler+0x516>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a70      	ldr	r2, [pc, #448]	@ (8004418 <HAL_DMA_IRQHandler+0x6c8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d004      	beq.n	8004266 <HAL_DMA_IRQHandler+0x516>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a6e      	ldr	r2, [pc, #440]	@ (800441c <HAL_DMA_IRQHandler+0x6cc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d10a      	bne.n	800427c <HAL_DMA_IRQHandler+0x52c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	e009      	b.n	8004290 <HAL_DMA_IRQHandler+0x540>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2300      	moveq	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d03e      	beq.n	8004312 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004298:	f003 031f 	and.w	r3, r3, #31
 800429c:	2210      	movs	r2, #16
 800429e:	409a      	lsls	r2, r3
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d018      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d108      	bne.n	80042d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d024      	beq.n	8004312 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4798      	blx	r3
 80042d0:	e01f      	b.n	8004312 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d01b      	beq.n	8004312 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	4798      	blx	r3
 80042e2:	e016      	b.n	8004312 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d107      	bne.n	8004302 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0208 	bic.w	r2, r2, #8
 8004300:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	2220      	movs	r2, #32
 800431c:	409a      	lsls	r2, r3
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 8110 	beq.w	8004548 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a2c      	ldr	r2, [pc, #176]	@ (80043e0 <HAL_DMA_IRQHandler+0x690>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d04a      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x678>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a2b      	ldr	r2, [pc, #172]	@ (80043e4 <HAL_DMA_IRQHandler+0x694>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d045      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x678>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a29      	ldr	r2, [pc, #164]	@ (80043e8 <HAL_DMA_IRQHandler+0x698>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d040      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x678>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a28      	ldr	r2, [pc, #160]	@ (80043ec <HAL_DMA_IRQHandler+0x69c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d03b      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x678>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a26      	ldr	r2, [pc, #152]	@ (80043f0 <HAL_DMA_IRQHandler+0x6a0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d036      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x678>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a25      	ldr	r2, [pc, #148]	@ (80043f4 <HAL_DMA_IRQHandler+0x6a4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d031      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x678>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a23      	ldr	r2, [pc, #140]	@ (80043f8 <HAL_DMA_IRQHandler+0x6a8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d02c      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x678>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a22      	ldr	r2, [pc, #136]	@ (80043fc <HAL_DMA_IRQHandler+0x6ac>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d027      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x678>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a20      	ldr	r2, [pc, #128]	@ (8004400 <HAL_DMA_IRQHandler+0x6b0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d022      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x678>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1f      	ldr	r2, [pc, #124]	@ (8004404 <HAL_DMA_IRQHandler+0x6b4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d01d      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x678>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1d      	ldr	r2, [pc, #116]	@ (8004408 <HAL_DMA_IRQHandler+0x6b8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d018      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x678>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1c      	ldr	r2, [pc, #112]	@ (800440c <HAL_DMA_IRQHandler+0x6bc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d013      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x678>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004410 <HAL_DMA_IRQHandler+0x6c0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00e      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x678>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a19      	ldr	r2, [pc, #100]	@ (8004414 <HAL_DMA_IRQHandler+0x6c4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x678>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a17      	ldr	r2, [pc, #92]	@ (8004418 <HAL_DMA_IRQHandler+0x6c8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x678>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a16      	ldr	r2, [pc, #88]	@ (800441c <HAL_DMA_IRQHandler+0x6cc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d12b      	bne.n	8004420 <HAL_DMA_IRQHandler+0x6d0>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf14      	ite	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	2300      	moveq	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	e02a      	b.n	8004434 <HAL_DMA_IRQHandler+0x6e4>
 80043de:	bf00      	nop
 80043e0:	40020010 	.word	0x40020010
 80043e4:	40020028 	.word	0x40020028
 80043e8:	40020040 	.word	0x40020040
 80043ec:	40020058 	.word	0x40020058
 80043f0:	40020070 	.word	0x40020070
 80043f4:	40020088 	.word	0x40020088
 80043f8:	400200a0 	.word	0x400200a0
 80043fc:	400200b8 	.word	0x400200b8
 8004400:	40020410 	.word	0x40020410
 8004404:	40020428 	.word	0x40020428
 8004408:	40020440 	.word	0x40020440
 800440c:	40020458 	.word	0x40020458
 8004410:	40020470 	.word	0x40020470
 8004414:	40020488 	.word	0x40020488
 8004418:	400204a0 	.word	0x400204a0
 800441c:	400204b8 	.word	0x400204b8
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	bf14      	ite	ne
 800442e:	2301      	movne	r3, #1
 8004430:	2300      	moveq	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8087 	beq.w	8004548 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	2220      	movs	r2, #32
 8004444:	409a      	lsls	r2, r3
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b04      	cmp	r3, #4
 8004454:	d139      	bne.n	80044ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0216 	bic.w	r2, r2, #22
 8004464:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695a      	ldr	r2, [r3, #20]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004474:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <HAL_DMA_IRQHandler+0x736>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0208 	bic.w	r2, r2, #8
 8004494:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	223f      	movs	r2, #63	@ 0x3f
 80044a0:	409a      	lsls	r2, r3
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 834a 	beq.w	8004b54 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
          }
          return;
 80044c8:	e344      	b.n	8004b54 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d018      	beq.n	800450a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d108      	bne.n	80044f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d02c      	beq.n	8004548 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	4798      	blx	r3
 80044f6:	e027      	b.n	8004548 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d023      	beq.n	8004548 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	4798      	blx	r3
 8004508:	e01e      	b.n	8004548 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10f      	bne.n	8004538 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0210 	bic.w	r2, r2, #16
 8004526:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8306 	beq.w	8004b5e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 8088 	beq.w	8004670 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2204      	movs	r2, #4
 8004564:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a7a      	ldr	r2, [pc, #488]	@ (8004758 <HAL_DMA_IRQHandler+0xa08>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d04a      	beq.n	8004608 <HAL_DMA_IRQHandler+0x8b8>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a79      	ldr	r2, [pc, #484]	@ (800475c <HAL_DMA_IRQHandler+0xa0c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d045      	beq.n	8004608 <HAL_DMA_IRQHandler+0x8b8>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a77      	ldr	r2, [pc, #476]	@ (8004760 <HAL_DMA_IRQHandler+0xa10>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d040      	beq.n	8004608 <HAL_DMA_IRQHandler+0x8b8>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a76      	ldr	r2, [pc, #472]	@ (8004764 <HAL_DMA_IRQHandler+0xa14>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d03b      	beq.n	8004608 <HAL_DMA_IRQHandler+0x8b8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a74      	ldr	r2, [pc, #464]	@ (8004768 <HAL_DMA_IRQHandler+0xa18>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d036      	beq.n	8004608 <HAL_DMA_IRQHandler+0x8b8>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a73      	ldr	r2, [pc, #460]	@ (800476c <HAL_DMA_IRQHandler+0xa1c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d031      	beq.n	8004608 <HAL_DMA_IRQHandler+0x8b8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a71      	ldr	r2, [pc, #452]	@ (8004770 <HAL_DMA_IRQHandler+0xa20>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d02c      	beq.n	8004608 <HAL_DMA_IRQHandler+0x8b8>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a70      	ldr	r2, [pc, #448]	@ (8004774 <HAL_DMA_IRQHandler+0xa24>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d027      	beq.n	8004608 <HAL_DMA_IRQHandler+0x8b8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004778 <HAL_DMA_IRQHandler+0xa28>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d022      	beq.n	8004608 <HAL_DMA_IRQHandler+0x8b8>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a6d      	ldr	r2, [pc, #436]	@ (800477c <HAL_DMA_IRQHandler+0xa2c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d01d      	beq.n	8004608 <HAL_DMA_IRQHandler+0x8b8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a6b      	ldr	r2, [pc, #428]	@ (8004780 <HAL_DMA_IRQHandler+0xa30>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d018      	beq.n	8004608 <HAL_DMA_IRQHandler+0x8b8>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a6a      	ldr	r2, [pc, #424]	@ (8004784 <HAL_DMA_IRQHandler+0xa34>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d013      	beq.n	8004608 <HAL_DMA_IRQHandler+0x8b8>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a68      	ldr	r2, [pc, #416]	@ (8004788 <HAL_DMA_IRQHandler+0xa38>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00e      	beq.n	8004608 <HAL_DMA_IRQHandler+0x8b8>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a67      	ldr	r2, [pc, #412]	@ (800478c <HAL_DMA_IRQHandler+0xa3c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d009      	beq.n	8004608 <HAL_DMA_IRQHandler+0x8b8>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a65      	ldr	r2, [pc, #404]	@ (8004790 <HAL_DMA_IRQHandler+0xa40>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <HAL_DMA_IRQHandler+0x8b8>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a64      	ldr	r2, [pc, #400]	@ (8004794 <HAL_DMA_IRQHandler+0xa44>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d108      	bne.n	800461a <HAL_DMA_IRQHandler+0x8ca>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0201 	bic.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	e007      	b.n	800462a <HAL_DMA_IRQHandler+0x8da>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0201 	bic.w	r2, r2, #1
 8004628:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3301      	adds	r3, #1
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004632:	429a      	cmp	r2, r3
 8004634:	d307      	bcc.n	8004646 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f2      	bne.n	800462a <HAL_DMA_IRQHandler+0x8da>
 8004644:	e000      	b.n	8004648 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004646:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d004      	beq.n	8004660 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2203      	movs	r2, #3
 800465a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800465e:	e003      	b.n	8004668 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8272 	beq.w	8004b5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
 8004682:	e26c      	b.n	8004b5e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a43      	ldr	r2, [pc, #268]	@ (8004798 <HAL_DMA_IRQHandler+0xa48>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d022      	beq.n	80046d4 <HAL_DMA_IRQHandler+0x984>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a42      	ldr	r2, [pc, #264]	@ (800479c <HAL_DMA_IRQHandler+0xa4c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d01d      	beq.n	80046d4 <HAL_DMA_IRQHandler+0x984>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a40      	ldr	r2, [pc, #256]	@ (80047a0 <HAL_DMA_IRQHandler+0xa50>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d018      	beq.n	80046d4 <HAL_DMA_IRQHandler+0x984>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a3f      	ldr	r2, [pc, #252]	@ (80047a4 <HAL_DMA_IRQHandler+0xa54>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d013      	beq.n	80046d4 <HAL_DMA_IRQHandler+0x984>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a3d      	ldr	r2, [pc, #244]	@ (80047a8 <HAL_DMA_IRQHandler+0xa58>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00e      	beq.n	80046d4 <HAL_DMA_IRQHandler+0x984>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a3c      	ldr	r2, [pc, #240]	@ (80047ac <HAL_DMA_IRQHandler+0xa5c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d009      	beq.n	80046d4 <HAL_DMA_IRQHandler+0x984>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a3a      	ldr	r2, [pc, #232]	@ (80047b0 <HAL_DMA_IRQHandler+0xa60>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d004      	beq.n	80046d4 <HAL_DMA_IRQHandler+0x984>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a39      	ldr	r2, [pc, #228]	@ (80047b4 <HAL_DMA_IRQHandler+0xa64>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d101      	bne.n	80046d8 <HAL_DMA_IRQHandler+0x988>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <HAL_DMA_IRQHandler+0x98a>
 80046d8:	2300      	movs	r3, #0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 823f 	beq.w	8004b5e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	2204      	movs	r2, #4
 80046f2:	409a      	lsls	r2, r3
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80cd 	beq.w	8004898 <HAL_DMA_IRQHandler+0xb48>
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80c7 	beq.w	8004898 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470e:	f003 031f 	and.w	r3, r3, #31
 8004712:	2204      	movs	r2, #4
 8004714:	409a      	lsls	r2, r3
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d049      	beq.n	80047b8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8210 	beq.w	8004b58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004740:	e20a      	b.n	8004b58 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8206 	beq.w	8004b58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004754:	e200      	b.n	8004b58 <HAL_DMA_IRQHandler+0xe08>
 8004756:	bf00      	nop
 8004758:	40020010 	.word	0x40020010
 800475c:	40020028 	.word	0x40020028
 8004760:	40020040 	.word	0x40020040
 8004764:	40020058 	.word	0x40020058
 8004768:	40020070 	.word	0x40020070
 800476c:	40020088 	.word	0x40020088
 8004770:	400200a0 	.word	0x400200a0
 8004774:	400200b8 	.word	0x400200b8
 8004778:	40020410 	.word	0x40020410
 800477c:	40020428 	.word	0x40020428
 8004780:	40020440 	.word	0x40020440
 8004784:	40020458 	.word	0x40020458
 8004788:	40020470 	.word	0x40020470
 800478c:	40020488 	.word	0x40020488
 8004790:	400204a0 	.word	0x400204a0
 8004794:	400204b8 	.word	0x400204b8
 8004798:	58025408 	.word	0x58025408
 800479c:	5802541c 	.word	0x5802541c
 80047a0:	58025430 	.word	0x58025430
 80047a4:	58025444 	.word	0x58025444
 80047a8:	58025458 	.word	0x58025458
 80047ac:	5802546c 	.word	0x5802546c
 80047b0:	58025480 	.word	0x58025480
 80047b4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d160      	bne.n	8004884 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a7f      	ldr	r2, [pc, #508]	@ (80049c4 <HAL_DMA_IRQHandler+0xc74>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d04a      	beq.n	8004862 <HAL_DMA_IRQHandler+0xb12>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a7d      	ldr	r2, [pc, #500]	@ (80049c8 <HAL_DMA_IRQHandler+0xc78>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d045      	beq.n	8004862 <HAL_DMA_IRQHandler+0xb12>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a7c      	ldr	r2, [pc, #496]	@ (80049cc <HAL_DMA_IRQHandler+0xc7c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d040      	beq.n	8004862 <HAL_DMA_IRQHandler+0xb12>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a7a      	ldr	r2, [pc, #488]	@ (80049d0 <HAL_DMA_IRQHandler+0xc80>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d03b      	beq.n	8004862 <HAL_DMA_IRQHandler+0xb12>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a79      	ldr	r2, [pc, #484]	@ (80049d4 <HAL_DMA_IRQHandler+0xc84>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d036      	beq.n	8004862 <HAL_DMA_IRQHandler+0xb12>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a77      	ldr	r2, [pc, #476]	@ (80049d8 <HAL_DMA_IRQHandler+0xc88>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d031      	beq.n	8004862 <HAL_DMA_IRQHandler+0xb12>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a76      	ldr	r2, [pc, #472]	@ (80049dc <HAL_DMA_IRQHandler+0xc8c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d02c      	beq.n	8004862 <HAL_DMA_IRQHandler+0xb12>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a74      	ldr	r2, [pc, #464]	@ (80049e0 <HAL_DMA_IRQHandler+0xc90>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d027      	beq.n	8004862 <HAL_DMA_IRQHandler+0xb12>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a73      	ldr	r2, [pc, #460]	@ (80049e4 <HAL_DMA_IRQHandler+0xc94>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d022      	beq.n	8004862 <HAL_DMA_IRQHandler+0xb12>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a71      	ldr	r2, [pc, #452]	@ (80049e8 <HAL_DMA_IRQHandler+0xc98>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d01d      	beq.n	8004862 <HAL_DMA_IRQHandler+0xb12>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a70      	ldr	r2, [pc, #448]	@ (80049ec <HAL_DMA_IRQHandler+0xc9c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d018      	beq.n	8004862 <HAL_DMA_IRQHandler+0xb12>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a6e      	ldr	r2, [pc, #440]	@ (80049f0 <HAL_DMA_IRQHandler+0xca0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d013      	beq.n	8004862 <HAL_DMA_IRQHandler+0xb12>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a6d      	ldr	r2, [pc, #436]	@ (80049f4 <HAL_DMA_IRQHandler+0xca4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00e      	beq.n	8004862 <HAL_DMA_IRQHandler+0xb12>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a6b      	ldr	r2, [pc, #428]	@ (80049f8 <HAL_DMA_IRQHandler+0xca8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d009      	beq.n	8004862 <HAL_DMA_IRQHandler+0xb12>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a6a      	ldr	r2, [pc, #424]	@ (80049fc <HAL_DMA_IRQHandler+0xcac>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d004      	beq.n	8004862 <HAL_DMA_IRQHandler+0xb12>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a68      	ldr	r2, [pc, #416]	@ (8004a00 <HAL_DMA_IRQHandler+0xcb0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d108      	bne.n	8004874 <HAL_DMA_IRQHandler+0xb24>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0208 	bic.w	r2, r2, #8
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e007      	b.n	8004884 <HAL_DMA_IRQHandler+0xb34>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0204 	bic.w	r2, r2, #4
 8004882:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 8165 	beq.w	8004b58 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004896:	e15f      	b.n	8004b58 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	2202      	movs	r2, #2
 80048a2:	409a      	lsls	r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 80c5 	beq.w	8004a38 <HAL_DMA_IRQHandler+0xce8>
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 80bf 	beq.w	8004a38 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	2202      	movs	r2, #2
 80048c4:	409a      	lsls	r2, r3
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d018      	beq.n	8004906 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d109      	bne.n	80048f2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 813a 	beq.w	8004b5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048f0:	e134      	b.n	8004b5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 8130 	beq.w	8004b5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004904:	e12a      	b.n	8004b5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	f040 8089 	bne.w	8004a24 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2b      	ldr	r2, [pc, #172]	@ (80049c4 <HAL_DMA_IRQHandler+0xc74>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d04a      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xc62>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a29      	ldr	r2, [pc, #164]	@ (80049c8 <HAL_DMA_IRQHandler+0xc78>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d045      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xc62>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a28      	ldr	r2, [pc, #160]	@ (80049cc <HAL_DMA_IRQHandler+0xc7c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d040      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xc62>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a26      	ldr	r2, [pc, #152]	@ (80049d0 <HAL_DMA_IRQHandler+0xc80>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d03b      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xc62>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a25      	ldr	r2, [pc, #148]	@ (80049d4 <HAL_DMA_IRQHandler+0xc84>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d036      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xc62>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a23      	ldr	r2, [pc, #140]	@ (80049d8 <HAL_DMA_IRQHandler+0xc88>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d031      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xc62>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a22      	ldr	r2, [pc, #136]	@ (80049dc <HAL_DMA_IRQHandler+0xc8c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d02c      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xc62>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a20      	ldr	r2, [pc, #128]	@ (80049e0 <HAL_DMA_IRQHandler+0xc90>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d027      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xc62>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1f      	ldr	r2, [pc, #124]	@ (80049e4 <HAL_DMA_IRQHandler+0xc94>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d022      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xc62>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1d      	ldr	r2, [pc, #116]	@ (80049e8 <HAL_DMA_IRQHandler+0xc98>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d01d      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xc62>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1c      	ldr	r2, [pc, #112]	@ (80049ec <HAL_DMA_IRQHandler+0xc9c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d018      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xc62>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1a      	ldr	r2, [pc, #104]	@ (80049f0 <HAL_DMA_IRQHandler+0xca0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d013      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xc62>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a19      	ldr	r2, [pc, #100]	@ (80049f4 <HAL_DMA_IRQHandler+0xca4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00e      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xc62>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a17      	ldr	r2, [pc, #92]	@ (80049f8 <HAL_DMA_IRQHandler+0xca8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d009      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xc62>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a16      	ldr	r2, [pc, #88]	@ (80049fc <HAL_DMA_IRQHandler+0xcac>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d004      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xc62>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a14      	ldr	r2, [pc, #80]	@ (8004a00 <HAL_DMA_IRQHandler+0xcb0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d128      	bne.n	8004a04 <HAL_DMA_IRQHandler+0xcb4>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0214 	bic.w	r2, r2, #20
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e027      	b.n	8004a14 <HAL_DMA_IRQHandler+0xcc4>
 80049c4:	40020010 	.word	0x40020010
 80049c8:	40020028 	.word	0x40020028
 80049cc:	40020040 	.word	0x40020040
 80049d0:	40020058 	.word	0x40020058
 80049d4:	40020070 	.word	0x40020070
 80049d8:	40020088 	.word	0x40020088
 80049dc:	400200a0 	.word	0x400200a0
 80049e0:	400200b8 	.word	0x400200b8
 80049e4:	40020410 	.word	0x40020410
 80049e8:	40020428 	.word	0x40020428
 80049ec:	40020440 	.word	0x40020440
 80049f0:	40020458 	.word	0x40020458
 80049f4:	40020470 	.word	0x40020470
 80049f8:	40020488 	.word	0x40020488
 80049fc:	400204a0 	.word	0x400204a0
 8004a00:	400204b8 	.word	0x400204b8
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 020a 	bic.w	r2, r2, #10
 8004a12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8097 	beq.w	8004b5c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a36:	e091      	b.n	8004b5c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3c:	f003 031f 	and.w	r3, r3, #31
 8004a40:	2208      	movs	r2, #8
 8004a42:	409a      	lsls	r2, r3
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	4013      	ands	r3, r2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 8088 	beq.w	8004b5e <HAL_DMA_IRQHandler+0xe0e>
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8082 	beq.w	8004b5e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a41      	ldr	r2, [pc, #260]	@ (8004b64 <HAL_DMA_IRQHandler+0xe14>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d04a      	beq.n	8004afa <HAL_DMA_IRQHandler+0xdaa>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a3f      	ldr	r2, [pc, #252]	@ (8004b68 <HAL_DMA_IRQHandler+0xe18>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d045      	beq.n	8004afa <HAL_DMA_IRQHandler+0xdaa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a3e      	ldr	r2, [pc, #248]	@ (8004b6c <HAL_DMA_IRQHandler+0xe1c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d040      	beq.n	8004afa <HAL_DMA_IRQHandler+0xdaa>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b70 <HAL_DMA_IRQHandler+0xe20>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d03b      	beq.n	8004afa <HAL_DMA_IRQHandler+0xdaa>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a3b      	ldr	r2, [pc, #236]	@ (8004b74 <HAL_DMA_IRQHandler+0xe24>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d036      	beq.n	8004afa <HAL_DMA_IRQHandler+0xdaa>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a39      	ldr	r2, [pc, #228]	@ (8004b78 <HAL_DMA_IRQHandler+0xe28>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d031      	beq.n	8004afa <HAL_DMA_IRQHandler+0xdaa>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a38      	ldr	r2, [pc, #224]	@ (8004b7c <HAL_DMA_IRQHandler+0xe2c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d02c      	beq.n	8004afa <HAL_DMA_IRQHandler+0xdaa>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a36      	ldr	r2, [pc, #216]	@ (8004b80 <HAL_DMA_IRQHandler+0xe30>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d027      	beq.n	8004afa <HAL_DMA_IRQHandler+0xdaa>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a35      	ldr	r2, [pc, #212]	@ (8004b84 <HAL_DMA_IRQHandler+0xe34>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d022      	beq.n	8004afa <HAL_DMA_IRQHandler+0xdaa>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a33      	ldr	r2, [pc, #204]	@ (8004b88 <HAL_DMA_IRQHandler+0xe38>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d01d      	beq.n	8004afa <HAL_DMA_IRQHandler+0xdaa>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a32      	ldr	r2, [pc, #200]	@ (8004b8c <HAL_DMA_IRQHandler+0xe3c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d018      	beq.n	8004afa <HAL_DMA_IRQHandler+0xdaa>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a30      	ldr	r2, [pc, #192]	@ (8004b90 <HAL_DMA_IRQHandler+0xe40>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d013      	beq.n	8004afa <HAL_DMA_IRQHandler+0xdaa>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8004b94 <HAL_DMA_IRQHandler+0xe44>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00e      	beq.n	8004afa <HAL_DMA_IRQHandler+0xdaa>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b98 <HAL_DMA_IRQHandler+0xe48>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d009      	beq.n	8004afa <HAL_DMA_IRQHandler+0xdaa>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a2c      	ldr	r2, [pc, #176]	@ (8004b9c <HAL_DMA_IRQHandler+0xe4c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d004      	beq.n	8004afa <HAL_DMA_IRQHandler+0xdaa>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a2a      	ldr	r2, [pc, #168]	@ (8004ba0 <HAL_DMA_IRQHandler+0xe50>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d108      	bne.n	8004b0c <HAL_DMA_IRQHandler+0xdbc>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 021c 	bic.w	r2, r2, #28
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e007      	b.n	8004b1c <HAL_DMA_IRQHandler+0xdcc>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 020e 	bic.w	r2, r2, #14
 8004b1a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	2201      	movs	r2, #1
 8004b26:	409a      	lsls	r2, r3
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	4798      	blx	r3
 8004b52:	e004      	b.n	8004b5e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004b54:	bf00      	nop
 8004b56:	e002      	b.n	8004b5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b58:	bf00      	nop
 8004b5a:	e000      	b.n	8004b5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b5c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b5e:	3728      	adds	r7, #40	@ 0x28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40020010 	.word	0x40020010
 8004b68:	40020028 	.word	0x40020028
 8004b6c:	40020040 	.word	0x40020040
 8004b70:	40020058 	.word	0x40020058
 8004b74:	40020070 	.word	0x40020070
 8004b78:	40020088 	.word	0x40020088
 8004b7c:	400200a0 	.word	0x400200a0
 8004b80:	400200b8 	.word	0x400200b8
 8004b84:	40020410 	.word	0x40020410
 8004b88:	40020428 	.word	0x40020428
 8004b8c:	40020440 	.word	0x40020440
 8004b90:	40020458 	.word	0x40020458
 8004b94:	40020470 	.word	0x40020470
 8004b98:	40020488 	.word	0x40020488
 8004b9c:	400204a0 	.word	0x400204a0
 8004ba0:	400204b8 	.word	0x400204b8

08004ba4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bbc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a7f      	ldr	r2, [pc, #508]	@ (8004dc0 <DMA_SetConfig+0x21c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d072      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a7d      	ldr	r2, [pc, #500]	@ (8004dc4 <DMA_SetConfig+0x220>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d06d      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a7c      	ldr	r2, [pc, #496]	@ (8004dc8 <DMA_SetConfig+0x224>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d068      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a7a      	ldr	r2, [pc, #488]	@ (8004dcc <DMA_SetConfig+0x228>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d063      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a79      	ldr	r2, [pc, #484]	@ (8004dd0 <DMA_SetConfig+0x22c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d05e      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a77      	ldr	r2, [pc, #476]	@ (8004dd4 <DMA_SetConfig+0x230>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d059      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a76      	ldr	r2, [pc, #472]	@ (8004dd8 <DMA_SetConfig+0x234>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d054      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a74      	ldr	r2, [pc, #464]	@ (8004ddc <DMA_SetConfig+0x238>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d04f      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a73      	ldr	r2, [pc, #460]	@ (8004de0 <DMA_SetConfig+0x23c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d04a      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a71      	ldr	r2, [pc, #452]	@ (8004de4 <DMA_SetConfig+0x240>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d045      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a70      	ldr	r2, [pc, #448]	@ (8004de8 <DMA_SetConfig+0x244>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d040      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a6e      	ldr	r2, [pc, #440]	@ (8004dec <DMA_SetConfig+0x248>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d03b      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a6d      	ldr	r2, [pc, #436]	@ (8004df0 <DMA_SetConfig+0x24c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d036      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a6b      	ldr	r2, [pc, #428]	@ (8004df4 <DMA_SetConfig+0x250>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d031      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a6a      	ldr	r2, [pc, #424]	@ (8004df8 <DMA_SetConfig+0x254>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d02c      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a68      	ldr	r2, [pc, #416]	@ (8004dfc <DMA_SetConfig+0x258>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d027      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a67      	ldr	r2, [pc, #412]	@ (8004e00 <DMA_SetConfig+0x25c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d022      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a65      	ldr	r2, [pc, #404]	@ (8004e04 <DMA_SetConfig+0x260>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01d      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a64      	ldr	r2, [pc, #400]	@ (8004e08 <DMA_SetConfig+0x264>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d018      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a62      	ldr	r2, [pc, #392]	@ (8004e0c <DMA_SetConfig+0x268>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a61      	ldr	r2, [pc, #388]	@ (8004e10 <DMA_SetConfig+0x26c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00e      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a5f      	ldr	r2, [pc, #380]	@ (8004e14 <DMA_SetConfig+0x270>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d009      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a5e      	ldr	r2, [pc, #376]	@ (8004e18 <DMA_SetConfig+0x274>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d004      	beq.n	8004cae <DMA_SetConfig+0x10a>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a5c      	ldr	r2, [pc, #368]	@ (8004e1c <DMA_SetConfig+0x278>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d101      	bne.n	8004cb2 <DMA_SetConfig+0x10e>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <DMA_SetConfig+0x110>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00d      	beq.n	8004cd4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004cc0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d004      	beq.n	8004cd4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004cd2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a39      	ldr	r2, [pc, #228]	@ (8004dc0 <DMA_SetConfig+0x21c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d04a      	beq.n	8004d74 <DMA_SetConfig+0x1d0>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a38      	ldr	r2, [pc, #224]	@ (8004dc4 <DMA_SetConfig+0x220>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d045      	beq.n	8004d74 <DMA_SetConfig+0x1d0>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a36      	ldr	r2, [pc, #216]	@ (8004dc8 <DMA_SetConfig+0x224>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d040      	beq.n	8004d74 <DMA_SetConfig+0x1d0>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a35      	ldr	r2, [pc, #212]	@ (8004dcc <DMA_SetConfig+0x228>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d03b      	beq.n	8004d74 <DMA_SetConfig+0x1d0>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a33      	ldr	r2, [pc, #204]	@ (8004dd0 <DMA_SetConfig+0x22c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d036      	beq.n	8004d74 <DMA_SetConfig+0x1d0>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a32      	ldr	r2, [pc, #200]	@ (8004dd4 <DMA_SetConfig+0x230>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d031      	beq.n	8004d74 <DMA_SetConfig+0x1d0>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a30      	ldr	r2, [pc, #192]	@ (8004dd8 <DMA_SetConfig+0x234>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d02c      	beq.n	8004d74 <DMA_SetConfig+0x1d0>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a2f      	ldr	r2, [pc, #188]	@ (8004ddc <DMA_SetConfig+0x238>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d027      	beq.n	8004d74 <DMA_SetConfig+0x1d0>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a2d      	ldr	r2, [pc, #180]	@ (8004de0 <DMA_SetConfig+0x23c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d022      	beq.n	8004d74 <DMA_SetConfig+0x1d0>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a2c      	ldr	r2, [pc, #176]	@ (8004de4 <DMA_SetConfig+0x240>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d01d      	beq.n	8004d74 <DMA_SetConfig+0x1d0>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004de8 <DMA_SetConfig+0x244>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d018      	beq.n	8004d74 <DMA_SetConfig+0x1d0>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a29      	ldr	r2, [pc, #164]	@ (8004dec <DMA_SetConfig+0x248>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d013      	beq.n	8004d74 <DMA_SetConfig+0x1d0>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a27      	ldr	r2, [pc, #156]	@ (8004df0 <DMA_SetConfig+0x24c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00e      	beq.n	8004d74 <DMA_SetConfig+0x1d0>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a26      	ldr	r2, [pc, #152]	@ (8004df4 <DMA_SetConfig+0x250>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <DMA_SetConfig+0x1d0>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a24      	ldr	r2, [pc, #144]	@ (8004df8 <DMA_SetConfig+0x254>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <DMA_SetConfig+0x1d0>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a23      	ldr	r2, [pc, #140]	@ (8004dfc <DMA_SetConfig+0x258>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d101      	bne.n	8004d78 <DMA_SetConfig+0x1d4>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <DMA_SetConfig+0x1d6>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d059      	beq.n	8004e32 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d82:	f003 031f 	and.w	r3, r3, #31
 8004d86:	223f      	movs	r2, #63	@ 0x3f
 8004d88:	409a      	lsls	r2, r3
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d9c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b40      	cmp	r3, #64	@ 0x40
 8004dac:	d138      	bne.n	8004e20 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004dbe:	e086      	b.n	8004ece <DMA_SetConfig+0x32a>
 8004dc0:	40020010 	.word	0x40020010
 8004dc4:	40020028 	.word	0x40020028
 8004dc8:	40020040 	.word	0x40020040
 8004dcc:	40020058 	.word	0x40020058
 8004dd0:	40020070 	.word	0x40020070
 8004dd4:	40020088 	.word	0x40020088
 8004dd8:	400200a0 	.word	0x400200a0
 8004ddc:	400200b8 	.word	0x400200b8
 8004de0:	40020410 	.word	0x40020410
 8004de4:	40020428 	.word	0x40020428
 8004de8:	40020440 	.word	0x40020440
 8004dec:	40020458 	.word	0x40020458
 8004df0:	40020470 	.word	0x40020470
 8004df4:	40020488 	.word	0x40020488
 8004df8:	400204a0 	.word	0x400204a0
 8004dfc:	400204b8 	.word	0x400204b8
 8004e00:	58025408 	.word	0x58025408
 8004e04:	5802541c 	.word	0x5802541c
 8004e08:	58025430 	.word	0x58025430
 8004e0c:	58025444 	.word	0x58025444
 8004e10:	58025458 	.word	0x58025458
 8004e14:	5802546c 	.word	0x5802546c
 8004e18:	58025480 	.word	0x58025480
 8004e1c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	60da      	str	r2, [r3, #12]
}
 8004e30:	e04d      	b.n	8004ece <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a29      	ldr	r2, [pc, #164]	@ (8004edc <DMA_SetConfig+0x338>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d022      	beq.n	8004e82 <DMA_SetConfig+0x2de>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a27      	ldr	r2, [pc, #156]	@ (8004ee0 <DMA_SetConfig+0x33c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d01d      	beq.n	8004e82 <DMA_SetConfig+0x2de>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a26      	ldr	r2, [pc, #152]	@ (8004ee4 <DMA_SetConfig+0x340>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d018      	beq.n	8004e82 <DMA_SetConfig+0x2de>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a24      	ldr	r2, [pc, #144]	@ (8004ee8 <DMA_SetConfig+0x344>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <DMA_SetConfig+0x2de>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a23      	ldr	r2, [pc, #140]	@ (8004eec <DMA_SetConfig+0x348>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00e      	beq.n	8004e82 <DMA_SetConfig+0x2de>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a21      	ldr	r2, [pc, #132]	@ (8004ef0 <DMA_SetConfig+0x34c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d009      	beq.n	8004e82 <DMA_SetConfig+0x2de>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a20      	ldr	r2, [pc, #128]	@ (8004ef4 <DMA_SetConfig+0x350>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <DMA_SetConfig+0x2de>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ef8 <DMA_SetConfig+0x354>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d101      	bne.n	8004e86 <DMA_SetConfig+0x2e2>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <DMA_SetConfig+0x2e4>
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d020      	beq.n	8004ece <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	2201      	movs	r2, #1
 8004e96:	409a      	lsls	r2, r3
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b40      	cmp	r3, #64	@ 0x40
 8004eaa:	d108      	bne.n	8004ebe <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	60da      	str	r2, [r3, #12]
}
 8004ebc:	e007      	b.n	8004ece <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	60da      	str	r2, [r3, #12]
}
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	58025408 	.word	0x58025408
 8004ee0:	5802541c 	.word	0x5802541c
 8004ee4:	58025430 	.word	0x58025430
 8004ee8:	58025444 	.word	0x58025444
 8004eec:	58025458 	.word	0x58025458
 8004ef0:	5802546c 	.word	0x5802546c
 8004ef4:	58025480 	.word	0x58025480
 8004ef8:	58025494 	.word	0x58025494

08004efc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a42      	ldr	r2, [pc, #264]	@ (8005014 <DMA_CalcBaseAndBitshift+0x118>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d04a      	beq.n	8004fa4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a41      	ldr	r2, [pc, #260]	@ (8005018 <DMA_CalcBaseAndBitshift+0x11c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d045      	beq.n	8004fa4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a3f      	ldr	r2, [pc, #252]	@ (800501c <DMA_CalcBaseAndBitshift+0x120>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d040      	beq.n	8004fa4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a3e      	ldr	r2, [pc, #248]	@ (8005020 <DMA_CalcBaseAndBitshift+0x124>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d03b      	beq.n	8004fa4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a3c      	ldr	r2, [pc, #240]	@ (8005024 <DMA_CalcBaseAndBitshift+0x128>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d036      	beq.n	8004fa4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a3b      	ldr	r2, [pc, #236]	@ (8005028 <DMA_CalcBaseAndBitshift+0x12c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d031      	beq.n	8004fa4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a39      	ldr	r2, [pc, #228]	@ (800502c <DMA_CalcBaseAndBitshift+0x130>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d02c      	beq.n	8004fa4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a38      	ldr	r2, [pc, #224]	@ (8005030 <DMA_CalcBaseAndBitshift+0x134>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d027      	beq.n	8004fa4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a36      	ldr	r2, [pc, #216]	@ (8005034 <DMA_CalcBaseAndBitshift+0x138>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d022      	beq.n	8004fa4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a35      	ldr	r2, [pc, #212]	@ (8005038 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d01d      	beq.n	8004fa4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a33      	ldr	r2, [pc, #204]	@ (800503c <DMA_CalcBaseAndBitshift+0x140>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d018      	beq.n	8004fa4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a32      	ldr	r2, [pc, #200]	@ (8005040 <DMA_CalcBaseAndBitshift+0x144>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d013      	beq.n	8004fa4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a30      	ldr	r2, [pc, #192]	@ (8005044 <DMA_CalcBaseAndBitshift+0x148>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00e      	beq.n	8004fa4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8005048 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d009      	beq.n	8004fa4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2d      	ldr	r2, [pc, #180]	@ (800504c <DMA_CalcBaseAndBitshift+0x150>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2c      	ldr	r2, [pc, #176]	@ (8005050 <DMA_CalcBaseAndBitshift+0x154>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d101      	bne.n	8004fa8 <DMA_CalcBaseAndBitshift+0xac>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <DMA_CalcBaseAndBitshift+0xae>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d024      	beq.n	8004ff8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	3b10      	subs	r3, #16
 8004fb6:	4a27      	ldr	r2, [pc, #156]	@ (8005054 <DMA_CalcBaseAndBitshift+0x158>)
 8004fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbc:	091b      	lsrs	r3, r3, #4
 8004fbe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	4a24      	ldr	r2, [pc, #144]	@ (8005058 <DMA_CalcBaseAndBitshift+0x15c>)
 8004fc8:	5cd3      	ldrb	r3, [r2, r3]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d908      	bls.n	8004fe8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800505c <DMA_CalcBaseAndBitshift+0x160>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	1d1a      	adds	r2, r3, #4
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fe6:	e00d      	b.n	8005004 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	4b1b      	ldr	r3, [pc, #108]	@ (800505c <DMA_CalcBaseAndBitshift+0x160>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ff6:	e005      	b.n	8005004 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40020010 	.word	0x40020010
 8005018:	40020028 	.word	0x40020028
 800501c:	40020040 	.word	0x40020040
 8005020:	40020058 	.word	0x40020058
 8005024:	40020070 	.word	0x40020070
 8005028:	40020088 	.word	0x40020088
 800502c:	400200a0 	.word	0x400200a0
 8005030:	400200b8 	.word	0x400200b8
 8005034:	40020410 	.word	0x40020410
 8005038:	40020428 	.word	0x40020428
 800503c:	40020440 	.word	0x40020440
 8005040:	40020458 	.word	0x40020458
 8005044:	40020470 	.word	0x40020470
 8005048:	40020488 	.word	0x40020488
 800504c:	400204a0 	.word	0x400204a0
 8005050:	400204b8 	.word	0x400204b8
 8005054:	aaaaaaab 	.word	0xaaaaaaab
 8005058:	08009608 	.word	0x08009608
 800505c:	fffffc00 	.word	0xfffffc00

08005060 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d120      	bne.n	80050b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	2b03      	cmp	r3, #3
 800507a:	d858      	bhi.n	800512e <DMA_CheckFifoParam+0xce>
 800507c:	a201      	add	r2, pc, #4	@ (adr r2, 8005084 <DMA_CheckFifoParam+0x24>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	08005095 	.word	0x08005095
 8005088:	080050a7 	.word	0x080050a7
 800508c:	08005095 	.word	0x08005095
 8005090:	0800512f 	.word	0x0800512f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d048      	beq.n	8005132 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050a4:	e045      	b.n	8005132 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050ae:	d142      	bne.n	8005136 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050b4:	e03f      	b.n	8005136 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050be:	d123      	bne.n	8005108 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d838      	bhi.n	800513a <DMA_CheckFifoParam+0xda>
 80050c8:	a201      	add	r2, pc, #4	@ (adr r2, 80050d0 <DMA_CheckFifoParam+0x70>)
 80050ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ce:	bf00      	nop
 80050d0:	080050e1 	.word	0x080050e1
 80050d4:	080050e7 	.word	0x080050e7
 80050d8:	080050e1 	.word	0x080050e1
 80050dc:	080050f9 	.word	0x080050f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
        break;
 80050e4:	e030      	b.n	8005148 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d025      	beq.n	800513e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050f6:	e022      	b.n	800513e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005100:	d11f      	bne.n	8005142 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005106:	e01c      	b.n	8005142 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510c:	2b02      	cmp	r3, #2
 800510e:	d902      	bls.n	8005116 <DMA_CheckFifoParam+0xb6>
 8005110:	2b03      	cmp	r3, #3
 8005112:	d003      	beq.n	800511c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005114:	e018      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	73fb      	strb	r3, [r7, #15]
        break;
 800511a:	e015      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005120:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00e      	beq.n	8005146 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	73fb      	strb	r3, [r7, #15]
    break;
 800512c:	e00b      	b.n	8005146 <DMA_CheckFifoParam+0xe6>
        break;
 800512e:	bf00      	nop
 8005130:	e00a      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
        break;
 8005132:	bf00      	nop
 8005134:	e008      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
        break;
 8005136:	bf00      	nop
 8005138:	e006      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
        break;
 800513a:	bf00      	nop
 800513c:	e004      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
        break;
 800513e:	bf00      	nop
 8005140:	e002      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
        break;
 8005142:	bf00      	nop
 8005144:	e000      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
    break;
 8005146:	bf00      	nop
    }
  }

  return status;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop

08005158 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a38      	ldr	r2, [pc, #224]	@ (800524c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d022      	beq.n	80051b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a36      	ldr	r2, [pc, #216]	@ (8005250 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d01d      	beq.n	80051b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a35      	ldr	r2, [pc, #212]	@ (8005254 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d018      	beq.n	80051b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a33      	ldr	r2, [pc, #204]	@ (8005258 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a32      	ldr	r2, [pc, #200]	@ (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00e      	beq.n	80051b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a30      	ldr	r2, [pc, #192]	@ (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d009      	beq.n	80051b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a2f      	ldr	r2, [pc, #188]	@ (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d004      	beq.n	80051b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d101      	bne.n	80051ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051ba:	2300      	movs	r3, #0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01a      	beq.n	80051f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	3b08      	subs	r3, #8
 80051c8:	4a28      	ldr	r2, [pc, #160]	@ (800526c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	091b      	lsrs	r3, r3, #4
 80051d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4b26      	ldr	r3, [pc, #152]	@ (8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	461a      	mov	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a24      	ldr	r2, [pc, #144]	@ (8005274 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051e4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	2201      	movs	r2, #1
 80051ee:	409a      	lsls	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80051f4:	e024      	b.n	8005240 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	3b10      	subs	r3, #16
 80051fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005278 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005200:	fba2 2303 	umull	r2, r3, r2, r3
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4a1c      	ldr	r2, [pc, #112]	@ (800527c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d806      	bhi.n	800521e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4a1b      	ldr	r2, [pc, #108]	@ (8005280 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d902      	bls.n	800521e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3308      	adds	r3, #8
 800521c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4b18      	ldr	r3, [pc, #96]	@ (8005284 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	461a      	mov	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a16      	ldr	r2, [pc, #88]	@ (8005288 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005230:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f003 031f 	and.w	r3, r3, #31
 8005238:	2201      	movs	r2, #1
 800523a:	409a      	lsls	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005240:	bf00      	nop
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	58025408 	.word	0x58025408
 8005250:	5802541c 	.word	0x5802541c
 8005254:	58025430 	.word	0x58025430
 8005258:	58025444 	.word	0x58025444
 800525c:	58025458 	.word	0x58025458
 8005260:	5802546c 	.word	0x5802546c
 8005264:	58025480 	.word	0x58025480
 8005268:	58025494 	.word	0x58025494
 800526c:	cccccccd 	.word	0xcccccccd
 8005270:	16009600 	.word	0x16009600
 8005274:	58025880 	.word	0x58025880
 8005278:	aaaaaaab 	.word	0xaaaaaaab
 800527c:	400204b8 	.word	0x400204b8
 8005280:	4002040f 	.word	0x4002040f
 8005284:	10008200 	.word	0x10008200
 8005288:	40020880 	.word	0x40020880

0800528c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d04a      	beq.n	8005338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d847      	bhi.n	8005338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a25      	ldr	r2, [pc, #148]	@ (8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d022      	beq.n	80052f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a24      	ldr	r2, [pc, #144]	@ (8005348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d01d      	beq.n	80052f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a22      	ldr	r2, [pc, #136]	@ (800534c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d018      	beq.n	80052f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a21      	ldr	r2, [pc, #132]	@ (8005350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00e      	beq.n	80052f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1e      	ldr	r2, [pc, #120]	@ (8005358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d009      	beq.n	80052f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1c      	ldr	r2, [pc, #112]	@ (800535c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d101      	bne.n	80052fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80052fc:	2300      	movs	r3, #0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4b17      	ldr	r3, [pc, #92]	@ (8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	461a      	mov	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a15      	ldr	r2, [pc, #84]	@ (8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005314:	671a      	str	r2, [r3, #112]	@ 0x70
 8005316:	e009      	b.n	800532c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4b14      	ldr	r3, [pc, #80]	@ (800536c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	461a      	mov	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a11      	ldr	r2, [pc, #68]	@ (8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800532a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3b01      	subs	r3, #1
 8005330:	2201      	movs	r2, #1
 8005332:	409a      	lsls	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	58025408 	.word	0x58025408
 8005348:	5802541c 	.word	0x5802541c
 800534c:	58025430 	.word	0x58025430
 8005350:	58025444 	.word	0x58025444
 8005354:	58025458 	.word	0x58025458
 8005358:	5802546c 	.word	0x5802546c
 800535c:	58025480 	.word	0x58025480
 8005360:	58025494 	.word	0x58025494
 8005364:	1600963f 	.word	0x1600963f
 8005368:	58025940 	.word	0x58025940
 800536c:	1000823f 	.word	0x1000823f
 8005370:	40020940 	.word	0x40020940

08005374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005374:	b480      	push	{r7}
 8005376:	b089      	sub	sp, #36	@ 0x24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005382:	4b86      	ldr	r3, [pc, #536]	@ (800559c <HAL_GPIO_Init+0x228>)
 8005384:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005386:	e18c      	b.n	80056a2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	2101      	movs	r1, #1
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	fa01 f303 	lsl.w	r3, r1, r3
 8005394:	4013      	ands	r3, r2
 8005396:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 817e 	beq.w	800569c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f003 0303 	and.w	r3, r3, #3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d005      	beq.n	80053b8 <HAL_GPIO_Init+0x44>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d130      	bne.n	800541a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	2203      	movs	r2, #3
 80053c4:	fa02 f303 	lsl.w	r3, r2, r3
 80053c8:	43db      	mvns	r3, r3
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	4013      	ands	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	4313      	orrs	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053ee:	2201      	movs	r2, #1
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	43db      	mvns	r3, r3
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	4013      	ands	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	091b      	lsrs	r3, r3, #4
 8005404:	f003 0201 	and.w	r2, r3, #1
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	4313      	orrs	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	2b03      	cmp	r3, #3
 8005424:	d017      	beq.n	8005456 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	2203      	movs	r2, #3
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	43db      	mvns	r3, r3
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	4013      	ands	r3, r2
 800543c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	fa02 f303 	lsl.w	r3, r2, r3
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4313      	orrs	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d123      	bne.n	80054aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	08da      	lsrs	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3208      	adds	r2, #8
 800546a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	220f      	movs	r2, #15
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	43db      	mvns	r3, r3
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	4013      	ands	r3, r2
 8005484:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	4313      	orrs	r3, r2
 800549a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	08da      	lsrs	r2, r3, #3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3208      	adds	r2, #8
 80054a4:	69b9      	ldr	r1, [r7, #24]
 80054a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	2203      	movs	r2, #3
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	43db      	mvns	r3, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4013      	ands	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f003 0203 	and.w	r2, r3, #3
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 80d8 	beq.w	800569c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ec:	4b2c      	ldr	r3, [pc, #176]	@ (80055a0 <HAL_GPIO_Init+0x22c>)
 80054ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054f2:	4a2b      	ldr	r2, [pc, #172]	@ (80055a0 <HAL_GPIO_Init+0x22c>)
 80054f4:	f043 0302 	orr.w	r3, r3, #2
 80054f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80054fc:	4b28      	ldr	r3, [pc, #160]	@ (80055a0 <HAL_GPIO_Init+0x22c>)
 80054fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800550a:	4a26      	ldr	r2, [pc, #152]	@ (80055a4 <HAL_GPIO_Init+0x230>)
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	089b      	lsrs	r3, r3, #2
 8005510:	3302      	adds	r3, #2
 8005512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	220f      	movs	r2, #15
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	43db      	mvns	r3, r3
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	4013      	ands	r3, r2
 800552c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a1d      	ldr	r2, [pc, #116]	@ (80055a8 <HAL_GPIO_Init+0x234>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d04a      	beq.n	80055cc <HAL_GPIO_Init+0x258>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a1c      	ldr	r2, [pc, #112]	@ (80055ac <HAL_GPIO_Init+0x238>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d02b      	beq.n	8005596 <HAL_GPIO_Init+0x222>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a1b      	ldr	r2, [pc, #108]	@ (80055b0 <HAL_GPIO_Init+0x23c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d025      	beq.n	8005592 <HAL_GPIO_Init+0x21e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a1a      	ldr	r2, [pc, #104]	@ (80055b4 <HAL_GPIO_Init+0x240>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d01f      	beq.n	800558e <HAL_GPIO_Init+0x21a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a19      	ldr	r2, [pc, #100]	@ (80055b8 <HAL_GPIO_Init+0x244>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d019      	beq.n	800558a <HAL_GPIO_Init+0x216>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a18      	ldr	r2, [pc, #96]	@ (80055bc <HAL_GPIO_Init+0x248>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <HAL_GPIO_Init+0x212>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a17      	ldr	r2, [pc, #92]	@ (80055c0 <HAL_GPIO_Init+0x24c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00d      	beq.n	8005582 <HAL_GPIO_Init+0x20e>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a16      	ldr	r2, [pc, #88]	@ (80055c4 <HAL_GPIO_Init+0x250>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d007      	beq.n	800557e <HAL_GPIO_Init+0x20a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a15      	ldr	r2, [pc, #84]	@ (80055c8 <HAL_GPIO_Init+0x254>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d101      	bne.n	800557a <HAL_GPIO_Init+0x206>
 8005576:	2309      	movs	r3, #9
 8005578:	e029      	b.n	80055ce <HAL_GPIO_Init+0x25a>
 800557a:	230a      	movs	r3, #10
 800557c:	e027      	b.n	80055ce <HAL_GPIO_Init+0x25a>
 800557e:	2307      	movs	r3, #7
 8005580:	e025      	b.n	80055ce <HAL_GPIO_Init+0x25a>
 8005582:	2306      	movs	r3, #6
 8005584:	e023      	b.n	80055ce <HAL_GPIO_Init+0x25a>
 8005586:	2305      	movs	r3, #5
 8005588:	e021      	b.n	80055ce <HAL_GPIO_Init+0x25a>
 800558a:	2304      	movs	r3, #4
 800558c:	e01f      	b.n	80055ce <HAL_GPIO_Init+0x25a>
 800558e:	2303      	movs	r3, #3
 8005590:	e01d      	b.n	80055ce <HAL_GPIO_Init+0x25a>
 8005592:	2302      	movs	r3, #2
 8005594:	e01b      	b.n	80055ce <HAL_GPIO_Init+0x25a>
 8005596:	2301      	movs	r3, #1
 8005598:	e019      	b.n	80055ce <HAL_GPIO_Init+0x25a>
 800559a:	bf00      	nop
 800559c:	58000080 	.word	0x58000080
 80055a0:	58024400 	.word	0x58024400
 80055a4:	58000400 	.word	0x58000400
 80055a8:	58020000 	.word	0x58020000
 80055ac:	58020400 	.word	0x58020400
 80055b0:	58020800 	.word	0x58020800
 80055b4:	58020c00 	.word	0x58020c00
 80055b8:	58021000 	.word	0x58021000
 80055bc:	58021400 	.word	0x58021400
 80055c0:	58021800 	.word	0x58021800
 80055c4:	58021c00 	.word	0x58021c00
 80055c8:	58022400 	.word	0x58022400
 80055cc:	2300      	movs	r3, #0
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	f002 0203 	and.w	r2, r2, #3
 80055d4:	0092      	lsls	r2, r2, #2
 80055d6:	4093      	lsls	r3, r2
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4313      	orrs	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055de:	4938      	ldr	r1, [pc, #224]	@ (80056c0 <HAL_GPIO_Init+0x34c>)
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	3302      	adds	r3, #2
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	43db      	mvns	r3, r3
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	4013      	ands	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005612:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800561a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	43db      	mvns	r3, r3
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	4013      	ands	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005640:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	43db      	mvns	r3, r3
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	4013      	ands	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	43db      	mvns	r3, r3
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4013      	ands	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	4313      	orrs	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	3301      	adds	r3, #1
 80056a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	fa22 f303 	lsr.w	r3, r2, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f47f ae6b 	bne.w	8005388 <HAL_GPIO_Init+0x14>
  }
}
 80056b2:	bf00      	nop
 80056b4:	bf00      	nop
 80056b6:	3724      	adds	r7, #36	@ 0x24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	58000400 	.word	0x58000400

080056c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80056cc:	4b19      	ldr	r3, [pc, #100]	@ (8005734 <HAL_PWREx_ConfigSupply+0x70>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d00a      	beq.n	80056ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056d8:	4b16      	ldr	r3, [pc, #88]	@ (8005734 <HAL_PWREx_ConfigSupply+0x70>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d001      	beq.n	80056ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e01f      	b.n	800572a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e01d      	b.n	800572a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80056ee:	4b11      	ldr	r3, [pc, #68]	@ (8005734 <HAL_PWREx_ConfigSupply+0x70>)
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f023 0207 	bic.w	r2, r3, #7
 80056f6:	490f      	ldr	r1, [pc, #60]	@ (8005734 <HAL_PWREx_ConfigSupply+0x70>)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80056fe:	f7fb fc3b 	bl	8000f78 <HAL_GetTick>
 8005702:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005704:	e009      	b.n	800571a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005706:	f7fb fc37 	bl	8000f78 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005714:	d901      	bls.n	800571a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e007      	b.n	800572a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800571a:	4b06      	ldr	r3, [pc, #24]	@ (8005734 <HAL_PWREx_ConfigSupply+0x70>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005726:	d1ee      	bne.n	8005706 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	58024800 	.word	0x58024800

08005738 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08c      	sub	sp, #48	@ 0x30
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e3c8      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8087 	beq.w	8005866 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005758:	4b88      	ldr	r3, [pc, #544]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005762:	4b86      	ldr	r3, [pc, #536]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 8005764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005766:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576a:	2b10      	cmp	r3, #16
 800576c:	d007      	beq.n	800577e <HAL_RCC_OscConfig+0x46>
 800576e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005770:	2b18      	cmp	r3, #24
 8005772:	d110      	bne.n	8005796 <HAL_RCC_OscConfig+0x5e>
 8005774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d10b      	bne.n	8005796 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800577e:	4b7f      	ldr	r3, [pc, #508]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d06c      	beq.n	8005864 <HAL_RCC_OscConfig+0x12c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d168      	bne.n	8005864 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e3a2      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800579e:	d106      	bne.n	80057ae <HAL_RCC_OscConfig+0x76>
 80057a0:	4b76      	ldr	r3, [pc, #472]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a75      	ldr	r2, [pc, #468]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80057a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	e02e      	b.n	800580c <HAL_RCC_OscConfig+0xd4>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10c      	bne.n	80057d0 <HAL_RCC_OscConfig+0x98>
 80057b6:	4b71      	ldr	r3, [pc, #452]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a70      	ldr	r2, [pc, #448]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80057bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	4b6e      	ldr	r3, [pc, #440]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a6d      	ldr	r2, [pc, #436]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80057c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	e01d      	b.n	800580c <HAL_RCC_OscConfig+0xd4>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057d8:	d10c      	bne.n	80057f4 <HAL_RCC_OscConfig+0xbc>
 80057da:	4b68      	ldr	r3, [pc, #416]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a67      	ldr	r2, [pc, #412]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80057e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	4b65      	ldr	r3, [pc, #404]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a64      	ldr	r2, [pc, #400]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80057ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e00b      	b.n	800580c <HAL_RCC_OscConfig+0xd4>
 80057f4:	4b61      	ldr	r3, [pc, #388]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a60      	ldr	r2, [pc, #384]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80057fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	4b5e      	ldr	r3, [pc, #376]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a5d      	ldr	r2, [pc, #372]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 8005806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800580a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d013      	beq.n	800583c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005814:	f7fb fbb0 	bl	8000f78 <HAL_GetTick>
 8005818:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800581c:	f7fb fbac 	bl	8000f78 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b64      	cmp	r3, #100	@ 0x64
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e356      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800582e:	4b53      	ldr	r3, [pc, #332]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0f0      	beq.n	800581c <HAL_RCC_OscConfig+0xe4>
 800583a:	e014      	b.n	8005866 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fb fb9c 	bl	8000f78 <HAL_GetTick>
 8005840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005844:	f7fb fb98 	bl	8000f78 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b64      	cmp	r3, #100	@ 0x64
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e342      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005856:	4b49      	ldr	r3, [pc, #292]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f0      	bne.n	8005844 <HAL_RCC_OscConfig+0x10c>
 8005862:	e000      	b.n	8005866 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 808c 	beq.w	800598c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005874:	4b41      	ldr	r3, [pc, #260]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800587c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800587e:	4b3f      	ldr	r3, [pc, #252]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 8005880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005882:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d007      	beq.n	800589a <HAL_RCC_OscConfig+0x162>
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	2b18      	cmp	r3, #24
 800588e:	d137      	bne.n	8005900 <HAL_RCC_OscConfig+0x1c8>
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d132      	bne.n	8005900 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800589a:	4b38      	ldr	r3, [pc, #224]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <HAL_RCC_OscConfig+0x17a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e314      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058b2:	4b32      	ldr	r3, [pc, #200]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 0219 	bic.w	r2, r3, #25
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	492f      	ldr	r1, [pc, #188]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c4:	f7fb fb58 	bl	8000f78 <HAL_GetTick>
 80058c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058cc:	f7fb fb54 	bl	8000f78 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e2fe      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058de:	4b27      	ldr	r3, [pc, #156]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ea:	4b24      	ldr	r3, [pc, #144]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	061b      	lsls	r3, r3, #24
 80058f8:	4920      	ldr	r1, [pc, #128]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058fe:	e045      	b.n	800598c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d026      	beq.n	8005956 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005908:	4b1c      	ldr	r3, [pc, #112]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f023 0219 	bic.w	r2, r3, #25
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4919      	ldr	r1, [pc, #100]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 8005916:	4313      	orrs	r3, r2
 8005918:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591a:	f7fb fb2d 	bl	8000f78 <HAL_GetTick>
 800591e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005920:	e008      	b.n	8005934 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005922:	f7fb fb29 	bl	8000f78 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e2d3      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005934:	4b11      	ldr	r3, [pc, #68]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0f0      	beq.n	8005922 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005940:	4b0e      	ldr	r3, [pc, #56]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	061b      	lsls	r3, r3, #24
 800594e:	490b      	ldr	r1, [pc, #44]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 8005950:	4313      	orrs	r3, r2
 8005952:	604b      	str	r3, [r1, #4]
 8005954:	e01a      	b.n	800598c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005956:	4b09      	ldr	r3, [pc, #36]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a08      	ldr	r2, [pc, #32]	@ (800597c <HAL_RCC_OscConfig+0x244>)
 800595c:	f023 0301 	bic.w	r3, r3, #1
 8005960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005962:	f7fb fb09 	bl	8000f78 <HAL_GetTick>
 8005966:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005968:	e00a      	b.n	8005980 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800596a:	f7fb fb05 	bl	8000f78 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d903      	bls.n	8005980 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e2af      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
 800597c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005980:	4b96      	ldr	r3, [pc, #600]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1ee      	bne.n	800596a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b00      	cmp	r3, #0
 8005996:	d06a      	beq.n	8005a6e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005998:	4b90      	ldr	r3, [pc, #576]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059a0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059a2:	4b8e      	ldr	r3, [pc, #568]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 80059a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	2b08      	cmp	r3, #8
 80059ac:	d007      	beq.n	80059be <HAL_RCC_OscConfig+0x286>
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	2b18      	cmp	r3, #24
 80059b2:	d11b      	bne.n	80059ec <HAL_RCC_OscConfig+0x2b4>
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d116      	bne.n	80059ec <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059be:	4b87      	ldr	r3, [pc, #540]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d005      	beq.n	80059d6 <HAL_RCC_OscConfig+0x29e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	2b80      	cmp	r3, #128	@ 0x80
 80059d0:	d001      	beq.n	80059d6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e282      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059d6:	4b81      	ldr	r3, [pc, #516]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	061b      	lsls	r3, r3, #24
 80059e4:	497d      	ldr	r1, [pc, #500]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059ea:	e040      	b.n	8005a6e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d023      	beq.n	8005a3c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80059f4:	4b79      	ldr	r3, [pc, #484]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a78      	ldr	r2, [pc, #480]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 80059fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fb faba 	bl	8000f78 <HAL_GetTick>
 8005a04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005a08:	f7fb fab6 	bl	8000f78 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e260      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a1a:	4b70      	ldr	r3, [pc, #448]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0f0      	beq.n	8005a08 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a26:	4b6d      	ldr	r3, [pc, #436]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	061b      	lsls	r3, r3, #24
 8005a34:	4969      	ldr	r1, [pc, #420]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60cb      	str	r3, [r1, #12]
 8005a3a:	e018      	b.n	8005a6e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005a3c:	4b67      	ldr	r3, [pc, #412]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a66      	ldr	r2, [pc, #408]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a48:	f7fb fa96 	bl	8000f78 <HAL_GetTick>
 8005a4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a4e:	e008      	b.n	8005a62 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005a50:	f7fb fa92 	bl	8000f78 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e23c      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a62:	4b5e      	ldr	r3, [pc, #376]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1f0      	bne.n	8005a50 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d036      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d019      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a82:	4b56      	ldr	r3, [pc, #344]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a86:	4a55      	ldr	r2, [pc, #340]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a8e:	f7fb fa73 	bl	8000f78 <HAL_GetTick>
 8005a92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a96:	f7fb fa6f 	bl	8000f78 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e219      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005aa8:	4b4c      	ldr	r3, [pc, #304]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0f0      	beq.n	8005a96 <HAL_RCC_OscConfig+0x35e>
 8005ab4:	e018      	b.n	8005ae8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ab6:	4b49      	ldr	r3, [pc, #292]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aba:	4a48      	ldr	r2, [pc, #288]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005abc:	f023 0301 	bic.w	r3, r3, #1
 8005ac0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac2:	f7fb fa59 	bl	8000f78 <HAL_GetTick>
 8005ac6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aca:	f7fb fa55 	bl	8000f78 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e1ff      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005adc:	4b3f      	ldr	r3, [pc, #252]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1f0      	bne.n	8005aca <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0320 	and.w	r3, r3, #32
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d036      	beq.n	8005b62 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d019      	beq.n	8005b30 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005afc:	4b37      	ldr	r3, [pc, #220]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a36      	ldr	r2, [pc, #216]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005b02:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b08:	f7fb fa36 	bl	8000f78 <HAL_GetTick>
 8005b0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b10:	f7fb fa32 	bl	8000f78 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e1dc      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b22:	4b2e      	ldr	r3, [pc, #184]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0f0      	beq.n	8005b10 <HAL_RCC_OscConfig+0x3d8>
 8005b2e:	e018      	b.n	8005b62 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b30:	4b2a      	ldr	r3, [pc, #168]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a29      	ldr	r2, [pc, #164]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005b36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b3c:	f7fb fa1c 	bl	8000f78 <HAL_GetTick>
 8005b40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b44:	f7fb fa18 	bl	8000f78 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e1c2      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b56:	4b21      	ldr	r3, [pc, #132]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f0      	bne.n	8005b44 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 8086 	beq.w	8005c7c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b70:	4b1b      	ldr	r3, [pc, #108]	@ (8005be0 <HAL_RCC_OscConfig+0x4a8>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1a      	ldr	r2, [pc, #104]	@ (8005be0 <HAL_RCC_OscConfig+0x4a8>)
 8005b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b7c:	f7fb f9fc 	bl	8000f78 <HAL_GetTick>
 8005b80:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b84:	f7fb f9f8 	bl	8000f78 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b64      	cmp	r3, #100	@ 0x64
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e1a2      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b96:	4b12      	ldr	r3, [pc, #72]	@ (8005be0 <HAL_RCC_OscConfig+0x4a8>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0f0      	beq.n	8005b84 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d106      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x480>
 8005baa:	4b0c      	ldr	r3, [pc, #48]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bae:	4a0b      	ldr	r2, [pc, #44]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005bb0:	f043 0301 	orr.w	r3, r3, #1
 8005bb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bb6:	e032      	b.n	8005c1e <HAL_RCC_OscConfig+0x4e6>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d111      	bne.n	8005be4 <HAL_RCC_OscConfig+0x4ac>
 8005bc0:	4b06      	ldr	r3, [pc, #24]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc4:	4a05      	ldr	r2, [pc, #20]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005bc6:	f023 0301 	bic.w	r3, r3, #1
 8005bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bcc:	4b03      	ldr	r3, [pc, #12]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd0:	4a02      	ldr	r2, [pc, #8]	@ (8005bdc <HAL_RCC_OscConfig+0x4a4>)
 8005bd2:	f023 0304 	bic.w	r3, r3, #4
 8005bd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bd8:	e021      	b.n	8005c1e <HAL_RCC_OscConfig+0x4e6>
 8005bda:	bf00      	nop
 8005bdc:	58024400 	.word	0x58024400
 8005be0:	58024800 	.word	0x58024800
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2b05      	cmp	r3, #5
 8005bea:	d10c      	bne.n	8005c06 <HAL_RCC_OscConfig+0x4ce>
 8005bec:	4b83      	ldr	r3, [pc, #524]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf0:	4a82      	ldr	r2, [pc, #520]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005bf2:	f043 0304 	orr.w	r3, r3, #4
 8005bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bf8:	4b80      	ldr	r3, [pc, #512]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bfc:	4a7f      	ldr	r2, [pc, #508]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005bfe:	f043 0301 	orr.w	r3, r3, #1
 8005c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c04:	e00b      	b.n	8005c1e <HAL_RCC_OscConfig+0x4e6>
 8005c06:	4b7d      	ldr	r3, [pc, #500]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0a:	4a7c      	ldr	r2, [pc, #496]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005c0c:	f023 0301 	bic.w	r3, r3, #1
 8005c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c12:	4b7a      	ldr	r3, [pc, #488]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c16:	4a79      	ldr	r2, [pc, #484]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005c18:	f023 0304 	bic.w	r3, r3, #4
 8005c1c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d015      	beq.n	8005c52 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c26:	f7fb f9a7 	bl	8000f78 <HAL_GetTick>
 8005c2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c2c:	e00a      	b.n	8005c44 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c2e:	f7fb f9a3 	bl	8000f78 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e14b      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c44:	4b6d      	ldr	r3, [pc, #436]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0ee      	beq.n	8005c2e <HAL_RCC_OscConfig+0x4f6>
 8005c50:	e014      	b.n	8005c7c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c52:	f7fb f991 	bl	8000f78 <HAL_GetTick>
 8005c56:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c58:	e00a      	b.n	8005c70 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5a:	f7fb f98d 	bl	8000f78 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e135      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c70:	4b62      	ldr	r3, [pc, #392]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1ee      	bne.n	8005c5a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 812a 	beq.w	8005eda <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c86:	4b5d      	ldr	r3, [pc, #372]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c8e:	2b18      	cmp	r3, #24
 8005c90:	f000 80ba 	beq.w	8005e08 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	f040 8095 	bne.w	8005dc8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c9e:	4b57      	ldr	r3, [pc, #348]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a56      	ldr	r2, [pc, #344]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005ca4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005caa:	f7fb f965 	bl	8000f78 <HAL_GetTick>
 8005cae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cb0:	e008      	b.n	8005cc4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb2:	f7fb f961 	bl	8000f78 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e10b      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1f0      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cd0:	4b4a      	ldr	r3, [pc, #296]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005cd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cd4:	4b4a      	ldr	r3, [pc, #296]	@ (8005e00 <HAL_RCC_OscConfig+0x6c8>)
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ce0:	0112      	lsls	r2, r2, #4
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	4945      	ldr	r1, [pc, #276]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	628b      	str	r3, [r1, #40]	@ 0x28
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	025b      	lsls	r3, r3, #9
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d04:	3b01      	subs	r3, #1
 8005d06:	041b      	lsls	r3, r3, #16
 8005d08:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d12:	3b01      	subs	r3, #1
 8005d14:	061b      	lsls	r3, r3, #24
 8005d16:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005d1a:	4938      	ldr	r1, [pc, #224]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005d20:	4b36      	ldr	r3, [pc, #216]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d24:	4a35      	ldr	r2, [pc, #212]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d26:	f023 0301 	bic.w	r3, r3, #1
 8005d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d2c:	4b33      	ldr	r3, [pc, #204]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d30:	4b34      	ldr	r3, [pc, #208]	@ (8005e04 <HAL_RCC_OscConfig+0x6cc>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d38:	00d2      	lsls	r2, r2, #3
 8005d3a:	4930      	ldr	r1, [pc, #192]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005d40:	4b2e      	ldr	r3, [pc, #184]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d44:	f023 020c 	bic.w	r2, r3, #12
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4c:	492b      	ldr	r1, [pc, #172]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005d52:	4b2a      	ldr	r3, [pc, #168]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d56:	f023 0202 	bic.w	r2, r3, #2
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5e:	4927      	ldr	r1, [pc, #156]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d64:	4b25      	ldr	r3, [pc, #148]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d68:	4a24      	ldr	r2, [pc, #144]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d70:	4b22      	ldr	r3, [pc, #136]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d74:	4a21      	ldr	r2, [pc, #132]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	4a1e      	ldr	r2, [pc, #120]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005d88:	4b1c      	ldr	r3, [pc, #112]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d8e:	f043 0301 	orr.w	r3, r3, #1
 8005d92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d94:	4b19      	ldr	r3, [pc, #100]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a18      	ldr	r2, [pc, #96]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da0:	f7fb f8ea 	bl	8000f78 <HAL_GetTick>
 8005da4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da8:	f7fb f8e6 	bl	8000f78 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e090      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005dba:	4b10      	ldr	r3, [pc, #64]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCC_OscConfig+0x670>
 8005dc6:	e088      	b.n	8005eda <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005dce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd4:	f7fb f8d0 	bl	8000f78 <HAL_GetTick>
 8005dd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ddc:	f7fb f8cc 	bl	8000f78 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e076      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dee:	4b03      	ldr	r3, [pc, #12]	@ (8005dfc <HAL_RCC_OscConfig+0x6c4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1f0      	bne.n	8005ddc <HAL_RCC_OscConfig+0x6a4>
 8005dfa:	e06e      	b.n	8005eda <HAL_RCC_OscConfig+0x7a2>
 8005dfc:	58024400 	.word	0x58024400
 8005e00:	fffffc0c 	.word	0xfffffc0c
 8005e04:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005e08:	4b36      	ldr	r3, [pc, #216]	@ (8005ee4 <HAL_RCC_OscConfig+0x7ac>)
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005e0e:	4b35      	ldr	r3, [pc, #212]	@ (8005ee4 <HAL_RCC_OscConfig+0x7ac>)
 8005e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d031      	beq.n	8005e80 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f003 0203 	and.w	r2, r3, #3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d12a      	bne.n	8005e80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	091b      	lsrs	r3, r3, #4
 8005e2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d122      	bne.n	8005e80 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d11a      	bne.n	8005e80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	0a5b      	lsrs	r3, r3, #9
 8005e4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d111      	bne.n	8005e80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	0c1b      	lsrs	r3, r3, #16
 8005e60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d108      	bne.n	8005e80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	0e1b      	lsrs	r3, r3, #24
 8005e72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e02b      	b.n	8005edc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005e84:	4b17      	ldr	r3, [pc, #92]	@ (8005ee4 <HAL_RCC_OscConfig+0x7ac>)
 8005e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e88:	08db      	lsrs	r3, r3, #3
 8005e8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d01f      	beq.n	8005eda <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005e9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ee4 <HAL_RCC_OscConfig+0x7ac>)
 8005e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9e:	4a11      	ldr	r2, [pc, #68]	@ (8005ee4 <HAL_RCC_OscConfig+0x7ac>)
 8005ea0:	f023 0301 	bic.w	r3, r3, #1
 8005ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ea6:	f7fb f867 	bl	8000f78 <HAL_GetTick>
 8005eaa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005eac:	bf00      	nop
 8005eae:	f7fb f863 	bl	8000f78 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d0f9      	beq.n	8005eae <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005eba:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee4 <HAL_RCC_OscConfig+0x7ac>)
 8005ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee8 <HAL_RCC_OscConfig+0x7b0>)
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ec6:	00d2      	lsls	r2, r2, #3
 8005ec8:	4906      	ldr	r1, [pc, #24]	@ (8005ee4 <HAL_RCC_OscConfig+0x7ac>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005ece:	4b05      	ldr	r3, [pc, #20]	@ (8005ee4 <HAL_RCC_OscConfig+0x7ac>)
 8005ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed2:	4a04      	ldr	r2, [pc, #16]	@ (8005ee4 <HAL_RCC_OscConfig+0x7ac>)
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3730      	adds	r7, #48	@ 0x30
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	ffff0007 	.word	0xffff0007

08005eec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e19c      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f00:	4b8a      	ldr	r3, [pc, #552]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d910      	bls.n	8005f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f0e:	4b87      	ldr	r3, [pc, #540]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f023 020f 	bic.w	r2, r3, #15
 8005f16:	4985      	ldr	r1, [pc, #532]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f1e:	4b83      	ldr	r3, [pc, #524]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d001      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e184      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d010      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	4b7b      	ldr	r3, [pc, #492]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d908      	bls.n	8005f5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f4c:	4b78      	ldr	r3, [pc, #480]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	4975      	ldr	r1, [pc, #468]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d010      	beq.n	8005f8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695a      	ldr	r2, [r3, #20]
 8005f6e:	4b70      	ldr	r3, [pc, #448]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d908      	bls.n	8005f8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	496a      	ldr	r1, [pc, #424]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d010      	beq.n	8005fba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	699a      	ldr	r2, [r3, #24]
 8005f9c:	4b64      	ldr	r3, [pc, #400]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d908      	bls.n	8005fba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005fa8:	4b61      	ldr	r3, [pc, #388]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	495e      	ldr	r1, [pc, #376]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d010      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69da      	ldr	r2, [r3, #28]
 8005fca:	4b59      	ldr	r3, [pc, #356]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d908      	bls.n	8005fe8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005fd6:	4b56      	ldr	r3, [pc, #344]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	4953      	ldr	r1, [pc, #332]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d010      	beq.n	8006016 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	4b4d      	ldr	r3, [pc, #308]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	f003 030f 	and.w	r3, r3, #15
 8006000:	429a      	cmp	r2, r3
 8006002:	d908      	bls.n	8006016 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006004:	4b4a      	ldr	r3, [pc, #296]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	f023 020f 	bic.w	r2, r3, #15
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	4947      	ldr	r1, [pc, #284]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8006012:	4313      	orrs	r3, r2
 8006014:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d055      	beq.n	80060ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006022:	4b43      	ldr	r3, [pc, #268]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	4940      	ldr	r1, [pc, #256]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8006030:	4313      	orrs	r3, r2
 8006032:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b02      	cmp	r3, #2
 800603a:	d107      	bne.n	800604c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800603c:	4b3c      	ldr	r3, [pc, #240]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d121      	bne.n	800608c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e0f6      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b03      	cmp	r3, #3
 8006052:	d107      	bne.n	8006064 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006054:	4b36      	ldr	r3, [pc, #216]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d115      	bne.n	800608c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e0ea      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d107      	bne.n	800607c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800606c:	4b30      	ldr	r3, [pc, #192]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006074:	2b00      	cmp	r3, #0
 8006076:	d109      	bne.n	800608c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e0de      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800607c:	4b2c      	ldr	r3, [pc, #176]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e0d6      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800608c:	4b28      	ldr	r3, [pc, #160]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	f023 0207 	bic.w	r2, r3, #7
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	4925      	ldr	r1, [pc, #148]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 800609a:	4313      	orrs	r3, r2
 800609c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800609e:	f7fa ff6b 	bl	8000f78 <HAL_GetTick>
 80060a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a4:	e00a      	b.n	80060bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a6:	f7fa ff67 	bl	8000f78 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e0be      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d1eb      	bne.n	80060a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d010      	beq.n	80060fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	4b14      	ldr	r3, [pc, #80]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d208      	bcs.n	80060fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060ea:	4b11      	ldr	r3, [pc, #68]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f023 020f 	bic.w	r2, r3, #15
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	490e      	ldr	r1, [pc, #56]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060fc:	4b0b      	ldr	r3, [pc, #44]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d214      	bcs.n	8006134 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800610a:	4b08      	ldr	r3, [pc, #32]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f023 020f 	bic.w	r2, r3, #15
 8006112:	4906      	ldr	r1, [pc, #24]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	4313      	orrs	r3, r2
 8006118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800611a:	4b04      	ldr	r3, [pc, #16]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d005      	beq.n	8006134 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e086      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>
 800612c:	52002000 	.word	0x52002000
 8006130:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d010      	beq.n	8006162 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	4b3f      	ldr	r3, [pc, #252]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800614c:	429a      	cmp	r2, r3
 800614e:	d208      	bcs.n	8006162 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006150:	4b3c      	ldr	r3, [pc, #240]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	4939      	ldr	r1, [pc, #228]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 800615e:	4313      	orrs	r3, r2
 8006160:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d010      	beq.n	8006190 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	695a      	ldr	r2, [r3, #20]
 8006172:	4b34      	ldr	r3, [pc, #208]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800617a:	429a      	cmp	r2, r3
 800617c:	d208      	bcs.n	8006190 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800617e:	4b31      	ldr	r3, [pc, #196]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	492e      	ldr	r1, [pc, #184]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 800618c:	4313      	orrs	r3, r2
 800618e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	2b00      	cmp	r3, #0
 800619a:	d010      	beq.n	80061be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699a      	ldr	r2, [r3, #24]
 80061a0:	4b28      	ldr	r3, [pc, #160]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d208      	bcs.n	80061be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80061ac:	4b25      	ldr	r3, [pc, #148]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	4922      	ldr	r1, [pc, #136]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0320 	and.w	r3, r3, #32
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d010      	beq.n	80061ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d208      	bcs.n	80061ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80061da:	4b1a      	ldr	r3, [pc, #104]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	4917      	ldr	r1, [pc, #92]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061ec:	f000 f834 	bl	8006258 <HAL_RCC_GetSysClockFreq>
 80061f0:	4602      	mov	r2, r0
 80061f2:	4b14      	ldr	r3, [pc, #80]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	0a1b      	lsrs	r3, r3, #8
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	4912      	ldr	r1, [pc, #72]	@ (8006248 <HAL_RCC_ClockConfig+0x35c>)
 80061fe:	5ccb      	ldrb	r3, [r1, r3]
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	fa22 f303 	lsr.w	r3, r2, r3
 8006208:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800620a:	4b0e      	ldr	r3, [pc, #56]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f003 030f 	and.w	r3, r3, #15
 8006212:	4a0d      	ldr	r2, [pc, #52]	@ (8006248 <HAL_RCC_ClockConfig+0x35c>)
 8006214:	5cd3      	ldrb	r3, [r2, r3]
 8006216:	f003 031f 	and.w	r3, r3, #31
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	fa22 f303 	lsr.w	r3, r2, r3
 8006220:	4a0a      	ldr	r2, [pc, #40]	@ (800624c <HAL_RCC_ClockConfig+0x360>)
 8006222:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006224:	4a0a      	ldr	r2, [pc, #40]	@ (8006250 <HAL_RCC_ClockConfig+0x364>)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800622a:	4b0a      	ldr	r3, [pc, #40]	@ (8006254 <HAL_RCC_ClockConfig+0x368>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f7fa fe58 	bl	8000ee4 <HAL_InitTick>
 8006234:	4603      	mov	r3, r0
 8006236:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006238:	7bfb      	ldrb	r3, [r7, #15]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	58024400 	.word	0x58024400
 8006248:	080095f8 	.word	0x080095f8
 800624c:	24000004 	.word	0x24000004
 8006250:	24000000 	.word	0x24000000
 8006254:	24000008 	.word	0x24000008

08006258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006258:	b480      	push	{r7}
 800625a:	b089      	sub	sp, #36	@ 0x24
 800625c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800625e:	4bb3      	ldr	r3, [pc, #716]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006266:	2b18      	cmp	r3, #24
 8006268:	f200 8155 	bhi.w	8006516 <HAL_RCC_GetSysClockFreq+0x2be>
 800626c:	a201      	add	r2, pc, #4	@ (adr r2, 8006274 <HAL_RCC_GetSysClockFreq+0x1c>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	080062d9 	.word	0x080062d9
 8006278:	08006517 	.word	0x08006517
 800627c:	08006517 	.word	0x08006517
 8006280:	08006517 	.word	0x08006517
 8006284:	08006517 	.word	0x08006517
 8006288:	08006517 	.word	0x08006517
 800628c:	08006517 	.word	0x08006517
 8006290:	08006517 	.word	0x08006517
 8006294:	080062ff 	.word	0x080062ff
 8006298:	08006517 	.word	0x08006517
 800629c:	08006517 	.word	0x08006517
 80062a0:	08006517 	.word	0x08006517
 80062a4:	08006517 	.word	0x08006517
 80062a8:	08006517 	.word	0x08006517
 80062ac:	08006517 	.word	0x08006517
 80062b0:	08006517 	.word	0x08006517
 80062b4:	08006305 	.word	0x08006305
 80062b8:	08006517 	.word	0x08006517
 80062bc:	08006517 	.word	0x08006517
 80062c0:	08006517 	.word	0x08006517
 80062c4:	08006517 	.word	0x08006517
 80062c8:	08006517 	.word	0x08006517
 80062cc:	08006517 	.word	0x08006517
 80062d0:	08006517 	.word	0x08006517
 80062d4:	0800630b 	.word	0x0800630b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062d8:	4b94      	ldr	r3, [pc, #592]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d009      	beq.n	80062f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062e4:	4b91      	ldr	r3, [pc, #580]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	08db      	lsrs	r3, r3, #3
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	4a90      	ldr	r2, [pc, #576]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062f0:	fa22 f303 	lsr.w	r3, r2, r3
 80062f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80062f6:	e111      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80062f8:	4b8d      	ldr	r3, [pc, #564]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062fa:	61bb      	str	r3, [r7, #24]
      break;
 80062fc:	e10e      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80062fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006534 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006300:	61bb      	str	r3, [r7, #24]
      break;
 8006302:	e10b      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006304:	4b8c      	ldr	r3, [pc, #560]	@ (8006538 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006306:	61bb      	str	r3, [r7, #24]
      break;
 8006308:	e108      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800630a:	4b88      	ldr	r3, [pc, #544]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800630c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006314:	4b85      	ldr	r3, [pc, #532]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	091b      	lsrs	r3, r3, #4
 800631a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800631e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006320:	4b82      	ldr	r3, [pc, #520]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800632a:	4b80      	ldr	r3, [pc, #512]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800632c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800632e:	08db      	lsrs	r3, r3, #3
 8006330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	fb02 f303 	mul.w	r3, r2, r3
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006342:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 80e1 	beq.w	8006510 <HAL_RCC_GetSysClockFreq+0x2b8>
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b02      	cmp	r3, #2
 8006352:	f000 8083 	beq.w	800645c <HAL_RCC_GetSysClockFreq+0x204>
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b02      	cmp	r3, #2
 800635a:	f200 80a1 	bhi.w	80064a0 <HAL_RCC_GetSysClockFreq+0x248>
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_RCC_GetSysClockFreq+0x114>
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d056      	beq.n	8006418 <HAL_RCC_GetSysClockFreq+0x1c0>
 800636a:	e099      	b.n	80064a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800636c:	4b6f      	ldr	r3, [pc, #444]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b00      	cmp	r3, #0
 8006376:	d02d      	beq.n	80063d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006378:	4b6c      	ldr	r3, [pc, #432]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	08db      	lsrs	r3, r3, #3
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	4a6b      	ldr	r2, [pc, #428]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006384:	fa22 f303 	lsr.w	r3, r2, r3
 8006388:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	ee07 3a90 	vmov	s15, r3
 8006390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a2:	4b62      	ldr	r3, [pc, #392]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80063b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800653c <HAL_RCC_GetSysClockFreq+0x2e4>
 80063ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80063d2:	e087      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006540 <HAL_RCC_GetSysClockFreq+0x2e8>
 80063e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063e6:	4b51      	ldr	r3, [pc, #324]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80063fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800653c <HAL_RCC_GetSysClockFreq+0x2e4>
 80063fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800640a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800640e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006412:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006416:	e065      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	ee07 3a90 	vmov	s15, r3
 800641e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006422:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006544 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800642a:	4b40      	ldr	r3, [pc, #256]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800642c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643a:	ed97 6a02 	vldr	s12, [r7, #8]
 800643e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800653c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800644a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800644e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006456:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800645a:	e043      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006466:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006548 <HAL_RCC_GetSysClockFreq+0x2f0>
 800646a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800646e:	4b2f      	ldr	r3, [pc, #188]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800647e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006482:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800653c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800648e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800649e:	e021      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006544 <HAL_RCC_GetSysClockFreq+0x2ec>
 80064ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b2:	4b1e      	ldr	r3, [pc, #120]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800653c <HAL_RCC_GetSysClockFreq+0x2e4>
 80064ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80064e4:	4b11      	ldr	r3, [pc, #68]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e8:	0a5b      	lsrs	r3, r3, #9
 80064ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ee:	3301      	adds	r3, #1
 80064f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	ee07 3a90 	vmov	s15, r3
 80064f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006508:	ee17 3a90 	vmov	r3, s15
 800650c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800650e:	e005      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	61bb      	str	r3, [r7, #24]
      break;
 8006514:	e002      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006516:	4b07      	ldr	r3, [pc, #28]	@ (8006534 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006518:	61bb      	str	r3, [r7, #24]
      break;
 800651a:	bf00      	nop
  }

  return sysclockfreq;
 800651c:	69bb      	ldr	r3, [r7, #24]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3724      	adds	r7, #36	@ 0x24
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	58024400 	.word	0x58024400
 8006530:	03d09000 	.word	0x03d09000
 8006534:	003d0900 	.word	0x003d0900
 8006538:	017d7840 	.word	0x017d7840
 800653c:	46000000 	.word	0x46000000
 8006540:	4c742400 	.word	0x4c742400
 8006544:	4a742400 	.word	0x4a742400
 8006548:	4bbebc20 	.word	0x4bbebc20

0800654c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006552:	f7ff fe81 	bl	8006258 <HAL_RCC_GetSysClockFreq>
 8006556:	4602      	mov	r2, r0
 8006558:	4b10      	ldr	r3, [pc, #64]	@ (800659c <HAL_RCC_GetHCLKFreq+0x50>)
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	0a1b      	lsrs	r3, r3, #8
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	490f      	ldr	r1, [pc, #60]	@ (80065a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006564:	5ccb      	ldrb	r3, [r1, r3]
 8006566:	f003 031f 	and.w	r3, r3, #31
 800656a:	fa22 f303 	lsr.w	r3, r2, r3
 800656e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006570:	4b0a      	ldr	r3, [pc, #40]	@ (800659c <HAL_RCC_GetHCLKFreq+0x50>)
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	4a09      	ldr	r2, [pc, #36]	@ (80065a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800657a:	5cd3      	ldrb	r3, [r2, r3]
 800657c:	f003 031f 	and.w	r3, r3, #31
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	fa22 f303 	lsr.w	r3, r2, r3
 8006586:	4a07      	ldr	r2, [pc, #28]	@ (80065a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006588:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800658a:	4a07      	ldr	r2, [pc, #28]	@ (80065a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006590:	4b04      	ldr	r3, [pc, #16]	@ (80065a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006592:	681b      	ldr	r3, [r3, #0]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	58024400 	.word	0x58024400
 80065a0:	080095f8 	.word	0x080095f8
 80065a4:	24000004 	.word	0x24000004
 80065a8:	24000000 	.word	0x24000000

080065ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80065b0:	f7ff ffcc 	bl	800654c <HAL_RCC_GetHCLKFreq>
 80065b4:	4602      	mov	r2, r0
 80065b6:	4b06      	ldr	r3, [pc, #24]	@ (80065d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	091b      	lsrs	r3, r3, #4
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	4904      	ldr	r1, [pc, #16]	@ (80065d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80065c2:	5ccb      	ldrb	r3, [r1, r3]
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	58024400 	.word	0x58024400
 80065d4:	080095f8 	.word	0x080095f8

080065d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065dc:	b0c6      	sub	sp, #280	@ 0x118
 80065de:	af00      	add	r7, sp, #0
 80065e0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065e4:	2300      	movs	r3, #0
 80065e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065ea:	2300      	movs	r3, #0
 80065ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80065fc:	2500      	movs	r5, #0
 80065fe:	ea54 0305 	orrs.w	r3, r4, r5
 8006602:	d049      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006608:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800660a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800660e:	d02f      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006610:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006614:	d828      	bhi.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006616:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800661a:	d01a      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800661c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006620:	d822      	bhi.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800662a:	d007      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800662c:	e01c      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800662e:	4bab      	ldr	r3, [pc, #684]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006632:	4aaa      	ldr	r2, [pc, #680]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800663a:	e01a      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800663c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006640:	3308      	adds	r3, #8
 8006642:	2102      	movs	r1, #2
 8006644:	4618      	mov	r0, r3
 8006646:	f002 fa49 	bl	8008adc <RCCEx_PLL2_Config>
 800664a:	4603      	mov	r3, r0
 800664c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006650:	e00f      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006656:	3328      	adds	r3, #40	@ 0x28
 8006658:	2102      	movs	r1, #2
 800665a:	4618      	mov	r0, r3
 800665c:	f002 faf0 	bl	8008c40 <RCCEx_PLL3_Config>
 8006660:	4603      	mov	r3, r0
 8006662:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006666:	e004      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800666e:	e000      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006672:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10a      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800667a:	4b98      	ldr	r3, [pc, #608]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800667c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800667e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006688:	4a94      	ldr	r2, [pc, #592]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800668a:	430b      	orrs	r3, r1
 800668c:	6513      	str	r3, [r2, #80]	@ 0x50
 800668e:	e003      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006690:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006694:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80066a4:	f04f 0900 	mov.w	r9, #0
 80066a8:	ea58 0309 	orrs.w	r3, r8, r9
 80066ac:	d047      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d82a      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80066b8:	a201      	add	r2, pc, #4	@ (adr r2, 80066c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80066ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066be:	bf00      	nop
 80066c0:	080066d5 	.word	0x080066d5
 80066c4:	080066e3 	.word	0x080066e3
 80066c8:	080066f9 	.word	0x080066f9
 80066cc:	08006717 	.word	0x08006717
 80066d0:	08006717 	.word	0x08006717
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d4:	4b81      	ldr	r3, [pc, #516]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d8:	4a80      	ldr	r2, [pc, #512]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066e0:	e01a      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e6:	3308      	adds	r3, #8
 80066e8:	2100      	movs	r1, #0
 80066ea:	4618      	mov	r0, r3
 80066ec:	f002 f9f6 	bl	8008adc <RCCEx_PLL2_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066f6:	e00f      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fc:	3328      	adds	r3, #40	@ 0x28
 80066fe:	2100      	movs	r1, #0
 8006700:	4618      	mov	r0, r3
 8006702:	f002 fa9d 	bl	8008c40 <RCCEx_PLL3_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800670c:	e004      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006714:	e000      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006720:	4b6e      	ldr	r3, [pc, #440]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006724:	f023 0107 	bic.w	r1, r3, #7
 8006728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800672c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800672e:	4a6b      	ldr	r2, [pc, #428]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006730:	430b      	orrs	r3, r1
 8006732:	6513      	str	r3, [r2, #80]	@ 0x50
 8006734:	e003      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006736:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800673a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800673e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800674a:	f04f 0b00 	mov.w	fp, #0
 800674e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006752:	d05b      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006758:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800675c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006760:	d03b      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006762:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006766:	d834      	bhi.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006768:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800676c:	d037      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x206>
 800676e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006772:	d82e      	bhi.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006774:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006778:	d033      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800677a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800677e:	d828      	bhi.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006780:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006784:	d01a      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006786:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800678a:	d822      	bhi.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006790:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006794:	d007      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006796:	e01c      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006798:	4b50      	ldr	r3, [pc, #320]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800679a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679c:	4a4f      	ldr	r2, [pc, #316]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800679e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067a4:	e01e      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067aa:	3308      	adds	r3, #8
 80067ac:	2100      	movs	r1, #0
 80067ae:	4618      	mov	r0, r3
 80067b0:	f002 f994 	bl	8008adc <RCCEx_PLL2_Config>
 80067b4:	4603      	mov	r3, r0
 80067b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80067ba:	e013      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c0:	3328      	adds	r3, #40	@ 0x28
 80067c2:	2100      	movs	r1, #0
 80067c4:	4618      	mov	r0, r3
 80067c6:	f002 fa3b 	bl	8008c40 <RCCEx_PLL3_Config>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067d0:	e008      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067d8:	e004      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80067da:	bf00      	nop
 80067dc:	e002      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80067de:	bf00      	nop
 80067e0:	e000      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80067e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10b      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80067ec:	4b3b      	ldr	r3, [pc, #236]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80067f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067fc:	4a37      	ldr	r2, [pc, #220]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067fe:	430b      	orrs	r3, r1
 8006800:	6593      	str	r3, [r2, #88]	@ 0x58
 8006802:	e003      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006808:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006814:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006818:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800681c:	2300      	movs	r3, #0
 800681e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006822:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006826:	460b      	mov	r3, r1
 8006828:	4313      	orrs	r3, r2
 800682a:	d05d      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800682c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006830:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006834:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006838:	d03b      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800683a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800683e:	d834      	bhi.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006840:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006844:	d037      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006846:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800684a:	d82e      	bhi.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800684c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006850:	d033      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006852:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006856:	d828      	bhi.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006858:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800685c:	d01a      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800685e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006862:	d822      	bhi.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800686c:	d007      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800686e:	e01c      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006870:	4b1a      	ldr	r3, [pc, #104]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006874:	4a19      	ldr	r2, [pc, #100]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800687a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800687c:	e01e      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800687e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006882:	3308      	adds	r3, #8
 8006884:	2100      	movs	r1, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f002 f928 	bl	8008adc <RCCEx_PLL2_Config>
 800688c:	4603      	mov	r3, r0
 800688e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006892:	e013      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006898:	3328      	adds	r3, #40	@ 0x28
 800689a:	2100      	movs	r1, #0
 800689c:	4618      	mov	r0, r3
 800689e:	f002 f9cf 	bl	8008c40 <RCCEx_PLL3_Config>
 80068a2:	4603      	mov	r3, r0
 80068a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068a8:	e008      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068b0:	e004      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80068b2:	bf00      	nop
 80068b4:	e002      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80068b6:	bf00      	nop
 80068b8:	e000      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80068ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10d      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80068c4:	4b05      	ldr	r3, [pc, #20]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80068cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80068d4:	4a01      	ldr	r2, [pc, #4]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068d6:	430b      	orrs	r3, r1
 80068d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80068da:	e005      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80068dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80068e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80068f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80068f8:	2300      	movs	r3, #0
 80068fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80068fe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006902:	460b      	mov	r3, r1
 8006904:	4313      	orrs	r3, r2
 8006906:	d03a      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800690c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800690e:	2b30      	cmp	r3, #48	@ 0x30
 8006910:	d01f      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006912:	2b30      	cmp	r3, #48	@ 0x30
 8006914:	d819      	bhi.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006916:	2b20      	cmp	r3, #32
 8006918:	d00c      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800691a:	2b20      	cmp	r3, #32
 800691c:	d815      	bhi.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800691e:	2b00      	cmp	r3, #0
 8006920:	d019      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006922:	2b10      	cmp	r3, #16
 8006924:	d111      	bne.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006926:	4baa      	ldr	r3, [pc, #680]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692a:	4aa9      	ldr	r2, [pc, #676]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800692c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006930:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006932:	e011      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006938:	3308      	adds	r3, #8
 800693a:	2102      	movs	r1, #2
 800693c:	4618      	mov	r0, r3
 800693e:	f002 f8cd 	bl	8008adc <RCCEx_PLL2_Config>
 8006942:	4603      	mov	r3, r0
 8006944:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006948:	e006      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006950:	e002      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006952:	bf00      	nop
 8006954:	e000      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006958:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10a      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006960:	4b9b      	ldr	r3, [pc, #620]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006964:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800696e:	4a98      	ldr	r2, [pc, #608]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006970:	430b      	orrs	r3, r1
 8006972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006974:	e003      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006976:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800697a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800697e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800698a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800698e:	2300      	movs	r3, #0
 8006990:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006994:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006998:	460b      	mov	r3, r1
 800699a:	4313      	orrs	r3, r2
 800699c:	d051      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800699e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069a8:	d035      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80069aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069ae:	d82e      	bhi.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80069b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069b4:	d031      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80069b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069ba:	d828      	bhi.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80069bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069c0:	d01a      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80069c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069c6:	d822      	bhi.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80069cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069d0:	d007      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80069d2:	e01c      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d4:	4b7e      	ldr	r3, [pc, #504]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d8:	4a7d      	ldr	r2, [pc, #500]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069e0:	e01c      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e6:	3308      	adds	r3, #8
 80069e8:	2100      	movs	r1, #0
 80069ea:	4618      	mov	r0, r3
 80069ec:	f002 f876 	bl	8008adc <RCCEx_PLL2_Config>
 80069f0:	4603      	mov	r3, r0
 80069f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069f6:	e011      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fc:	3328      	adds	r3, #40	@ 0x28
 80069fe:	2100      	movs	r1, #0
 8006a00:	4618      	mov	r0, r3
 8006a02:	f002 f91d 	bl	8008c40 <RCCEx_PLL3_Config>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a0c:	e006      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a14:	e002      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006a16:	bf00      	nop
 8006a18:	e000      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a24:	4b6a      	ldr	r3, [pc, #424]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a28:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a32:	4a67      	ldr	r2, [pc, #412]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a34:	430b      	orrs	r3, r1
 8006a36:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a38:	e003      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006a4e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a52:	2300      	movs	r3, #0
 8006a54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a58:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	d053      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a6c:	d033      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006a6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a72:	d82c      	bhi.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a78:	d02f      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006a7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a7e:	d826      	bhi.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a84:	d02b      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006a86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a8a:	d820      	bhi.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a90:	d012      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006a92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a96:	d81a      	bhi.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d022      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aa0:	d115      	bne.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f002 f816 	bl	8008adc <RCCEx_PLL2_Config>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ab6:	e015      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abc:	3328      	adds	r3, #40	@ 0x28
 8006abe:	2101      	movs	r1, #1
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f002 f8bd 	bl	8008c40 <RCCEx_PLL3_Config>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006acc:	e00a      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ad4:	e006      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006ad6:	bf00      	nop
 8006ad8:	e004      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006ada:	bf00      	nop
 8006adc:	e002      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006ade:	bf00      	nop
 8006ae0:	e000      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006aec:	4b38      	ldr	r3, [pc, #224]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006afa:	4a35      	ldr	r2, [pc, #212]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006afc:	430b      	orrs	r3, r1
 8006afe:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b00:	e003      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006b16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b20:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006b24:	460b      	mov	r3, r1
 8006b26:	4313      	orrs	r3, r2
 8006b28:	d058      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b36:	d033      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b3c:	d82c      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b42:	d02f      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b48:	d826      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006b4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b4e:	d02b      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006b50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b54:	d820      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006b56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b5a:	d012      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b60:	d81a      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d022      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006b66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b6a:	d115      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b70:	3308      	adds	r3, #8
 8006b72:	2101      	movs	r1, #1
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 ffb1 	bl	8008adc <RCCEx_PLL2_Config>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b80:	e015      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b86:	3328      	adds	r3, #40	@ 0x28
 8006b88:	2101      	movs	r1, #1
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f002 f858 	bl	8008c40 <RCCEx_PLL3_Config>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b96:	e00a      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b9e:	e006      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ba0:	bf00      	nop
 8006ba2:	e004      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ba4:	bf00      	nop
 8006ba6:	e002      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ba8:	bf00      	nop
 8006baa:	e000      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10e      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006bb6:	4b06      	ldr	r3, [pc, #24]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006bc6:	4a02      	ldr	r2, [pc, #8]	@ (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bcc:	e006      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006bce:	bf00      	nop
 8006bd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006be8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bec:	2300      	movs	r3, #0
 8006bee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006bf2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	d037      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c06:	d00e      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006c08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c0c:	d816      	bhi.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d018      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006c12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c16:	d111      	bne.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c18:	4bc4      	ldr	r3, [pc, #784]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1c:	4ac3      	ldr	r2, [pc, #780]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c24:	e00f      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f001 ff54 	bl	8008adc <RCCEx_PLL2_Config>
 8006c34:	4603      	mov	r3, r0
 8006c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c3a:	e004      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c42:	e000      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c4e:	4bb7      	ldr	r3, [pc, #732]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c52:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c5c:	4ab3      	ldr	r2, [pc, #716]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c5e:	430b      	orrs	r3, r1
 8006c60:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c62:	e003      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006c78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006c86:	460b      	mov	r3, r1
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	d039      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d81c      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006c96:	a201      	add	r2, pc, #4	@ (adr r2, 8006c9c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9c:	08006cd9 	.word	0x08006cd9
 8006ca0:	08006cad 	.word	0x08006cad
 8006ca4:	08006cbb 	.word	0x08006cbb
 8006ca8:	08006cd9 	.word	0x08006cd9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cac:	4b9f      	ldr	r3, [pc, #636]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb0:	4a9e      	ldr	r2, [pc, #632]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006cb8:	e00f      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	2102      	movs	r1, #2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 ff0a 	bl	8008adc <RCCEx_PLL2_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006cce:	e004      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cd6:	e000      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006ce2:	4b92      	ldr	r3, [pc, #584]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ce6:	f023 0103 	bic.w	r1, r3, #3
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cf0:	4a8e      	ldr	r2, [pc, #568]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cf2:	430b      	orrs	r3, r1
 8006cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006cf6:	e003      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d10:	2300      	movs	r3, #0
 8006d12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	f000 8099 	beq.w	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d22:	4b83      	ldr	r3, [pc, #524]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a82      	ldr	r2, [pc, #520]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d2e:	f7fa f923 	bl	8000f78 <HAL_GetTick>
 8006d32:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d36:	e00b      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d38:	f7fa f91e 	bl	8000f78 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b64      	cmp	r3, #100	@ 0x64
 8006d46:	d903      	bls.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d4e:	e005      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d50:	4b77      	ldr	r3, [pc, #476]	@ (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0ed      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d173      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d64:	4b71      	ldr	r3, [pc, #452]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d70:	4053      	eors	r3, r2
 8006d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d015      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d7a:	4b6c      	ldr	r3, [pc, #432]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d82:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d86:	4b69      	ldr	r3, [pc, #420]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d8a:	4a68      	ldr	r2, [pc, #416]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d90:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d92:	4b66      	ldr	r3, [pc, #408]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d96:	4a65      	ldr	r2, [pc, #404]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d9c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d9e:	4a63      	ldr	r2, [pc, #396]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006da4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006daa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006db2:	d118      	bne.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db4:	f7fa f8e0 	bl	8000f78 <HAL_GetTick>
 8006db8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dbc:	e00d      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dbe:	f7fa f8db 	bl	8000f78 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006dc8:	1ad2      	subs	r2, r2, r3
 8006dca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d903      	bls.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006dd8:	e005      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dda:	4b54      	ldr	r3, [pc, #336]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0eb      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006de6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d129      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dfe:	d10e      	bne.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006e00:	4b4a      	ldr	r3, [pc, #296]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e10:	091a      	lsrs	r2, r3, #4
 8006e12:	4b48      	ldr	r3, [pc, #288]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006e14:	4013      	ands	r3, r2
 8006e16:	4a45      	ldr	r2, [pc, #276]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e18:	430b      	orrs	r3, r1
 8006e1a:	6113      	str	r3, [r2, #16]
 8006e1c:	e005      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006e1e:	4b43      	ldr	r3, [pc, #268]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	4a42      	ldr	r2, [pc, #264]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e28:	6113      	str	r3, [r2, #16]
 8006e2a:	4b40      	ldr	r3, [pc, #256]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e2c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e3a:	4a3c      	ldr	r2, [pc, #240]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e3c:	430b      	orrs	r3, r1
 8006e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e40:	e008      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006e4a:	e003      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	f002 0301 	and.w	r3, r2, #1
 8006e60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e64:	2300      	movs	r3, #0
 8006e66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4313      	orrs	r3, r2
 8006e72:	f000 808f 	beq.w	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e7c:	2b28      	cmp	r3, #40	@ 0x28
 8006e7e:	d871      	bhi.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006e80:	a201      	add	r2, pc, #4	@ (adr r2, 8006e88 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e86:	bf00      	nop
 8006e88:	08006f6d 	.word	0x08006f6d
 8006e8c:	08006f65 	.word	0x08006f65
 8006e90:	08006f65 	.word	0x08006f65
 8006e94:	08006f65 	.word	0x08006f65
 8006e98:	08006f65 	.word	0x08006f65
 8006e9c:	08006f65 	.word	0x08006f65
 8006ea0:	08006f65 	.word	0x08006f65
 8006ea4:	08006f65 	.word	0x08006f65
 8006ea8:	08006f39 	.word	0x08006f39
 8006eac:	08006f65 	.word	0x08006f65
 8006eb0:	08006f65 	.word	0x08006f65
 8006eb4:	08006f65 	.word	0x08006f65
 8006eb8:	08006f65 	.word	0x08006f65
 8006ebc:	08006f65 	.word	0x08006f65
 8006ec0:	08006f65 	.word	0x08006f65
 8006ec4:	08006f65 	.word	0x08006f65
 8006ec8:	08006f4f 	.word	0x08006f4f
 8006ecc:	08006f65 	.word	0x08006f65
 8006ed0:	08006f65 	.word	0x08006f65
 8006ed4:	08006f65 	.word	0x08006f65
 8006ed8:	08006f65 	.word	0x08006f65
 8006edc:	08006f65 	.word	0x08006f65
 8006ee0:	08006f65 	.word	0x08006f65
 8006ee4:	08006f65 	.word	0x08006f65
 8006ee8:	08006f6d 	.word	0x08006f6d
 8006eec:	08006f65 	.word	0x08006f65
 8006ef0:	08006f65 	.word	0x08006f65
 8006ef4:	08006f65 	.word	0x08006f65
 8006ef8:	08006f65 	.word	0x08006f65
 8006efc:	08006f65 	.word	0x08006f65
 8006f00:	08006f65 	.word	0x08006f65
 8006f04:	08006f65 	.word	0x08006f65
 8006f08:	08006f6d 	.word	0x08006f6d
 8006f0c:	08006f65 	.word	0x08006f65
 8006f10:	08006f65 	.word	0x08006f65
 8006f14:	08006f65 	.word	0x08006f65
 8006f18:	08006f65 	.word	0x08006f65
 8006f1c:	08006f65 	.word	0x08006f65
 8006f20:	08006f65 	.word	0x08006f65
 8006f24:	08006f65 	.word	0x08006f65
 8006f28:	08006f6d 	.word	0x08006f6d
 8006f2c:	58024400 	.word	0x58024400
 8006f30:	58024800 	.word	0x58024800
 8006f34:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	2101      	movs	r1, #1
 8006f40:	4618      	mov	r0, r3
 8006f42:	f001 fdcb 	bl	8008adc <RCCEx_PLL2_Config>
 8006f46:	4603      	mov	r3, r0
 8006f48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f4c:	e00f      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f52:	3328      	adds	r3, #40	@ 0x28
 8006f54:	2101      	movs	r1, #1
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 fe72 	bl	8008c40 <RCCEx_PLL3_Config>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f62:	e004      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f6a:	e000      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10a      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006f76:	4bbf      	ldr	r3, [pc, #764]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f84:	4abb      	ldr	r2, [pc, #748]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f86:	430b      	orrs	r3, r1
 8006f88:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f8a:	e003      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f002 0302 	and.w	r3, r2, #2
 8006fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006faa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	d041      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fba:	2b05      	cmp	r3, #5
 8006fbc:	d824      	bhi.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	08007011 	.word	0x08007011
 8006fc8:	08006fdd 	.word	0x08006fdd
 8006fcc:	08006ff3 	.word	0x08006ff3
 8006fd0:	08007011 	.word	0x08007011
 8006fd4:	08007011 	.word	0x08007011
 8006fd8:	08007011 	.word	0x08007011
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f001 fd79 	bl	8008adc <RCCEx_PLL2_Config>
 8006fea:	4603      	mov	r3, r0
 8006fec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ff0:	e00f      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff6:	3328      	adds	r3, #40	@ 0x28
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f001 fe20 	bl	8008c40 <RCCEx_PLL3_Config>
 8007000:	4603      	mov	r3, r0
 8007002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007006:	e004      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800700e:	e000      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007012:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10a      	bne.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800701a:	4b96      	ldr	r3, [pc, #600]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800701c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800701e:	f023 0107 	bic.w	r1, r3, #7
 8007022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007028:	4a92      	ldr	r2, [pc, #584]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800702a:	430b      	orrs	r3, r1
 800702c:	6553      	str	r3, [r2, #84]	@ 0x54
 800702e:	e003      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007034:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	f002 0304 	and.w	r3, r2, #4
 8007044:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007048:	2300      	movs	r3, #0
 800704a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800704e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007052:	460b      	mov	r3, r1
 8007054:	4313      	orrs	r3, r2
 8007056:	d044      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007060:	2b05      	cmp	r3, #5
 8007062:	d825      	bhi.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007064:	a201      	add	r2, pc, #4	@ (adr r2, 800706c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706a:	bf00      	nop
 800706c:	080070b9 	.word	0x080070b9
 8007070:	08007085 	.word	0x08007085
 8007074:	0800709b 	.word	0x0800709b
 8007078:	080070b9 	.word	0x080070b9
 800707c:	080070b9 	.word	0x080070b9
 8007080:	080070b9 	.word	0x080070b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007088:	3308      	adds	r3, #8
 800708a:	2101      	movs	r1, #1
 800708c:	4618      	mov	r0, r3
 800708e:	f001 fd25 	bl	8008adc <RCCEx_PLL2_Config>
 8007092:	4603      	mov	r3, r0
 8007094:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007098:	e00f      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800709a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709e:	3328      	adds	r3, #40	@ 0x28
 80070a0:	2101      	movs	r1, #1
 80070a2:	4618      	mov	r0, r3
 80070a4:	f001 fdcc 	bl	8008c40 <RCCEx_PLL3_Config>
 80070a8:	4603      	mov	r3, r0
 80070aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80070ae:	e004      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070b6:	e000      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80070b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10b      	bne.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070c2:	4b6c      	ldr	r3, [pc, #432]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80070c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070c6:	f023 0107 	bic.w	r1, r3, #7
 80070ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d2:	4a68      	ldr	r2, [pc, #416]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80070d4:	430b      	orrs	r3, r1
 80070d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80070d8:	e003      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	f002 0320 	and.w	r3, r2, #32
 80070ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070f2:	2300      	movs	r3, #0
 80070f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80070f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80070fc:	460b      	mov	r3, r1
 80070fe:	4313      	orrs	r3, r2
 8007100:	d055      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007106:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800710a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800710e:	d033      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007110:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007114:	d82c      	bhi.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800711a:	d02f      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800711c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007120:	d826      	bhi.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007122:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007126:	d02b      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007128:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800712c:	d820      	bhi.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800712e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007132:	d012      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007138:	d81a      	bhi.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d022      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800713e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007142:	d115      	bne.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007148:	3308      	adds	r3, #8
 800714a:	2100      	movs	r1, #0
 800714c:	4618      	mov	r0, r3
 800714e:	f001 fcc5 	bl	8008adc <RCCEx_PLL2_Config>
 8007152:	4603      	mov	r3, r0
 8007154:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007158:	e015      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800715a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715e:	3328      	adds	r3, #40	@ 0x28
 8007160:	2102      	movs	r1, #2
 8007162:	4618      	mov	r0, r3
 8007164:	f001 fd6c 	bl	8008c40 <RCCEx_PLL3_Config>
 8007168:	4603      	mov	r3, r0
 800716a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800716e:	e00a      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007176:	e006      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007178:	bf00      	nop
 800717a:	e004      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800717c:	bf00      	nop
 800717e:	e002      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007180:	bf00      	nop
 8007182:	e000      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007186:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10b      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800718e:	4b39      	ldr	r3, [pc, #228]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007192:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800719e:	4a35      	ldr	r2, [pc, #212]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071a0:	430b      	orrs	r3, r1
 80071a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80071a4:	e003      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80071ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80071ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071be:	2300      	movs	r3, #0
 80071c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071c4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80071c8:	460b      	mov	r3, r1
 80071ca:	4313      	orrs	r3, r2
 80071cc:	d058      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80071ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80071da:	d033      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80071dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80071e0:	d82c      	bhi.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80071e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071e6:	d02f      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80071e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ec:	d826      	bhi.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80071ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071f2:	d02b      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80071f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071f8:	d820      	bhi.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80071fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071fe:	d012      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007204:	d81a      	bhi.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007206:	2b00      	cmp	r3, #0
 8007208:	d022      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800720a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800720e:	d115      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007214:	3308      	adds	r3, #8
 8007216:	2100      	movs	r1, #0
 8007218:	4618      	mov	r0, r3
 800721a:	f001 fc5f 	bl	8008adc <RCCEx_PLL2_Config>
 800721e:	4603      	mov	r3, r0
 8007220:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007224:	e015      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800722a:	3328      	adds	r3, #40	@ 0x28
 800722c:	2102      	movs	r1, #2
 800722e:	4618      	mov	r0, r3
 8007230:	f001 fd06 	bl	8008c40 <RCCEx_PLL3_Config>
 8007234:	4603      	mov	r3, r0
 8007236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800723a:	e00a      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007242:	e006      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007244:	bf00      	nop
 8007246:	e004      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007248:	bf00      	nop
 800724a:	e002      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800724c:	bf00      	nop
 800724e:	e000      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007252:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10e      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800725a:	4b06      	ldr	r3, [pc, #24]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800725c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800725e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007266:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800726a:	4a02      	ldr	r2, [pc, #8]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800726c:	430b      	orrs	r3, r1
 800726e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007270:	e006      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007272:	bf00      	nop
 8007274:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007278:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800727c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800728c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007290:	2300      	movs	r3, #0
 8007292:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007296:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800729a:	460b      	mov	r3, r1
 800729c:	4313      	orrs	r3, r2
 800729e:	d055      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80072a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80072ac:	d033      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80072ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80072b2:	d82c      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80072b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072b8:	d02f      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80072ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072be:	d826      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80072c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80072c4:	d02b      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80072c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80072ca:	d820      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80072cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072d0:	d012      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80072d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072d6:	d81a      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d022      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80072dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072e0:	d115      	bne.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e6:	3308      	adds	r3, #8
 80072e8:	2100      	movs	r1, #0
 80072ea:	4618      	mov	r0, r3
 80072ec:	f001 fbf6 	bl	8008adc <RCCEx_PLL2_Config>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80072f6:	e015      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fc:	3328      	adds	r3, #40	@ 0x28
 80072fe:	2102      	movs	r1, #2
 8007300:	4618      	mov	r0, r3
 8007302:	f001 fc9d 	bl	8008c40 <RCCEx_PLL3_Config>
 8007306:	4603      	mov	r3, r0
 8007308:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800730c:	e00a      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007314:	e006      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007316:	bf00      	nop
 8007318:	e004      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800731a:	bf00      	nop
 800731c:	e002      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800731e:	bf00      	nop
 8007320:	e000      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10b      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800732c:	4ba0      	ldr	r3, [pc, #640]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800732e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007330:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007338:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800733c:	4a9c      	ldr	r2, [pc, #624]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800733e:	430b      	orrs	r3, r1
 8007340:	6593      	str	r3, [r2, #88]	@ 0x58
 8007342:	e003      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007348:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800734c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	f002 0308 	and.w	r3, r2, #8
 8007358:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800735c:	2300      	movs	r3, #0
 800735e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007362:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007366:	460b      	mov	r3, r1
 8007368:	4313      	orrs	r3, r2
 800736a:	d01e      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800736c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007378:	d10c      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800737a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737e:	3328      	adds	r3, #40	@ 0x28
 8007380:	2102      	movs	r1, #2
 8007382:	4618      	mov	r0, r3
 8007384:	f001 fc5c 	bl	8008c40 <RCCEx_PLL3_Config>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007394:	4b86      	ldr	r3, [pc, #536]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007398:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800739c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073a4:	4a82      	ldr	r2, [pc, #520]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073a6:	430b      	orrs	r3, r1
 80073a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	f002 0310 	and.w	r3, r2, #16
 80073b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073ba:	2300      	movs	r3, #0
 80073bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073c0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80073c4:	460b      	mov	r3, r1
 80073c6:	4313      	orrs	r3, r2
 80073c8:	d01e      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073d6:	d10c      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80073d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073dc:	3328      	adds	r3, #40	@ 0x28
 80073de:	2102      	movs	r1, #2
 80073e0:	4618      	mov	r0, r3
 80073e2:	f001 fc2d 	bl	8008c40 <RCCEx_PLL3_Config>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073f2:	4b6f      	ldr	r3, [pc, #444]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80073fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007402:	4a6b      	ldr	r2, [pc, #428]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007404:	430b      	orrs	r3, r1
 8007406:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007414:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007416:	2300      	movs	r3, #0
 8007418:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800741a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800741e:	460b      	mov	r3, r1
 8007420:	4313      	orrs	r3, r2
 8007422:	d03e      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007428:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800742c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007430:	d022      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007432:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007436:	d81b      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800743c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007440:	d00b      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007442:	e015      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007448:	3308      	adds	r3, #8
 800744a:	2100      	movs	r1, #0
 800744c:	4618      	mov	r0, r3
 800744e:	f001 fb45 	bl	8008adc <RCCEx_PLL2_Config>
 8007452:	4603      	mov	r3, r0
 8007454:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007458:	e00f      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800745a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745e:	3328      	adds	r3, #40	@ 0x28
 8007460:	2102      	movs	r1, #2
 8007462:	4618      	mov	r0, r3
 8007464:	f001 fbec 	bl	8008c40 <RCCEx_PLL3_Config>
 8007468:	4603      	mov	r3, r0
 800746a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800746e:	e004      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007476:	e000      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800747a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10b      	bne.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007482:	4b4b      	ldr	r3, [pc, #300]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007486:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800748a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800748e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007492:	4a47      	ldr	r2, [pc, #284]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007494:	430b      	orrs	r3, r1
 8007496:	6593      	str	r3, [r2, #88]	@ 0x58
 8007498:	e003      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800749e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80074ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80074b0:	2300      	movs	r3, #0
 80074b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80074b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80074b8:	460b      	mov	r3, r1
 80074ba:	4313      	orrs	r3, r2
 80074bc:	d03b      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80074be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074ca:	d01f      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80074cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074d0:	d818      	bhi.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80074d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074d6:	d003      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80074d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074dc:	d007      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80074de:	e011      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e0:	4b33      	ldr	r3, [pc, #204]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e4:	4a32      	ldr	r2, [pc, #200]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80074ec:	e00f      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f2:	3328      	adds	r3, #40	@ 0x28
 80074f4:	2101      	movs	r1, #1
 80074f6:	4618      	mov	r0, r3
 80074f8:	f001 fba2 	bl	8008c40 <RCCEx_PLL3_Config>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007502:	e004      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800750a:	e000      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800750c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800750e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10b      	bne.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007516:	4b26      	ldr	r3, [pc, #152]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800751a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800751e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007526:	4a22      	ldr	r2, [pc, #136]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007528:	430b      	orrs	r3, r1
 800752a:	6553      	str	r3, [r2, #84]	@ 0x54
 800752c:	e003      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007532:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007542:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007544:	2300      	movs	r3, #0
 8007546:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007548:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800754c:	460b      	mov	r3, r1
 800754e:	4313      	orrs	r3, r2
 8007550:	d034      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800755c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007560:	d007      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007562:	e011      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007564:	4b12      	ldr	r3, [pc, #72]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007568:	4a11      	ldr	r2, [pc, #68]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800756a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800756e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007570:	e00e      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007576:	3308      	adds	r3, #8
 8007578:	2102      	movs	r1, #2
 800757a:	4618      	mov	r0, r3
 800757c:	f001 faae 	bl	8008adc <RCCEx_PLL2_Config>
 8007580:	4603      	mov	r3, r0
 8007582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007586:	e003      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800758e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10d      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007598:	4b05      	ldr	r3, [pc, #20]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800759a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800759c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a6:	4a02      	ldr	r2, [pc, #8]	@ (80075b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075a8:	430b      	orrs	r3, r1
 80075aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075ac:	e006      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80075ae:	bf00      	nop
 80075b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80075c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80075ca:	2300      	movs	r3, #0
 80075cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80075ce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80075d2:	460b      	mov	r3, r1
 80075d4:	4313      	orrs	r3, r2
 80075d6:	d00c      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075dc:	3328      	adds	r3, #40	@ 0x28
 80075de:	2102      	movs	r1, #2
 80075e0:	4618      	mov	r0, r3
 80075e2:	f001 fb2d 	bl	8008c40 <RCCEx_PLL3_Config>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80075fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007600:	2300      	movs	r3, #0
 8007602:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007604:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007608:	460b      	mov	r3, r1
 800760a:	4313      	orrs	r3, r2
 800760c:	d036      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800760e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007612:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007614:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007618:	d018      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800761a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800761e:	d811      	bhi.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007624:	d014      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007626:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800762a:	d80b      	bhi.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800762c:	2b00      	cmp	r3, #0
 800762e:	d011      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007634:	d106      	bne.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007636:	4bb7      	ldr	r3, [pc, #732]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763a:	4ab6      	ldr	r2, [pc, #728]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800763c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007640:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007642:	e008      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800764a:	e004      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800764c:	bf00      	nop
 800764e:	e002      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007650:	bf00      	nop
 8007652:	e000      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007656:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10a      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800765e:	4bad      	ldr	r3, [pc, #692]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007662:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800766a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800766c:	4aa9      	ldr	r2, [pc, #676]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800766e:	430b      	orrs	r3, r1
 8007670:	6553      	str	r3, [r2, #84]	@ 0x54
 8007672:	e003      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007678:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800767c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007688:	653b      	str	r3, [r7, #80]	@ 0x50
 800768a:	2300      	movs	r3, #0
 800768c:	657b      	str	r3, [r7, #84]	@ 0x54
 800768e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007692:	460b      	mov	r3, r1
 8007694:	4313      	orrs	r3, r2
 8007696:	d009      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007698:	4b9e      	ldr	r3, [pc, #632]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800769a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800769c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80076a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a6:	4a9b      	ldr	r2, [pc, #620]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076a8:	430b      	orrs	r3, r1
 80076aa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80076b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076ba:	2300      	movs	r3, #0
 80076bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076be:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80076c2:	460b      	mov	r3, r1
 80076c4:	4313      	orrs	r3, r2
 80076c6:	d009      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076c8:	4b92      	ldr	r3, [pc, #584]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076cc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80076d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076d6:	4a8f      	ldr	r2, [pc, #572]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076d8:	430b      	orrs	r3, r1
 80076da:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80076dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80076e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80076ea:	2300      	movs	r3, #0
 80076ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80076ee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80076f2:	460b      	mov	r3, r1
 80076f4:	4313      	orrs	r3, r2
 80076f6:	d00e      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076f8:	4b86      	ldr	r3, [pc, #536]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	4a85      	ldr	r2, [pc, #532]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007702:	6113      	str	r3, [r2, #16]
 8007704:	4b83      	ldr	r3, [pc, #524]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007706:	6919      	ldr	r1, [r3, #16]
 8007708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007710:	4a80      	ldr	r2, [pc, #512]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007712:	430b      	orrs	r3, r1
 8007714:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007722:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007724:	2300      	movs	r3, #0
 8007726:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007728:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800772c:	460b      	mov	r3, r1
 800772e:	4313      	orrs	r3, r2
 8007730:	d009      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007732:	4b78      	ldr	r3, [pc, #480]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007736:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800773a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007740:	4a74      	ldr	r2, [pc, #464]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007742:	430b      	orrs	r3, r1
 8007744:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007752:	633b      	str	r3, [r7, #48]	@ 0x30
 8007754:	2300      	movs	r3, #0
 8007756:	637b      	str	r3, [r7, #52]	@ 0x34
 8007758:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800775c:	460b      	mov	r3, r1
 800775e:	4313      	orrs	r3, r2
 8007760:	d00a      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007762:	4b6c      	ldr	r3, [pc, #432]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007766:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800776a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007772:	4a68      	ldr	r2, [pc, #416]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007774:	430b      	orrs	r3, r1
 8007776:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	2100      	movs	r1, #0
 8007782:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800778a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800778e:	460b      	mov	r3, r1
 8007790:	4313      	orrs	r3, r2
 8007792:	d011      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007798:	3308      	adds	r3, #8
 800779a:	2100      	movs	r1, #0
 800779c:	4618      	mov	r0, r3
 800779e:	f001 f99d 	bl	8008adc <RCCEx_PLL2_Config>
 80077a2:	4603      	mov	r3, r0
 80077a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80077a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80077b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	2100      	movs	r1, #0
 80077c2:	6239      	str	r1, [r7, #32]
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80077ca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80077ce:	460b      	mov	r3, r1
 80077d0:	4313      	orrs	r3, r2
 80077d2:	d011      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d8:	3308      	adds	r3, #8
 80077da:	2101      	movs	r1, #1
 80077dc:	4618      	mov	r0, r3
 80077de:	f001 f97d 	bl	8008adc <RCCEx_PLL2_Config>
 80077e2:	4603      	mov	r3, r0
 80077e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80077e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d003      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80077f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	2100      	movs	r1, #0
 8007802:	61b9      	str	r1, [r7, #24]
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	61fb      	str	r3, [r7, #28]
 800780a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800780e:	460b      	mov	r3, r1
 8007810:	4313      	orrs	r3, r2
 8007812:	d011      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007818:	3308      	adds	r3, #8
 800781a:	2102      	movs	r1, #2
 800781c:	4618      	mov	r0, r3
 800781e:	f001 f95d 	bl	8008adc <RCCEx_PLL2_Config>
 8007822:	4603      	mov	r3, r0
 8007824:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800782c:	2b00      	cmp	r3, #0
 800782e:	d003      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007834:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	2100      	movs	r1, #0
 8007842:	6139      	str	r1, [r7, #16]
 8007844:	f003 0308 	and.w	r3, r3, #8
 8007848:	617b      	str	r3, [r7, #20]
 800784a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800784e:	460b      	mov	r3, r1
 8007850:	4313      	orrs	r3, r2
 8007852:	d011      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007858:	3328      	adds	r3, #40	@ 0x28
 800785a:	2100      	movs	r1, #0
 800785c:	4618      	mov	r0, r3
 800785e:	f001 f9ef 	bl	8008c40 <RCCEx_PLL3_Config>
 8007862:	4603      	mov	r3, r0
 8007864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007874:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	2100      	movs	r1, #0
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	f003 0310 	and.w	r3, r3, #16
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800788e:	460b      	mov	r3, r1
 8007890:	4313      	orrs	r3, r2
 8007892:	d011      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007898:	3328      	adds	r3, #40	@ 0x28
 800789a:	2101      	movs	r1, #1
 800789c:	4618      	mov	r0, r3
 800789e:	f001 f9cf 	bl	8008c40 <RCCEx_PLL3_Config>
 80078a2:	4603      	mov	r3, r0
 80078a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80078a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80078b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	2100      	movs	r1, #0
 80078c2:	6039      	str	r1, [r7, #0]
 80078c4:	f003 0320 	and.w	r3, r3, #32
 80078c8:	607b      	str	r3, [r7, #4]
 80078ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80078ce:	460b      	mov	r3, r1
 80078d0:	4313      	orrs	r3, r2
 80078d2:	d011      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d8:	3328      	adds	r3, #40	@ 0x28
 80078da:	2102      	movs	r1, #2
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 f9af 	bl	8008c40 <RCCEx_PLL3_Config>
 80078e2:	4603      	mov	r3, r0
 80078e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80078e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d003      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80078f8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	e000      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
}
 8007906:	4618      	mov	r0, r3
 8007908:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800790c:	46bd      	mov	sp, r7
 800790e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007912:	bf00      	nop
 8007914:	58024400 	.word	0x58024400

08007918 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b090      	sub	sp, #64	@ 0x40
 800791c:	af00      	add	r7, sp, #0
 800791e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007926:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800792a:	430b      	orrs	r3, r1
 800792c:	f040 8094 	bne.w	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007930:	4b9b      	ldr	r3, [pc, #620]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007934:	f003 0307 	and.w	r3, r3, #7
 8007938:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800793a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793c:	2b04      	cmp	r3, #4
 800793e:	f200 8087 	bhi.w	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007942:	a201      	add	r2, pc, #4	@ (adr r2, 8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007948:	0800795d 	.word	0x0800795d
 800794c:	08007985 	.word	0x08007985
 8007950:	080079ad 	.word	0x080079ad
 8007954:	08007a49 	.word	0x08007a49
 8007958:	080079d5 	.word	0x080079d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800795c:	4b90      	ldr	r3, [pc, #576]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007964:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007968:	d108      	bne.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800796a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800796e:	4618      	mov	r0, r3
 8007970:	f000 ff62 	bl	8008838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007978:	f000 bc93 	b.w	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800797c:	2300      	movs	r3, #0
 800797e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007980:	f000 bc8f 	b.w	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007984:	4b86      	ldr	r3, [pc, #536]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800798c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007990:	d108      	bne.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007992:	f107 0318 	add.w	r3, r7, #24
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fca6 	bl	80082e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079a0:	f000 bc7f 	b.w	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079a8:	f000 bc7b 	b.w	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079ac:	4b7c      	ldr	r3, [pc, #496]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079b8:	d108      	bne.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079ba:	f107 030c 	add.w	r3, r7, #12
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fde6 	bl	8008590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079c8:	f000 bc6b 	b.w	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079d0:	f000 bc67 	b.w	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079d4:	4b72      	ldr	r3, [pc, #456]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80079dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079de:	4b70      	ldr	r3, [pc, #448]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d10c      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80079ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d109      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079f0:	4b6b      	ldr	r3, [pc, #428]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	08db      	lsrs	r3, r3, #3
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	4a6a      	ldr	r2, [pc, #424]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80079fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a02:	e01f      	b.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a04:	4b66      	ldr	r3, [pc, #408]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a10:	d106      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a18:	d102      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a1a:	4b63      	ldr	r3, [pc, #396]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a1e:	e011      	b.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a20:	4b5f      	ldr	r3, [pc, #380]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a2c:	d106      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a34:	d102      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a36:	4b5d      	ldr	r3, [pc, #372]	@ (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a3a:	e003      	b.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a40:	f000 bc2f 	b.w	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007a44:	f000 bc2d 	b.w	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a48:	4b59      	ldr	r3, [pc, #356]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a4c:	f000 bc29 	b.w	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a54:	f000 bc25 	b.w	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a5c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007a60:	430b      	orrs	r3, r1
 8007a62:	f040 80a7 	bne.w	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007a66:	4b4e      	ldr	r3, [pc, #312]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a6a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007a6e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a76:	d054      	beq.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a7e:	f200 808b 	bhi.w	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a84:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a88:	f000 8083 	beq.w	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a92:	f200 8081 	bhi.w	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a9c:	d02f      	beq.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007aa4:	d878      	bhi.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d004      	beq.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ab2:	d012      	beq.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007ab4:	e070      	b.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007abe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ac2:	d107      	bne.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 feb5 	bl	8008838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ad2:	e3e6      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ad8:	e3e3      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ada:	4b31      	ldr	r3, [pc, #196]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ae2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ae6:	d107      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ae8:	f107 0318 	add.w	r3, r7, #24
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 fbfb 	bl	80082e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007af6:	e3d4      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007af8:	2300      	movs	r3, #0
 8007afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007afc:	e3d1      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007afe:	4b28      	ldr	r3, [pc, #160]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b0a:	d107      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b0c:	f107 030c 	add.w	r3, r7, #12
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 fd3d 	bl	8008590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b1a:	e3c2      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b20:	e3bf      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b22:	4b1f      	ldr	r3, [pc, #124]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b2a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	d10c      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d109      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b3e:	4b18      	ldr	r3, [pc, #96]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	08db      	lsrs	r3, r3, #3
 8007b44:	f003 0303 	and.w	r3, r3, #3
 8007b48:	4a16      	ldr	r2, [pc, #88]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b50:	e01e      	b.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b52:	4b13      	ldr	r3, [pc, #76]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b5e:	d106      	bne.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b66:	d102      	bne.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b68:	4b0f      	ldr	r3, [pc, #60]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b6c:	e010      	b.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b7a:	d106      	bne.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b82:	d102      	bne.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b84:	4b09      	ldr	r3, [pc, #36]	@ (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b88:	e002      	b.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007b8e:	e388      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b90:	e387      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b92:	4b07      	ldr	r3, [pc, #28]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b96:	e384      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b9c:	e381      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b9e:	bf00      	nop
 8007ba0:	58024400 	.word	0x58024400
 8007ba4:	03d09000 	.word	0x03d09000
 8007ba8:	003d0900 	.word	0x003d0900
 8007bac:	017d7840 	.word	0x017d7840
 8007bb0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bb8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007bbc:	430b      	orrs	r3, r1
 8007bbe:	f040 809c 	bne.w	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007bc2:	4b9e      	ldr	r3, [pc, #632]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bc6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007bca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007bd2:	d054      	beq.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007bda:	f200 808b 	bhi.w	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007be4:	f000 8083 	beq.w	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007bee:	f200 8081 	bhi.w	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007bf8:	d02f      	beq.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c00:	d878      	bhi.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d004      	beq.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c0e:	d012      	beq.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007c10:	e070      	b.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c12:	4b8a      	ldr	r3, [pc, #552]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c1e:	d107      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 fe07 	bl	8008838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c2e:	e338      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c34:	e335      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c36:	4b81      	ldr	r3, [pc, #516]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c42:	d107      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c44:	f107 0318 	add.w	r3, r7, #24
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fb4d 	bl	80082e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c52:	e326      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c54:	2300      	movs	r3, #0
 8007c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c58:	e323      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c5a:	4b78      	ldr	r3, [pc, #480]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c66:	d107      	bne.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c68:	f107 030c 	add.w	r3, r7, #12
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 fc8f 	bl	8008590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c76:	e314      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c7c:	e311      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c7e:	4b6f      	ldr	r3, [pc, #444]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c86:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c88:	4b6c      	ldr	r3, [pc, #432]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b04      	cmp	r3, #4
 8007c92:	d10c      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d109      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c9a:	4b68      	ldr	r3, [pc, #416]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	08db      	lsrs	r3, r3, #3
 8007ca0:	f003 0303 	and.w	r3, r3, #3
 8007ca4:	4a66      	ldr	r2, [pc, #408]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8007caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cac:	e01e      	b.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cae:	4b63      	ldr	r3, [pc, #396]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cba:	d106      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cc2:	d102      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007cc4:	4b5f      	ldr	r3, [pc, #380]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cc8:	e010      	b.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cca:	4b5c      	ldr	r3, [pc, #368]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cd6:	d106      	bne.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8007cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cde:	d102      	bne.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ce0:	4b59      	ldr	r3, [pc, #356]	@ (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ce4:	e002      	b.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007cea:	e2da      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007cec:	e2d9      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007cee:	4b57      	ldr	r3, [pc, #348]	@ (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf2:	e2d6      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf8:	e2d3      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cfe:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007d02:	430b      	orrs	r3, r1
 8007d04:	f040 80a7 	bne.w	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007d08:	4b4c      	ldr	r3, [pc, #304]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d0c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007d10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d18:	d055      	beq.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d20:	f200 8096 	bhi.w	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d2a:	f000 8084 	beq.w	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d34:	f200 808c 	bhi.w	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d3e:	d030      	beq.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d46:	f200 8083 	bhi.w	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d004      	beq.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d56:	d012      	beq.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007d58:	e07a      	b.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d5a:	4b38      	ldr	r3, [pc, #224]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d66:	d107      	bne.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 fd63 	bl	8008838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d76:	e294      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d7c:	e291      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d8a:	d107      	bne.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d8c:	f107 0318 	add.w	r3, r7, #24
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 faa9 	bl	80082e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d9a:	e282      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007da0:	e27f      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007da2:	4b26      	ldr	r3, [pc, #152]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007daa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dae:	d107      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007db0:	f107 030c 	add.w	r3, r7, #12
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 fbeb 	bl	8008590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dbe:	e270      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dc4:	e26d      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007dce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d10c      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d109      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007de2:	4b16      	ldr	r3, [pc, #88]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	08db      	lsrs	r3, r3, #3
 8007de8:	f003 0303 	and.w	r3, r3, #3
 8007dec:	4a14      	ldr	r2, [pc, #80]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007dee:	fa22 f303 	lsr.w	r3, r2, r3
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007df4:	e01e      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007df6:	4b11      	ldr	r3, [pc, #68]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e02:	d106      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e0a:	d102      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e10:	e010      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e12:	4b0a      	ldr	r3, [pc, #40]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e1e:	d106      	bne.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e26:	d102      	bne.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e28:	4b07      	ldr	r3, [pc, #28]	@ (8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e2c:	e002      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007e32:	e236      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007e34:	e235      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e36:	4b05      	ldr	r3, [pc, #20]	@ (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e3a:	e232      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007e3c:	58024400 	.word	0x58024400
 8007e40:	03d09000 	.word	0x03d09000
 8007e44:	003d0900 	.word	0x003d0900
 8007e48:	017d7840 	.word	0x017d7840
 8007e4c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e54:	e225      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e5a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007e5e:	430b      	orrs	r3, r1
 8007e60:	f040 8085 	bne.w	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007e64:	4b9c      	ldr	r3, [pc, #624]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e68:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e74:	d06b      	beq.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e7c:	d874      	bhi.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e84:	d056      	beq.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8007e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e8c:	d86c      	bhi.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e94:	d03b      	beq.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e9c:	d864      	bhi.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ea4:	d021      	beq.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eac:	d85c      	bhi.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d004      	beq.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eba:	d004      	beq.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8007ebc:	e054      	b.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007ebe:	f7fe fb75 	bl	80065ac <HAL_RCC_GetPCLK1Freq>
 8007ec2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ec4:	e1ed      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ec6:	4b84      	ldr	r3, [pc, #528]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ed2:	d107      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ed4:	f107 0318 	add.w	r3, r7, #24
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 fa05 	bl	80082e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ee2:	e1de      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ee8:	e1db      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007eea:	4b7b      	ldr	r3, [pc, #492]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ef2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ef6:	d107      	bne.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ef8:	f107 030c 	add.w	r3, r7, #12
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fb47 	bl	8008590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f06:	e1cc      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f0c:	e1c9      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f0e:	4b72      	ldr	r3, [pc, #456]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0304 	and.w	r3, r3, #4
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	d109      	bne.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f1a:	4b6f      	ldr	r3, [pc, #444]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	08db      	lsrs	r3, r3, #3
 8007f20:	f003 0303 	and.w	r3, r3, #3
 8007f24:	4a6d      	ldr	r2, [pc, #436]	@ (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007f26:	fa22 f303 	lsr.w	r3, r2, r3
 8007f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f2c:	e1b9      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f32:	e1b6      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007f34:	4b68      	ldr	r3, [pc, #416]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f40:	d102      	bne.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8007f42:	4b67      	ldr	r3, [pc, #412]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f46:	e1ac      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f4c:	e1a9      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f4e:	4b62      	ldr	r3, [pc, #392]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f5a:	d102      	bne.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8007f5c:	4b61      	ldr	r3, [pc, #388]	@ (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f60:	e19f      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f66:	e19c      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f6c:	e199      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f72:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007f76:	430b      	orrs	r3, r1
 8007f78:	d173      	bne.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007f7a:	4b57      	ldr	r3, [pc, #348]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007f82:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f8a:	d02f      	beq.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f92:	d863      	bhi.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8007f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d004      	beq.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fa0:	d012      	beq.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8007fa2:	e05b      	b.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fa4:	4b4c      	ldr	r3, [pc, #304]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fb0:	d107      	bne.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fb2:	f107 0318 	add.w	r3, r7, #24
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 f996 	bl	80082e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fc0:	e16f      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fc6:	e16c      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fc8:	4b43      	ldr	r3, [pc, #268]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fd4:	d107      	bne.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fd6:	f107 030c 	add.w	r3, r7, #12
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 fad8 	bl	8008590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fe4:	e15d      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fea:	e15a      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fec:	4b3a      	ldr	r3, [pc, #232]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ff0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ff4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ff6:	4b38      	ldr	r3, [pc, #224]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0304 	and.w	r3, r3, #4
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	d10c      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008004:	2b00      	cmp	r3, #0
 8008006:	d109      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008008:	4b33      	ldr	r3, [pc, #204]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	08db      	lsrs	r3, r3, #3
 800800e:	f003 0303 	and.w	r3, r3, #3
 8008012:	4a32      	ldr	r2, [pc, #200]	@ (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008014:	fa22 f303 	lsr.w	r3, r2, r3
 8008018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800801a:	e01e      	b.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800801c:	4b2e      	ldr	r3, [pc, #184]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008028:	d106      	bne.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800802a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800802c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008030:	d102      	bne.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008032:	4b2b      	ldr	r3, [pc, #172]	@ (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008034:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008036:	e010      	b.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008038:	4b27      	ldr	r3, [pc, #156]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008040:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008044:	d106      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800804c:	d102      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800804e:	4b25      	ldr	r3, [pc, #148]	@ (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008050:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008052:	e002      	b.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008058:	e123      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800805a:	e122      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800805c:	2300      	movs	r3, #0
 800805e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008060:	e11f      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008066:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800806a:	430b      	orrs	r3, r1
 800806c:	d13c      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800806e:	4b1a      	ldr	r3, [pc, #104]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008076:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807a:	2b00      	cmp	r3, #0
 800807c:	d004      	beq.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800807e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008084:	d012      	beq.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008086:	e023      	b.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008088:	4b13      	ldr	r3, [pc, #76]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008090:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008094:	d107      	bne.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800809a:	4618      	mov	r0, r3
 800809c:	f000 fbcc 	bl	8008838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080a4:	e0fd      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080aa:	e0fa      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080ac:	4b0a      	ldr	r3, [pc, #40]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080b8:	d107      	bne.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ba:	f107 0318 	add.w	r3, r7, #24
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 f912 	bl	80082e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080c8:	e0eb      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080ca:	2300      	movs	r3, #0
 80080cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080ce:	e0e8      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d4:	e0e5      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80080d6:	bf00      	nop
 80080d8:	58024400 	.word	0x58024400
 80080dc:	03d09000 	.word	0x03d09000
 80080e0:	003d0900 	.word	0x003d0900
 80080e4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80080e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ec:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80080f0:	430b      	orrs	r3, r1
 80080f2:	f040 8085 	bne.w	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80080f6:	4b6d      	ldr	r3, [pc, #436]	@ (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080fa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80080fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008102:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008106:	d06b      	beq.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800810e:	d874      	bhi.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008116:	d056      	beq.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800811e:	d86c      	bhi.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008122:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008126:	d03b      	beq.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800812a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800812e:	d864      	bhi.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008136:	d021      	beq.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800813e:	d85c      	bhi.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008142:	2b00      	cmp	r3, #0
 8008144:	d004      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008148:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800814c:	d004      	beq.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800814e:	e054      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008150:	f000 f8b4 	bl	80082bc <HAL_RCCEx_GetD3PCLK1Freq>
 8008154:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008156:	e0a4      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008158:	4b54      	ldr	r3, [pc, #336]	@ (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008160:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008164:	d107      	bne.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008166:	f107 0318 	add.w	r3, r7, #24
 800816a:	4618      	mov	r0, r3
 800816c:	f000 f8bc 	bl	80082e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008174:	e095      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800817a:	e092      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800817c:	4b4b      	ldr	r3, [pc, #300]	@ (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008188:	d107      	bne.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800818a:	f107 030c 	add.w	r3, r7, #12
 800818e:	4618      	mov	r0, r3
 8008190:	f000 f9fe 	bl	8008590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008198:	e083      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800819a:	2300      	movs	r3, #0
 800819c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800819e:	e080      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081a0:	4b42      	ldr	r3, [pc, #264]	@ (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0304 	and.w	r3, r3, #4
 80081a8:	2b04      	cmp	r3, #4
 80081aa:	d109      	bne.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081ac:	4b3f      	ldr	r3, [pc, #252]	@ (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	08db      	lsrs	r3, r3, #3
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	4a3e      	ldr	r2, [pc, #248]	@ (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80081b8:	fa22 f303 	lsr.w	r3, r2, r3
 80081bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081be:	e070      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081c4:	e06d      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80081c6:	4b39      	ldr	r3, [pc, #228]	@ (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081d2:	d102      	bne.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80081d4:	4b37      	ldr	r3, [pc, #220]	@ (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80081d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081d8:	e063      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081de:	e060      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80081e0:	4b32      	ldr	r3, [pc, #200]	@ (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081ec:	d102      	bne.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80081ee:	4b32      	ldr	r3, [pc, #200]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80081f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081f2:	e056      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081f8:	e053      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081fe:	e050      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008204:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008208:	430b      	orrs	r3, r1
 800820a:	d148      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800820c:	4b27      	ldr	r3, [pc, #156]	@ (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800820e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008210:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008214:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008218:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800821c:	d02a      	beq.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800821e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008224:	d838      	bhi.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008228:	2b00      	cmp	r3, #0
 800822a:	d004      	beq.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800822c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008232:	d00d      	beq.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008234:	e030      	b.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008236:	4b1d      	ldr	r3, [pc, #116]	@ (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800823e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008242:	d102      	bne.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008244:	4b1c      	ldr	r3, [pc, #112]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008248:	e02b      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800824e:	e028      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008250:	4b16      	ldr	r3, [pc, #88]	@ (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008258:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800825c:	d107      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800825e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008262:	4618      	mov	r0, r3
 8008264:	f000 fae8 	bl	8008838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800826c:	e019      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008272:	e016      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008274:	4b0d      	ldr	r3, [pc, #52]	@ (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800827c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008280:	d107      	bne.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008282:	f107 0318 	add.w	r3, r7, #24
 8008286:	4618      	mov	r0, r3
 8008288:	f000 f82e 	bl	80082e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008290:	e007      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008292:	2300      	movs	r3, #0
 8008294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008296:	e004      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800829c:	e001      	b.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80082a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3740      	adds	r7, #64	@ 0x40
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	58024400 	.word	0x58024400
 80082b0:	03d09000 	.word	0x03d09000
 80082b4:	003d0900 	.word	0x003d0900
 80082b8:	017d7840 	.word	0x017d7840

080082bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80082c0:	f7fe f944 	bl	800654c <HAL_RCC_GetHCLKFreq>
 80082c4:	4602      	mov	r2, r0
 80082c6:	4b06      	ldr	r3, [pc, #24]	@ (80082e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	091b      	lsrs	r3, r3, #4
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	4904      	ldr	r1, [pc, #16]	@ (80082e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80082d2:	5ccb      	ldrb	r3, [r1, r3]
 80082d4:	f003 031f 	and.w	r3, r3, #31
 80082d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80082dc:	4618      	mov	r0, r3
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	58024400 	.word	0x58024400
 80082e4:	080095f8 	.word	0x080095f8

080082e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b089      	sub	sp, #36	@ 0x24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082f0:	4ba1      	ldr	r3, [pc, #644]	@ (8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f4:	f003 0303 	and.w	r3, r3, #3
 80082f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80082fa:	4b9f      	ldr	r3, [pc, #636]	@ (8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082fe:	0b1b      	lsrs	r3, r3, #12
 8008300:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008304:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008306:	4b9c      	ldr	r3, [pc, #624]	@ (8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830a:	091b      	lsrs	r3, r3, #4
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008312:	4b99      	ldr	r3, [pc, #612]	@ (8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008316:	08db      	lsrs	r3, r3, #3
 8008318:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	fb02 f303 	mul.w	r3, r2, r3
 8008322:	ee07 3a90 	vmov	s15, r3
 8008326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 8111 	beq.w	8008558 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b02      	cmp	r3, #2
 800833a:	f000 8083 	beq.w	8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	2b02      	cmp	r3, #2
 8008342:	f200 80a1 	bhi.w	8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d056      	beq.n	8008400 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008352:	e099      	b.n	8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008354:	4b88      	ldr	r3, [pc, #544]	@ (8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	d02d      	beq.n	80083bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008360:	4b85      	ldr	r3, [pc, #532]	@ (8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	08db      	lsrs	r3, r3, #3
 8008366:	f003 0303 	and.w	r3, r3, #3
 800836a:	4a84      	ldr	r2, [pc, #528]	@ (800857c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800836c:	fa22 f303 	lsr.w	r3, r2, r3
 8008370:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	ee07 3a90 	vmov	s15, r3
 8008378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	ee07 3a90 	vmov	s15, r3
 8008382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800838a:	4b7b      	ldr	r3, [pc, #492]	@ (8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800838c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008392:	ee07 3a90 	vmov	s15, r3
 8008396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800839a:	ed97 6a03 	vldr	s12, [r7, #12]
 800839e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80083ba:	e087      	b.n	80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80083ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ce:	4b6a      	ldr	r3, [pc, #424]	@ (8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d6:	ee07 3a90 	vmov	s15, r3
 80083da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083de:	ed97 6a03 	vldr	s12, [r7, #12]
 80083e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083fe:	e065      	b.n	80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	ee07 3a90 	vmov	s15, r3
 8008406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008588 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800840e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008412:	4b59      	ldr	r3, [pc, #356]	@ (8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800841a:	ee07 3a90 	vmov	s15, r3
 800841e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008422:	ed97 6a03 	vldr	s12, [r7, #12]
 8008426:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800842a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800842e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800843a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008442:	e043      	b.n	80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800858c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008456:	4b48      	ldr	r3, [pc, #288]	@ (8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800845a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845e:	ee07 3a90 	vmov	s15, r3
 8008462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008466:	ed97 6a03 	vldr	s12, [r7, #12]
 800846a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800846e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800847a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008486:	e021      	b.n	80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	ee07 3a90 	vmov	s15, r3
 800848e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008492:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008588 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800849a:	4b37      	ldr	r3, [pc, #220]	@ (8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800849c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800849e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a2:	ee07 3a90 	vmov	s15, r3
 80084a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80084cc:	4b2a      	ldr	r3, [pc, #168]	@ (8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d0:	0a5b      	lsrs	r3, r3, #9
 80084d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084d6:	ee07 3a90 	vmov	s15, r3
 80084da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80084ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084f2:	ee17 2a90 	vmov	r2, s15
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80084fa:	4b1f      	ldr	r3, [pc, #124]	@ (8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fe:	0c1b      	lsrs	r3, r3, #16
 8008500:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008504:	ee07 3a90 	vmov	s15, r3
 8008508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008510:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008514:	edd7 6a07 	vldr	s13, [r7, #28]
 8008518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800851c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008520:	ee17 2a90 	vmov	r2, s15
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008528:	4b13      	ldr	r3, [pc, #76]	@ (8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800852a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852c:	0e1b      	lsrs	r3, r3, #24
 800852e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008532:	ee07 3a90 	vmov	s15, r3
 8008536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800853e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008542:	edd7 6a07 	vldr	s13, [r7, #28]
 8008546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800854a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800854e:	ee17 2a90 	vmov	r2, s15
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008556:	e008      	b.n	800856a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	609a      	str	r2, [r3, #8]
}
 800856a:	bf00      	nop
 800856c:	3724      	adds	r7, #36	@ 0x24
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	58024400 	.word	0x58024400
 800857c:	03d09000 	.word	0x03d09000
 8008580:	46000000 	.word	0x46000000
 8008584:	4c742400 	.word	0x4c742400
 8008588:	4a742400 	.word	0x4a742400
 800858c:	4bbebc20 	.word	0x4bbebc20

08008590 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008590:	b480      	push	{r7}
 8008592:	b089      	sub	sp, #36	@ 0x24
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008598:	4ba1      	ldr	r3, [pc, #644]	@ (8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800859a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800859c:	f003 0303 	and.w	r3, r3, #3
 80085a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80085a2:	4b9f      	ldr	r3, [pc, #636]	@ (8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a6:	0d1b      	lsrs	r3, r3, #20
 80085a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80085ae:	4b9c      	ldr	r3, [pc, #624]	@ (8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b2:	0a1b      	lsrs	r3, r3, #8
 80085b4:	f003 0301 	and.w	r3, r3, #1
 80085b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80085ba:	4b99      	ldr	r3, [pc, #612]	@ (8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085be:	08db      	lsrs	r3, r3, #3
 80085c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	fb02 f303 	mul.w	r3, r2, r3
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 8111 	beq.w	8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	f000 8083 	beq.w	80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	f200 80a1 	bhi.w	8008730 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d003      	beq.n	80085fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d056      	beq.n	80086a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80085fa:	e099      	b.n	8008730 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085fc:	4b88      	ldr	r3, [pc, #544]	@ (8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0320 	and.w	r3, r3, #32
 8008604:	2b00      	cmp	r3, #0
 8008606:	d02d      	beq.n	8008664 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008608:	4b85      	ldr	r3, [pc, #532]	@ (8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	08db      	lsrs	r3, r3, #3
 800860e:	f003 0303 	and.w	r3, r3, #3
 8008612:	4a84      	ldr	r2, [pc, #528]	@ (8008824 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008614:	fa22 f303 	lsr.w	r3, r2, r3
 8008618:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008632:	4b7b      	ldr	r3, [pc, #492]	@ (8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800863a:	ee07 3a90 	vmov	s15, r3
 800863e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008642:	ed97 6a03 	vldr	s12, [r7, #12]
 8008646:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008828 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800864a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800864e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800865a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800865e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008662:	e087      	b.n	8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	ee07 3a90 	vmov	s15, r3
 800866a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800882c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008676:	4b6a      	ldr	r3, [pc, #424]	@ (8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800867a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800867e:	ee07 3a90 	vmov	s15, r3
 8008682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008686:	ed97 6a03 	vldr	s12, [r7, #12]
 800868a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008828 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800868e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800869a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800869e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086a6:	e065      	b.n	8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	ee07 3a90 	vmov	s15, r3
 80086ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008830 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ba:	4b59      	ldr	r3, [pc, #356]	@ (8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c2:	ee07 3a90 	vmov	s15, r3
 80086c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008828 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086ea:	e043      	b.n	8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	ee07 3a90 	vmov	s15, r3
 80086f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008834 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80086fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086fe:	4b48      	ldr	r3, [pc, #288]	@ (8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008706:	ee07 3a90 	vmov	s15, r3
 800870a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800870e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008712:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008828 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800871a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800871e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800872a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800872e:	e021      	b.n	8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008830 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800873e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008742:	4b37      	ldr	r3, [pc, #220]	@ (8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800874a:	ee07 3a90 	vmov	s15, r3
 800874e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008752:	ed97 6a03 	vldr	s12, [r7, #12]
 8008756:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008828 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800875a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800875e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800876a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008772:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008774:	4b2a      	ldr	r3, [pc, #168]	@ (8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008778:	0a5b      	lsrs	r3, r3, #9
 800877a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800877e:	ee07 3a90 	vmov	s15, r3
 8008782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008786:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800878a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800878e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800879a:	ee17 2a90 	vmov	r2, s15
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80087a2:	4b1f      	ldr	r3, [pc, #124]	@ (8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a6:	0c1b      	lsrs	r3, r3, #16
 80087a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087ac:	ee07 3a90 	vmov	s15, r3
 80087b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80087c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087c8:	ee17 2a90 	vmov	r2, s15
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80087d0:	4b13      	ldr	r3, [pc, #76]	@ (8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d4:	0e1b      	lsrs	r3, r3, #24
 80087d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087da:	ee07 3a90 	vmov	s15, r3
 80087de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80087ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087f6:	ee17 2a90 	vmov	r2, s15
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80087fe:	e008      	b.n	8008812 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	609a      	str	r2, [r3, #8]
}
 8008812:	bf00      	nop
 8008814:	3724      	adds	r7, #36	@ 0x24
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	58024400 	.word	0x58024400
 8008824:	03d09000 	.word	0x03d09000
 8008828:	46000000 	.word	0x46000000
 800882c:	4c742400 	.word	0x4c742400
 8008830:	4a742400 	.word	0x4a742400
 8008834:	4bbebc20 	.word	0x4bbebc20

08008838 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008838:	b480      	push	{r7}
 800883a:	b089      	sub	sp, #36	@ 0x24
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008840:	4ba0      	ldr	r3, [pc, #640]	@ (8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008844:	f003 0303 	and.w	r3, r3, #3
 8008848:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800884a:	4b9e      	ldr	r3, [pc, #632]	@ (8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800884c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884e:	091b      	lsrs	r3, r3, #4
 8008850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008854:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008856:	4b9b      	ldr	r3, [pc, #620]	@ (8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008860:	4b98      	ldr	r3, [pc, #608]	@ (8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008864:	08db      	lsrs	r3, r3, #3
 8008866:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	fb02 f303 	mul.w	r3, r2, r3
 8008870:	ee07 3a90 	vmov	s15, r3
 8008874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008878:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2b00      	cmp	r3, #0
 8008880:	f000 8111 	beq.w	8008aa6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2b02      	cmp	r3, #2
 8008888:	f000 8083 	beq.w	8008992 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	2b02      	cmp	r3, #2
 8008890:	f200 80a1 	bhi.w	80089d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d056      	beq.n	800894e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80088a0:	e099      	b.n	80089d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088a2:	4b88      	ldr	r3, [pc, #544]	@ (8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d02d      	beq.n	800890a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088ae:	4b85      	ldr	r3, [pc, #532]	@ (8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	08db      	lsrs	r3, r3, #3
 80088b4:	f003 0303 	and.w	r3, r3, #3
 80088b8:	4a83      	ldr	r2, [pc, #524]	@ (8008ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80088ba:	fa22 f303 	lsr.w	r3, r2, r3
 80088be:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	ee07 3a90 	vmov	s15, r3
 80088c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	ee07 3a90 	vmov	s15, r3
 80088d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d8:	4b7a      	ldr	r3, [pc, #488]	@ (8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e0:	ee07 3a90 	vmov	s15, r3
 80088e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80088ec:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008acc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008904:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008908:	e087      	b.n	8008a1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	ee07 3a90 	vmov	s15, r3
 8008910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008914:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800891c:	4b69      	ldr	r3, [pc, #420]	@ (8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800891e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008924:	ee07 3a90 	vmov	s15, r3
 8008928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800892c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008930:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008acc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008934:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008938:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800893c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008948:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800894c:	e065      	b.n	8008a1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	ee07 3a90 	vmov	s15, r3
 8008954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008958:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800895c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008960:	4b58      	ldr	r3, [pc, #352]	@ (8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008968:	ee07 3a90 	vmov	s15, r3
 800896c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008970:	ed97 6a03 	vldr	s12, [r7, #12]
 8008974:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008acc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008978:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800897c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008980:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008984:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800898c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008990:	e043      	b.n	8008a1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	ee07 3a90 	vmov	s15, r3
 8008998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80089a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089a4:	4b47      	ldr	r3, [pc, #284]	@ (8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ac:	ee07 3a90 	vmov	s15, r3
 80089b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80089b8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008acc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089d4:	e021      	b.n	8008a1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	ee07 3a90 	vmov	s15, r3
 80089dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80089e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089e8:	4b36      	ldr	r3, [pc, #216]	@ (8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f0:	ee07 3a90 	vmov	s15, r3
 80089f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80089fc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008acc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a18:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a1e:	0a5b      	lsrs	r3, r3, #9
 8008a20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a24:	ee07 3a90 	vmov	s15, r3
 8008a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a40:	ee17 2a90 	vmov	r2, s15
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008a48:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a4c:	0c1b      	lsrs	r3, r3, #16
 8008a4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a52:	ee07 3a90 	vmov	s15, r3
 8008a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a6e:	ee17 2a90 	vmov	r2, s15
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008a76:	4b13      	ldr	r3, [pc, #76]	@ (8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a7a:	0e1b      	lsrs	r3, r3, #24
 8008a7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a80:	ee07 3a90 	vmov	s15, r3
 8008a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a9c:	ee17 2a90 	vmov	r2, s15
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008aa4:	e008      	b.n	8008ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	609a      	str	r2, [r3, #8]
}
 8008ab8:	bf00      	nop
 8008aba:	3724      	adds	r7, #36	@ 0x24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	58024400 	.word	0x58024400
 8008ac8:	03d09000 	.word	0x03d09000
 8008acc:	46000000 	.word	0x46000000
 8008ad0:	4c742400 	.word	0x4c742400
 8008ad4:	4a742400 	.word	0x4a742400
 8008ad8:	4bbebc20 	.word	0x4bbebc20

08008adc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008aea:	4b53      	ldr	r3, [pc, #332]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aee:	f003 0303 	and.w	r3, r3, #3
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d101      	bne.n	8008afa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e099      	b.n	8008c2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008afa:	4b4f      	ldr	r3, [pc, #316]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a4e      	ldr	r2, [pc, #312]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008b00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b06:	f7f8 fa37 	bl	8000f78 <HAL_GetTick>
 8008b0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b0c:	e008      	b.n	8008b20 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b0e:	f7f8 fa33 	bl	8000f78 <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d901      	bls.n	8008b20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e086      	b.n	8008c2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b20:	4b45      	ldr	r3, [pc, #276]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1f0      	bne.n	8008b0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b2c:	4b42      	ldr	r3, [pc, #264]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b30:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	031b      	lsls	r3, r3, #12
 8008b3a:	493f      	ldr	r1, [pc, #252]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	025b      	lsls	r3, r3, #9
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	431a      	orrs	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	041b      	lsls	r3, r3, #16
 8008b5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b62:	431a      	orrs	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	061b      	lsls	r3, r3, #24
 8008b6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b70:	4931      	ldr	r1, [pc, #196]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008b72:	4313      	orrs	r3, r2
 8008b74:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b76:	4b30      	ldr	r3, [pc, #192]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	492d      	ldr	r1, [pc, #180]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008b84:	4313      	orrs	r3, r2
 8008b86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b88:	4b2b      	ldr	r3, [pc, #172]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8c:	f023 0220 	bic.w	r2, r3, #32
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	4928      	ldr	r1, [pc, #160]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b9a:	4b27      	ldr	r3, [pc, #156]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9e:	4a26      	ldr	r2, [pc, #152]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008ba0:	f023 0310 	bic.w	r3, r3, #16
 8008ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008ba6:	4b24      	ldr	r3, [pc, #144]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008ba8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008baa:	4b24      	ldr	r3, [pc, #144]	@ (8008c3c <RCCEx_PLL2_Config+0x160>)
 8008bac:	4013      	ands	r3, r2
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	69d2      	ldr	r2, [r2, #28]
 8008bb2:	00d2      	lsls	r2, r2, #3
 8008bb4:	4920      	ldr	r1, [pc, #128]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008bba:	4b1f      	ldr	r3, [pc, #124]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008bc0:	f043 0310 	orr.w	r3, r3, #16
 8008bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d106      	bne.n	8008bda <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd0:	4a19      	ldr	r2, [pc, #100]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008bd2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008bd8:	e00f      	b.n	8008bfa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d106      	bne.n	8008bee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008be0:	4b15      	ldr	r3, [pc, #84]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be4:	4a14      	ldr	r2, [pc, #80]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008be6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008bec:	e005      	b.n	8008bfa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008bee:	4b12      	ldr	r3, [pc, #72]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf2:	4a11      	ldr	r2, [pc, #68]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008bf4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008bf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008c00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c06:	f7f8 f9b7 	bl	8000f78 <HAL_GetTick>
 8008c0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c0c:	e008      	b.n	8008c20 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c0e:	f7f8 f9b3 	bl	8000f78 <HAL_GetTick>
 8008c12:	4602      	mov	r2, r0
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d901      	bls.n	8008c20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e006      	b.n	8008c2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c20:	4b05      	ldr	r3, [pc, #20]	@ (8008c38 <RCCEx_PLL2_Config+0x15c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d0f0      	beq.n	8008c0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	ffff0007 	.word	0xffff0007

08008c40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c4e:	4b53      	ldr	r3, [pc, #332]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c52:	f003 0303 	and.w	r3, r3, #3
 8008c56:	2b03      	cmp	r3, #3
 8008c58:	d101      	bne.n	8008c5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e099      	b.n	8008d92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a4e      	ldr	r2, [pc, #312]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c6a:	f7f8 f985 	bl	8000f78 <HAL_GetTick>
 8008c6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c70:	e008      	b.n	8008c84 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c72:	f7f8 f981 	bl	8000f78 <HAL_GetTick>
 8008c76:	4602      	mov	r2, r0
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d901      	bls.n	8008c84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c80:	2303      	movs	r3, #3
 8008c82:	e086      	b.n	8008d92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c84:	4b45      	ldr	r3, [pc, #276]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1f0      	bne.n	8008c72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c90:	4b42      	ldr	r3, [pc, #264]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c94:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	051b      	lsls	r3, r3, #20
 8008c9e:	493f      	ldr	r1, [pc, #252]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	025b      	lsls	r3, r3, #9
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	041b      	lsls	r3, r3, #16
 8008cc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	061b      	lsls	r3, r3, #24
 8008cd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008cd4:	4931      	ldr	r1, [pc, #196]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008cda:	4b30      	ldr	r3, [pc, #192]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	492d      	ldr	r1, [pc, #180]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008cec:	4b2b      	ldr	r3, [pc, #172]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	4928      	ldr	r1, [pc, #160]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008cfe:	4b27      	ldr	r3, [pc, #156]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d02:	4a26      	ldr	r2, [pc, #152]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d0a:	4b24      	ldr	r3, [pc, #144]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008d0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d0e:	4b24      	ldr	r3, [pc, #144]	@ (8008da0 <RCCEx_PLL3_Config+0x160>)
 8008d10:	4013      	ands	r3, r2
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	69d2      	ldr	r2, [r2, #28]
 8008d16:	00d2      	lsls	r2, r2, #3
 8008d18:	4920      	ldr	r1, [pc, #128]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d22:	4a1e      	ldr	r2, [pc, #120]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d106      	bne.n	8008d3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d30:	4b1a      	ldr	r3, [pc, #104]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d34:	4a19      	ldr	r2, [pc, #100]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008d36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d3c:	e00f      	b.n	8008d5e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d106      	bne.n	8008d52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d44:	4b15      	ldr	r3, [pc, #84]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d48:	4a14      	ldr	r2, [pc, #80]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008d4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d50:	e005      	b.n	8008d5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d52:	4b12      	ldr	r3, [pc, #72]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d56:	4a11      	ldr	r2, [pc, #68]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008d58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a0e      	ldr	r2, [pc, #56]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d6a:	f7f8 f905 	bl	8000f78 <HAL_GetTick>
 8008d6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d70:	e008      	b.n	8008d84 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d72:	f7f8 f901 	bl	8000f78 <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d901      	bls.n	8008d84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e006      	b.n	8008d92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d84:	4b05      	ldr	r3, [pc, #20]	@ (8008d9c <RCCEx_PLL3_Config+0x15c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0f0      	beq.n	8008d72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	58024400 	.word	0x58024400
 8008da0:	ffff0007 	.word	0xffff0007

08008da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d101      	bne.n	8008db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e049      	b.n	8008e4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d106      	bne.n	8008dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7f7 ff46 	bl	8000c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	3304      	adds	r3, #4
 8008de0:	4619      	mov	r1, r3
 8008de2:	4610      	mov	r0, r2
 8008de4:	f000 f8b4 	bl	8008f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d001      	beq.n	8008e6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e056      	b.n	8008f1a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a2b      	ldr	r2, [pc, #172]	@ (8008f28 <HAL_TIM_Base_Start+0xd4>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d02c      	beq.n	8008ed8 <HAL_TIM_Base_Start+0x84>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e86:	d027      	beq.n	8008ed8 <HAL_TIM_Base_Start+0x84>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a27      	ldr	r2, [pc, #156]	@ (8008f2c <HAL_TIM_Base_Start+0xd8>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d022      	beq.n	8008ed8 <HAL_TIM_Base_Start+0x84>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a26      	ldr	r2, [pc, #152]	@ (8008f30 <HAL_TIM_Base_Start+0xdc>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d01d      	beq.n	8008ed8 <HAL_TIM_Base_Start+0x84>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a24      	ldr	r2, [pc, #144]	@ (8008f34 <HAL_TIM_Base_Start+0xe0>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d018      	beq.n	8008ed8 <HAL_TIM_Base_Start+0x84>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a23      	ldr	r2, [pc, #140]	@ (8008f38 <HAL_TIM_Base_Start+0xe4>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d013      	beq.n	8008ed8 <HAL_TIM_Base_Start+0x84>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a21      	ldr	r2, [pc, #132]	@ (8008f3c <HAL_TIM_Base_Start+0xe8>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d00e      	beq.n	8008ed8 <HAL_TIM_Base_Start+0x84>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a20      	ldr	r2, [pc, #128]	@ (8008f40 <HAL_TIM_Base_Start+0xec>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d009      	beq.n	8008ed8 <HAL_TIM_Base_Start+0x84>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8008f44 <HAL_TIM_Base_Start+0xf0>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d004      	beq.n	8008ed8 <HAL_TIM_Base_Start+0x84>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8008f48 <HAL_TIM_Base_Start+0xf4>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d115      	bne.n	8008f04 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	689a      	ldr	r2, [r3, #8]
 8008ede:	4b1b      	ldr	r3, [pc, #108]	@ (8008f4c <HAL_TIM_Base_Start+0xf8>)
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b06      	cmp	r3, #6
 8008ee8:	d015      	beq.n	8008f16 <HAL_TIM_Base_Start+0xc2>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ef0:	d011      	beq.n	8008f16 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f042 0201 	orr.w	r2, r2, #1
 8008f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f02:	e008      	b.n	8008f16 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f042 0201 	orr.w	r2, r2, #1
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	e000      	b.n	8008f18 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	40010000 	.word	0x40010000
 8008f2c:	40000400 	.word	0x40000400
 8008f30:	40000800 	.word	0x40000800
 8008f34:	40000c00 	.word	0x40000c00
 8008f38:	40010400 	.word	0x40010400
 8008f3c:	40001800 	.word	0x40001800
 8008f40:	40014000 	.word	0x40014000
 8008f44:	4000e000 	.word	0x4000e000
 8008f48:	4000e400 	.word	0x4000e400
 8008f4c:	00010007 	.word	0x00010007

08008f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a4a      	ldr	r2, [pc, #296]	@ (800908c <TIM_Base_SetConfig+0x13c>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d013      	beq.n	8008f90 <TIM_Base_SetConfig+0x40>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f6e:	d00f      	beq.n	8008f90 <TIM_Base_SetConfig+0x40>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a47      	ldr	r2, [pc, #284]	@ (8009090 <TIM_Base_SetConfig+0x140>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d00b      	beq.n	8008f90 <TIM_Base_SetConfig+0x40>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a46      	ldr	r2, [pc, #280]	@ (8009094 <TIM_Base_SetConfig+0x144>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d007      	beq.n	8008f90 <TIM_Base_SetConfig+0x40>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a45      	ldr	r2, [pc, #276]	@ (8009098 <TIM_Base_SetConfig+0x148>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d003      	beq.n	8008f90 <TIM_Base_SetConfig+0x40>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a44      	ldr	r2, [pc, #272]	@ (800909c <TIM_Base_SetConfig+0x14c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d108      	bne.n	8008fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a39      	ldr	r2, [pc, #228]	@ (800908c <TIM_Base_SetConfig+0x13c>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d027      	beq.n	8008ffa <TIM_Base_SetConfig+0xaa>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fb0:	d023      	beq.n	8008ffa <TIM_Base_SetConfig+0xaa>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a36      	ldr	r2, [pc, #216]	@ (8009090 <TIM_Base_SetConfig+0x140>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d01f      	beq.n	8008ffa <TIM_Base_SetConfig+0xaa>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a35      	ldr	r2, [pc, #212]	@ (8009094 <TIM_Base_SetConfig+0x144>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d01b      	beq.n	8008ffa <TIM_Base_SetConfig+0xaa>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a34      	ldr	r2, [pc, #208]	@ (8009098 <TIM_Base_SetConfig+0x148>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d017      	beq.n	8008ffa <TIM_Base_SetConfig+0xaa>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a33      	ldr	r2, [pc, #204]	@ (800909c <TIM_Base_SetConfig+0x14c>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d013      	beq.n	8008ffa <TIM_Base_SetConfig+0xaa>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a32      	ldr	r2, [pc, #200]	@ (80090a0 <TIM_Base_SetConfig+0x150>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d00f      	beq.n	8008ffa <TIM_Base_SetConfig+0xaa>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a31      	ldr	r2, [pc, #196]	@ (80090a4 <TIM_Base_SetConfig+0x154>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d00b      	beq.n	8008ffa <TIM_Base_SetConfig+0xaa>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a30      	ldr	r2, [pc, #192]	@ (80090a8 <TIM_Base_SetConfig+0x158>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d007      	beq.n	8008ffa <TIM_Base_SetConfig+0xaa>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a2f      	ldr	r2, [pc, #188]	@ (80090ac <TIM_Base_SetConfig+0x15c>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d003      	beq.n	8008ffa <TIM_Base_SetConfig+0xaa>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80090b0 <TIM_Base_SetConfig+0x160>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d108      	bne.n	800900c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	4313      	orrs	r3, r2
 800900a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	4313      	orrs	r3, r2
 8009018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	689a      	ldr	r2, [r3, #8]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a16      	ldr	r2, [pc, #88]	@ (800908c <TIM_Base_SetConfig+0x13c>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d00f      	beq.n	8009058 <TIM_Base_SetConfig+0x108>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a18      	ldr	r2, [pc, #96]	@ (800909c <TIM_Base_SetConfig+0x14c>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d00b      	beq.n	8009058 <TIM_Base_SetConfig+0x108>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a17      	ldr	r2, [pc, #92]	@ (80090a0 <TIM_Base_SetConfig+0x150>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d007      	beq.n	8009058 <TIM_Base_SetConfig+0x108>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a16      	ldr	r2, [pc, #88]	@ (80090a4 <TIM_Base_SetConfig+0x154>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d003      	beq.n	8009058 <TIM_Base_SetConfig+0x108>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a15      	ldr	r2, [pc, #84]	@ (80090a8 <TIM_Base_SetConfig+0x158>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d103      	bne.n	8009060 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	691a      	ldr	r2, [r3, #16]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b01      	cmp	r3, #1
 8009070:	d105      	bne.n	800907e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	f023 0201 	bic.w	r2, r3, #1
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	611a      	str	r2, [r3, #16]
  }
}
 800907e:	bf00      	nop
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	40010000 	.word	0x40010000
 8009090:	40000400 	.word	0x40000400
 8009094:	40000800 	.word	0x40000800
 8009098:	40000c00 	.word	0x40000c00
 800909c:	40010400 	.word	0x40010400
 80090a0:	40014000 	.word	0x40014000
 80090a4:	40014400 	.word	0x40014400
 80090a8:	40014800 	.word	0x40014800
 80090ac:	4000e000 	.word	0x4000e000
 80090b0:	4000e400 	.word	0x4000e400

080090b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d101      	bne.n	80090cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090c8:	2302      	movs	r3, #2
 80090ca:	e077      	b.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2202      	movs	r2, #2
 80090d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a35      	ldr	r2, [pc, #212]	@ (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d004      	beq.n	8009100 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a34      	ldr	r2, [pc, #208]	@ (80091cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d108      	bne.n	8009112 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009106:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	4313      	orrs	r3, r2
 8009110:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009118:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	4313      	orrs	r3, r2
 8009122:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a25      	ldr	r2, [pc, #148]	@ (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d02c      	beq.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800913e:	d027      	beq.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a22      	ldr	r2, [pc, #136]	@ (80091d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d022      	beq.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a21      	ldr	r2, [pc, #132]	@ (80091d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d01d      	beq.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a1f      	ldr	r2, [pc, #124]	@ (80091d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d018      	beq.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a1a      	ldr	r2, [pc, #104]	@ (80091cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d013      	beq.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a1b      	ldr	r2, [pc, #108]	@ (80091dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d00e      	beq.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a1a      	ldr	r2, [pc, #104]	@ (80091e0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d009      	beq.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a18      	ldr	r2, [pc, #96]	@ (80091e4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d004      	beq.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a17      	ldr	r2, [pc, #92]	@ (80091e8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d10c      	bne.n	80091aa <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009196:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	4313      	orrs	r3, r2
 80091a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr
 80091c8:	40010000 	.word	0x40010000
 80091cc:	40010400 	.word	0x40010400
 80091d0:	40000400 	.word	0x40000400
 80091d4:	40000800 	.word	0x40000800
 80091d8:	40000c00 	.word	0x40000c00
 80091dc:	40001800 	.word	0x40001800
 80091e0:	40014000 	.word	0x40014000
 80091e4:	4000e000 	.word	0x4000e000
 80091e8:	4000e400 	.word	0x4000e400

080091ec <checkint>:
 80091ec:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80091f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80091f2:	d910      	bls.n	8009216 <checkint+0x2a>
 80091f4:	2b96      	cmp	r3, #150	@ 0x96
 80091f6:	d80c      	bhi.n	8009212 <checkint+0x26>
 80091f8:	2201      	movs	r2, #1
 80091fa:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80091fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009202:	1e5a      	subs	r2, r3, #1
 8009204:	4202      	tst	r2, r0
 8009206:	d106      	bne.n	8009216 <checkint+0x2a>
 8009208:	4203      	tst	r3, r0
 800920a:	bf0c      	ite	eq
 800920c:	2002      	moveq	r0, #2
 800920e:	2001      	movne	r0, #1
 8009210:	4770      	bx	lr
 8009212:	2002      	movs	r0, #2
 8009214:	4770      	bx	lr
 8009216:	2000      	movs	r0, #0
 8009218:	4770      	bx	lr
 800921a:	0000      	movs	r0, r0
 800921c:	0000      	movs	r0, r0
	...

08009220 <powf>:
 8009220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009222:	ee10 1a10 	vmov	r1, s0
 8009226:	ee10 4a90 	vmov	r4, s1
 800922a:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 800922e:	0063      	lsls	r3, r4, #1
 8009230:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8009234:	eef0 7a40 	vmov.f32	s15, s0
 8009238:	eeb0 7a60 	vmov.f32	s14, s1
 800923c:	f103 30ff 	add.w	r0, r3, #4294967295
 8009240:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 8009244:	d252      	bcs.n	80092ec <powf+0xcc>
 8009246:	4290      	cmp	r0, r2
 8009248:	d258      	bcs.n	80092fc <powf+0xdc>
 800924a:	2000      	movs	r0, #0
 800924c:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 8009250:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 8009254:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8009258:	0ddb      	lsrs	r3, r3, #23
 800925a:	4a9d      	ldr	r2, [pc, #628]	@ (80094d0 <powf+0x2b0>)
 800925c:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 8009260:	05db      	lsls	r3, r3, #23
 8009262:	1ac9      	subs	r1, r1, r3
 8009264:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8009268:	ee07 1a90 	vmov	s15, r1
 800926c:	ed94 5b02 	vldr	d5, [r4, #8]
 8009270:	ed94 4b00 	vldr	d4, [r4]
 8009274:	15db      	asrs	r3, r3, #23
 8009276:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800927a:	ee07 3a90 	vmov	s15, r3
 800927e:	eea4 2b06 	vfma.f64	d2, d4, d6
 8009282:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 8009286:	ee22 4b02 	vmul.f64	d4, d2, d2
 800928a:	ee24 0b04 	vmul.f64	d0, d4, d4
 800928e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8009292:	ee36 6b05 	vadd.f64	d6, d6, d5
 8009296:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 800929a:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 800929e:	eea2 1b05 	vfma.f64	d1, d2, d5
 80092a2:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 80092a6:	eea2 5b03 	vfma.f64	d5, d2, d3
 80092aa:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 80092ae:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80092b2:	eea2 6b03 	vfma.f64	d6, d2, d3
 80092b6:	eea4 6b05 	vfma.f64	d6, d4, d5
 80092ba:	eea1 6b00 	vfma.f64	d6, d1, d0
 80092be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80092c2:	ee17 3a90 	vmov	r3, s15
 80092c6:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 80092ca:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 80092ce:	429a      	cmp	r2, r3
 80092d0:	f0c0 80b8 	bcc.w	8009444 <powf+0x224>
 80092d4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 80094b0 <powf+0x290>
 80092d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80092dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e0:	dd79      	ble.n	80093d6 <powf+0x1b6>
 80092e2:	b003      	add	sp, #12
 80092e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092e8:	f000 b920 	b.w	800952c <__math_oflowf>
 80092ec:	4290      	cmp	r0, r2
 80092ee:	d330      	bcc.n	8009352 <powf+0x132>
 80092f0:	b12b      	cbz	r3, 80092fe <powf+0xde>
 80092f2:	0049      	lsls	r1, r1, #1
 80092f4:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 80092f8:	d808      	bhi.n	800930c <powf+0xec>
 80092fa:	e015      	b.n	8009328 <powf+0x108>
 80092fc:	b953      	cbnz	r3, 8009314 <powf+0xf4>
 80092fe:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 8009302:	0049      	lsls	r1, r1, #1
 8009304:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 8009308:	f240 80ca 	bls.w	80094a0 <powf+0x280>
 800930c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8009310:	b003      	add	sp, #12
 8009312:	bd30      	pop	{r4, r5, pc}
 8009314:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8009318:	d105      	bne.n	8009326 <powf+0x106>
 800931a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800931e:	0064      	lsls	r4, r4, #1
 8009320:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009324:	e7f0      	b.n	8009308 <powf+0xe8>
 8009326:	0049      	lsls	r1, r1, #1
 8009328:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 800932c:	d1ee      	bne.n	800930c <powf+0xec>
 800932e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8009332:	f000 80b5 	beq.w	80094a0 <powf+0x280>
 8009336:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800933a:	ea6f 0404 	mvn.w	r4, r4
 800933e:	bf34      	ite	cc
 8009340:	2100      	movcc	r1, #0
 8009342:	2101      	movcs	r1, #1
 8009344:	0fe4      	lsrs	r4, r4, #31
 8009346:	42a1      	cmp	r1, r4
 8009348:	f040 80ad 	bne.w	80094a6 <powf+0x286>
 800934c:	ee27 0a07 	vmul.f32	s0, s14, s14
 8009350:	e7de      	b.n	8009310 <powf+0xf0>
 8009352:	004d      	lsls	r5, r1, #1
 8009354:	1e6b      	subs	r3, r5, #1
 8009356:	4293      	cmp	r3, r2
 8009358:	d31b      	bcc.n	8009392 <powf+0x172>
 800935a:	2900      	cmp	r1, #0
 800935c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009360:	da0e      	bge.n	8009380 <powf+0x160>
 8009362:	4620      	mov	r0, r4
 8009364:	f7ff ff42 	bl	80091ec <checkint>
 8009368:	2801      	cmp	r0, #1
 800936a:	d109      	bne.n	8009380 <powf+0x160>
 800936c:	eeb1 0a40 	vneg.f32	s0, s0
 8009370:	b945      	cbnz	r5, 8009384 <powf+0x164>
 8009372:	2c00      	cmp	r4, #0
 8009374:	dacc      	bge.n	8009310 <powf+0xf0>
 8009376:	b003      	add	sp, #12
 8009378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800937c:	f000 b8dc 	b.w	8009538 <__math_divzerof>
 8009380:	2000      	movs	r0, #0
 8009382:	e7f5      	b.n	8009370 <powf+0x150>
 8009384:	2c00      	cmp	r4, #0
 8009386:	dac3      	bge.n	8009310 <powf+0xf0>
 8009388:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800938c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009390:	e7be      	b.n	8009310 <powf+0xf0>
 8009392:	2900      	cmp	r1, #0
 8009394:	da1d      	bge.n	80093d2 <powf+0x1b2>
 8009396:	4620      	mov	r0, r4
 8009398:	f7ff ff28 	bl	80091ec <checkint>
 800939c:	b920      	cbnz	r0, 80093a8 <powf+0x188>
 800939e:	b003      	add	sp, #12
 80093a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093a4:	f000 b8da 	b.w	800955c <__math_invalidf>
 80093a8:	1e43      	subs	r3, r0, #1
 80093aa:	4258      	negs	r0, r3
 80093ac:	4158      	adcs	r0, r3
 80093ae:	0400      	lsls	r0, r0, #16
 80093b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80093b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80093b8:	f4bf af48 	bcs.w	800924c <powf+0x2c>
 80093bc:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80094d4 <powf+0x2b4>
 80093c0:	ee27 0aa6 	vmul.f32	s0, s15, s13
 80093c4:	ee10 3a10 	vmov	r3, s0
 80093c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80093cc:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 80093d0:	e73c      	b.n	800924c <powf+0x2c>
 80093d2:	2000      	movs	r0, #0
 80093d4:	e7ee      	b.n	80093b4 <powf+0x194>
 80093d6:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 80094b8 <powf+0x298>
 80093da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80093de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e2:	dd0f      	ble.n	8009404 <powf+0x1e4>
 80093e4:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 80093e8:	b1c0      	cbz	r0, 800941c <powf+0x1fc>
 80093ea:	9301      	str	r3, [sp, #4]
 80093ec:	eddd 6a01 	vldr	s13, [sp, #4]
 80093f0:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 80093f4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80093f8:	eef4 6a46 	vcmp.f32	s13, s12
 80093fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009400:	f47f af6f 	bne.w	80092e2 <powf+0xc2>
 8009404:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 80094c0 <powf+0x2a0>
 8009408:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800940c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009410:	d80c      	bhi.n	800942c <powf+0x20c>
 8009412:	b003      	add	sp, #12
 8009414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009418:	f000 b87c 	b.w	8009514 <__math_uflowf>
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	eddd 6a00 	vldr	s13, [sp]
 8009422:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8009426:	ee76 6a86 	vadd.f32	s13, s13, s12
 800942a:	e7e5      	b.n	80093f8 <powf+0x1d8>
 800942c:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 80094c8 <powf+0x2a8>
 8009430:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009438:	d504      	bpl.n	8009444 <powf+0x224>
 800943a:	b003      	add	sp, #12
 800943c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009440:	f000 b86e 	b.w	8009520 <__math_may_uflowf>
 8009444:	4b24      	ldr	r3, [pc, #144]	@ (80094d8 <powf+0x2b8>)
 8009446:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800944a:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 800944e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009452:	ee16 2a10 	vmov	r2, s12
 8009456:	ee36 6b45 	vsub.f64	d6, d6, d5
 800945a:	f002 011f 	and.w	r1, r2, #31
 800945e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009462:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 8009466:	ee27 4b07 	vmul.f64	d4, d7, d7
 800946a:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 800946e:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8009472:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8009476:	eea7 6b05 	vfma.f64	d6, d7, d5
 800947a:	686d      	ldr	r5, [r5, #4]
 800947c:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 8009480:	1880      	adds	r0, r0, r2
 8009482:	2100      	movs	r1, #0
 8009484:	190a      	adds	r2, r1, r4
 8009486:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800948a:	eea7 0b05 	vfma.f64	d0, d7, d5
 800948e:	ec43 2b17 	vmov	d7, r2, r3
 8009492:	eea6 0b04 	vfma.f64	d0, d6, d4
 8009496:	ee20 0b07 	vmul.f64	d0, d0, d7
 800949a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800949e:	e737      	b.n	8009310 <powf+0xf0>
 80094a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80094a4:	e734      	b.n	8009310 <powf+0xf0>
 80094a6:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80094dc <powf+0x2bc>
 80094aa:	e731      	b.n	8009310 <powf+0xf0>
 80094ac:	f3af 8000 	nop.w
 80094b0:	ffd1d571 	.word	0xffd1d571
 80094b4:	405fffff 	.word	0x405fffff
 80094b8:	ffa3aae2 	.word	0xffa3aae2
 80094bc:	405fffff 	.word	0x405fffff
 80094c0:	00000000 	.word	0x00000000
 80094c4:	c062c000 	.word	0xc062c000
 80094c8:	00000000 	.word	0x00000000
 80094cc:	c062a000 	.word	0xc062a000
 80094d0:	08009758 	.word	0x08009758
 80094d4:	4b000000 	.word	0x4b000000
 80094d8:	08009610 	.word	0x08009610
 80094dc:	00000000 	.word	0x00000000

080094e0 <with_errnof>:
 80094e0:	b510      	push	{r4, lr}
 80094e2:	ed2d 8b02 	vpush	{d8}
 80094e6:	eeb0 8a40 	vmov.f32	s16, s0
 80094ea:	4604      	mov	r4, r0
 80094ec:	f000 f84e 	bl	800958c <__errno>
 80094f0:	eeb0 0a48 	vmov.f32	s0, s16
 80094f4:	ecbd 8b02 	vpop	{d8}
 80094f8:	6004      	str	r4, [r0, #0]
 80094fa:	bd10      	pop	{r4, pc}

080094fc <xflowf>:
 80094fc:	b130      	cbz	r0, 800950c <xflowf+0x10>
 80094fe:	eef1 7a40 	vneg.f32	s15, s0
 8009502:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009506:	2022      	movs	r0, #34	@ 0x22
 8009508:	f7ff bfea 	b.w	80094e0 <with_errnof>
 800950c:	eef0 7a40 	vmov.f32	s15, s0
 8009510:	e7f7      	b.n	8009502 <xflowf+0x6>
	...

08009514 <__math_uflowf>:
 8009514:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800951c <__math_uflowf+0x8>
 8009518:	f7ff bff0 	b.w	80094fc <xflowf>
 800951c:	10000000 	.word	0x10000000

08009520 <__math_may_uflowf>:
 8009520:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009528 <__math_may_uflowf+0x8>
 8009524:	f7ff bfea 	b.w	80094fc <xflowf>
 8009528:	1a200000 	.word	0x1a200000

0800952c <__math_oflowf>:
 800952c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009534 <__math_oflowf+0x8>
 8009530:	f7ff bfe4 	b.w	80094fc <xflowf>
 8009534:	70000000 	.word	0x70000000

08009538 <__math_divzerof>:
 8009538:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8009558 <__math_divzerof+0x20>
 800953c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009540:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009544:	2800      	cmp	r0, #0
 8009546:	f04f 0022 	mov.w	r0, #34	@ 0x22
 800954a:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800954e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009552:	f7ff bfc5 	b.w	80094e0 <with_errnof>
 8009556:	bf00      	nop
 8009558:	00000000 	.word	0x00000000

0800955c <__math_invalidf>:
 800955c:	eef0 7a40 	vmov.f32	s15, s0
 8009560:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009564:	eef4 7a67 	vcmp.f32	s15, s15
 8009568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8009570:	d602      	bvs.n	8009578 <__math_invalidf+0x1c>
 8009572:	2021      	movs	r0, #33	@ 0x21
 8009574:	f7ff bfb4 	b.w	80094e0 <with_errnof>
 8009578:	4770      	bx	lr

0800957a <memset>:
 800957a:	4402      	add	r2, r0
 800957c:	4603      	mov	r3, r0
 800957e:	4293      	cmp	r3, r2
 8009580:	d100      	bne.n	8009584 <memset+0xa>
 8009582:	4770      	bx	lr
 8009584:	f803 1b01 	strb.w	r1, [r3], #1
 8009588:	e7f9      	b.n	800957e <memset+0x4>
	...

0800958c <__errno>:
 800958c:	4b01      	ldr	r3, [pc, #4]	@ (8009594 <__errno+0x8>)
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	24000010 	.word	0x24000010

08009598 <__libc_init_array>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	4d0d      	ldr	r5, [pc, #52]	@ (80095d0 <__libc_init_array+0x38>)
 800959c:	4c0d      	ldr	r4, [pc, #52]	@ (80095d4 <__libc_init_array+0x3c>)
 800959e:	1b64      	subs	r4, r4, r5
 80095a0:	10a4      	asrs	r4, r4, #2
 80095a2:	2600      	movs	r6, #0
 80095a4:	42a6      	cmp	r6, r4
 80095a6:	d109      	bne.n	80095bc <__libc_init_array+0x24>
 80095a8:	4d0b      	ldr	r5, [pc, #44]	@ (80095d8 <__libc_init_array+0x40>)
 80095aa:	4c0c      	ldr	r4, [pc, #48]	@ (80095dc <__libc_init_array+0x44>)
 80095ac:	f000 f818 	bl	80095e0 <_init>
 80095b0:	1b64      	subs	r4, r4, r5
 80095b2:	10a4      	asrs	r4, r4, #2
 80095b4:	2600      	movs	r6, #0
 80095b6:	42a6      	cmp	r6, r4
 80095b8:	d105      	bne.n	80095c6 <__libc_init_array+0x2e>
 80095ba:	bd70      	pop	{r4, r5, r6, pc}
 80095bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c0:	4798      	blx	r3
 80095c2:	3601      	adds	r6, #1
 80095c4:	e7ee      	b.n	80095a4 <__libc_init_array+0xc>
 80095c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ca:	4798      	blx	r3
 80095cc:	3601      	adds	r6, #1
 80095ce:	e7f2      	b.n	80095b6 <__libc_init_array+0x1e>
 80095d0:	08009880 	.word	0x08009880
 80095d4:	08009880 	.word	0x08009880
 80095d8:	08009880 	.word	0x08009880
 80095dc:	08009884 	.word	0x08009884

080095e0 <_init>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	bf00      	nop
 80095e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e6:	bc08      	pop	{r3}
 80095e8:	469e      	mov	lr, r3
 80095ea:	4770      	bx	lr

080095ec <_fini>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	bf00      	nop
 80095f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f2:	bc08      	pop	{r3}
 80095f4:	469e      	mov	lr, r3
 80095f6:	4770      	bx	lr
