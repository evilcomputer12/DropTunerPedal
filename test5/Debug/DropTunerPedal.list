
DropTunerPedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ae8  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08009db8  08009db8  0000adb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a040  0800a040  0000b040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800a044  0800a044  0000b044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000060  24000000  0800a048  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000a79c  24000060  0800a0a8  0000c060  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400a7fc  0800a0a8  0000c7fc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013e03  00000000  00000000  0000c08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002752  00000000  00000000  0001fe91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011a0  00000000  00000000  000225e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000d9a  00000000  00000000  00023788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000343de  00000000  00000000  00024522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000166ad  00000000  00000000  00058900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015c19d  00000000  00000000  0006efad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001cb14a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004df0  00000000  00000000  001cb190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000072  00000000  00000000  001cff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000060 	.word	0x24000060
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009da0 	.word	0x08009da0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000064 	.word	0x24000064
 800030c:	08009da0 	.word	0x08009da0

08000310 <HAL_TIM_IC_CaptureCallback>:
int16_t count = 0;   // Use signed 16-bit int to handle possible negative values
uint16_t position = 0;
int speed = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
    counter = __HAL_TIM_GET_COUNTER(htim);  // Get the raw counter value
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800031e:	4a13      	ldr	r2, [pc, #76]	@ (800036c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000320:	6013      	str	r3, [r2, #0]

    count = (int16_t)counter;  // Cast to signed int to handle negative values
 8000322:	4b12      	ldr	r3, [pc, #72]	@ (800036c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	b21a      	sxth	r2, r3
 8000328:	4b11      	ldr	r3, [pc, #68]	@ (8000370 <HAL_TIM_IC_CaptureCallback+0x60>)
 800032a:	801a      	strh	r2, [r3, #0]

    // If count is negative, set it to zero
    if (count < 0)
 800032c:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <HAL_TIM_IC_CaptureCallback+0x60>)
 800032e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000332:	2b00      	cmp	r3, #0
 8000334:	da02      	bge.n	800033c <HAL_TIM_IC_CaptureCallback+0x2c>
    {
        count = 0;
 8000336:	4b0e      	ldr	r3, [pc, #56]	@ (8000370 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000338:	2200      	movs	r2, #0
 800033a:	801a      	strh	r2, [r3, #0]
    }

    // Scale down count to position, divide by 4 to adjust for sensitivity
    position = count / 4;
 800033c:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <HAL_TIM_IC_CaptureCallback+0x60>)
 800033e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000342:	2b00      	cmp	r3, #0
 8000344:	da00      	bge.n	8000348 <HAL_TIM_IC_CaptureCallback+0x38>
 8000346:	3303      	adds	r3, #3
 8000348:	109b      	asrs	r3, r3, #2
 800034a:	b21b      	sxth	r3, r3
 800034c:	b29a      	uxth	r2, r3
 800034e:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000350:	801a      	strh	r2, [r3, #0]

    // Clamp the position to be within 0 to 12
    if (position > 12)
 8000352:	4b08      	ldr	r3, [pc, #32]	@ (8000374 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	2b0c      	cmp	r3, #12
 8000358:	d902      	bls.n	8000360 <HAL_TIM_IC_CaptureCallback+0x50>
    {
        position = 12;  // Ensure position does not exceed 12
 800035a:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <HAL_TIM_IC_CaptureCallback+0x64>)
 800035c:	220c      	movs	r2, #12
 800035e:	801a      	strh	r2, [r3, #0]
    }
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	2400a6ac 	.word	0x2400a6ac
 8000370:	2400a6b0 	.word	0x2400a6b0
 8000374:	2400a6b2 	.word	0x2400a6b2

08000378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037e:	f000 fe8d 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000382:	f000 f84f 	bl	8000424 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  WtrP = 0;
 8000386:	4b1b      	ldr	r3, [pc, #108]	@ (80003f4 <main+0x7c>)
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
  Rd_P = 0.0f;
 800038c:	4b1a      	ldr	r3, [pc, #104]	@ (80003f8 <main+0x80>)
 800038e:	f04f 0200 	mov.w	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
  Shift = 0.0f;  // Pitch shift amount (adjust as needed)
 8000394:	4b19      	ldr	r3, [pc, #100]	@ (80003fc <main+0x84>)
 8000396:	f04f 0200 	mov.w	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
  CrossFade = 1.0f;
 800039c:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <main+0x88>)
 800039e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80003a2:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a4:	f000 fa08 	bl	80007b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80003a8:	f000 f9de 	bl	8000768 <MX_DMA_Init>
  MX_ADC3_Init();
 80003ac:	f000 f8aa 	bl	8000504 <MX_ADC3_Init>
  MX_DAC1_Init();
 80003b0:	f000 f91c 	bl	80005ec <MX_DAC1_Init>
  MX_TIM6_Init();
 80003b4:	f000 f9a2 	bl	80006fc <MX_TIM6_Init>
  MX_TIM3_Init();
 80003b8:	f000 f94a 	bl	8000650 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc3, adc_buffer, N);
 80003bc:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80003c0:	4910      	ldr	r1, [pc, #64]	@ (8000404 <main+0x8c>)
 80003c2:	4811      	ldr	r0, [pc, #68]	@ (8000408 <main+0x90>)
 80003c4:	f001 fc1c 	bl	8001c00 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, dac_buffer, N, DAC_ALIGN_12B_R);
 80003c8:	2300      	movs	r3, #0
 80003ca:	9300      	str	r3, [sp, #0]
 80003cc:	f640 53ac 	movw	r3, #3500	@ 0xdac
 80003d0:	4a0e      	ldr	r2, [pc, #56]	@ (800040c <main+0x94>)
 80003d2:	2110      	movs	r1, #16
 80003d4:	480e      	ldr	r0, [pc, #56]	@ (8000410 <main+0x98>)
 80003d6:	f002 fd67 	bl	8002ea8 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 80003da:	480e      	ldr	r0, [pc, #56]	@ (8000414 <main+0x9c>)
 80003dc:	f008 fe52 	bl	8009084 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80003e0:	213c      	movs	r1, #60	@ 0x3c
 80003e2:	480d      	ldr	r0, [pc, #52]	@ (8000418 <main+0xa0>)
 80003e4:	f008 ff72 	bl	80092cc <HAL_TIM_Encoder_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  semitoneShift = position;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <main+0xa4>)
 80003ea:	881b      	ldrh	r3, [r3, #0]
 80003ec:	461a      	mov	r2, r3
 80003ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000420 <main+0xa8>)
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	e7f9      	b.n	80003e8 <main+0x70>
 80003f4:	2400372c 	.word	0x2400372c
 80003f8:	24003730 	.word	0x24003730
 80003fc:	24003734 	.word	0x24003734
 8000400:	24003738 	.word	0x24003738
 8000404:	2400394c 	.word	0x2400394c
 8000408:	24003740 	.word	0x24003740
 800040c:	24006ffc 	.word	0x24006ffc
 8000410:	24003828 	.word	0x24003828
 8000414:	24003900 	.word	0x24003900
 8000418:	240038b4 	.word	0x240038b4
 800041c:	2400a6b2 	.word	0x2400a6b2
 8000420:	2400373c 	.word	0x2400373c

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b09c      	sub	sp, #112	@ 0x70
 8000428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800042e:	224c      	movs	r2, #76	@ 0x4c
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f009 fc81 	bl	8009d3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2220      	movs	r2, #32
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f009 fc7b 	bl	8009d3a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000444:	2002      	movs	r0, #2
 8000446:	f005 fa55 	bl	80058f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800044a:	2300      	movs	r3, #0
 800044c:	603b      	str	r3, [r7, #0]
 800044e:	4b2c      	ldr	r3, [pc, #176]	@ (8000500 <SystemClock_Config+0xdc>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a2b      	ldr	r2, [pc, #172]	@ (8000500 <SystemClock_Config+0xdc>)
 8000454:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b29      	ldr	r3, [pc, #164]	@ (8000500 <SystemClock_Config+0xdc>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000466:	bf00      	nop
 8000468:	4b25      	ldr	r3, [pc, #148]	@ (8000500 <SystemClock_Config+0xdc>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000470:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000474:	d1f8      	bne.n	8000468 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	2302      	movs	r3, #2
 8000478:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800047a:	2301      	movs	r3, #1
 800047c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800047e:	2340      	movs	r3, #64	@ 0x40
 8000480:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000482:	2302      	movs	r3, #2
 8000484:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000486:	2300      	movs	r3, #0
 8000488:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800048a:	2304      	movs	r3, #4
 800048c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 800048e:	2322      	movs	r3, #34	@ 0x22
 8000490:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000492:	2301      	movs	r3, #1
 8000494:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000496:	2302      	movs	r3, #2
 8000498:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800049a:	2302      	movs	r3, #2
 800049c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800049e:	230c      	movs	r3, #12
 80004a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80004a6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80004aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004b0:	4618      	mov	r0, r3
 80004b2:	f005 fa59 	bl	8005968 <HAL_RCC_OscConfig>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80004bc:	f000 fb10 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c0:	233f      	movs	r3, #63	@ 0x3f
 80004c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c4:	2303      	movs	r3, #3
 80004c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004cc:	2308      	movs	r3, #8
 80004ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004d0:	2340      	movs	r3, #64	@ 0x40
 80004d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004d4:	2340      	movs	r3, #64	@ 0x40
 80004d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004de:	2340      	movs	r3, #64	@ 0x40
 80004e0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2103      	movs	r1, #3
 80004e6:	4618      	mov	r0, r3
 80004e8:	f005 fe18 	bl	800611c <HAL_RCC_ClockConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80004f2:	f000 faf5 	bl	8000ae0 <Error_Handler>
  }
}
 80004f6:	bf00      	nop
 80004f8:	3770      	adds	r7, #112	@ 0x70
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	58024800 	.word	0x58024800

08000504 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	@ 0x28
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2224      	movs	r2, #36	@ 0x24
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f009 fc12 	bl	8009d3a <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000516:	4b32      	ldr	r3, [pc, #200]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 8000518:	4a32      	ldr	r2, [pc, #200]	@ (80005e4 <MX_ADC3_Init+0xe0>)
 800051a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800051c:	4b30      	ldr	r3, [pc, #192]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 800051e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000522:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000524:	4b2e      	ldr	r3, [pc, #184]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 8000526:	2208      	movs	r2, #8
 8000528:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800052a:	4b2d      	ldr	r3, [pc, #180]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000530:	4b2b      	ldr	r3, [pc, #172]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000536:	4b2a      	ldr	r3, [pc, #168]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 8000538:	2204      	movs	r2, #4
 800053a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800053c:	4b28      	ldr	r3, [pc, #160]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 800053e:	2200      	movs	r2, #0
 8000540:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000542:	4b27      	ldr	r3, [pc, #156]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 8000544:	2200      	movs	r2, #0
 8000546:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000548:	4b25      	ldr	r3, [pc, #148]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 800054a:	2201      	movs	r2, #1
 800054c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800054e:	4b24      	ldr	r3, [pc, #144]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000556:	4b22      	ldr	r3, [pc, #136]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 8000558:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800055c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800055e:	4b20      	ldr	r3, [pc, #128]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 8000560:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000564:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000566:	4b1e      	ldr	r3, [pc, #120]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 8000568:	2201      	movs	r2, #1
 800056a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800056e:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 8000570:	2200      	movs	r2, #0
 8000572:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000574:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 8000576:	2203      	movs	r2, #3
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 800057c:	2200      	movs	r2, #0
 800057e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000580:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 8000582:	2200      	movs	r2, #0
 8000584:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000586:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 8000588:	2200      	movs	r2, #0
 800058a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 800058e:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 8000590:	2200      	movs	r2, #0
 8000592:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000594:	4812      	ldr	r0, [pc, #72]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 8000596:	f001 f92b 	bl	80017f0 <HAL_ADC_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 80005a0:	f000 fa9e 	bl	8000ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005a4:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <MX_ADC3_Init+0xe4>)
 80005a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a8:	2306      	movs	r3, #6
 80005aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005b0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80005b4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005b6:	2304      	movs	r3, #4
 80005b8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4619      	mov	r1, r3
 80005c6:	4806      	ldr	r0, [pc, #24]	@ (80005e0 <MX_ADC3_Init+0xdc>)
 80005c8:	f001 fc00 	bl	8001dcc <HAL_ADC_ConfigChannel>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 80005d2:	f000 fa85 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	3728      	adds	r7, #40	@ 0x28
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	24003740 	.word	0x24003740
 80005e4:	58026000 	.word	0x58026000
 80005e8:	2e300800 	.word	0x2e300800

080005ec <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2224      	movs	r2, #36	@ 0x24
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f009 fb9e 	bl	8009d3a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005fe:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_DAC1_Init+0x5c>)
 8000600:	4a12      	ldr	r2, [pc, #72]	@ (800064c <MX_DAC1_Init+0x60>)
 8000602:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000604:	4810      	ldr	r0, [pc, #64]	@ (8000648 <MX_DAC1_Init+0x5c>)
 8000606:	f002 fc2c 	bl	8002e62 <HAL_DAC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000610:	f000 fa66 	bl	8000ae0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000618:	2316      	movs	r3, #22
 800061a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000620:	2301      	movs	r3, #1
 8000622:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2210      	movs	r2, #16
 800062c:	4619      	mov	r1, r3
 800062e:	4806      	ldr	r0, [pc, #24]	@ (8000648 <MX_DAC1_Init+0x5c>)
 8000630:	f002 fd18 	bl	8003064 <HAL_DAC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800063a:	f000 fa51 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	3728      	adds	r7, #40	@ 0x28
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	24003828 	.word	0x24003828
 800064c:	40007400 	.word	0x40007400

08000650 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	@ 0x30
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2224      	movs	r2, #36	@ 0x24
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f009 fb6b 	bl	8009d3a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800066e:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 8000670:	4a21      	ldr	r2, [pc, #132]	@ (80006f8 <MX_TIM3_Init+0xa8>)
 8000672:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000680:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 8000682:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000686:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068e:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000694:	2303      	movs	r3, #3
 8000696:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800069c:	2301      	movs	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006ac:	2301      	movs	r3, #1
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4619      	mov	r1, r3
 80006be:	480d      	ldr	r0, [pc, #52]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 80006c0:	f008 fd5e 	bl	8009180 <HAL_TIM_Encoder_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80006ca:	f000 fa09 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	@ (80006f4 <MX_TIM3_Init+0xa4>)
 80006dc:	f009 f8ac 	bl	8009838 <HAL_TIMEx_MasterConfigSynchronization>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80006e6:	f000 f9fb 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	3730      	adds	r7, #48	@ 0x30
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	240038b4 	.word	0x240038b4
 80006f8:	40000400 	.word	0x40000400

080006fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_TIM6_Init+0x64>)
 800070e:	4a15      	ldr	r2, [pc, #84]	@ (8000764 <MX_TIM6_Init+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000712:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <MX_TIM6_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000718:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_TIM6_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2865;
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <MX_TIM6_Init+0x64>)
 8000720:	f640 3231 	movw	r2, #2865	@ 0xb31
 8000724:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_TIM6_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800072c:	480c      	ldr	r0, [pc, #48]	@ (8000760 <MX_TIM6_Init+0x64>)
 800072e:	f008 fc51 	bl	8008fd4 <HAL_TIM_Base_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000738:	f000 f9d2 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800073c:	2320      	movs	r3, #32
 800073e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_TIM6_Init+0x64>)
 800074a:	f009 f875 	bl	8009838 <HAL_TIMEx_MasterConfigSynchronization>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000754:	f000 f9c4 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	24003900 	.word	0x24003900
 8000764:	40001000 	.word	0x40001000

08000768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_DMA_Init+0x4c>)
 8000770:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000774:	4a0f      	ldr	r2, [pc, #60]	@ (80007b4 <MX_DMA_Init+0x4c>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <MX_DMA_Init+0x4c>)
 8000780:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	200b      	movs	r0, #11
 8000792:	f002 fb32 	bl	8002dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000796:	200b      	movs	r0, #11
 8000798:	f002 fb49 	bl	8002e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	200c      	movs	r0, #12
 80007a2:	f002 fb2a 	bl	8002dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007a6:	200c      	movs	r0, #12
 80007a8:	f002 fb41 	bl	8002e2e <HAL_NVIC_EnableIRQ>

}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	58024400 	.word	0x58024400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <MX_GPIO_Init+0x50>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c4:	4a10      	ldr	r2, [pc, #64]	@ (8000808 <MX_GPIO_Init+0x50>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_GPIO_Init+0x50>)
 80007d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <MX_GPIO_Init+0x50>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e2:	4a09      	ldr	r2, [pc, #36]	@ (8000808 <MX_GPIO_Init+0x50>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_GPIO_Init+0x50>)
 80007ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	58024400 	.word	0x58024400

0800080c <Do_PitchShift>:

/* USER CODE BEGIN 4 */
// Pitch shifting function (downward only)
uint32_t Do_PitchShift(uint32_t sample) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    // Write the original sample to the ring buffer
    Buf[WtrP] = sample;
 8000814:	4b84      	ldr	r3, [pc, #528]	@ (8000a28 <Do_PitchShift+0x21c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4984      	ldr	r1, [pc, #528]	@ (8000a2c <Do_PitchShift+0x220>)
 800081c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // Ensure semitoneShift is within the valid range (0 to MAX_DOWN_SHIFT)
    if (semitoneShift > MAX_DOWN_SHIFT) {
 8000820:	4b83      	ldr	r3, [pc, #524]	@ (8000a30 <Do_PitchShift+0x224>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b0c      	cmp	r3, #12
 8000826:	d902      	bls.n	800082e <Do_PitchShift+0x22>
        semitoneShift = MAX_DOWN_SHIFT;
 8000828:	4b81      	ldr	r3, [pc, #516]	@ (8000a30 <Do_PitchShift+0x224>)
 800082a:	220c      	movs	r2, #12
 800082c:	601a      	str	r2, [r3, #0]
    }

    // Calculate the pitch shift ratio based on downward semitone shift
    float pitchShiftRatio = powf(2.0f, -(float)semitoneShift / 12.0f); // Only downshift
 800082e:	4b80      	ldr	r3, [pc, #512]	@ (8000a30 <Do_PitchShift+0x224>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	ee07 3a90 	vmov	s15, r3
 8000836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800083a:	eef1 7a67 	vneg.f32	s15, s15
 800083e:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8000842:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000846:	eef0 0a47 	vmov.f32	s1, s14
 800084a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800084e:	f009 f8c7 	bl	80099e0 <powf>
 8000852:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

    // Update the read pointer based on the pitch shift ratio
    Rd_P += pitchShiftRatio;
 8000856:	4b77      	ldr	r3, [pc, #476]	@ (8000a34 <Do_PitchShift+0x228>)
 8000858:	ed93 7a00 	vldr	s14, [r3]
 800085c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000864:	4b73      	ldr	r3, [pc, #460]	@ (8000a34 <Do_PitchShift+0x228>)
 8000866:	edc3 7a00 	vstr	s15, [r3]

    // Clamp the read pointer to prevent overflow
    if (Rd_P >= BufSize) Rd_P -= BufSize;
 800086a:	4b72      	ldr	r3, [pc, #456]	@ (8000a34 <Do_PitchShift+0x228>)
 800086c:	edd3 7a00 	vldr	s15, [r3]
 8000870:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8000a38 <Do_PitchShift+0x22c>
 8000874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800087c:	db09      	blt.n	8000892 <Do_PitchShift+0x86>
 800087e:	4b6d      	ldr	r3, [pc, #436]	@ (8000a34 <Do_PitchShift+0x228>)
 8000880:	edd3 7a00 	vldr	s15, [r3]
 8000884:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8000a38 <Do_PitchShift+0x22c>
 8000888:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800088c:	4b69      	ldr	r3, [pc, #420]	@ (8000a34 <Do_PitchShift+0x228>)
 800088e:	edc3 7a00 	vstr	s15, [r3]

    // Compute integer read pointers for pitch-shifting (0° and 180° phases)
    int RdPtr_Int = (int)Rd_P % BufSize;             // Main read pointer
 8000892:	4b68      	ldr	r3, [pc, #416]	@ (8000a34 <Do_PitchShift+0x228>)
 8000894:	edd3 7a00 	vldr	s15, [r3]
 8000898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800089c:	ee17 3a90 	vmov	r3, s15
 80008a0:	4a66      	ldr	r2, [pc, #408]	@ (8000a3c <Do_PitchShift+0x230>)
 80008a2:	fb82 1203 	smull	r1, r2, r2, r3
 80008a6:	1251      	asrs	r1, r2, #9
 80008a8:	17da      	asrs	r2, r3, #31
 80008aa:	1a8a      	subs	r2, r1, r2
 80008ac:	f640 51ac 	movw	r1, #3500	@ 0xdac
 80008b0:	fb01 f202 	mul.w	r2, r1, r2
 80008b4:	1a9b      	subs	r3, r3, r2
 80008b6:	623b      	str	r3, [r7, #32]
    int RdPtr_Int2 = (RdPtr_Int + (BufSize / 2)) % BufSize; // 180° phase pointer
 80008b8:	6a3b      	ldr	r3, [r7, #32]
 80008ba:	f203 63d6 	addw	r3, r3, #1750	@ 0x6d6
 80008be:	4a5f      	ldr	r2, [pc, #380]	@ (8000a3c <Do_PitchShift+0x230>)
 80008c0:	fb82 1203 	smull	r1, r2, r2, r3
 80008c4:	1251      	asrs	r1, r2, #9
 80008c6:	17da      	asrs	r2, r3, #31
 80008c8:	1a8a      	subs	r2, r1, r2
 80008ca:	f640 51ac 	movw	r1, #3500	@ 0xdac
 80008ce:	fb01 f202 	mul.w	r2, r1, r2
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	61fb      	str	r3, [r7, #28]

    // Read the two samples from the buffer
    float Rd0 = (float)Buf[RdPtr_Int];
 80008d6:	4a55      	ldr	r2, [pc, #340]	@ (8000a2c <Do_PitchShift+0x220>)
 80008d8:	6a3b      	ldr	r3, [r7, #32]
 80008da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008de:	ee07 3a90 	vmov	s15, r3
 80008e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e6:	edc7 7a06 	vstr	s15, [r7, #24]
    float Rd1 = (float)Buf[RdPtr_Int2];
 80008ea:	4a50      	ldr	r2, [pc, #320]	@ (8000a2c <Do_PitchShift+0x220>)
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f2:	ee07 3a90 	vmov	s15, r3
 80008f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fa:	edc7 7a05 	vstr	s15, [r7, #20]

    // Cross-fade between two read pointers if overlap occurs
    if (Overlap >= (WtrP - RdPtr_Int) && (WtrP - RdPtr_Int) >= 0 && Shift != 1.0f) {
 80008fe:	4b4a      	ldr	r3, [pc, #296]	@ (8000a28 <Do_PitchShift+0x21c>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 800090a:	dc21      	bgt.n	8000950 <Do_PitchShift+0x144>
 800090c:	4b46      	ldr	r3, [pc, #280]	@ (8000a28 <Do_PitchShift+0x21c>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	6a3b      	ldr	r3, [r7, #32]
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	db1b      	blt.n	8000950 <Do_PitchShift+0x144>
 8000918:	4b49      	ldr	r3, [pc, #292]	@ (8000a40 <Do_PitchShift+0x234>)
 800091a:	edd3 7a00 	vldr	s15, [r3]
 800091e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000922:	eef4 7a47 	vcmp.f32	s15, s14
 8000926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800092a:	d011      	beq.n	8000950 <Do_PitchShift+0x144>
        int rel = WtrP - RdPtr_Int;
 800092c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a28 <Do_PitchShift+0x21c>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	6a3b      	ldr	r3, [r7, #32]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	613b      	str	r3, [r7, #16]
        CrossFade = ((float)rel) / (float)Overlap;
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	ee07 3a90 	vmov	s15, r3
 800093c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000940:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8000a44 <Do_PitchShift+0x238>
 8000944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000948:	4b3f      	ldr	r3, [pc, #252]	@ (8000a48 <Do_PitchShift+0x23c>)
 800094a:	edc3 7a00 	vstr	s15, [r3]
    if (Overlap >= (WtrP - RdPtr_Int) && (WtrP - RdPtr_Int) >= 0 && Shift != 1.0f) {
 800094e:	e008      	b.n	8000962 <Do_PitchShift+0x156>
    } else if (WtrP - RdPtr_Int == 0) {
 8000950:	4b35      	ldr	r3, [pc, #212]	@ (8000a28 <Do_PitchShift+0x21c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	6a3a      	ldr	r2, [r7, #32]
 8000956:	429a      	cmp	r2, r3
 8000958:	d103      	bne.n	8000962 <Do_PitchShift+0x156>
        CrossFade = 0.0f;
 800095a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a48 <Do_PitchShift+0x23c>)
 800095c:	f04f 0200 	mov.w	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
    }

    if (Overlap >= (WtrP - RdPtr_Int2) && (WtrP - RdPtr_Int2) >= 0 && Shift != 1.0f) {
 8000962:	4b31      	ldr	r3, [pc, #196]	@ (8000a28 <Do_PitchShift+0x21c>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 800096e:	dc25      	bgt.n	80009bc <Do_PitchShift+0x1b0>
 8000970:	4b2d      	ldr	r3, [pc, #180]	@ (8000a28 <Do_PitchShift+0x21c>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	db1f      	blt.n	80009bc <Do_PitchShift+0x1b0>
 800097c:	4b30      	ldr	r3, [pc, #192]	@ (8000a40 <Do_PitchShift+0x234>)
 800097e:	edd3 7a00 	vldr	s15, [r3]
 8000982:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000986:	eef4 7a47 	vcmp.f32	s15, s14
 800098a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800098e:	d015      	beq.n	80009bc <Do_PitchShift+0x1b0>
        int rel = WtrP - RdPtr_Int2;
 8000990:	4b25      	ldr	r3, [pc, #148]	@ (8000a28 <Do_PitchShift+0x21c>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	60fb      	str	r3, [r7, #12]
        CrossFade = 1.0f - ((float)rel) / (float)Overlap;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	ee07 3a90 	vmov	s15, r3
 80009a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009a4:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8000a44 <Do_PitchShift+0x238>
 80009a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009b4:	4b24      	ldr	r3, [pc, #144]	@ (8000a48 <Do_PitchShift+0x23c>)
 80009b6:	edc3 7a00 	vstr	s15, [r3]
    if (Overlap >= (WtrP - RdPtr_Int2) && (WtrP - RdPtr_Int2) >= 0 && Shift != 1.0f) {
 80009ba:	e008      	b.n	80009ce <Do_PitchShift+0x1c2>
    } else if (WtrP - RdPtr_Int2 == 0) {
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <Do_PitchShift+0x21c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	69fa      	ldr	r2, [r7, #28]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d103      	bne.n	80009ce <Do_PitchShift+0x1c2>
        CrossFade = 1.0f;
 80009c6:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <Do_PitchShift+0x23c>)
 80009c8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80009cc:	601a      	str	r2, [r3, #0]
    }

    // Perform cross-fading and combine the two read samples
    sample = (uint32_t)(Rd0 * CrossFade + Rd1 * (1.0f - CrossFade));
 80009ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <Do_PitchShift+0x23c>)
 80009d0:	ed93 7a00 	vldr	s14, [r3]
 80009d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80009d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <Do_PitchShift+0x23c>)
 80009de:	edd3 7a00 	vldr	s15, [r3]
 80009e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80009e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80009ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80009ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009fa:	ee17 3a90 	vmov	r3, s15
 80009fe:	607b      	str	r3, [r7, #4]

    // Increment the write pointer and handle wrap-around
    WtrP++;
 8000a00:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <Do_PitchShift+0x21c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	3301      	adds	r3, #1
 8000a06:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <Do_PitchShift+0x21c>)
 8000a08:	6013      	str	r3, [r2, #0]
    if (WtrP == BufSize) WtrP = 0;
 8000a0a:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <Do_PitchShift+0x21c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d102      	bne.n	8000a1c <Do_PitchShift+0x210>
 8000a16:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <Do_PitchShift+0x21c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]

    return sample;
 8000a1c:	687b      	ldr	r3, [r7, #4]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3728      	adds	r7, #40	@ 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2400372c 	.word	0x2400372c
 8000a2c:	2400007c 	.word	0x2400007c
 8000a30:	2400373c 	.word	0x2400373c
 8000a34:	24003730 	.word	0x24003730
 8000a38:	455ac000 	.word	0x455ac000
 8000a3c:	2572fb07 	.word	0x2572fb07
 8000a40:	24003734 	.word	0x24003734
 8000a44:	43af0000 	.word	0x43af0000
 8000a48:	24003738 	.word	0x24003738

08000a4c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	for(int n = 0; n < halfN; n++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	e00e      	b.n	8000a78 <HAL_ADC_ConvHalfCpltCallback+0x2c>
	{
		dac_buffer[n] = Do_PitchShift(adc_buffer[n]);
 8000a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a8c <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fed2 	bl	800080c <Do_PitchShift>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	4909      	ldr	r1, [pc, #36]	@ (8000a90 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int n = 0; n < halfN; n++)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3301      	adds	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	ddeb      	ble.n	8000a5a <HAL_ADC_ConvHalfCpltCallback+0xe>
	}
}
 8000a82:	bf00      	nop
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2400394c 	.word	0x2400394c
 8000a90:	24006ffc 	.word	0x24006ffc

08000a94 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	for(int n = halfN; n < N; n++)
 8000a9c:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	e00e      	b.n	8000ac2 <HAL_ADC_ConvCpltCallback+0x2e>
	{
		dac_buffer[n] =  Do_PitchShift(adc_buffer[n]);
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fead 	bl	800080c <Do_PitchShift>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	4909      	ldr	r1, [pc, #36]	@ (8000adc <HAL_ADC_ConvCpltCallback+0x48>)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int n = halfN; n < N; n++)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	ddeb      	ble.n	8000aa4 <HAL_ADC_ConvCpltCallback+0x10>
	}
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2400394c 	.word	0x2400394c
 8000adc:	24006ffc 	.word	0x24006ffc

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <Error_Handler+0x8>

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <HAL_MspInit+0x5c>)
 8000af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000af8:	4a13      	ldr	r2, [pc, #76]	@ (8000b48 <HAL_MspInit+0x5c>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <HAL_MspInit+0x5c>)
 8000b04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8000b10:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <HAL_MspInit+0x5c>)
 8000b12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b16:	4a0c      	ldr	r2, [pc, #48]	@ (8000b48 <HAL_MspInit+0x5c>)
 8000b18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <HAL_MspInit+0x5c>)
 8000b22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 fb46 	bl	80011c0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000b34:	f000 fb6c 	bl	8001210 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f000 fb55 	bl	80011e8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	58024400 	.word	0x58024400

08000b4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0b8      	sub	sp, #224	@ 0xe0
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	22b8      	movs	r2, #184	@ 0xb8
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f009 f8e4 	bl	8009d3a <memset>
  if(hadc->Instance==ADC3)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a44      	ldr	r2, [pc, #272]	@ (8000c88 <HAL_ADC_MspInit+0x13c>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	f040 8081 	bne.w	8000c80 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b7e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000b82:	f04f 0300 	mov.w	r3, #0
 8000b86:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000b8e:	230c      	movs	r3, #12
 8000b90:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000b92:	2304      	movs	r3, #4
 8000b94:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b9e:	23c0      	movs	r3, #192	@ 0xc0
 8000ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f005 fe27 	bl	8006808 <HAL_RCCEx_PeriphCLKConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000bc0:	f7ff ff8e 	bl	8000ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000bc4:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <HAL_ADC_MspInit+0x140>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bca:	4a30      	ldr	r2, [pc, #192]	@ (8000c8c <HAL_ADC_MspInit+0x140>)
 8000bcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c8c <HAL_ADC_MspInit+0x140>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c8c <HAL_ADC_MspInit+0x140>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be8:	4a28      	ldr	r2, [pc, #160]	@ (8000c8c <HAL_ADC_MspInit+0x140>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf2:	4b26      	ldr	r3, [pc, #152]	@ (8000c8c <HAL_ADC_MspInit+0x140>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC1     ------> ADC3_INP11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c00:	2302      	movs	r3, #2
 8000c02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c06:	2303      	movs	r3, #3
 8000c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c12:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c16:	4619      	mov	r1, r3
 8000c18:	481d      	ldr	r0, [pc, #116]	@ (8000c90 <HAL_ADC_MspInit+0x144>)
 8000c1a:	f004 fcc3 	bl	80055a4 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c94 <HAL_ADC_MspInit+0x148>)
 8000c20:	4a1d      	ldr	r2, [pc, #116]	@ (8000c98 <HAL_ADC_MspInit+0x14c>)
 8000c22:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <HAL_ADC_MspInit+0x148>)
 8000c26:	2273      	movs	r2, #115	@ 0x73
 8000c28:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <HAL_ADC_MspInit+0x148>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c30:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <HAL_ADC_MspInit+0x148>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000c36:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <HAL_ADC_MspInit+0x148>)
 8000c38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c3c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <HAL_ADC_MspInit+0x148>)
 8000c40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c44:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c46:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <HAL_ADC_MspInit+0x148>)
 8000c48:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c4c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <HAL_ADC_MspInit+0x148>)
 8000c50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c54:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <HAL_ADC_MspInit+0x148>)
 8000c58:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c5c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <HAL_ADC_MspInit+0x148>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000c64:	480b      	ldr	r0, [pc, #44]	@ (8000c94 <HAL_ADC_MspInit+0x148>)
 8000c66:	f002 fbc9 	bl	80033fc <HAL_DMA_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8000c70:	f7ff ff36 	bl	8000ae0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a07      	ldr	r2, [pc, #28]	@ (8000c94 <HAL_ADC_MspInit+0x148>)
 8000c78:	659a      	str	r2, [r3, #88]	@ 0x58
 8000c7a:	4a06      	ldr	r2, [pc, #24]	@ (8000c94 <HAL_ADC_MspInit+0x148>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000c80:	bf00      	nop
 8000c82:	37e0      	adds	r7, #224	@ 0xe0
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	58026000 	.word	0x58026000
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58020800 	.word	0x58020800
 8000c94:	240037b0 	.word	0x240037b0
 8000c98:	40020010 	.word	0x40020010

08000c9c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a30      	ldr	r2, [pc, #192]	@ (8000d7c <HAL_DAC_MspInit+0xe0>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d15a      	bne.n	8000d74 <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000cbe:	4b30      	ldr	r3, [pc, #192]	@ (8000d80 <HAL_DAC_MspInit+0xe4>)
 8000cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8000d80 <HAL_DAC_MspInit+0xe4>)
 8000cc6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000cca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cce:	4b2c      	ldr	r3, [pc, #176]	@ (8000d80 <HAL_DAC_MspInit+0xe4>)
 8000cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b28      	ldr	r3, [pc, #160]	@ (8000d80 <HAL_DAC_MspInit+0xe4>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce2:	4a27      	ldr	r2, [pc, #156]	@ (8000d80 <HAL_DAC_MspInit+0xe4>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cec:	4b24      	ldr	r3, [pc, #144]	@ (8000d80 <HAL_DAC_MspInit+0xe4>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cfa:	2320      	movs	r3, #32
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	481d      	ldr	r0, [pc, #116]	@ (8000d84 <HAL_DAC_MspInit+0xe8>)
 8000d0e:	f004 fc49 	bl	80055a4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <HAL_DAC_MspInit+0xec>)
 8000d14:	4a1d      	ldr	r2, [pc, #116]	@ (8000d8c <HAL_DAC_MspInit+0xf0>)
 8000d16:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <HAL_DAC_MspInit+0xec>)
 8000d1a:	2244      	movs	r2, #68	@ 0x44
 8000d1c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <HAL_DAC_MspInit+0xec>)
 8000d20:	2240      	movs	r2, #64	@ 0x40
 8000d22:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d24:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <HAL_DAC_MspInit+0xec>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000d2a:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <HAL_DAC_MspInit+0xec>)
 8000d2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d30:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <HAL_DAC_MspInit+0xec>)
 8000d34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d38:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <HAL_DAC_MspInit+0xec>)
 8000d3c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d40:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <HAL_DAC_MspInit+0xec>)
 8000d44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d48:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <HAL_DAC_MspInit+0xec>)
 8000d4c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d50:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <HAL_DAC_MspInit+0xec>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8000d58:	480b      	ldr	r0, [pc, #44]	@ (8000d88 <HAL_DAC_MspInit+0xec>)
 8000d5a:	f002 fb4f 	bl	80033fc <HAL_DMA_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8000d64:	f7ff febc 	bl	8000ae0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a07      	ldr	r2, [pc, #28]	@ (8000d88 <HAL_DAC_MspInit+0xec>)
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	4a06      	ldr	r2, [pc, #24]	@ (8000d88 <HAL_DAC_MspInit+0xec>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	@ 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40007400 	.word	0x40007400
 8000d80:	58024400 	.word	0x58024400
 8000d84:	58020000 	.word	0x58020000
 8000d88:	2400383c 	.word	0x2400383c
 8000d8c:	40020028 	.word	0x40020028

08000d90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a1e      	ldr	r2, [pc, #120]	@ (8000e28 <HAL_TIM_Encoder_MspInit+0x98>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d135      	bne.n	8000e1e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000db2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e2c <HAL_TIM_Encoder_MspInit+0x9c>)
 8000db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000db8:	4a1c      	ldr	r2, [pc, #112]	@ (8000e2c <HAL_TIM_Encoder_MspInit+0x9c>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <HAL_TIM_Encoder_MspInit+0x9c>)
 8000dc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <HAL_TIM_Encoder_MspInit+0x9c>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd6:	4a15      	ldr	r2, [pc, #84]	@ (8000e2c <HAL_TIM_Encoder_MspInit+0x9c>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <HAL_TIM_Encoder_MspInit+0x9c>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dee:	23c0      	movs	r3, #192	@ 0xc0
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4809      	ldr	r0, [pc, #36]	@ (8000e30 <HAL_TIM_Encoder_MspInit+0xa0>)
 8000e0a:	f004 fbcb 	bl	80055a4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	201d      	movs	r0, #29
 8000e14:	f001 fff1 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f002 f808 	bl	8002e2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	@ 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40000400 	.word	0x40000400
 8000e2c:	58024400 	.word	0x58024400
 8000e30:	58020000 	.word	0x58020000

08000e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0b      	ldr	r2, [pc, #44]	@ (8000e70 <HAL_TIM_Base_MspInit+0x3c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d10e      	bne.n	8000e64 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <HAL_TIM_Base_MspInit+0x40>)
 8000e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e4c:	4a09      	ldr	r2, [pc, #36]	@ (8000e74 <HAL_TIM_Base_MspInit+0x40>)
 8000e4e:	f043 0310 	orr.w	r3, r3, #16
 8000e52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <HAL_TIM_Base_MspInit+0x40>)
 8000e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	40001000 	.word	0x40001000
 8000e74:	58024400 	.word	0x58024400

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <NMI_Handler+0x4>

08000e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <MemManage_Handler+0x4>

08000e90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <UsageFault_Handler+0x4>

08000ea0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <SysTick_Handler+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8000f0c <SysTick_Handler+0x40>)
 8000ed8:	6013      	str	r3, [r2, #0]

	if (indx == 1000)
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <SysTick_Handler+0x40>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ee2:	d10f      	bne.n	8000f04 <SysTick_Handler+0x38>
	{
		speed = ((position - oldpos)*2);  // speed in clicks/sec
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <SysTick_Handler+0x44>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <SysTick_Handler+0x48>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4a09      	ldr	r2, [pc, #36]	@ (8000f18 <SysTick_Handler+0x4c>)
 8000ef4:	6013      	str	r3, [r2, #0]
		oldpos = position;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <SysTick_Handler+0x44>)
 8000ef8:	881a      	ldrh	r2, [r3, #0]
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <SysTick_Handler+0x48>)
 8000efc:	801a      	strh	r2, [r3, #0]
		indx = 0;
 8000efe:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <SysTick_Handler+0x40>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f000 f93c 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2400a6bc 	.word	0x2400a6bc
 8000f10:	2400a6b2 	.word	0x2400a6b2
 8000f14:	2400a6b8 	.word	0x2400a6b8
 8000f18:	2400a6b4 	.word	0x2400a6b4

08000f1c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <DMA1_Stream0_IRQHandler+0x10>)
 8000f22:	f003 f82d 	bl	8003f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	240037b0 	.word	0x240037b0

08000f30 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <DMA1_Stream1_IRQHandler+0x10>)
 8000f36:	f003 f823 	bl	8003f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2400383c 	.word	0x2400383c

08000f44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <TIM3_IRQHandler+0x10>)
 8000f4a:	f008 fa6d 	bl	8009428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	240038b4 	.word	0x240038b4

08000f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b32      	ldr	r3, [pc, #200]	@ (8001028 <SystemInit+0xd0>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f62:	4a31      	ldr	r2, [pc, #196]	@ (8001028 <SystemInit+0xd0>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800102c <SystemInit+0xd4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	2b06      	cmp	r3, #6
 8000f76:	d807      	bhi.n	8000f88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f78:	4b2c      	ldr	r3, [pc, #176]	@ (800102c <SystemInit+0xd4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 030f 	bic.w	r3, r3, #15
 8000f80:	4a2a      	ldr	r2, [pc, #168]	@ (800102c <SystemInit+0xd4>)
 8000f82:	f043 0307 	orr.w	r3, r3, #7
 8000f86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f88:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <SystemInit+0xd8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a28      	ldr	r2, [pc, #160]	@ (8001030 <SystemInit+0xd8>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f94:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <SystemInit+0xd8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f9a:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <SystemInit+0xd8>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4924      	ldr	r1, [pc, #144]	@ (8001030 <SystemInit+0xd8>)
 8000fa0:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <SystemInit+0xdc>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fa6:	4b21      	ldr	r3, [pc, #132]	@ (800102c <SystemInit+0xd4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <SystemInit+0xd4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 030f 	bic.w	r3, r3, #15
 8000fba:	4a1c      	ldr	r2, [pc, #112]	@ (800102c <SystemInit+0xd4>)
 8000fbc:	f043 0307 	orr.w	r3, r3, #7
 8000fc0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <SystemInit+0xd8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <SystemInit+0xd8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fce:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <SystemInit+0xd8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <SystemInit+0xd8>)
 8000fd6:	4a18      	ldr	r2, [pc, #96]	@ (8001038 <SystemInit+0xe0>)
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <SystemInit+0xd8>)
 8000fdc:	4a17      	ldr	r2, [pc, #92]	@ (800103c <SystemInit+0xe4>)
 8000fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <SystemInit+0xd8>)
 8000fe2:	4a17      	ldr	r2, [pc, #92]	@ (8001040 <SystemInit+0xe8>)
 8000fe4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fe6:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <SystemInit+0xd8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fec:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <SystemInit+0xd8>)
 8000fee:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <SystemInit+0xe8>)
 8000ff0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <SystemInit+0xd8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <SystemInit+0xd8>)
 8000ffa:	4a11      	ldr	r2, [pc, #68]	@ (8001040 <SystemInit+0xe8>)
 8000ffc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <SystemInit+0xd8>)
 8001000:	2200      	movs	r2, #0
 8001002:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <SystemInit+0xd8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <SystemInit+0xd8>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800100e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001010:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <SystemInit+0xd8>)
 8001012:	2200      	movs	r2, #0
 8001014:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001016:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <SystemInit+0xec>)
 8001018:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800101c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00
 800102c:	52002000 	.word	0x52002000
 8001030:	58024400 	.word	0x58024400
 8001034:	eaf6ed7f 	.word	0xeaf6ed7f
 8001038:	02020200 	.word	0x02020200
 800103c:	01ff0000 	.word	0x01ff0000
 8001040:	01010280 	.word	0x01010280
 8001044:	52004000 	.word	0x52004000

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001080 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800104c:	f7ff ff84 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001050:	480c      	ldr	r0, [pc, #48]	@ (8001084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001052:	490d      	ldr	r1, [pc, #52]	@ (8001088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001054:	4a0d      	ldr	r2, [pc, #52]	@ (800108c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001068:	4c0a      	ldr	r4, [pc, #40]	@ (8001094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001076:	f008 fe6f 	bl	8009d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff f97d 	bl	8000378 <main>
  bx  lr
 800107e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001080:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001084:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001088:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 800108c:	0800a048 	.word	0x0800a048
  ldr r2, =_sbss
 8001090:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001094:	2400a7fc 	.word	0x2400a7fc

08001098 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC3_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a2:	2003      	movs	r0, #3
 80010a4:	f001 fe9e 	bl	8002de4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010a8:	f005 f9ee 	bl	8006488 <HAL_RCC_GetSysClockFreq>
 80010ac:	4602      	mov	r2, r0
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <HAL_Init+0x68>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	f003 030f 	and.w	r3, r3, #15
 80010b8:	4913      	ldr	r1, [pc, #76]	@ (8001108 <HAL_Init+0x6c>)
 80010ba:	5ccb      	ldrb	r3, [r1, r3]
 80010bc:	f003 031f 	and.w	r3, r3, #31
 80010c0:	fa22 f303 	lsr.w	r3, r2, r3
 80010c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <HAL_Init+0x68>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <HAL_Init+0x6c>)
 80010d0:	5cd3      	ldrb	r3, [r2, r3]
 80010d2:	f003 031f 	and.w	r3, r3, #31
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	fa22 f303 	lsr.w	r3, r2, r3
 80010dc:	4a0b      	ldr	r2, [pc, #44]	@ (800110c <HAL_Init+0x70>)
 80010de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001110 <HAL_Init+0x74>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e6:	200f      	movs	r0, #15
 80010e8:	f000 f814 	bl	8001114 <HAL_InitTick>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e002      	b.n	80010fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010f6:	f7ff fcf9 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	58024400 	.word	0x58024400
 8001108:	08009db8 	.word	0x08009db8
 800110c:	24000004 	.word	0x24000004
 8001110:	24000000 	.word	0x24000000

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800111c:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <HAL_InitTick+0x60>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e021      	b.n	800116c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001128:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <HAL_InitTick+0x64>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <HAL_InitTick+0x60>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f001 fe83 	bl	8002e4a <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e00e      	b.n	800116c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d80a      	bhi.n	800116a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f001 fe4d 	bl	8002dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4a06      	ldr	r2, [pc, #24]	@ (800117c <HAL_InitTick+0x68>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2400000c 	.word	0x2400000c
 8001178:	24000000 	.word	0x24000000
 800117c:	24000008 	.word	0x24000008

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	2400000c 	.word	0x2400000c
 80011a4:	2400a6c0 	.word	0x2400a6c0

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	2400a6c0 	.word	0x2400a6c0

080011c0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80011d0:	4904      	ldr	r1, [pc, #16]	@ (80011e4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	600b      	str	r3, [r1, #0]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	58003c00 	.word	0x58003c00

080011e8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 0202 	bic.w	r2, r3, #2
 80011f8:	4904      	ldr	r1, [pc, #16]	@ (800120c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	600b      	str	r3, [r1, #0]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	58003c00 	.word	0x58003c00

08001210 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001216:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a0e      	ldr	r2, [pc, #56]	@ (8001254 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001222:	f7ff ffc1 	bl	80011a8 <HAL_GetTick>
 8001226:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001228:	e008      	b.n	800123c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800122a:	f7ff ffbd 	bl	80011a8 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b0a      	cmp	r3, #10
 8001236:	d901      	bls.n	800123c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e006      	b.n	800124a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	58003c00 	.word	0x58003c00

08001258 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	609a      	str	r2, [r3, #8]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	609a      	str	r2, [r3, #8]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3360      	adds	r3, #96	@ 0x60
 80012d2:	461a      	mov	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4a10      	ldr	r2, [pc, #64]	@ (8001320 <LL_ADC_SetOffset+0x60>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d10b      	bne.n	80012fc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80012fa:	e00b      	b.n	8001314 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	430b      	orrs	r3, r1
 800130e:	431a      	orrs	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	58026000 	.word	0x58026000

08001324 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3360      	adds	r3, #96	@ 0x60
 8001332:	461a      	mov	r2, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	f003 031f 	and.w	r3, r3, #31
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	fa01 f303 	lsl.w	r3, r1, r3
 8001370:	431a      	orrs	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	611a      	str	r2, [r3, #16]
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4a0c      	ldr	r2, [pc, #48]	@ (80013c4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d00e      	beq.n	80013b6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3360      	adds	r3, #96	@ 0x60
 800139c:	461a      	mov	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	431a      	orrs	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	601a      	str	r2, [r3, #0]
  }
}
 80013b6:	bf00      	nop
 80013b8:	371c      	adds	r7, #28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	58026000 	.word	0x58026000

080013c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b087      	sub	sp, #28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001408 <LL_ADC_SetOffsetSaturation+0x40>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d10e      	bne.n	80013fa <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3360      	adds	r3, #96	@ 0x60
 80013e0:	461a      	mov	r2, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	431a      	orrs	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80013fa:	bf00      	nop
 80013fc:	371c      	adds	r7, #28
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	58026000 	.word	0x58026000

0800140c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4a0c      	ldr	r2, [pc, #48]	@ (800144c <LL_ADC_SetOffsetSign+0x40>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d10e      	bne.n	800143e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3360      	adds	r3, #96	@ 0x60
 8001424:	461a      	mov	r2, r3
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	431a      	orrs	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800143e:	bf00      	nop
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	58026000 	.word	0x58026000

08001450 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3360      	adds	r3, #96	@ 0x60
 8001460:	461a      	mov	r2, r3
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4a0c      	ldr	r2, [pc, #48]	@ (80014a0 <LL_ADC_SetOffsetState+0x50>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d108      	bne.n	8001484 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	431a      	orrs	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001482:	e007      	b.n	8001494 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	431a      	orrs	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	601a      	str	r2, [r3, #0]
}
 8001494:	bf00      	nop
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	58026000 	.word	0x58026000

080014a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b087      	sub	sp, #28
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3330      	adds	r3, #48	@ 0x30
 80014da:	461a      	mov	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	4413      	add	r3, r2
 80014e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	211f      	movs	r1, #31
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	401a      	ands	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	0e9b      	lsrs	r3, r3, #26
 8001502:	f003 011f 	and.w	r1, r3, #31
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	431a      	orrs	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001516:	bf00      	nop
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f023 0203 	bic.w	r2, r3, #3
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	60da      	str	r2, [r3, #12]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	60da      	str	r2, [r3, #12]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d107      	bne.n	800158a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f023 0203 	bic.w	r2, r3, #3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60da      	str	r2, [r3, #12]
  }
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	58026000 	.word	0x58026000

0800159c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3314      	adds	r3, #20
 80015ac:	461a      	mov	r2, r3
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	0e5b      	lsrs	r3, r3, #25
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	4413      	add	r3, r2
 80015ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	0d1b      	lsrs	r3, r3, #20
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	2107      	movs	r1, #7
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	401a      	ands	r2, r3
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	0d1b      	lsrs	r3, r3, #20
 80015d6:	f003 031f 	and.w	r3, r3, #31
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	fa01 f303 	lsl.w	r3, r1, r3
 80015e0:	431a      	orrs	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4a1a      	ldr	r2, [pc, #104]	@ (800166c <LL_ADC_SetChannelSingleDiff+0x78>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d115      	bne.n	8001634 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001614:	43db      	mvns	r3, r3
 8001616:	401a      	ands	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0318 	and.w	r3, r3, #24
 800161e:	4914      	ldr	r1, [pc, #80]	@ (8001670 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001620:	40d9      	lsrs	r1, r3
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	400b      	ands	r3, r1
 8001626:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800162a:	431a      	orrs	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001632:	e014      	b.n	800165e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001640:	43db      	mvns	r3, r3
 8001642:	401a      	ands	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0318 	and.w	r3, r3, #24
 800164a:	4909      	ldr	r1, [pc, #36]	@ (8001670 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800164c:	40d9      	lsrs	r1, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	400b      	ands	r3, r1
 8001652:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001656:	431a      	orrs	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	58026000 	.word	0x58026000
 8001670:	000fffff 	.word	0x000fffff

08001674 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 031f 	and.w	r3, r3, #31
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800169e:	4013      	ands	r3, r2
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6093      	str	r3, [r2, #8]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	5fffffc0 	.word	0x5fffffc0

080016b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016c8:	d101      	bne.n	80016ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <LL_ADC_EnableInternalRegulator+0x24>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	6fffffc0 	.word	0x6fffffc0

08001704 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001714:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001718:	d101      	bne.n	800171e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <LL_ADC_Enable+0x24>)
 800173a:	4013      	ands	r3, r2
 800173c:	f043 0201 	orr.w	r2, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	7fffffc0 	.word	0x7fffffc0

08001754 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <LL_ADC_IsEnabled+0x18>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <LL_ADC_IsEnabled+0x1a>
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	4b05      	ldr	r3, [pc, #20]	@ (80017a0 <LL_ADC_REG_StartConversion+0x24>)
 800178a:	4013      	ands	r3, r2
 800178c:	f043 0204 	orr.w	r2, r3, #4
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	7fffffc0 	.word	0x7fffffc0

080017a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d101      	bne.n	80017bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d101      	bne.n	80017e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b089      	sub	sp, #36	@ 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e1ee      	b.n	8001be8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff f997 	bl	8000b4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff3f 	bl	80016b4 <LL_ADC_IsDeepPowerDownEnabled>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff25 	bl	8001690 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff5a 	bl	8001704 <LL_ADC_IsInternalRegulatorEnabled>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d114      	bne.n	8001880 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff3e 	bl	80016dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001860:	4b8e      	ldr	r3, [pc, #568]	@ (8001a9c <HAL_ADC_Init+0x2ac>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	4a8e      	ldr	r2, [pc, #568]	@ (8001aa0 <HAL_ADC_Init+0x2b0>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	3301      	adds	r3, #1
 8001870:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001872:	e002      	b.n	800187a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	3b01      	subs	r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f9      	bne.n	8001874 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff3d 	bl	8001704 <LL_ADC_IsInternalRegulatorEnabled>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10d      	bne.n	80018ac <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001894:	f043 0210 	orr.w	r2, r3, #16
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80018a0:	f043 0201 	orr.w	r2, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff77 	bl	80017a4 <LL_ADC_REG_IsConversionOngoing>
 80018b6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018bc:	f003 0310 	and.w	r3, r3, #16
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 8188 	bne.w	8001bd6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f040 8184 	bne.w	8001bd6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018d6:	f043 0202 	orr.w	r2, r3, #2
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff36 	bl	8001754 <LL_ADC_IsEnabled>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d136      	bne.n	800195c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6c      	ldr	r2, [pc, #432]	@ (8001aa4 <HAL_ADC_Init+0x2b4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d004      	beq.n	8001902 <HAL_ADC_Init+0x112>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a6a      	ldr	r2, [pc, #424]	@ (8001aa8 <HAL_ADC_Init+0x2b8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d10e      	bne.n	8001920 <HAL_ADC_Init+0x130>
 8001902:	4868      	ldr	r0, [pc, #416]	@ (8001aa4 <HAL_ADC_Init+0x2b4>)
 8001904:	f7ff ff26 	bl	8001754 <LL_ADC_IsEnabled>
 8001908:	4604      	mov	r4, r0
 800190a:	4867      	ldr	r0, [pc, #412]	@ (8001aa8 <HAL_ADC_Init+0x2b8>)
 800190c:	f7ff ff22 	bl	8001754 <LL_ADC_IsEnabled>
 8001910:	4603      	mov	r3, r0
 8001912:	4323      	orrs	r3, r4
 8001914:	2b00      	cmp	r3, #0
 8001916:	bf0c      	ite	eq
 8001918:	2301      	moveq	r3, #1
 800191a:	2300      	movne	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	e008      	b.n	8001932 <HAL_ADC_Init+0x142>
 8001920:	4862      	ldr	r0, [pc, #392]	@ (8001aac <HAL_ADC_Init+0x2bc>)
 8001922:	f7ff ff17 	bl	8001754 <LL_ADC_IsEnabled>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	bf0c      	ite	eq
 800192c:	2301      	moveq	r3, #1
 800192e:	2300      	movne	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d012      	beq.n	800195c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a5a      	ldr	r2, [pc, #360]	@ (8001aa4 <HAL_ADC_Init+0x2b4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d004      	beq.n	800194a <HAL_ADC_Init+0x15a>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a58      	ldr	r2, [pc, #352]	@ (8001aa8 <HAL_ADC_Init+0x2b8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d101      	bne.n	800194e <HAL_ADC_Init+0x15e>
 800194a:	4a59      	ldr	r2, [pc, #356]	@ (8001ab0 <HAL_ADC_Init+0x2c0>)
 800194c:	e000      	b.n	8001950 <HAL_ADC_Init+0x160>
 800194e:	4a59      	ldr	r2, [pc, #356]	@ (8001ab4 <HAL_ADC_Init+0x2c4>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4619      	mov	r1, r3
 8001956:	4610      	mov	r0, r2
 8001958:	f7ff fc7e 	bl	8001258 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a52      	ldr	r2, [pc, #328]	@ (8001aac <HAL_ADC_Init+0x2bc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d129      	bne.n	80019ba <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7e5b      	ldrb	r3, [r3, #25]
 800196a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001970:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001976:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b08      	cmp	r3, #8
 800197e:	d013      	beq.n	80019a8 <HAL_ADC_Init+0x1b8>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b0c      	cmp	r3, #12
 8001986:	d00d      	beq.n	80019a4 <HAL_ADC_Init+0x1b4>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b1c      	cmp	r3, #28
 800198e:	d007      	beq.n	80019a0 <HAL_ADC_Init+0x1b0>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b18      	cmp	r3, #24
 8001996:	d101      	bne.n	800199c <HAL_ADC_Init+0x1ac>
 8001998:	2318      	movs	r3, #24
 800199a:	e006      	b.n	80019aa <HAL_ADC_Init+0x1ba>
 800199c:	2300      	movs	r3, #0
 800199e:	e004      	b.n	80019aa <HAL_ADC_Init+0x1ba>
 80019a0:	2310      	movs	r3, #16
 80019a2:	e002      	b.n	80019aa <HAL_ADC_Init+0x1ba>
 80019a4:	2308      	movs	r3, #8
 80019a6:	e000      	b.n	80019aa <HAL_ADC_Init+0x1ba>
 80019a8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80019aa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	e00e      	b.n	80019d8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7e5b      	ldrb	r3, [r3, #25]
 80019be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019c4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80019ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d106      	bne.n	80019f0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e6:	3b01      	subs	r3, #1
 80019e8:	045b      	lsls	r3, r3, #17
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d009      	beq.n	8001a0c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a04:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a26      	ldr	r2, [pc, #152]	@ (8001aac <HAL_ADC_Init+0x2bc>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d115      	bne.n	8001a42 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	4b26      	ldr	r3, [pc, #152]	@ (8001ab8 <HAL_ADC_Init+0x2c8>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	69b9      	ldr	r1, [r7, #24]
 8001a26:	430b      	orrs	r3, r1
 8001a28:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	e009      	b.n	8001a56 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	4b1c      	ldr	r3, [pc, #112]	@ (8001abc <HAL_ADC_Init+0x2cc>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	69b9      	ldr	r1, [r7, #24]
 8001a52:	430b      	orrs	r3, r1
 8001a54:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fea2 	bl	80017a4 <LL_ADC_REG_IsConversionOngoing>
 8001a60:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff feaf 	bl	80017ca <LL_ADC_INJ_IsConversionOngoing>
 8001a6c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f040 808e 	bne.w	8001b92 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f040 808a 	bne.w	8001b92 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a0a      	ldr	r2, [pc, #40]	@ (8001aac <HAL_ADC_Init+0x2bc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d11b      	bne.n	8001ac0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7e1b      	ldrb	r3, [r3, #24]
 8001a8c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a94:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	e018      	b.n	8001ace <HAL_ADC_Init+0x2de>
 8001a9c:	24000000 	.word	0x24000000
 8001aa0:	053e2d63 	.word	0x053e2d63
 8001aa4:	40022000 	.word	0x40022000
 8001aa8:	40022100 	.word	0x40022100
 8001aac:	58026000 	.word	0x58026000
 8001ab0:	40022300 	.word	0x40022300
 8001ab4:	58026300 	.word	0x58026300
 8001ab8:	fff04007 	.word	0xfff04007
 8001abc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7e1b      	ldrb	r3, [r3, #24]
 8001ac4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	4b46      	ldr	r3, [pc, #280]	@ (8001bf0 <HAL_ADC_Init+0x400>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	69b9      	ldr	r1, [r7, #24]
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d137      	bne.n	8001b5c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a3f      	ldr	r2, [pc, #252]	@ (8001bf4 <HAL_ADC_Init+0x404>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d116      	bne.n	8001b2a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf8 <HAL_ADC_Init+0x408>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b0e:	4311      	orrs	r1, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b14:	4311      	orrs	r1, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	e020      	b.n	8001b6c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	4b32      	ldr	r3, [pc, #200]	@ (8001bfc <HAL_ADC_Init+0x40c>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b38:	3a01      	subs	r2, #1
 8001b3a:	0411      	lsls	r1, r2, #16
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b40:	4311      	orrs	r1, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b46:	4311      	orrs	r1, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0201 	orr.w	r2, r2, #1
 8001b58:	611a      	str	r2, [r3, #16]
 8001b5a:	e007      	b.n	8001b6c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691a      	ldr	r2, [r3, #16]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf4 <HAL_ADC_Init+0x404>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d002      	beq.n	8001b92 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 ff6b 	bl	8002a68 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d10c      	bne.n	8001bb4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba0:	f023 010f 	bic.w	r1, r3, #15
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	1e5a      	subs	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bb2:	e007      	b.n	8001bc4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 020f 	bic.w	r2, r2, #15
 8001bc2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc8:	f023 0303 	bic.w	r3, r3, #3
 8001bcc:	f043 0201 	orr.w	r2, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	661a      	str	r2, [r3, #96]	@ 0x60
 8001bd4:	e007      	b.n	8001be6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bda:	f043 0210 	orr.w	r2, r3, #16
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001be6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3724      	adds	r7, #36	@ 0x24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd90      	pop	{r4, r7, pc}
 8001bf0:	ffffbffc 	.word	0xffffbffc
 8001bf4:	58026000 	.word	0x58026000
 8001bf8:	fc00f81f 	.word	0xfc00f81f
 8001bfc:	fc00f81e 	.word	0xfc00f81e

08001c00 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a60      	ldr	r2, [pc, #384]	@ (8001d94 <HAL_ADC_Start_DMA+0x194>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d004      	beq.n	8001c20 <HAL_ADC_Start_DMA+0x20>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a5f      	ldr	r2, [pc, #380]	@ (8001d98 <HAL_ADC_Start_DMA+0x198>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d101      	bne.n	8001c24 <HAL_ADC_Start_DMA+0x24>
 8001c20:	4b5e      	ldr	r3, [pc, #376]	@ (8001d9c <HAL_ADC_Start_DMA+0x19c>)
 8001c22:	e000      	b.n	8001c26 <HAL_ADC_Start_DMA+0x26>
 8001c24:	4b5e      	ldr	r3, [pc, #376]	@ (8001da0 <HAL_ADC_Start_DMA+0x1a0>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fd24 	bl	8001674 <LL_ADC_GetMultimode>
 8001c2c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fdb6 	bl	80017a4 <LL_ADC_REG_IsConversionOngoing>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f040 80a2 	bne.w	8001d84 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_Start_DMA+0x4e>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e09d      	b.n	8001d8a <HAL_ADC_Start_DMA+0x18a>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d006      	beq.n	8001c6a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b05      	cmp	r3, #5
 8001c60:	d003      	beq.n	8001c6a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b09      	cmp	r3, #9
 8001c66:	f040 8086 	bne.w	8001d76 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 fdde 	bl	800282c <ADC_Enable>
 8001c70:	4603      	mov	r3, r0
 8001c72:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d178      	bne.n	8001d6c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c7e:	4b49      	ldr	r3, [pc, #292]	@ (8001da4 <HAL_ADC_Start_DMA+0x1a4>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a42      	ldr	r2, [pc, #264]	@ (8001d98 <HAL_ADC_Start_DMA+0x198>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d002      	beq.n	8001c9a <HAL_ADC_Start_DMA+0x9a>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	e000      	b.n	8001c9c <HAL_ADC_Start_DMA+0x9c>
 8001c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d94 <HAL_ADC_Start_DMA+0x194>)
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d002      	beq.n	8001caa <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cc6:	f023 0206 	bic.w	r2, r3, #6
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	665a      	str	r2, [r3, #100]	@ 0x64
 8001cce:	e002      	b.n	8001cd6 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cda:	4a33      	ldr	r2, [pc, #204]	@ (8001da8 <HAL_ADC_Start_DMA+0x1a8>)
 8001cdc:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce2:	4a32      	ldr	r2, [pc, #200]	@ (8001dac <HAL_ADC_Start_DMA+0x1ac>)
 8001ce4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cea:	4a31      	ldr	r2, [pc, #196]	@ (8001db0 <HAL_ADC_Start_DMA+0x1b0>)
 8001cec:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	221c      	movs	r2, #28
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0210 	orr.w	r2, r2, #16
 8001d0c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a28      	ldr	r2, [pc, #160]	@ (8001db4 <HAL_ADC_Start_DMA+0x1b4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d10f      	bne.n	8001d38 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4619      	mov	r1, r3
 8001d26:	4610      	mov	r0, r2
 8001d28:	f7ff fc1e 	bl	8001568 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fc09 	bl	8001548 <LL_ADC_EnableDMAReq>
 8001d36:	e007      	b.n	8001d48 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d40:	4619      	mov	r1, r3
 8001d42:	4610      	mov	r0, r2
 8001d44:	f7ff fbed 	bl	8001522 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	3340      	adds	r3, #64	@ 0x40
 8001d52:	4619      	mov	r1, r3
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f001 fea8 	bl	8003aac <HAL_DMA_Start_IT>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fd09 	bl	800177c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d6a:	e00d      	b.n	8001d88 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8001d74:	e008      	b.n	8001d88 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8001d82:	e001      	b.n	8001d88 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d84:	2302      	movs	r3, #2
 8001d86:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40022000 	.word	0x40022000
 8001d98:	40022100 	.word	0x40022100
 8001d9c:	40022300 	.word	0x40022300
 8001da0:	58026300 	.word	0x58026300
 8001da4:	fffff0fe 	.word	0xfffff0fe
 8001da8:	08002941 	.word	0x08002941
 8001dac:	08002a19 	.word	0x08002a19
 8001db0:	08002a35 	.word	0x08002a35
 8001db4:	58026000 	.word	0x58026000

08001db8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b0b9      	sub	sp, #228	@ 0xe4
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001de6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4aab      	ldr	r2, [pc, #684]	@ (800209c <HAL_ADC_ConfigChannel+0x2d0>)
 8001dee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d102      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x34>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	f000 bcfe 	b.w	80027fc <HAL_ADC_ConfigChannel+0xa30>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fcc9 	bl	80017a4 <LL_ADC_REG_IsConversionOngoing>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f040 84e2 	bne.w	80027de <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db38      	blt.n	8001e94 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a9e      	ldr	r2, [pc, #632]	@ (80020a0 <HAL_ADC_ConfigChannel+0x2d4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d033      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d108      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x7e>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0e9b      	lsrs	r3, r3, #26
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	2201      	movs	r2, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	e01d      	b.n	8001e86 <HAL_ADC_ConfigChannel+0xba>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8001e6e:	2320      	movs	r3, #32
 8001e70:	e004      	b.n	8001e7c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8001e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	2201      	movs	r2, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	69d1      	ldr	r1, [r2, #28]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	430b      	orrs	r3, r1
 8001e92:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f7ff fb12 	bl	80014ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fc7a 	bl	80017a4 <LL_ADC_REG_IsConversionOngoing>
 8001eb0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fc86 	bl	80017ca <LL_ADC_INJ_IsConversionOngoing>
 8001ebe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f040 8270 	bne.w	80023ac <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ecc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f040 826b 	bne.w	80023ac <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f7ff fb5a 	bl	800159c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a6c      	ldr	r2, [pc, #432]	@ (80020a0 <HAL_ADC_ConfigChannel+0x2d4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d10d      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	695a      	ldr	r2, [r3, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	08db      	lsrs	r3, r3, #3
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001f0c:	e032      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f0e:	4b65      	ldr	r3, [pc, #404]	@ (80020a4 <HAL_ADC_ConfigChannel+0x2d8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001f16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f1a:	d10b      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x168>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	e01d      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x1a4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10b      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x18e>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	695a      	ldr	r2, [r3, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	e00a      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x1a4>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d048      	beq.n	800200e <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6919      	ldr	r1, [r3, #16]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001f8c:	f7ff f998 	bl	80012c0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a42      	ldr	r2, [pc, #264]	@ (80020a0 <HAL_ADC_ConfigChannel+0x2d4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d119      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6919      	ldr	r1, [r3, #16]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f7ff fa30 	bl	800140c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6919      	ldr	r1, [r3, #16]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d102      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x1f8>
 8001fbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fc2:	e000      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x1fa>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f7ff f9fe 	bl	80013c8 <LL_ADC_SetOffsetSaturation>
 8001fcc:	e1ee      	b.n	80023ac <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6919      	ldr	r1, [r3, #16]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d102      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x21a>
 8001fe0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001fe4:	e000      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x21c>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f7ff f9cb 	bl	8001384 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6919      	ldr	r1, [r3, #16]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	7e1b      	ldrb	r3, [r3, #24]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d102      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x238>
 8001ffe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002002:	e000      	b.n	8002006 <HAL_ADC_ConfigChannel+0x23a>
 8002004:	2300      	movs	r3, #0
 8002006:	461a      	mov	r2, r3
 8002008:	f7ff f9a2 	bl	8001350 <LL_ADC_SetDataRightShift>
 800200c:	e1ce      	b.n	80023ac <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a23      	ldr	r2, [pc, #140]	@ (80020a0 <HAL_ADC_ConfigChannel+0x2d4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	f040 8181 	bne.w	800231c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff f97f 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x27a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff f974 	bl	8001324 <LL_ADC_GetOffsetChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	0e9b      	lsrs	r3, r3, #26
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	e01e      	b.n	8002084 <HAL_ADC_ConfigChannel+0x2b8>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff f969 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002064:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002068:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800206c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002074:	2320      	movs	r3, #32
 8002076:	e004      	b.n	8002082 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002078:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10b      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x2dc>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0e9b      	lsrs	r3, r3, #26
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	e01e      	b.n	80020da <HAL_ADC_ConfigChannel+0x30e>
 800209c:	47ff0000 	.word	0x47ff0000
 80020a0:	58026000 	.word	0x58026000
 80020a4:	5c001000 	.word	0x5c001000
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80020bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80020c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e004      	b.n	80020da <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80020d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	429a      	cmp	r2, r3
 80020dc:	d106      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff f9b2 	bl	8001450 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2101      	movs	r1, #1
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f916 	bl	8001324 <LL_ADC_GetOffsetChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10a      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x34c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2101      	movs	r1, #1
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff f90b 	bl	8001324 <LL_ADC_GetOffsetChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	0e9b      	lsrs	r3, r3, #26
 8002112:	f003 021f 	and.w	r2, r3, #31
 8002116:	e01e      	b.n	8002156 <HAL_ADC_ConfigChannel+0x38a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2101      	movs	r1, #1
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff f900 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002136:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800213a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800213e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002146:	2320      	movs	r3, #32
 8002148:	e004      	b.n	8002154 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800214a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800215e:	2b00      	cmp	r3, #0
 8002160:	d105      	bne.n	800216e <HAL_ADC_ConfigChannel+0x3a2>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	0e9b      	lsrs	r3, r3, #26
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	e018      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x3d4>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002182:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002186:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800218a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002192:	2320      	movs	r3, #32
 8002194:	e004      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8002196:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d106      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2200      	movs	r2, #0
 80021aa:	2101      	movs	r1, #1
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f94f 	bl	8001450 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2102      	movs	r1, #2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff f8b3 	bl	8001324 <LL_ADC_GetOffsetChannel>
 80021be:	4603      	mov	r3, r0
 80021c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10a      	bne.n	80021de <HAL_ADC_ConfigChannel+0x412>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2102      	movs	r1, #2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f8a8 	bl	8001324 <LL_ADC_GetOffsetChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	0e9b      	lsrs	r3, r3, #26
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	e01e      	b.n	800221c <HAL_ADC_ConfigChannel+0x450>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2102      	movs	r1, #2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff f89d 	bl	8001324 <LL_ADC_GetOffsetChannel>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80021fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002200:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002204:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 800220c:	2320      	movs	r3, #32
 800220e:	e004      	b.n	800221a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002210:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002224:	2b00      	cmp	r3, #0
 8002226:	d105      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x468>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	e014      	b.n	800225e <HAL_ADC_ConfigChannel+0x492>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002242:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002248:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002250:	2320      	movs	r3, #32
 8002252:	e004      	b.n	800225e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002254:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	429a      	cmp	r2, r3
 8002260:	d106      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	2102      	movs	r1, #2
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f8f0 	bl	8001450 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2103      	movs	r1, #3
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff f854 	bl	8001324 <LL_ADC_GetOffsetChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10a      	bne.n	800229c <HAL_ADC_ConfigChannel+0x4d0>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2103      	movs	r1, #3
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff f849 	bl	8001324 <LL_ADC_GetOffsetChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	f003 021f 	and.w	r2, r3, #31
 800229a:	e017      	b.n	80022cc <HAL_ADC_ConfigChannel+0x500>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2103      	movs	r1, #3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff f83e 	bl	8001324 <LL_ADC_GetOffsetChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80022b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022b6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80022b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80022be:	2320      	movs	r3, #32
 80022c0:	e003      	b.n	80022ca <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80022c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x518>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	e011      	b.n	8002308 <HAL_ADC_ConfigChannel+0x53c>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80022f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80022f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e003      	b.n	8002308 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002300:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	429a      	cmp	r2, r3
 800230a:	d14f      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2200      	movs	r2, #0
 8002312:	2103      	movs	r1, #3
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff f89b 	bl	8001450 <LL_ADC_SetOffsetState>
 800231a:	e047      	b.n	80023ac <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002322:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	069b      	lsls	r3, r3, #26
 800232c:	429a      	cmp	r2, r3
 800232e:	d107      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800233e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002346:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	069b      	lsls	r3, r3, #26
 8002350:	429a      	cmp	r2, r3
 8002352:	d107      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002362:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800236a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	069b      	lsls	r3, r3, #26
 8002374:	429a      	cmp	r2, r3
 8002376:	d107      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002386:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800238e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	069b      	lsls	r3, r3, #26
 8002398:	429a      	cmp	r2, r3
 800239a:	d107      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023aa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff f9cf 	bl	8001754 <LL_ADC_IsEnabled>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f040 8219 	bne.w	80027f0 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	461a      	mov	r2, r3
 80023cc:	f7ff f912 	bl	80015f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4aa1      	ldr	r2, [pc, #644]	@ (800265c <HAL_ADC_ConfigChannel+0x890>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	f040 812e 	bne.w	8002638 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10b      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x638>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	0e9b      	lsrs	r3, r3, #26
 80023f2:	3301      	adds	r3, #1
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	2b09      	cmp	r3, #9
 80023fa:	bf94      	ite	ls
 80023fc:	2301      	movls	r3, #1
 80023fe:	2300      	movhi	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	e019      	b.n	8002438 <HAL_ADC_ConfigChannel+0x66c>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002414:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800241c:	2320      	movs	r3, #32
 800241e:	e003      	b.n	8002428 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002420:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	3301      	adds	r3, #1
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	2b09      	cmp	r3, #9
 8002430:	bf94      	ite	ls
 8002432:	2301      	movls	r3, #1
 8002434:	2300      	movhi	r3, #0
 8002436:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002438:	2b00      	cmp	r3, #0
 800243a:	d079      	beq.n	8002530 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002444:	2b00      	cmp	r3, #0
 8002446:	d107      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x68c>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0e9b      	lsrs	r3, r3, #26
 800244e:	3301      	adds	r3, #1
 8002450:	069b      	lsls	r3, r3, #26
 8002452:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002456:	e015      	b.n	8002484 <HAL_ADC_ConfigChannel+0x6b8>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002468:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800246a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002470:	2320      	movs	r3, #32
 8002472:	e003      	b.n	800247c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8002474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3301      	adds	r3, #1
 800247e:	069b      	lsls	r3, r3, #26
 8002480:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x6d8>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0e9b      	lsrs	r3, r3, #26
 8002496:	3301      	adds	r3, #1
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2101      	movs	r1, #1
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	e017      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x708>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024b4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80024bc:	2320      	movs	r3, #32
 80024be:	e003      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80024c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	3301      	adds	r3, #1
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2101      	movs	r1, #1
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	ea42 0103 	orr.w	r1, r2, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x72e>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	3301      	adds	r3, #1
 80024ec:	f003 021f 	and.w	r2, r3, #31
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	051b      	lsls	r3, r3, #20
 80024f8:	e018      	b.n	800252c <HAL_ADC_ConfigChannel+0x760>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800250a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800250c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e003      	b.n	800251e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8002516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	3301      	adds	r3, #1
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800252c:	430b      	orrs	r3, r1
 800252e:	e07e      	b.n	800262e <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002538:	2b00      	cmp	r3, #0
 800253a:	d107      	bne.n	800254c <HAL_ADC_ConfigChannel+0x780>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	3301      	adds	r3, #1
 8002544:	069b      	lsls	r3, r3, #26
 8002546:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800254a:	e015      	b.n	8002578 <HAL_ADC_ConfigChannel+0x7ac>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800255e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8002564:	2320      	movs	r3, #32
 8002566:	e003      	b.n	8002570 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8002568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	3301      	adds	r3, #1
 8002572:	069b      	lsls	r3, r3, #26
 8002574:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x7cc>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0e9b      	lsrs	r3, r3, #26
 800258a:	3301      	adds	r3, #1
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2101      	movs	r1, #1
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	e017      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x7fc>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	61bb      	str	r3, [r7, #24]
  return result;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80025b0:	2320      	movs	r3, #32
 80025b2:	e003      	b.n	80025bc <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	3301      	adds	r3, #1
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	2101      	movs	r1, #1
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	ea42 0103 	orr.w	r1, r2, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10d      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x828>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	3301      	adds	r3, #1
 80025e0:	f003 021f 	and.w	r2, r3, #31
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	3b1e      	subs	r3, #30
 80025ec:	051b      	lsls	r3, r3, #20
 80025ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	e01b      	b.n	800262c <HAL_ADC_ConfigChannel+0x860>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	60fb      	str	r3, [r7, #12]
  return result;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 800260c:	2320      	movs	r3, #32
 800260e:	e003      	b.n	8002618 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	3301      	adds	r3, #1
 800261a:	f003 021f 	and.w	r2, r3, #31
 800261e:	4613      	mov	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	3b1e      	subs	r3, #30
 8002626:	051b      	lsls	r3, r3, #20
 8002628:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800262c:	430b      	orrs	r3, r1
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	6892      	ldr	r2, [r2, #8]
 8002632:	4619      	mov	r1, r3
 8002634:	f7fe ffb2 	bl	800159c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	f280 80d7 	bge.w	80027f0 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a06      	ldr	r2, [pc, #24]	@ (8002660 <HAL_ADC_ConfigChannel+0x894>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d004      	beq.n	8002656 <HAL_ADC_ConfigChannel+0x88a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a04      	ldr	r2, [pc, #16]	@ (8002664 <HAL_ADC_ConfigChannel+0x898>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10a      	bne.n	800266c <HAL_ADC_ConfigChannel+0x8a0>
 8002656:	4b04      	ldr	r3, [pc, #16]	@ (8002668 <HAL_ADC_ConfigChannel+0x89c>)
 8002658:	e009      	b.n	800266e <HAL_ADC_ConfigChannel+0x8a2>
 800265a:	bf00      	nop
 800265c:	47ff0000 	.word	0x47ff0000
 8002660:	40022000 	.word	0x40022000
 8002664:	40022100 	.word	0x40022100
 8002668:	40022300 	.word	0x40022300
 800266c:	4b65      	ldr	r3, [pc, #404]	@ (8002804 <HAL_ADC_ConfigChannel+0xa38>)
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fe18 	bl	80012a4 <LL_ADC_GetCommonPathInternalCh>
 8002674:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a62      	ldr	r2, [pc, #392]	@ (8002808 <HAL_ADC_ConfigChannel+0xa3c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d004      	beq.n	800268c <HAL_ADC_ConfigChannel+0x8c0>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a61      	ldr	r2, [pc, #388]	@ (800280c <HAL_ADC_ConfigChannel+0xa40>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d10e      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x8de>
 800268c:	485e      	ldr	r0, [pc, #376]	@ (8002808 <HAL_ADC_ConfigChannel+0xa3c>)
 800268e:	f7ff f861 	bl	8001754 <LL_ADC_IsEnabled>
 8002692:	4604      	mov	r4, r0
 8002694:	485d      	ldr	r0, [pc, #372]	@ (800280c <HAL_ADC_ConfigChannel+0xa40>)
 8002696:	f7ff f85d 	bl	8001754 <LL_ADC_IsEnabled>
 800269a:	4603      	mov	r3, r0
 800269c:	4323      	orrs	r3, r4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf0c      	ite	eq
 80026a2:	2301      	moveq	r3, #1
 80026a4:	2300      	movne	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	e008      	b.n	80026bc <HAL_ADC_ConfigChannel+0x8f0>
 80026aa:	4859      	ldr	r0, [pc, #356]	@ (8002810 <HAL_ADC_ConfigChannel+0xa44>)
 80026ac:	f7ff f852 	bl	8001754 <LL_ADC_IsEnabled>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf0c      	ite	eq
 80026b6:	2301      	moveq	r3, #1
 80026b8:	2300      	movne	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8084 	beq.w	80027ca <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a53      	ldr	r2, [pc, #332]	@ (8002814 <HAL_ADC_ConfigChannel+0xa48>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d132      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x966>
 80026cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d12c      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002810 <HAL_ADC_ConfigChannel+0xa44>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	f040 8086 	bne.w	80027f0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a47      	ldr	r2, [pc, #284]	@ (8002808 <HAL_ADC_ConfigChannel+0xa3c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d004      	beq.n	80026f8 <HAL_ADC_ConfigChannel+0x92c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a46      	ldr	r2, [pc, #280]	@ (800280c <HAL_ADC_ConfigChannel+0xa40>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x930>
 80026f8:	4a47      	ldr	r2, [pc, #284]	@ (8002818 <HAL_ADC_ConfigChannel+0xa4c>)
 80026fa:	e000      	b.n	80026fe <HAL_ADC_ConfigChannel+0x932>
 80026fc:	4a41      	ldr	r2, [pc, #260]	@ (8002804 <HAL_ADC_ConfigChannel+0xa38>)
 80026fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002702:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002706:	4619      	mov	r1, r3
 8002708:	4610      	mov	r0, r2
 800270a:	f7fe fdb8 	bl	800127e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800270e:	4b43      	ldr	r3, [pc, #268]	@ (800281c <HAL_ADC_ConfigChannel+0xa50>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	099b      	lsrs	r3, r3, #6
 8002714:	4a42      	ldr	r2, [pc, #264]	@ (8002820 <HAL_ADC_ConfigChannel+0xa54>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	3301      	adds	r3, #1
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002722:	e002      	b.n	800272a <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	3b01      	subs	r3, #1
 8002728:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f9      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002730:	e05e      	b.n	80027f0 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a3b      	ldr	r2, [pc, #236]	@ (8002824 <HAL_ADC_ConfigChannel+0xa58>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d120      	bne.n	800277e <HAL_ADC_ConfigChannel+0x9b2>
 800273c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d11a      	bne.n	800277e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a30      	ldr	r2, [pc, #192]	@ (8002810 <HAL_ADC_ConfigChannel+0xa44>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d14e      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a2c      	ldr	r2, [pc, #176]	@ (8002808 <HAL_ADC_ConfigChannel+0xa3c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d004      	beq.n	8002766 <HAL_ADC_ConfigChannel+0x99a>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2a      	ldr	r2, [pc, #168]	@ (800280c <HAL_ADC_ConfigChannel+0xa40>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_ADC_ConfigChannel+0x99e>
 8002766:	4a2c      	ldr	r2, [pc, #176]	@ (8002818 <HAL_ADC_ConfigChannel+0xa4c>)
 8002768:	e000      	b.n	800276c <HAL_ADC_ConfigChannel+0x9a0>
 800276a:	4a26      	ldr	r2, [pc, #152]	@ (8002804 <HAL_ADC_ConfigChannel+0xa38>)
 800276c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002770:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002774:	4619      	mov	r1, r3
 8002776:	4610      	mov	r0, r2
 8002778:	f7fe fd81 	bl	800127e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800277c:	e038      	b.n	80027f0 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a29      	ldr	r2, [pc, #164]	@ (8002828 <HAL_ADC_ConfigChannel+0xa5c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d133      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0xa24>
 8002788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800278c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d12d      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1d      	ldr	r2, [pc, #116]	@ (8002810 <HAL_ADC_ConfigChannel+0xa44>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d128      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a19      	ldr	r2, [pc, #100]	@ (8002808 <HAL_ADC_ConfigChannel+0xa3c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d004      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x9e6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a17      	ldr	r2, [pc, #92]	@ (800280c <HAL_ADC_ConfigChannel+0xa40>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x9ea>
 80027b2:	4a19      	ldr	r2, [pc, #100]	@ (8002818 <HAL_ADC_ConfigChannel+0xa4c>)
 80027b4:	e000      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x9ec>
 80027b6:	4a13      	ldr	r2, [pc, #76]	@ (8002804 <HAL_ADC_ConfigChannel+0xa38>)
 80027b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f7fe fd5b 	bl	800127e <LL_ADC_SetCommonPathInternalCh>
 80027c8:	e012      	b.n	80027f0 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ce:	f043 0220 	orr.w	r2, r3, #32
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80027dc:	e008      	b.n	80027f0 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e2:	f043 0220 	orr.w	r2, r3, #32
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80027f8:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	37e4      	adds	r7, #228	@ 0xe4
 8002800:	46bd      	mov	sp, r7
 8002802:	bd90      	pop	{r4, r7, pc}
 8002804:	58026300 	.word	0x58026300
 8002808:	40022000 	.word	0x40022000
 800280c:	40022100 	.word	0x40022100
 8002810:	58026000 	.word	0x58026000
 8002814:	c7520000 	.word	0xc7520000
 8002818:	40022300 	.word	0x40022300
 800281c:	24000000 	.word	0x24000000
 8002820:	053e2d63 	.word	0x053e2d63
 8002824:	c3210000 	.word	0xc3210000
 8002828:	cb840000 	.word	0xcb840000

0800282c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe ff8b 	bl	8001754 <LL_ADC_IsEnabled>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d16e      	bne.n	8002922 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	4b38      	ldr	r3, [pc, #224]	@ (800292c <ADC_Enable+0x100>)
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00d      	beq.n	800286e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002856:	f043 0210 	orr.w	r2, r3, #16
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002862:	f043 0201 	orr.w	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e05a      	b.n	8002924 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe ff5a 	bl	800172c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002878:	f7fe fc96 	bl	80011a8 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a2b      	ldr	r2, [pc, #172]	@ (8002930 <ADC_Enable+0x104>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d004      	beq.n	8002892 <ADC_Enable+0x66>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a29      	ldr	r2, [pc, #164]	@ (8002934 <ADC_Enable+0x108>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <ADC_Enable+0x6a>
 8002892:	4b29      	ldr	r3, [pc, #164]	@ (8002938 <ADC_Enable+0x10c>)
 8002894:	e000      	b.n	8002898 <ADC_Enable+0x6c>
 8002896:	4b29      	ldr	r3, [pc, #164]	@ (800293c <ADC_Enable+0x110>)
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe feeb 	bl	8001674 <LL_ADC_GetMultimode>
 800289e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a23      	ldr	r2, [pc, #140]	@ (8002934 <ADC_Enable+0x108>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d002      	beq.n	80028b0 <ADC_Enable+0x84>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	e000      	b.n	80028b2 <ADC_Enable+0x86>
 80028b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002930 <ADC_Enable+0x104>)
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d02c      	beq.n	8002914 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d130      	bne.n	8002922 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028c0:	e028      	b.n	8002914 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe ff44 	bl	8001754 <LL_ADC_IsEnabled>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d104      	bne.n	80028dc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe ff28 	bl	800172c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028dc:	f7fe fc64 	bl	80011a8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d914      	bls.n	8002914 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d00d      	beq.n	8002914 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028fc:	f043 0210 	orr.w	r2, r3, #16
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e007      	b.n	8002924 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d1cf      	bne.n	80028c2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	8000003f 	.word	0x8000003f
 8002930:	40022000 	.word	0x40022000
 8002934:	40022100 	.word	0x40022100
 8002938:	40022300 	.word	0x40022300
 800293c:	58026300 	.word	0x58026300

08002940 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002952:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002956:	2b00      	cmp	r3, #0
 8002958:	d14b      	bne.n	80029f2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d021      	beq.n	80029b8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fd93 	bl	80014a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d032      	beq.n	80029ea <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d12b      	bne.n	80029ea <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002996:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d11f      	bne.n	80029ea <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ae:	f043 0201 	orr.w	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80029b6:	e018      	b.n	80029ea <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d111      	bne.n	80029ea <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d105      	bne.n	80029ea <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7fe f852 	bl	8000a94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029f0:	e00e      	b.n	8002a10 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f7ff f9da 	bl	8001db8 <HAL_ADC_ErrorCallback>
}
 8002a04:	e004      	b.n	8002a10 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	4798      	blx	r3
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7fe f810 	bl	8000a4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a52:	f043 0204 	orr.w	r2, r3, #4
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7ff f9ac 	bl	8001db8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a60:	bf00      	nop
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a6c      	ldr	r2, [pc, #432]	@ (8002c28 <ADC_ConfigureBoostMode+0x1c0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d004      	beq.n	8002a84 <ADC_ConfigureBoostMode+0x1c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a6b      	ldr	r2, [pc, #428]	@ (8002c2c <ADC_ConfigureBoostMode+0x1c4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d109      	bne.n	8002a98 <ADC_ConfigureBoostMode+0x30>
 8002a84:	4b6a      	ldr	r3, [pc, #424]	@ (8002c30 <ADC_ConfigureBoostMode+0x1c8>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf14      	ite	ne
 8002a90:	2301      	movne	r3, #1
 8002a92:	2300      	moveq	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e008      	b.n	8002aaa <ADC_ConfigureBoostMode+0x42>
 8002a98:	4b66      	ldr	r3, [pc, #408]	@ (8002c34 <ADC_ConfigureBoostMode+0x1cc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d01c      	beq.n	8002ae8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002aae:	f003 fe65 	bl	800677c <HAL_RCC_GetHCLKFreq>
 8002ab2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002abc:	d010      	beq.n	8002ae0 <ADC_ConfigureBoostMode+0x78>
 8002abe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ac2:	d873      	bhi.n	8002bac <ADC_ConfigureBoostMode+0x144>
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac8:	d002      	beq.n	8002ad0 <ADC_ConfigureBoostMode+0x68>
 8002aca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ace:	d16d      	bne.n	8002bac <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	0c1b      	lsrs	r3, r3, #16
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	60fb      	str	r3, [r7, #12]
        break;
 8002ade:	e068      	b.n	8002bb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	60fb      	str	r3, [r7, #12]
        break;
 8002ae6:	e064      	b.n	8002bb2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002ae8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002aec:	f04f 0100 	mov.w	r1, #0
 8002af0:	f005 f82a 	bl	8007b48 <HAL_RCCEx_GetPeriphCLKFreq>
 8002af4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002afe:	d051      	beq.n	8002ba4 <ADC_ConfigureBoostMode+0x13c>
 8002b00:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002b04:	d854      	bhi.n	8002bb0 <ADC_ConfigureBoostMode+0x148>
 8002b06:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002b0a:	d047      	beq.n	8002b9c <ADC_ConfigureBoostMode+0x134>
 8002b0c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002b10:	d84e      	bhi.n	8002bb0 <ADC_ConfigureBoostMode+0x148>
 8002b12:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002b16:	d03d      	beq.n	8002b94 <ADC_ConfigureBoostMode+0x12c>
 8002b18:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002b1c:	d848      	bhi.n	8002bb0 <ADC_ConfigureBoostMode+0x148>
 8002b1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b22:	d033      	beq.n	8002b8c <ADC_ConfigureBoostMode+0x124>
 8002b24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b28:	d842      	bhi.n	8002bb0 <ADC_ConfigureBoostMode+0x148>
 8002b2a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002b2e:	d029      	beq.n	8002b84 <ADC_ConfigureBoostMode+0x11c>
 8002b30:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002b34:	d83c      	bhi.n	8002bb0 <ADC_ConfigureBoostMode+0x148>
 8002b36:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002b3a:	d01a      	beq.n	8002b72 <ADC_ConfigureBoostMode+0x10a>
 8002b3c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002b40:	d836      	bhi.n	8002bb0 <ADC_ConfigureBoostMode+0x148>
 8002b42:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002b46:	d014      	beq.n	8002b72 <ADC_ConfigureBoostMode+0x10a>
 8002b48:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002b4c:	d830      	bhi.n	8002bb0 <ADC_ConfigureBoostMode+0x148>
 8002b4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b52:	d00e      	beq.n	8002b72 <ADC_ConfigureBoostMode+0x10a>
 8002b54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b58:	d82a      	bhi.n	8002bb0 <ADC_ConfigureBoostMode+0x148>
 8002b5a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b5e:	d008      	beq.n	8002b72 <ADC_ConfigureBoostMode+0x10a>
 8002b60:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b64:	d824      	bhi.n	8002bb0 <ADC_ConfigureBoostMode+0x148>
 8002b66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b6a:	d002      	beq.n	8002b72 <ADC_ConfigureBoostMode+0x10a>
 8002b6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b70:	d11e      	bne.n	8002bb0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	0c9b      	lsrs	r3, r3, #18
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	60fb      	str	r3, [r7, #12]
        break;
 8002b82:	e016      	b.n	8002bb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	60fb      	str	r3, [r7, #12]
        break;
 8002b8a:	e012      	b.n	8002bb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	60fb      	str	r3, [r7, #12]
        break;
 8002b92:	e00e      	b.n	8002bb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	099b      	lsrs	r3, r3, #6
 8002b98:	60fb      	str	r3, [r7, #12]
        break;
 8002b9a:	e00a      	b.n	8002bb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	09db      	lsrs	r3, r3, #7
 8002ba0:	60fb      	str	r3, [r7, #12]
        break;
 8002ba2:	e006      	b.n	8002bb2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	60fb      	str	r3, [r7, #12]
        break;
 8002baa:	e002      	b.n	8002bb2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002bac:	bf00      	nop
 8002bae:	e000      	b.n	8002bb2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002bb0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	085b      	lsrs	r3, r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a1f      	ldr	r2, [pc, #124]	@ (8002c38 <ADC_ConfigureBoostMode+0x1d0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d808      	bhi.n	8002bd2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002bce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002bd0:	e025      	b.n	8002c1e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a19      	ldr	r2, [pc, #100]	@ (8002c3c <ADC_ConfigureBoostMode+0x1d4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d80a      	bhi.n	8002bf0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bec:	609a      	str	r2, [r3, #8]
}
 8002bee:	e016      	b.n	8002c1e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a13      	ldr	r2, [pc, #76]	@ (8002c40 <ADC_ConfigureBoostMode+0x1d8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d80a      	bhi.n	8002c0e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c0a:	609a      	str	r2, [r3, #8]
}
 8002c0c:	e007      	b.n	8002c1e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002c1c:	609a      	str	r2, [r3, #8]
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40022000 	.word	0x40022000
 8002c2c:	40022100 	.word	0x40022100
 8002c30:	40022300 	.word	0x40022300
 8002c34:	58026300 	.word	0x58026300
 8002c38:	005f5e10 	.word	0x005f5e10
 8002c3c:	00bebc20 	.word	0x00bebc20
 8002c40:	017d7840 	.word	0x017d7840

08002c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <__NVIC_SetPriorityGrouping+0x40>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c60:	4013      	ands	r3, r2
 8002c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c6c:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <__NVIC_SetPriorityGrouping+0x44>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c72:	4a04      	ldr	r2, [pc, #16]	@ (8002c84 <__NVIC_SetPriorityGrouping+0x40>)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	60d3      	str	r3, [r2, #12]
}
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000ed00 	.word	0xe000ed00
 8002c88:	05fa0000 	.word	0x05fa0000

08002c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c90:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	0a1b      	lsrs	r3, r3, #8
 8002c96:	f003 0307 	and.w	r3, r3, #7
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	db0b      	blt.n	8002cd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	f003 021f 	and.w	r2, r3, #31
 8002cc0:	4907      	ldr	r1, [pc, #28]	@ (8002ce0 <__NVIC_EnableIRQ+0x38>)
 8002cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	2001      	movs	r0, #1
 8002cca:	fa00 f202 	lsl.w	r2, r0, r2
 8002cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000e100 	.word	0xe000e100

08002ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	6039      	str	r1, [r7, #0]
 8002cee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	db0a      	blt.n	8002d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	490c      	ldr	r1, [pc, #48]	@ (8002d30 <__NVIC_SetPriority+0x4c>)
 8002cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d02:	0112      	lsls	r2, r2, #4
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	440b      	add	r3, r1
 8002d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d0c:	e00a      	b.n	8002d24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	4908      	ldr	r1, [pc, #32]	@ (8002d34 <__NVIC_SetPriority+0x50>)
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	3b04      	subs	r3, #4
 8002d1c:	0112      	lsls	r2, r2, #4
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	440b      	add	r3, r1
 8002d22:	761a      	strb	r2, [r3, #24]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000e100 	.word	0xe000e100
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	@ 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f1c3 0307 	rsb	r3, r3, #7
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	bf28      	it	cs
 8002d56:	2304      	movcs	r3, #4
 8002d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	2b06      	cmp	r3, #6
 8002d60:	d902      	bls.n	8002d68 <NVIC_EncodePriority+0x30>
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3b03      	subs	r3, #3
 8002d66:	e000      	b.n	8002d6a <NVIC_EncodePriority+0x32>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43da      	mvns	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d80:	f04f 31ff 	mov.w	r1, #4294967295
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8a:	43d9      	mvns	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	4313      	orrs	r3, r2
         );
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3724      	adds	r7, #36	@ 0x24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002db0:	d301      	bcc.n	8002db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002db2:	2301      	movs	r3, #1
 8002db4:	e00f      	b.n	8002dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db6:	4a0a      	ldr	r2, [pc, #40]	@ (8002de0 <SysTick_Config+0x40>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dbe:	210f      	movs	r1, #15
 8002dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc4:	f7ff ff8e 	bl	8002ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc8:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <SysTick_Config+0x40>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dce:	4b04      	ldr	r3, [pc, #16]	@ (8002de0 <SysTick_Config+0x40>)
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	e000e010 	.word	0xe000e010

08002de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff ff29 	bl	8002c44 <__NVIC_SetPriorityGrouping>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b086      	sub	sp, #24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e08:	f7ff ff40 	bl	8002c8c <__NVIC_GetPriorityGrouping>
 8002e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	6978      	ldr	r0, [r7, #20]
 8002e14:	f7ff ff90 	bl	8002d38 <NVIC_EncodePriority>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff5f 	bl	8002ce4 <__NVIC_SetPriority>
}
 8002e26:	bf00      	nop
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff33 	bl	8002ca8 <__NVIC_EnableIRQ>
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff ffa4 	bl	8002da0 <SysTick_Config>
 8002e58:	4603      	mov	r3, r0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e014      	b.n	8002e9e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	791b      	ldrb	r3, [r3, #4]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d105      	bne.n	8002e8a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7fd ff09 	bl	8000c9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0a2      	b.n	8003006 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	795b      	ldrb	r3, [r3, #5]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_DAC_Start_DMA+0x24>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e09c      	b.n	8003006 <HAL_DAC_Start_DMA+0x15e>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d129      	bne.n	8002f32 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	4a4b      	ldr	r2, [pc, #300]	@ (8003010 <HAL_DAC_Start_DMA+0x168>)
 8002ee4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	4a4a      	ldr	r2, [pc, #296]	@ (8003014 <HAL_DAC_Start_DMA+0x16c>)
 8002eec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	4a49      	ldr	r2, [pc, #292]	@ (8003018 <HAL_DAC_Start_DMA+0x170>)
 8002ef4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f04:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_DAC_Start_DMA+0x6c>
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d005      	beq.n	8002f1e <HAL_DAC_Start_DMA+0x76>
 8002f12:	e009      	b.n	8002f28 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3308      	adds	r3, #8
 8002f1a:	613b      	str	r3, [r7, #16]
        break;
 8002f1c:	e033      	b.n	8002f86 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	330c      	adds	r3, #12
 8002f24:	613b      	str	r3, [r7, #16]
        break;
 8002f26:	e02e      	b.n	8002f86 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	3310      	adds	r3, #16
 8002f2e:	613b      	str	r3, [r7, #16]
        break;
 8002f30:	e029      	b.n	8002f86 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4a39      	ldr	r2, [pc, #228]	@ (800301c <HAL_DAC_Start_DMA+0x174>)
 8002f38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	4a38      	ldr	r2, [pc, #224]	@ (8003020 <HAL_DAC_Start_DMA+0x178>)
 8002f40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	4a37      	ldr	r2, [pc, #220]	@ (8003024 <HAL_DAC_Start_DMA+0x17c>)
 8002f48:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002f58:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_DAC_Start_DMA+0xc0>
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d005      	beq.n	8002f72 <HAL_DAC_Start_DMA+0xca>
 8002f66:	e009      	b.n	8002f7c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3314      	adds	r3, #20
 8002f6e:	613b      	str	r3, [r7, #16]
        break;
 8002f70:	e009      	b.n	8002f86 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3318      	adds	r3, #24
 8002f78:	613b      	str	r3, [r7, #16]
        break;
 8002f7a:	e004      	b.n	8002f86 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	331c      	adds	r3, #28
 8002f82:	613b      	str	r3, [r7, #16]
        break;
 8002f84:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d111      	bne.n	8002fb0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f9a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6898      	ldr	r0, [r3, #8]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	f000 fd81 	bl	8003aac <HAL_DMA_Start_IT>
 8002faa:	4603      	mov	r3, r0
 8002fac:	75fb      	strb	r3, [r7, #23]
 8002fae:	e010      	b.n	8002fd2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002fbe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	68d8      	ldr	r0, [r3, #12]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	f000 fd6f 	bl	8003aac <HAL_DMA_Start_IT>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6819      	ldr	r1, [r3, #0]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2201      	movs	r2, #1
 8002fec:	409a      	lsls	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e005      	b.n	8003004 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f043 0204 	orr.w	r2, r3, #4
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003004:	7dfb      	ldrb	r3, [r7, #23]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	080032e9 	.word	0x080032e9
 8003014:	0800330b 	.word	0x0800330b
 8003018:	08003327 	.word	0x08003327
 800301c:	08003391 	.word	0x08003391
 8003020:	080033b3 	.word	0x080033b3
 8003024:	080033cf 	.word	0x080033cf

08003028 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	@ 0x28
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <HAL_DAC_ConfigChannel+0x1e>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e12a      	b.n	80032dc <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	795b      	ldrb	r3, [r3, #5]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_DAC_ConfigChannel+0x2e>
 800308e:	2302      	movs	r3, #2
 8003090:	e124      	b.n	80032dc <HAL_DAC_ConfigChannel+0x278>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2202      	movs	r2, #2
 800309c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d17a      	bne.n	800319c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80030a6:	f7fe f87f 	bl	80011a8 <HAL_GetTick>
 80030aa:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d13d      	bne.n	800312e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80030b2:	e018      	b.n	80030e6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80030b4:	f7fe f878 	bl	80011a8 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d911      	bls.n	80030e6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030c8:	4b86      	ldr	r3, [pc, #536]	@ (80032e4 <HAL_DAC_ConfigChannel+0x280>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f043 0208 	orr.w	r2, r3, #8
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2203      	movs	r2, #3
 80030e0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0fa      	b.n	80032dc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030ec:	4b7d      	ldr	r3, [pc, #500]	@ (80032e4 <HAL_DAC_ConfigChannel+0x280>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1df      	bne.n	80030b4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	6992      	ldr	r2, [r2, #24]
 80030fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80030fe:	e020      	b.n	8003142 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003100:	f7fe f852 	bl	80011a8 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d90f      	bls.n	800312e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003114:	2b00      	cmp	r3, #0
 8003116:	da0a      	bge.n	800312e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f043 0208 	orr.w	r2, r3, #8
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2203      	movs	r2, #3
 8003128:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e0d6      	b.n	80032dc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003134:	2b00      	cmp	r3, #0
 8003136:	dbe3      	blt.n	8003100 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	6992      	ldr	r2, [r2, #24]
 8003140:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	ea02 0103 	and.w	r1, r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	409a      	lsls	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	21ff      	movs	r1, #255	@ 0xff
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	ea02 0103 	and.w	r1, r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	6a1a      	ldr	r2, [r3, #32]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	409a      	lsls	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d11d      	bne.n	80031e0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031aa:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	221f      	movs	r2, #31
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	2207      	movs	r2, #7
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d102      	bne.n	800320a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8003204:	2300      	movs	r3, #0
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
 8003208:	e00f      	b.n	800322a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d102      	bne.n	8003218 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003212:	2301      	movs	r3, #1
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
 8003216:	e008      	b.n	800322a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003220:	2301      	movs	r3, #1
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
 8003224:	e001      	b.n	800322a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4313      	orrs	r3, r2
 8003234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003236:	4313      	orrs	r3, r2
 8003238:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6819      	ldr	r1, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43da      	mvns	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	400a      	ands	r2, r1
 8003270:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	22c0      	movs	r2, #192	@ 0xc0
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43da      	mvns	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	400a      	ands	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80032d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3728      	adds	r7, #40	@ 0x28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20008000 	.word	0x20008000

080032e8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f7ff fe96 	bl	8003028 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	711a      	strb	r2, [r3, #4]
}
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003316:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f7ff fe8f 	bl	800303c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003332:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f043 0204 	orr.w	r2, r3, #4
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f7ff fe85 	bl	8003050 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	711a      	strb	r2, [r3, #4]
}
 800334c:	bf00      	nop
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7ff ffd8 	bl	8003354 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	711a      	strb	r2, [r3, #4]
}
 80033aa:	bf00      	nop
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033be:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f7ff ffd1 	bl	8003368 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033da:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	f043 0204 	orr.w	r2, r3, #4
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7ff ffc7 	bl	800337c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	711a      	strb	r2, [r3, #4]
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003404:	f7fd fed0 	bl	80011a8 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e312      	b.n	8003a3a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a66      	ldr	r2, [pc, #408]	@ (80035b4 <HAL_DMA_Init+0x1b8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d04a      	beq.n	80034b4 <HAL_DMA_Init+0xb8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a65      	ldr	r2, [pc, #404]	@ (80035b8 <HAL_DMA_Init+0x1bc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d045      	beq.n	80034b4 <HAL_DMA_Init+0xb8>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a63      	ldr	r2, [pc, #396]	@ (80035bc <HAL_DMA_Init+0x1c0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d040      	beq.n	80034b4 <HAL_DMA_Init+0xb8>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a62      	ldr	r2, [pc, #392]	@ (80035c0 <HAL_DMA_Init+0x1c4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d03b      	beq.n	80034b4 <HAL_DMA_Init+0xb8>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a60      	ldr	r2, [pc, #384]	@ (80035c4 <HAL_DMA_Init+0x1c8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d036      	beq.n	80034b4 <HAL_DMA_Init+0xb8>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a5f      	ldr	r2, [pc, #380]	@ (80035c8 <HAL_DMA_Init+0x1cc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d031      	beq.n	80034b4 <HAL_DMA_Init+0xb8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a5d      	ldr	r2, [pc, #372]	@ (80035cc <HAL_DMA_Init+0x1d0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d02c      	beq.n	80034b4 <HAL_DMA_Init+0xb8>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a5c      	ldr	r2, [pc, #368]	@ (80035d0 <HAL_DMA_Init+0x1d4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d027      	beq.n	80034b4 <HAL_DMA_Init+0xb8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a5a      	ldr	r2, [pc, #360]	@ (80035d4 <HAL_DMA_Init+0x1d8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d022      	beq.n	80034b4 <HAL_DMA_Init+0xb8>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a59      	ldr	r2, [pc, #356]	@ (80035d8 <HAL_DMA_Init+0x1dc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d01d      	beq.n	80034b4 <HAL_DMA_Init+0xb8>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a57      	ldr	r2, [pc, #348]	@ (80035dc <HAL_DMA_Init+0x1e0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d018      	beq.n	80034b4 <HAL_DMA_Init+0xb8>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a56      	ldr	r2, [pc, #344]	@ (80035e0 <HAL_DMA_Init+0x1e4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d013      	beq.n	80034b4 <HAL_DMA_Init+0xb8>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a54      	ldr	r2, [pc, #336]	@ (80035e4 <HAL_DMA_Init+0x1e8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00e      	beq.n	80034b4 <HAL_DMA_Init+0xb8>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a53      	ldr	r2, [pc, #332]	@ (80035e8 <HAL_DMA_Init+0x1ec>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d009      	beq.n	80034b4 <HAL_DMA_Init+0xb8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a51      	ldr	r2, [pc, #324]	@ (80035ec <HAL_DMA_Init+0x1f0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d004      	beq.n	80034b4 <HAL_DMA_Init+0xb8>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a50      	ldr	r2, [pc, #320]	@ (80035f0 <HAL_DMA_Init+0x1f4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d101      	bne.n	80034b8 <HAL_DMA_Init+0xbc>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <HAL_DMA_Init+0xbe>
 80034b8:	2300      	movs	r3, #0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 813c 	beq.w	8003738 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a37      	ldr	r2, [pc, #220]	@ (80035b4 <HAL_DMA_Init+0x1b8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d04a      	beq.n	8003570 <HAL_DMA_Init+0x174>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a36      	ldr	r2, [pc, #216]	@ (80035b8 <HAL_DMA_Init+0x1bc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d045      	beq.n	8003570 <HAL_DMA_Init+0x174>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a34      	ldr	r2, [pc, #208]	@ (80035bc <HAL_DMA_Init+0x1c0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d040      	beq.n	8003570 <HAL_DMA_Init+0x174>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a33      	ldr	r2, [pc, #204]	@ (80035c0 <HAL_DMA_Init+0x1c4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d03b      	beq.n	8003570 <HAL_DMA_Init+0x174>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a31      	ldr	r2, [pc, #196]	@ (80035c4 <HAL_DMA_Init+0x1c8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d036      	beq.n	8003570 <HAL_DMA_Init+0x174>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a30      	ldr	r2, [pc, #192]	@ (80035c8 <HAL_DMA_Init+0x1cc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d031      	beq.n	8003570 <HAL_DMA_Init+0x174>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2e      	ldr	r2, [pc, #184]	@ (80035cc <HAL_DMA_Init+0x1d0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d02c      	beq.n	8003570 <HAL_DMA_Init+0x174>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a2d      	ldr	r2, [pc, #180]	@ (80035d0 <HAL_DMA_Init+0x1d4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d027      	beq.n	8003570 <HAL_DMA_Init+0x174>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a2b      	ldr	r2, [pc, #172]	@ (80035d4 <HAL_DMA_Init+0x1d8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d022      	beq.n	8003570 <HAL_DMA_Init+0x174>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a2a      	ldr	r2, [pc, #168]	@ (80035d8 <HAL_DMA_Init+0x1dc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d01d      	beq.n	8003570 <HAL_DMA_Init+0x174>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a28      	ldr	r2, [pc, #160]	@ (80035dc <HAL_DMA_Init+0x1e0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d018      	beq.n	8003570 <HAL_DMA_Init+0x174>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a27      	ldr	r2, [pc, #156]	@ (80035e0 <HAL_DMA_Init+0x1e4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d013      	beq.n	8003570 <HAL_DMA_Init+0x174>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a25      	ldr	r2, [pc, #148]	@ (80035e4 <HAL_DMA_Init+0x1e8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00e      	beq.n	8003570 <HAL_DMA_Init+0x174>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a24      	ldr	r2, [pc, #144]	@ (80035e8 <HAL_DMA_Init+0x1ec>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d009      	beq.n	8003570 <HAL_DMA_Init+0x174>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a22      	ldr	r2, [pc, #136]	@ (80035ec <HAL_DMA_Init+0x1f0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d004      	beq.n	8003570 <HAL_DMA_Init+0x174>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a21      	ldr	r2, [pc, #132]	@ (80035f0 <HAL_DMA_Init+0x1f4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d108      	bne.n	8003582 <HAL_DMA_Init+0x186>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e007      	b.n	8003592 <HAL_DMA_Init+0x196>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003592:	e02f      	b.n	80035f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003594:	f7fd fe08 	bl	80011a8 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b05      	cmp	r3, #5
 80035a0:	d928      	bls.n	80035f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2203      	movs	r2, #3
 80035ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e242      	b.n	8003a3a <HAL_DMA_Init+0x63e>
 80035b4:	40020010 	.word	0x40020010
 80035b8:	40020028 	.word	0x40020028
 80035bc:	40020040 	.word	0x40020040
 80035c0:	40020058 	.word	0x40020058
 80035c4:	40020070 	.word	0x40020070
 80035c8:	40020088 	.word	0x40020088
 80035cc:	400200a0 	.word	0x400200a0
 80035d0:	400200b8 	.word	0x400200b8
 80035d4:	40020410 	.word	0x40020410
 80035d8:	40020428 	.word	0x40020428
 80035dc:	40020440 	.word	0x40020440
 80035e0:	40020458 	.word	0x40020458
 80035e4:	40020470 	.word	0x40020470
 80035e8:	40020488 	.word	0x40020488
 80035ec:	400204a0 	.word	0x400204a0
 80035f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1c8      	bne.n	8003594 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4b83      	ldr	r3, [pc, #524]	@ (800381c <HAL_DMA_Init+0x420>)
 800360e:	4013      	ands	r3, r2
 8003610:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800361a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003626:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003632:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003644:	2b04      	cmp	r3, #4
 8003646:	d107      	bne.n	8003658 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003650:	4313      	orrs	r3, r2
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b28      	cmp	r3, #40	@ 0x28
 800365e:	d903      	bls.n	8003668 <HAL_DMA_Init+0x26c>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b2e      	cmp	r3, #46	@ 0x2e
 8003666:	d91f      	bls.n	80036a8 <HAL_DMA_Init+0x2ac>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b3e      	cmp	r3, #62	@ 0x3e
 800366e:	d903      	bls.n	8003678 <HAL_DMA_Init+0x27c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b42      	cmp	r3, #66	@ 0x42
 8003676:	d917      	bls.n	80036a8 <HAL_DMA_Init+0x2ac>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b46      	cmp	r3, #70	@ 0x46
 800367e:	d903      	bls.n	8003688 <HAL_DMA_Init+0x28c>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b48      	cmp	r3, #72	@ 0x48
 8003686:	d90f      	bls.n	80036a8 <HAL_DMA_Init+0x2ac>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b4e      	cmp	r3, #78	@ 0x4e
 800368e:	d903      	bls.n	8003698 <HAL_DMA_Init+0x29c>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b52      	cmp	r3, #82	@ 0x52
 8003696:	d907      	bls.n	80036a8 <HAL_DMA_Init+0x2ac>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b73      	cmp	r3, #115	@ 0x73
 800369e:	d905      	bls.n	80036ac <HAL_DMA_Init+0x2b0>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b77      	cmp	r3, #119	@ 0x77
 80036a6:	d801      	bhi.n	80036ac <HAL_DMA_Init+0x2b0>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <HAL_DMA_Init+0x2b2>
 80036ac:	2300      	movs	r3, #0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036b8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f023 0307 	bic.w	r3, r3, #7
 80036d0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d117      	bne.n	8003714 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00e      	beq.n	8003714 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f001 fdca 	bl	8005290 <DMA_CheckFifoParam>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2240      	movs	r2, #64	@ 0x40
 8003706:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e192      	b.n	8003a3a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f001 fd05 	bl	800512c <DMA_CalcBaseAndBitshift>
 8003722:	4603      	mov	r3, r0
 8003724:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	223f      	movs	r2, #63	@ 0x3f
 8003730:	409a      	lsls	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	609a      	str	r2, [r3, #8]
 8003736:	e0c8      	b.n	80038ca <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a38      	ldr	r2, [pc, #224]	@ (8003820 <HAL_DMA_Init+0x424>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_DMA_Init+0x38c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a37      	ldr	r2, [pc, #220]	@ (8003824 <HAL_DMA_Init+0x428>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <HAL_DMA_Init+0x38c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a35      	ldr	r2, [pc, #212]	@ (8003828 <HAL_DMA_Init+0x42c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_DMA_Init+0x38c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a34      	ldr	r2, [pc, #208]	@ (800382c <HAL_DMA_Init+0x430>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_DMA_Init+0x38c>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a32      	ldr	r2, [pc, #200]	@ (8003830 <HAL_DMA_Init+0x434>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_DMA_Init+0x38c>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a31      	ldr	r2, [pc, #196]	@ (8003834 <HAL_DMA_Init+0x438>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_DMA_Init+0x38c>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2f      	ldr	r2, [pc, #188]	@ (8003838 <HAL_DMA_Init+0x43c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_DMA_Init+0x38c>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2e      	ldr	r2, [pc, #184]	@ (800383c <HAL_DMA_Init+0x440>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_DMA_Init+0x390>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_DMA_Init+0x392>
 800378c:	2300      	movs	r3, #0
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8092 	beq.w	80038b8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a21      	ldr	r2, [pc, #132]	@ (8003820 <HAL_DMA_Init+0x424>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d021      	beq.n	80037e2 <HAL_DMA_Init+0x3e6>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a20      	ldr	r2, [pc, #128]	@ (8003824 <HAL_DMA_Init+0x428>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d01c      	beq.n	80037e2 <HAL_DMA_Init+0x3e6>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003828 <HAL_DMA_Init+0x42c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d017      	beq.n	80037e2 <HAL_DMA_Init+0x3e6>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1d      	ldr	r2, [pc, #116]	@ (800382c <HAL_DMA_Init+0x430>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d012      	beq.n	80037e2 <HAL_DMA_Init+0x3e6>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003830 <HAL_DMA_Init+0x434>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00d      	beq.n	80037e2 <HAL_DMA_Init+0x3e6>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003834 <HAL_DMA_Init+0x438>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d008      	beq.n	80037e2 <HAL_DMA_Init+0x3e6>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a18      	ldr	r2, [pc, #96]	@ (8003838 <HAL_DMA_Init+0x43c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d003      	beq.n	80037e2 <HAL_DMA_Init+0x3e6>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a17      	ldr	r2, [pc, #92]	@ (800383c <HAL_DMA_Init+0x440>)
 80037e0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4b10      	ldr	r3, [pc, #64]	@ (8003840 <HAL_DMA_Init+0x444>)
 80037fe:	4013      	ands	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b40      	cmp	r3, #64	@ 0x40
 8003808:	d01c      	beq.n	8003844 <HAL_DMA_Init+0x448>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b80      	cmp	r3, #128	@ 0x80
 8003810:	d102      	bne.n	8003818 <HAL_DMA_Init+0x41c>
 8003812:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003816:	e016      	b.n	8003846 <HAL_DMA_Init+0x44a>
 8003818:	2300      	movs	r3, #0
 800381a:	e014      	b.n	8003846 <HAL_DMA_Init+0x44a>
 800381c:	fe10803f 	.word	0xfe10803f
 8003820:	58025408 	.word	0x58025408
 8003824:	5802541c 	.word	0x5802541c
 8003828:	58025430 	.word	0x58025430
 800382c:	58025444 	.word	0x58025444
 8003830:	58025458 	.word	0x58025458
 8003834:	5802546c 	.word	0x5802546c
 8003838:	58025480 	.word	0x58025480
 800383c:	58025494 	.word	0x58025494
 8003840:	fffe000f 	.word	0xfffe000f
 8003844:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68d2      	ldr	r2, [r2, #12]
 800384a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800384c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003854:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800385c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003864:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800386c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003874:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	4b6e      	ldr	r3, [pc, #440]	@ (8003a44 <HAL_DMA_Init+0x648>)
 800388c:	4413      	add	r3, r2
 800388e:	4a6e      	ldr	r2, [pc, #440]	@ (8003a48 <HAL_DMA_Init+0x64c>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	009a      	lsls	r2, r3, #2
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f001 fc45 	bl	800512c <DMA_CalcBaseAndBitshift>
 80038a2:	4603      	mov	r3, r0
 80038a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	2201      	movs	r2, #1
 80038b0:	409a      	lsls	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	e008      	b.n	80038ca <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2240      	movs	r2, #64	@ 0x40
 80038bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2203      	movs	r2, #3
 80038c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e0b7      	b.n	8003a3a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a5f      	ldr	r2, [pc, #380]	@ (8003a4c <HAL_DMA_Init+0x650>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d072      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003a50 <HAL_DMA_Init+0x654>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d06d      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003a54 <HAL_DMA_Init+0x658>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d068      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003a58 <HAL_DMA_Init+0x65c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d063      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a59      	ldr	r2, [pc, #356]	@ (8003a5c <HAL_DMA_Init+0x660>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d05e      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a57      	ldr	r2, [pc, #348]	@ (8003a60 <HAL_DMA_Init+0x664>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d059      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a56      	ldr	r2, [pc, #344]	@ (8003a64 <HAL_DMA_Init+0x668>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d054      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a54      	ldr	r2, [pc, #336]	@ (8003a68 <HAL_DMA_Init+0x66c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d04f      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a53      	ldr	r2, [pc, #332]	@ (8003a6c <HAL_DMA_Init+0x670>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d04a      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a51      	ldr	r2, [pc, #324]	@ (8003a70 <HAL_DMA_Init+0x674>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d045      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a50      	ldr	r2, [pc, #320]	@ (8003a74 <HAL_DMA_Init+0x678>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d040      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a4e      	ldr	r2, [pc, #312]	@ (8003a78 <HAL_DMA_Init+0x67c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d03b      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a4d      	ldr	r2, [pc, #308]	@ (8003a7c <HAL_DMA_Init+0x680>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d036      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a4b      	ldr	r2, [pc, #300]	@ (8003a80 <HAL_DMA_Init+0x684>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d031      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a4a      	ldr	r2, [pc, #296]	@ (8003a84 <HAL_DMA_Init+0x688>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d02c      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a48      	ldr	r2, [pc, #288]	@ (8003a88 <HAL_DMA_Init+0x68c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d027      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a47      	ldr	r2, [pc, #284]	@ (8003a8c <HAL_DMA_Init+0x690>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d022      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a45      	ldr	r2, [pc, #276]	@ (8003a90 <HAL_DMA_Init+0x694>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01d      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a44      	ldr	r2, [pc, #272]	@ (8003a94 <HAL_DMA_Init+0x698>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d018      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a42      	ldr	r2, [pc, #264]	@ (8003a98 <HAL_DMA_Init+0x69c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d013      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a41      	ldr	r2, [pc, #260]	@ (8003a9c <HAL_DMA_Init+0x6a0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00e      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a3f      	ldr	r2, [pc, #252]	@ (8003aa0 <HAL_DMA_Init+0x6a4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d009      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a3e      	ldr	r2, [pc, #248]	@ (8003aa4 <HAL_DMA_Init+0x6a8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_DMA_Init+0x5be>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a3c      	ldr	r2, [pc, #240]	@ (8003aa8 <HAL_DMA_Init+0x6ac>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_DMA_Init+0x5c2>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_DMA_Init+0x5c4>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d032      	beq.n	8003a2a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f001 fcdf 	bl	8005388 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b80      	cmp	r3, #128	@ 0x80
 80039d0:	d102      	bne.n	80039d8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d010      	beq.n	8003a18 <HAL_DMA_Init+0x61c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d80c      	bhi.n	8003a18 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f001 fd5c 	bl	80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	e008      	b.n	8003a2a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	a7fdabf8 	.word	0xa7fdabf8
 8003a48:	cccccccd 	.word	0xcccccccd
 8003a4c:	40020010 	.word	0x40020010
 8003a50:	40020028 	.word	0x40020028
 8003a54:	40020040 	.word	0x40020040
 8003a58:	40020058 	.word	0x40020058
 8003a5c:	40020070 	.word	0x40020070
 8003a60:	40020088 	.word	0x40020088
 8003a64:	400200a0 	.word	0x400200a0
 8003a68:	400200b8 	.word	0x400200b8
 8003a6c:	40020410 	.word	0x40020410
 8003a70:	40020428 	.word	0x40020428
 8003a74:	40020440 	.word	0x40020440
 8003a78:	40020458 	.word	0x40020458
 8003a7c:	40020470 	.word	0x40020470
 8003a80:	40020488 	.word	0x40020488
 8003a84:	400204a0 	.word	0x400204a0
 8003a88:	400204b8 	.word	0x400204b8
 8003a8c:	58025408 	.word	0x58025408
 8003a90:	5802541c 	.word	0x5802541c
 8003a94:	58025430 	.word	0x58025430
 8003a98:	58025444 	.word	0x58025444
 8003a9c:	58025458 	.word	0x58025458
 8003aa0:	5802546c 	.word	0x5802546c
 8003aa4:	58025480 	.word	0x58025480
 8003aa8:	58025494 	.word	0x58025494

08003aac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e226      	b.n	8003f16 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_DMA_Start_IT+0x2a>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e21f      	b.n	8003f16 <HAL_DMA_Start_IT+0x46a>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	f040 820a 	bne.w	8003f00 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a68      	ldr	r2, [pc, #416]	@ (8003ca0 <HAL_DMA_Start_IT+0x1f4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d04a      	beq.n	8003b9a <HAL_DMA_Start_IT+0xee>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a66      	ldr	r2, [pc, #408]	@ (8003ca4 <HAL_DMA_Start_IT+0x1f8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d045      	beq.n	8003b9a <HAL_DMA_Start_IT+0xee>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a65      	ldr	r2, [pc, #404]	@ (8003ca8 <HAL_DMA_Start_IT+0x1fc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d040      	beq.n	8003b9a <HAL_DMA_Start_IT+0xee>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a63      	ldr	r2, [pc, #396]	@ (8003cac <HAL_DMA_Start_IT+0x200>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d03b      	beq.n	8003b9a <HAL_DMA_Start_IT+0xee>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a62      	ldr	r2, [pc, #392]	@ (8003cb0 <HAL_DMA_Start_IT+0x204>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d036      	beq.n	8003b9a <HAL_DMA_Start_IT+0xee>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a60      	ldr	r2, [pc, #384]	@ (8003cb4 <HAL_DMA_Start_IT+0x208>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d031      	beq.n	8003b9a <HAL_DMA_Start_IT+0xee>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a5f      	ldr	r2, [pc, #380]	@ (8003cb8 <HAL_DMA_Start_IT+0x20c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d02c      	beq.n	8003b9a <HAL_DMA_Start_IT+0xee>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a5d      	ldr	r2, [pc, #372]	@ (8003cbc <HAL_DMA_Start_IT+0x210>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d027      	beq.n	8003b9a <HAL_DMA_Start_IT+0xee>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a5c      	ldr	r2, [pc, #368]	@ (8003cc0 <HAL_DMA_Start_IT+0x214>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d022      	beq.n	8003b9a <HAL_DMA_Start_IT+0xee>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a5a      	ldr	r2, [pc, #360]	@ (8003cc4 <HAL_DMA_Start_IT+0x218>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01d      	beq.n	8003b9a <HAL_DMA_Start_IT+0xee>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a59      	ldr	r2, [pc, #356]	@ (8003cc8 <HAL_DMA_Start_IT+0x21c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d018      	beq.n	8003b9a <HAL_DMA_Start_IT+0xee>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a57      	ldr	r2, [pc, #348]	@ (8003ccc <HAL_DMA_Start_IT+0x220>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <HAL_DMA_Start_IT+0xee>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a56      	ldr	r2, [pc, #344]	@ (8003cd0 <HAL_DMA_Start_IT+0x224>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00e      	beq.n	8003b9a <HAL_DMA_Start_IT+0xee>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a54      	ldr	r2, [pc, #336]	@ (8003cd4 <HAL_DMA_Start_IT+0x228>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d009      	beq.n	8003b9a <HAL_DMA_Start_IT+0xee>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a53      	ldr	r2, [pc, #332]	@ (8003cd8 <HAL_DMA_Start_IT+0x22c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d004      	beq.n	8003b9a <HAL_DMA_Start_IT+0xee>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a51      	ldr	r2, [pc, #324]	@ (8003cdc <HAL_DMA_Start_IT+0x230>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d108      	bne.n	8003bac <HAL_DMA_Start_IT+0x100>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	e007      	b.n	8003bbc <HAL_DMA_Start_IT+0x110>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f001 f906 	bl	8004dd4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a34      	ldr	r2, [pc, #208]	@ (8003ca0 <HAL_DMA_Start_IT+0x1f4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d04a      	beq.n	8003c68 <HAL_DMA_Start_IT+0x1bc>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a33      	ldr	r2, [pc, #204]	@ (8003ca4 <HAL_DMA_Start_IT+0x1f8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d045      	beq.n	8003c68 <HAL_DMA_Start_IT+0x1bc>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a31      	ldr	r2, [pc, #196]	@ (8003ca8 <HAL_DMA_Start_IT+0x1fc>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d040      	beq.n	8003c68 <HAL_DMA_Start_IT+0x1bc>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a30      	ldr	r2, [pc, #192]	@ (8003cac <HAL_DMA_Start_IT+0x200>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d03b      	beq.n	8003c68 <HAL_DMA_Start_IT+0x1bc>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a2e      	ldr	r2, [pc, #184]	@ (8003cb0 <HAL_DMA_Start_IT+0x204>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d036      	beq.n	8003c68 <HAL_DMA_Start_IT+0x1bc>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a2d      	ldr	r2, [pc, #180]	@ (8003cb4 <HAL_DMA_Start_IT+0x208>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d031      	beq.n	8003c68 <HAL_DMA_Start_IT+0x1bc>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb8 <HAL_DMA_Start_IT+0x20c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d02c      	beq.n	8003c68 <HAL_DMA_Start_IT+0x1bc>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a2a      	ldr	r2, [pc, #168]	@ (8003cbc <HAL_DMA_Start_IT+0x210>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d027      	beq.n	8003c68 <HAL_DMA_Start_IT+0x1bc>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a28      	ldr	r2, [pc, #160]	@ (8003cc0 <HAL_DMA_Start_IT+0x214>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d022      	beq.n	8003c68 <HAL_DMA_Start_IT+0x1bc>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a27      	ldr	r2, [pc, #156]	@ (8003cc4 <HAL_DMA_Start_IT+0x218>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d01d      	beq.n	8003c68 <HAL_DMA_Start_IT+0x1bc>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a25      	ldr	r2, [pc, #148]	@ (8003cc8 <HAL_DMA_Start_IT+0x21c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d018      	beq.n	8003c68 <HAL_DMA_Start_IT+0x1bc>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a24      	ldr	r2, [pc, #144]	@ (8003ccc <HAL_DMA_Start_IT+0x220>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d013      	beq.n	8003c68 <HAL_DMA_Start_IT+0x1bc>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a22      	ldr	r2, [pc, #136]	@ (8003cd0 <HAL_DMA_Start_IT+0x224>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00e      	beq.n	8003c68 <HAL_DMA_Start_IT+0x1bc>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a21      	ldr	r2, [pc, #132]	@ (8003cd4 <HAL_DMA_Start_IT+0x228>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d009      	beq.n	8003c68 <HAL_DMA_Start_IT+0x1bc>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd8 <HAL_DMA_Start_IT+0x22c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <HAL_DMA_Start_IT+0x1bc>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1e      	ldr	r2, [pc, #120]	@ (8003cdc <HAL_DMA_Start_IT+0x230>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <HAL_DMA_Start_IT+0x1c0>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <HAL_DMA_Start_IT+0x1c2>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d036      	beq.n	8003ce0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f023 021e 	bic.w	r2, r3, #30
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0216 	orr.w	r2, r2, #22
 8003c84:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d03e      	beq.n	8003d0c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0208 	orr.w	r2, r2, #8
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e035      	b.n	8003d0c <HAL_DMA_Start_IT+0x260>
 8003ca0:	40020010 	.word	0x40020010
 8003ca4:	40020028 	.word	0x40020028
 8003ca8:	40020040 	.word	0x40020040
 8003cac:	40020058 	.word	0x40020058
 8003cb0:	40020070 	.word	0x40020070
 8003cb4:	40020088 	.word	0x40020088
 8003cb8:	400200a0 	.word	0x400200a0
 8003cbc:	400200b8 	.word	0x400200b8
 8003cc0:	40020410 	.word	0x40020410
 8003cc4:	40020428 	.word	0x40020428
 8003cc8:	40020440 	.word	0x40020440
 8003ccc:	40020458 	.word	0x40020458
 8003cd0:	40020470 	.word	0x40020470
 8003cd4:	40020488 	.word	0x40020488
 8003cd8:	400204a0 	.word	0x400204a0
 8003cdc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 020e 	bic.w	r2, r3, #14
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 020a 	orr.w	r2, r2, #10
 8003cf2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0204 	orr.w	r2, r2, #4
 8003d0a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a83      	ldr	r2, [pc, #524]	@ (8003f20 <HAL_DMA_Start_IT+0x474>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d072      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a82      	ldr	r2, [pc, #520]	@ (8003f24 <HAL_DMA_Start_IT+0x478>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d06d      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a80      	ldr	r2, [pc, #512]	@ (8003f28 <HAL_DMA_Start_IT+0x47c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d068      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7f      	ldr	r2, [pc, #508]	@ (8003f2c <HAL_DMA_Start_IT+0x480>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d063      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a7d      	ldr	r2, [pc, #500]	@ (8003f30 <HAL_DMA_Start_IT+0x484>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d05e      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a7c      	ldr	r2, [pc, #496]	@ (8003f34 <HAL_DMA_Start_IT+0x488>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d059      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a7a      	ldr	r2, [pc, #488]	@ (8003f38 <HAL_DMA_Start_IT+0x48c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d054      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a79      	ldr	r2, [pc, #484]	@ (8003f3c <HAL_DMA_Start_IT+0x490>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d04f      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a77      	ldr	r2, [pc, #476]	@ (8003f40 <HAL_DMA_Start_IT+0x494>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d04a      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a76      	ldr	r2, [pc, #472]	@ (8003f44 <HAL_DMA_Start_IT+0x498>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d045      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a74      	ldr	r2, [pc, #464]	@ (8003f48 <HAL_DMA_Start_IT+0x49c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d040      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a73      	ldr	r2, [pc, #460]	@ (8003f4c <HAL_DMA_Start_IT+0x4a0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d03b      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a71      	ldr	r2, [pc, #452]	@ (8003f50 <HAL_DMA_Start_IT+0x4a4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d036      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a70      	ldr	r2, [pc, #448]	@ (8003f54 <HAL_DMA_Start_IT+0x4a8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d031      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a6e      	ldr	r2, [pc, #440]	@ (8003f58 <HAL_DMA_Start_IT+0x4ac>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d02c      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6d      	ldr	r2, [pc, #436]	@ (8003f5c <HAL_DMA_Start_IT+0x4b0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d027      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a6b      	ldr	r2, [pc, #428]	@ (8003f60 <HAL_DMA_Start_IT+0x4b4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d022      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a6a      	ldr	r2, [pc, #424]	@ (8003f64 <HAL_DMA_Start_IT+0x4b8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d01d      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a68      	ldr	r2, [pc, #416]	@ (8003f68 <HAL_DMA_Start_IT+0x4bc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d018      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a67      	ldr	r2, [pc, #412]	@ (8003f6c <HAL_DMA_Start_IT+0x4c0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d013      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a65      	ldr	r2, [pc, #404]	@ (8003f70 <HAL_DMA_Start_IT+0x4c4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00e      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a64      	ldr	r2, [pc, #400]	@ (8003f74 <HAL_DMA_Start_IT+0x4c8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d009      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a62      	ldr	r2, [pc, #392]	@ (8003f78 <HAL_DMA_Start_IT+0x4cc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d004      	beq.n	8003dfc <HAL_DMA_Start_IT+0x350>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a61      	ldr	r2, [pc, #388]	@ (8003f7c <HAL_DMA_Start_IT+0x4d0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d101      	bne.n	8003e00 <HAL_DMA_Start_IT+0x354>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <HAL_DMA_Start_IT+0x356>
 8003e00:	2300      	movs	r3, #0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d01a      	beq.n	8003e3c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d007      	beq.n	8003e24 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e22:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d007      	beq.n	8003e3c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e3a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a37      	ldr	r2, [pc, #220]	@ (8003f20 <HAL_DMA_Start_IT+0x474>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d04a      	beq.n	8003edc <HAL_DMA_Start_IT+0x430>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a36      	ldr	r2, [pc, #216]	@ (8003f24 <HAL_DMA_Start_IT+0x478>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d045      	beq.n	8003edc <HAL_DMA_Start_IT+0x430>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a34      	ldr	r2, [pc, #208]	@ (8003f28 <HAL_DMA_Start_IT+0x47c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d040      	beq.n	8003edc <HAL_DMA_Start_IT+0x430>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a33      	ldr	r2, [pc, #204]	@ (8003f2c <HAL_DMA_Start_IT+0x480>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d03b      	beq.n	8003edc <HAL_DMA_Start_IT+0x430>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a31      	ldr	r2, [pc, #196]	@ (8003f30 <HAL_DMA_Start_IT+0x484>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d036      	beq.n	8003edc <HAL_DMA_Start_IT+0x430>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a30      	ldr	r2, [pc, #192]	@ (8003f34 <HAL_DMA_Start_IT+0x488>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d031      	beq.n	8003edc <HAL_DMA_Start_IT+0x430>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003f38 <HAL_DMA_Start_IT+0x48c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d02c      	beq.n	8003edc <HAL_DMA_Start_IT+0x430>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2d      	ldr	r2, [pc, #180]	@ (8003f3c <HAL_DMA_Start_IT+0x490>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d027      	beq.n	8003edc <HAL_DMA_Start_IT+0x430>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a2b      	ldr	r2, [pc, #172]	@ (8003f40 <HAL_DMA_Start_IT+0x494>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d022      	beq.n	8003edc <HAL_DMA_Start_IT+0x430>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f44 <HAL_DMA_Start_IT+0x498>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d01d      	beq.n	8003edc <HAL_DMA_Start_IT+0x430>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a28      	ldr	r2, [pc, #160]	@ (8003f48 <HAL_DMA_Start_IT+0x49c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d018      	beq.n	8003edc <HAL_DMA_Start_IT+0x430>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a27      	ldr	r2, [pc, #156]	@ (8003f4c <HAL_DMA_Start_IT+0x4a0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <HAL_DMA_Start_IT+0x430>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a25      	ldr	r2, [pc, #148]	@ (8003f50 <HAL_DMA_Start_IT+0x4a4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00e      	beq.n	8003edc <HAL_DMA_Start_IT+0x430>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a24      	ldr	r2, [pc, #144]	@ (8003f54 <HAL_DMA_Start_IT+0x4a8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d009      	beq.n	8003edc <HAL_DMA_Start_IT+0x430>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a22      	ldr	r2, [pc, #136]	@ (8003f58 <HAL_DMA_Start_IT+0x4ac>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d004      	beq.n	8003edc <HAL_DMA_Start_IT+0x430>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a21      	ldr	r2, [pc, #132]	@ (8003f5c <HAL_DMA_Start_IT+0x4b0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d108      	bne.n	8003eee <HAL_DMA_Start_IT+0x442>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e012      	b.n	8003f14 <HAL_DMA_Start_IT+0x468>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0201 	orr.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e009      	b.n	8003f14 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40020010 	.word	0x40020010
 8003f24:	40020028 	.word	0x40020028
 8003f28:	40020040 	.word	0x40020040
 8003f2c:	40020058 	.word	0x40020058
 8003f30:	40020070 	.word	0x40020070
 8003f34:	40020088 	.word	0x40020088
 8003f38:	400200a0 	.word	0x400200a0
 8003f3c:	400200b8 	.word	0x400200b8
 8003f40:	40020410 	.word	0x40020410
 8003f44:	40020428 	.word	0x40020428
 8003f48:	40020440 	.word	0x40020440
 8003f4c:	40020458 	.word	0x40020458
 8003f50:	40020470 	.word	0x40020470
 8003f54:	40020488 	.word	0x40020488
 8003f58:	400204a0 	.word	0x400204a0
 8003f5c:	400204b8 	.word	0x400204b8
 8003f60:	58025408 	.word	0x58025408
 8003f64:	5802541c 	.word	0x5802541c
 8003f68:	58025430 	.word	0x58025430
 8003f6c:	58025444 	.word	0x58025444
 8003f70:	58025458 	.word	0x58025458
 8003f74:	5802546c 	.word	0x5802546c
 8003f78:	58025480 	.word	0x58025480
 8003f7c:	58025494 	.word	0x58025494

08003f80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	@ 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f8c:	4b67      	ldr	r3, [pc, #412]	@ (800412c <HAL_DMA_IRQHandler+0x1ac>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a67      	ldr	r2, [pc, #412]	@ (8004130 <HAL_DMA_IRQHandler+0x1b0>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	0a9b      	lsrs	r3, r3, #10
 8003f98:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a5f      	ldr	r2, [pc, #380]	@ (8004134 <HAL_DMA_IRQHandler+0x1b4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d04a      	beq.n	8004052 <HAL_DMA_IRQHandler+0xd2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8004138 <HAL_DMA_IRQHandler+0x1b8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d045      	beq.n	8004052 <HAL_DMA_IRQHandler+0xd2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a5c      	ldr	r2, [pc, #368]	@ (800413c <HAL_DMA_IRQHandler+0x1bc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d040      	beq.n	8004052 <HAL_DMA_IRQHandler+0xd2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a5a      	ldr	r2, [pc, #360]	@ (8004140 <HAL_DMA_IRQHandler+0x1c0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d03b      	beq.n	8004052 <HAL_DMA_IRQHandler+0xd2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a59      	ldr	r2, [pc, #356]	@ (8004144 <HAL_DMA_IRQHandler+0x1c4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d036      	beq.n	8004052 <HAL_DMA_IRQHandler+0xd2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a57      	ldr	r2, [pc, #348]	@ (8004148 <HAL_DMA_IRQHandler+0x1c8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d031      	beq.n	8004052 <HAL_DMA_IRQHandler+0xd2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a56      	ldr	r2, [pc, #344]	@ (800414c <HAL_DMA_IRQHandler+0x1cc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d02c      	beq.n	8004052 <HAL_DMA_IRQHandler+0xd2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a54      	ldr	r2, [pc, #336]	@ (8004150 <HAL_DMA_IRQHandler+0x1d0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d027      	beq.n	8004052 <HAL_DMA_IRQHandler+0xd2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a53      	ldr	r2, [pc, #332]	@ (8004154 <HAL_DMA_IRQHandler+0x1d4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d022      	beq.n	8004052 <HAL_DMA_IRQHandler+0xd2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a51      	ldr	r2, [pc, #324]	@ (8004158 <HAL_DMA_IRQHandler+0x1d8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d01d      	beq.n	8004052 <HAL_DMA_IRQHandler+0xd2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a50      	ldr	r2, [pc, #320]	@ (800415c <HAL_DMA_IRQHandler+0x1dc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d018      	beq.n	8004052 <HAL_DMA_IRQHandler+0xd2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a4e      	ldr	r2, [pc, #312]	@ (8004160 <HAL_DMA_IRQHandler+0x1e0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <HAL_DMA_IRQHandler+0xd2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a4d      	ldr	r2, [pc, #308]	@ (8004164 <HAL_DMA_IRQHandler+0x1e4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00e      	beq.n	8004052 <HAL_DMA_IRQHandler+0xd2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a4b      	ldr	r2, [pc, #300]	@ (8004168 <HAL_DMA_IRQHandler+0x1e8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d009      	beq.n	8004052 <HAL_DMA_IRQHandler+0xd2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a4a      	ldr	r2, [pc, #296]	@ (800416c <HAL_DMA_IRQHandler+0x1ec>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d004      	beq.n	8004052 <HAL_DMA_IRQHandler+0xd2>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a48      	ldr	r2, [pc, #288]	@ (8004170 <HAL_DMA_IRQHandler+0x1f0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <HAL_DMA_IRQHandler+0xd6>
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <HAL_DMA_IRQHandler+0xd8>
 8004056:	2300      	movs	r3, #0
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 842b 	beq.w	80048b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	2208      	movs	r2, #8
 8004068:	409a      	lsls	r2, r3
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80a2 	beq.w	80041b8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a2e      	ldr	r2, [pc, #184]	@ (8004134 <HAL_DMA_IRQHandler+0x1b4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d04a      	beq.n	8004114 <HAL_DMA_IRQHandler+0x194>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a2d      	ldr	r2, [pc, #180]	@ (8004138 <HAL_DMA_IRQHandler+0x1b8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d045      	beq.n	8004114 <HAL_DMA_IRQHandler+0x194>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a2b      	ldr	r2, [pc, #172]	@ (800413c <HAL_DMA_IRQHandler+0x1bc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d040      	beq.n	8004114 <HAL_DMA_IRQHandler+0x194>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a2a      	ldr	r2, [pc, #168]	@ (8004140 <HAL_DMA_IRQHandler+0x1c0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d03b      	beq.n	8004114 <HAL_DMA_IRQHandler+0x194>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a28      	ldr	r2, [pc, #160]	@ (8004144 <HAL_DMA_IRQHandler+0x1c4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d036      	beq.n	8004114 <HAL_DMA_IRQHandler+0x194>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a27      	ldr	r2, [pc, #156]	@ (8004148 <HAL_DMA_IRQHandler+0x1c8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d031      	beq.n	8004114 <HAL_DMA_IRQHandler+0x194>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a25      	ldr	r2, [pc, #148]	@ (800414c <HAL_DMA_IRQHandler+0x1cc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d02c      	beq.n	8004114 <HAL_DMA_IRQHandler+0x194>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a24      	ldr	r2, [pc, #144]	@ (8004150 <HAL_DMA_IRQHandler+0x1d0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d027      	beq.n	8004114 <HAL_DMA_IRQHandler+0x194>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a22      	ldr	r2, [pc, #136]	@ (8004154 <HAL_DMA_IRQHandler+0x1d4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d022      	beq.n	8004114 <HAL_DMA_IRQHandler+0x194>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a21      	ldr	r2, [pc, #132]	@ (8004158 <HAL_DMA_IRQHandler+0x1d8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d01d      	beq.n	8004114 <HAL_DMA_IRQHandler+0x194>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1f      	ldr	r2, [pc, #124]	@ (800415c <HAL_DMA_IRQHandler+0x1dc>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d018      	beq.n	8004114 <HAL_DMA_IRQHandler+0x194>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004160 <HAL_DMA_IRQHandler+0x1e0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d013      	beq.n	8004114 <HAL_DMA_IRQHandler+0x194>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004164 <HAL_DMA_IRQHandler+0x1e4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00e      	beq.n	8004114 <HAL_DMA_IRQHandler+0x194>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004168 <HAL_DMA_IRQHandler+0x1e8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d009      	beq.n	8004114 <HAL_DMA_IRQHandler+0x194>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a19      	ldr	r2, [pc, #100]	@ (800416c <HAL_DMA_IRQHandler+0x1ec>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_DMA_IRQHandler+0x194>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a18      	ldr	r2, [pc, #96]	@ (8004170 <HAL_DMA_IRQHandler+0x1f0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d12f      	bne.n	8004174 <HAL_DMA_IRQHandler+0x1f4>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	bf14      	ite	ne
 8004122:	2301      	movne	r3, #1
 8004124:	2300      	moveq	r3, #0
 8004126:	b2db      	uxtb	r3, r3
 8004128:	e02e      	b.n	8004188 <HAL_DMA_IRQHandler+0x208>
 800412a:	bf00      	nop
 800412c:	24000000 	.word	0x24000000
 8004130:	1b4e81b5 	.word	0x1b4e81b5
 8004134:	40020010 	.word	0x40020010
 8004138:	40020028 	.word	0x40020028
 800413c:	40020040 	.word	0x40020040
 8004140:	40020058 	.word	0x40020058
 8004144:	40020070 	.word	0x40020070
 8004148:	40020088 	.word	0x40020088
 800414c:	400200a0 	.word	0x400200a0
 8004150:	400200b8 	.word	0x400200b8
 8004154:	40020410 	.word	0x40020410
 8004158:	40020428 	.word	0x40020428
 800415c:	40020440 	.word	0x40020440
 8004160:	40020458 	.word	0x40020458
 8004164:	40020470 	.word	0x40020470
 8004168:	40020488 	.word	0x40020488
 800416c:	400204a0 	.word	0x400204a0
 8004170:	400204b8 	.word	0x400204b8
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf14      	ite	ne
 8004182:	2301      	movne	r3, #1
 8004184:	2300      	moveq	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d015      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0204 	bic.w	r2, r2, #4
 800419a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	2208      	movs	r2, #8
 80041a6:	409a      	lsls	r2, r3
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b0:	f043 0201 	orr.w	r2, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	fa22 f303 	lsr.w	r3, r2, r3
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d06e      	beq.n	80042ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a69      	ldr	r2, [pc, #420]	@ (8004378 <HAL_DMA_IRQHandler+0x3f8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d04a      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ee>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a67      	ldr	r2, [pc, #412]	@ (800437c <HAL_DMA_IRQHandler+0x3fc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d045      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ee>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a66      	ldr	r2, [pc, #408]	@ (8004380 <HAL_DMA_IRQHandler+0x400>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d040      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ee>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a64      	ldr	r2, [pc, #400]	@ (8004384 <HAL_DMA_IRQHandler+0x404>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d03b      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ee>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a63      	ldr	r2, [pc, #396]	@ (8004388 <HAL_DMA_IRQHandler+0x408>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d036      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ee>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a61      	ldr	r2, [pc, #388]	@ (800438c <HAL_DMA_IRQHandler+0x40c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d031      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ee>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a60      	ldr	r2, [pc, #384]	@ (8004390 <HAL_DMA_IRQHandler+0x410>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d02c      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ee>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a5e      	ldr	r2, [pc, #376]	@ (8004394 <HAL_DMA_IRQHandler+0x414>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d027      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ee>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a5d      	ldr	r2, [pc, #372]	@ (8004398 <HAL_DMA_IRQHandler+0x418>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d022      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ee>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a5b      	ldr	r2, [pc, #364]	@ (800439c <HAL_DMA_IRQHandler+0x41c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01d      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ee>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a5a      	ldr	r2, [pc, #360]	@ (80043a0 <HAL_DMA_IRQHandler+0x420>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d018      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ee>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a58      	ldr	r2, [pc, #352]	@ (80043a4 <HAL_DMA_IRQHandler+0x424>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ee>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a57      	ldr	r2, [pc, #348]	@ (80043a8 <HAL_DMA_IRQHandler+0x428>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ee>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a55      	ldr	r2, [pc, #340]	@ (80043ac <HAL_DMA_IRQHandler+0x42c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ee>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a54      	ldr	r2, [pc, #336]	@ (80043b0 <HAL_DMA_IRQHandler+0x430>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ee>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a52      	ldr	r2, [pc, #328]	@ (80043b4 <HAL_DMA_IRQHandler+0x434>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10a      	bne.n	8004284 <HAL_DMA_IRQHandler+0x304>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004278:	2b00      	cmp	r3, #0
 800427a:	bf14      	ite	ne
 800427c:	2301      	movne	r3, #1
 800427e:	2300      	moveq	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	e003      	b.n	800428c <HAL_DMA_IRQHandler+0x30c>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00d      	beq.n	80042ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	2201      	movs	r2, #1
 800429a:	409a      	lsls	r2, r3
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a4:	f043 0202 	orr.w	r2, r3, #2
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2204      	movs	r2, #4
 80042b6:	409a      	lsls	r2, r3
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 808f 	beq.w	80043e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004378 <HAL_DMA_IRQHandler+0x3f8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d04a      	beq.n	8004362 <HAL_DMA_IRQHandler+0x3e2>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a2a      	ldr	r2, [pc, #168]	@ (800437c <HAL_DMA_IRQHandler+0x3fc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d045      	beq.n	8004362 <HAL_DMA_IRQHandler+0x3e2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a29      	ldr	r2, [pc, #164]	@ (8004380 <HAL_DMA_IRQHandler+0x400>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d040      	beq.n	8004362 <HAL_DMA_IRQHandler+0x3e2>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a27      	ldr	r2, [pc, #156]	@ (8004384 <HAL_DMA_IRQHandler+0x404>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d03b      	beq.n	8004362 <HAL_DMA_IRQHandler+0x3e2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a26      	ldr	r2, [pc, #152]	@ (8004388 <HAL_DMA_IRQHandler+0x408>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d036      	beq.n	8004362 <HAL_DMA_IRQHandler+0x3e2>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a24      	ldr	r2, [pc, #144]	@ (800438c <HAL_DMA_IRQHandler+0x40c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d031      	beq.n	8004362 <HAL_DMA_IRQHandler+0x3e2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a23      	ldr	r2, [pc, #140]	@ (8004390 <HAL_DMA_IRQHandler+0x410>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d02c      	beq.n	8004362 <HAL_DMA_IRQHandler+0x3e2>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a21      	ldr	r2, [pc, #132]	@ (8004394 <HAL_DMA_IRQHandler+0x414>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d027      	beq.n	8004362 <HAL_DMA_IRQHandler+0x3e2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a20      	ldr	r2, [pc, #128]	@ (8004398 <HAL_DMA_IRQHandler+0x418>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d022      	beq.n	8004362 <HAL_DMA_IRQHandler+0x3e2>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1e      	ldr	r2, [pc, #120]	@ (800439c <HAL_DMA_IRQHandler+0x41c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d01d      	beq.n	8004362 <HAL_DMA_IRQHandler+0x3e2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1d      	ldr	r2, [pc, #116]	@ (80043a0 <HAL_DMA_IRQHandler+0x420>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d018      	beq.n	8004362 <HAL_DMA_IRQHandler+0x3e2>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1b      	ldr	r2, [pc, #108]	@ (80043a4 <HAL_DMA_IRQHandler+0x424>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <HAL_DMA_IRQHandler+0x3e2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a1a      	ldr	r2, [pc, #104]	@ (80043a8 <HAL_DMA_IRQHandler+0x428>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00e      	beq.n	8004362 <HAL_DMA_IRQHandler+0x3e2>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a18      	ldr	r2, [pc, #96]	@ (80043ac <HAL_DMA_IRQHandler+0x42c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d009      	beq.n	8004362 <HAL_DMA_IRQHandler+0x3e2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a17      	ldr	r2, [pc, #92]	@ (80043b0 <HAL_DMA_IRQHandler+0x430>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_DMA_IRQHandler+0x3e2>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a15      	ldr	r2, [pc, #84]	@ (80043b4 <HAL_DMA_IRQHandler+0x434>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d12a      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x438>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	e023      	b.n	80043c0 <HAL_DMA_IRQHandler+0x440>
 8004378:	40020010 	.word	0x40020010
 800437c:	40020028 	.word	0x40020028
 8004380:	40020040 	.word	0x40020040
 8004384:	40020058 	.word	0x40020058
 8004388:	40020070 	.word	0x40020070
 800438c:	40020088 	.word	0x40020088
 8004390:	400200a0 	.word	0x400200a0
 8004394:	400200b8 	.word	0x400200b8
 8004398:	40020410 	.word	0x40020410
 800439c:	40020428 	.word	0x40020428
 80043a0:	40020440 	.word	0x40020440
 80043a4:	40020458 	.word	0x40020458
 80043a8:	40020470 	.word	0x40020470
 80043ac:	40020488 	.word	0x40020488
 80043b0:	400204a0 	.word	0x400204a0
 80043b4:	400204b8 	.word	0x400204b8
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00d      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	2204      	movs	r2, #4
 80043ce:	409a      	lsls	r2, r3
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d8:	f043 0204 	orr.w	r2, r3, #4
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	2210      	movs	r2, #16
 80043ea:	409a      	lsls	r2, r3
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80a6 	beq.w	8004542 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a85      	ldr	r2, [pc, #532]	@ (8004610 <HAL_DMA_IRQHandler+0x690>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d04a      	beq.n	8004496 <HAL_DMA_IRQHandler+0x516>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a83      	ldr	r2, [pc, #524]	@ (8004614 <HAL_DMA_IRQHandler+0x694>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d045      	beq.n	8004496 <HAL_DMA_IRQHandler+0x516>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a82      	ldr	r2, [pc, #520]	@ (8004618 <HAL_DMA_IRQHandler+0x698>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d040      	beq.n	8004496 <HAL_DMA_IRQHandler+0x516>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a80      	ldr	r2, [pc, #512]	@ (800461c <HAL_DMA_IRQHandler+0x69c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d03b      	beq.n	8004496 <HAL_DMA_IRQHandler+0x516>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a7f      	ldr	r2, [pc, #508]	@ (8004620 <HAL_DMA_IRQHandler+0x6a0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d036      	beq.n	8004496 <HAL_DMA_IRQHandler+0x516>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a7d      	ldr	r2, [pc, #500]	@ (8004624 <HAL_DMA_IRQHandler+0x6a4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d031      	beq.n	8004496 <HAL_DMA_IRQHandler+0x516>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a7c      	ldr	r2, [pc, #496]	@ (8004628 <HAL_DMA_IRQHandler+0x6a8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d02c      	beq.n	8004496 <HAL_DMA_IRQHandler+0x516>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a7a      	ldr	r2, [pc, #488]	@ (800462c <HAL_DMA_IRQHandler+0x6ac>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d027      	beq.n	8004496 <HAL_DMA_IRQHandler+0x516>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a79      	ldr	r2, [pc, #484]	@ (8004630 <HAL_DMA_IRQHandler+0x6b0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d022      	beq.n	8004496 <HAL_DMA_IRQHandler+0x516>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a77      	ldr	r2, [pc, #476]	@ (8004634 <HAL_DMA_IRQHandler+0x6b4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01d      	beq.n	8004496 <HAL_DMA_IRQHandler+0x516>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a76      	ldr	r2, [pc, #472]	@ (8004638 <HAL_DMA_IRQHandler+0x6b8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d018      	beq.n	8004496 <HAL_DMA_IRQHandler+0x516>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a74      	ldr	r2, [pc, #464]	@ (800463c <HAL_DMA_IRQHandler+0x6bc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d013      	beq.n	8004496 <HAL_DMA_IRQHandler+0x516>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a73      	ldr	r2, [pc, #460]	@ (8004640 <HAL_DMA_IRQHandler+0x6c0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00e      	beq.n	8004496 <HAL_DMA_IRQHandler+0x516>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a71      	ldr	r2, [pc, #452]	@ (8004644 <HAL_DMA_IRQHandler+0x6c4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d009      	beq.n	8004496 <HAL_DMA_IRQHandler+0x516>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a70      	ldr	r2, [pc, #448]	@ (8004648 <HAL_DMA_IRQHandler+0x6c8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d004      	beq.n	8004496 <HAL_DMA_IRQHandler+0x516>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a6e      	ldr	r2, [pc, #440]	@ (800464c <HAL_DMA_IRQHandler+0x6cc>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d10a      	bne.n	80044ac <HAL_DMA_IRQHandler+0x52c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf14      	ite	ne
 80044a4:	2301      	movne	r3, #1
 80044a6:	2300      	moveq	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	e009      	b.n	80044c0 <HAL_DMA_IRQHandler+0x540>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	bf14      	ite	ne
 80044ba:	2301      	movne	r3, #1
 80044bc:	2300      	moveq	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d03e      	beq.n	8004542 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	2210      	movs	r2, #16
 80044ce:	409a      	lsls	r2, r3
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d018      	beq.n	8004514 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d108      	bne.n	8004502 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d024      	beq.n	8004542 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	4798      	blx	r3
 8004500:	e01f      	b.n	8004542 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004506:	2b00      	cmp	r3, #0
 8004508:	d01b      	beq.n	8004542 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4798      	blx	r3
 8004512:	e016      	b.n	8004542 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d107      	bne.n	8004532 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0208 	bic.w	r2, r2, #8
 8004530:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	2220      	movs	r2, #32
 800454c:	409a      	lsls	r2, r3
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 8110 	beq.w	8004778 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a2c      	ldr	r2, [pc, #176]	@ (8004610 <HAL_DMA_IRQHandler+0x690>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d04a      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x678>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2b      	ldr	r2, [pc, #172]	@ (8004614 <HAL_DMA_IRQHandler+0x694>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d045      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x678>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a29      	ldr	r2, [pc, #164]	@ (8004618 <HAL_DMA_IRQHandler+0x698>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d040      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x678>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a28      	ldr	r2, [pc, #160]	@ (800461c <HAL_DMA_IRQHandler+0x69c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d03b      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x678>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a26      	ldr	r2, [pc, #152]	@ (8004620 <HAL_DMA_IRQHandler+0x6a0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d036      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x678>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a25      	ldr	r2, [pc, #148]	@ (8004624 <HAL_DMA_IRQHandler+0x6a4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d031      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x678>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a23      	ldr	r2, [pc, #140]	@ (8004628 <HAL_DMA_IRQHandler+0x6a8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d02c      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x678>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a22      	ldr	r2, [pc, #136]	@ (800462c <HAL_DMA_IRQHandler+0x6ac>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d027      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x678>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a20      	ldr	r2, [pc, #128]	@ (8004630 <HAL_DMA_IRQHandler+0x6b0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d022      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x678>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004634 <HAL_DMA_IRQHandler+0x6b4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d01d      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x678>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004638 <HAL_DMA_IRQHandler+0x6b8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d018      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x678>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1c      	ldr	r2, [pc, #112]	@ (800463c <HAL_DMA_IRQHandler+0x6bc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d013      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x678>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004640 <HAL_DMA_IRQHandler+0x6c0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00e      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x678>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a19      	ldr	r2, [pc, #100]	@ (8004644 <HAL_DMA_IRQHandler+0x6c4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d009      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x678>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a17      	ldr	r2, [pc, #92]	@ (8004648 <HAL_DMA_IRQHandler+0x6c8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x678>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a16      	ldr	r2, [pc, #88]	@ (800464c <HAL_DMA_IRQHandler+0x6cc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d12b      	bne.n	8004650 <HAL_DMA_IRQHandler+0x6d0>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0310 	and.w	r3, r3, #16
 8004602:	2b00      	cmp	r3, #0
 8004604:	bf14      	ite	ne
 8004606:	2301      	movne	r3, #1
 8004608:	2300      	moveq	r3, #0
 800460a:	b2db      	uxtb	r3, r3
 800460c:	e02a      	b.n	8004664 <HAL_DMA_IRQHandler+0x6e4>
 800460e:	bf00      	nop
 8004610:	40020010 	.word	0x40020010
 8004614:	40020028 	.word	0x40020028
 8004618:	40020040 	.word	0x40020040
 800461c:	40020058 	.word	0x40020058
 8004620:	40020070 	.word	0x40020070
 8004624:	40020088 	.word	0x40020088
 8004628:	400200a0 	.word	0x400200a0
 800462c:	400200b8 	.word	0x400200b8
 8004630:	40020410 	.word	0x40020410
 8004634:	40020428 	.word	0x40020428
 8004638:	40020440 	.word	0x40020440
 800463c:	40020458 	.word	0x40020458
 8004640:	40020470 	.word	0x40020470
 8004644:	40020488 	.word	0x40020488
 8004648:	400204a0 	.word	0x400204a0
 800464c:	400204b8 	.word	0x400204b8
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	bf14      	ite	ne
 800465e:	2301      	movne	r3, #1
 8004660:	2300      	moveq	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8087 	beq.w	8004778 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	2220      	movs	r2, #32
 8004674:	409a      	lsls	r2, r3
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b04      	cmp	r3, #4
 8004684:	d139      	bne.n	80046fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0216 	bic.w	r2, r2, #22
 8004694:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d103      	bne.n	80046b6 <HAL_DMA_IRQHandler+0x736>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0208 	bic.w	r2, r2, #8
 80046c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	223f      	movs	r2, #63	@ 0x3f
 80046d0:	409a      	lsls	r2, r3
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 834a 	beq.w	8004d84 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4798      	blx	r3
          }
          return;
 80046f8:	e344      	b.n	8004d84 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d018      	beq.n	800473a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d108      	bne.n	8004728 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471a:	2b00      	cmp	r3, #0
 800471c:	d02c      	beq.n	8004778 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
 8004726:	e027      	b.n	8004778 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d023      	beq.n	8004778 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	4798      	blx	r3
 8004738:	e01e      	b.n	8004778 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10f      	bne.n	8004768 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0210 	bic.w	r2, r2, #16
 8004756:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8306 	beq.w	8004d8e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 8088 	beq.w	80048a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2204      	movs	r2, #4
 8004794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a7a      	ldr	r2, [pc, #488]	@ (8004988 <HAL_DMA_IRQHandler+0xa08>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d04a      	beq.n	8004838 <HAL_DMA_IRQHandler+0x8b8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a79      	ldr	r2, [pc, #484]	@ (800498c <HAL_DMA_IRQHandler+0xa0c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d045      	beq.n	8004838 <HAL_DMA_IRQHandler+0x8b8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a77      	ldr	r2, [pc, #476]	@ (8004990 <HAL_DMA_IRQHandler+0xa10>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d040      	beq.n	8004838 <HAL_DMA_IRQHandler+0x8b8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a76      	ldr	r2, [pc, #472]	@ (8004994 <HAL_DMA_IRQHandler+0xa14>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d03b      	beq.n	8004838 <HAL_DMA_IRQHandler+0x8b8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a74      	ldr	r2, [pc, #464]	@ (8004998 <HAL_DMA_IRQHandler+0xa18>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d036      	beq.n	8004838 <HAL_DMA_IRQHandler+0x8b8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a73      	ldr	r2, [pc, #460]	@ (800499c <HAL_DMA_IRQHandler+0xa1c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d031      	beq.n	8004838 <HAL_DMA_IRQHandler+0x8b8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a71      	ldr	r2, [pc, #452]	@ (80049a0 <HAL_DMA_IRQHandler+0xa20>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d02c      	beq.n	8004838 <HAL_DMA_IRQHandler+0x8b8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a70      	ldr	r2, [pc, #448]	@ (80049a4 <HAL_DMA_IRQHandler+0xa24>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d027      	beq.n	8004838 <HAL_DMA_IRQHandler+0x8b8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a6e      	ldr	r2, [pc, #440]	@ (80049a8 <HAL_DMA_IRQHandler+0xa28>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d022      	beq.n	8004838 <HAL_DMA_IRQHandler+0x8b8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a6d      	ldr	r2, [pc, #436]	@ (80049ac <HAL_DMA_IRQHandler+0xa2c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d01d      	beq.n	8004838 <HAL_DMA_IRQHandler+0x8b8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a6b      	ldr	r2, [pc, #428]	@ (80049b0 <HAL_DMA_IRQHandler+0xa30>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d018      	beq.n	8004838 <HAL_DMA_IRQHandler+0x8b8>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a6a      	ldr	r2, [pc, #424]	@ (80049b4 <HAL_DMA_IRQHandler+0xa34>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <HAL_DMA_IRQHandler+0x8b8>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a68      	ldr	r2, [pc, #416]	@ (80049b8 <HAL_DMA_IRQHandler+0xa38>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <HAL_DMA_IRQHandler+0x8b8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a67      	ldr	r2, [pc, #412]	@ (80049bc <HAL_DMA_IRQHandler+0xa3c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_DMA_IRQHandler+0x8b8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a65      	ldr	r2, [pc, #404]	@ (80049c0 <HAL_DMA_IRQHandler+0xa40>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_DMA_IRQHandler+0x8b8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a64      	ldr	r2, [pc, #400]	@ (80049c4 <HAL_DMA_IRQHandler+0xa44>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d108      	bne.n	800484a <HAL_DMA_IRQHandler+0x8ca>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	e007      	b.n	800485a <HAL_DMA_IRQHandler+0x8da>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3301      	adds	r3, #1
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004862:	429a      	cmp	r2, r3
 8004864:	d307      	bcc.n	8004876 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f2      	bne.n	800485a <HAL_DMA_IRQHandler+0x8da>
 8004874:	e000      	b.n	8004878 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004876:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d004      	beq.n	8004890 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2203      	movs	r2, #3
 800488a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800488e:	e003      	b.n	8004898 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8272 	beq.w	8004d8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	4798      	blx	r3
 80048b2:	e26c      	b.n	8004d8e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a43      	ldr	r2, [pc, #268]	@ (80049c8 <HAL_DMA_IRQHandler+0xa48>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d022      	beq.n	8004904 <HAL_DMA_IRQHandler+0x984>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a42      	ldr	r2, [pc, #264]	@ (80049cc <HAL_DMA_IRQHandler+0xa4c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d01d      	beq.n	8004904 <HAL_DMA_IRQHandler+0x984>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a40      	ldr	r2, [pc, #256]	@ (80049d0 <HAL_DMA_IRQHandler+0xa50>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d018      	beq.n	8004904 <HAL_DMA_IRQHandler+0x984>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a3f      	ldr	r2, [pc, #252]	@ (80049d4 <HAL_DMA_IRQHandler+0xa54>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d013      	beq.n	8004904 <HAL_DMA_IRQHandler+0x984>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a3d      	ldr	r2, [pc, #244]	@ (80049d8 <HAL_DMA_IRQHandler+0xa58>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00e      	beq.n	8004904 <HAL_DMA_IRQHandler+0x984>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a3c      	ldr	r2, [pc, #240]	@ (80049dc <HAL_DMA_IRQHandler+0xa5c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d009      	beq.n	8004904 <HAL_DMA_IRQHandler+0x984>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a3a      	ldr	r2, [pc, #232]	@ (80049e0 <HAL_DMA_IRQHandler+0xa60>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_DMA_IRQHandler+0x984>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a39      	ldr	r2, [pc, #228]	@ (80049e4 <HAL_DMA_IRQHandler+0xa64>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d101      	bne.n	8004908 <HAL_DMA_IRQHandler+0x988>
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <HAL_DMA_IRQHandler+0x98a>
 8004908:	2300      	movs	r3, #0
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 823f 	beq.w	8004d8e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	2204      	movs	r2, #4
 8004922:	409a      	lsls	r2, r3
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	4013      	ands	r3, r2
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 80cd 	beq.w	8004ac8 <HAL_DMA_IRQHandler+0xb48>
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80c7 	beq.w	8004ac8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800493e:	f003 031f 	and.w	r3, r3, #31
 8004942:	2204      	movs	r2, #4
 8004944:	409a      	lsls	r2, r3
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d049      	beq.n	80049e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 8210 	beq.w	8004d88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004970:	e20a      	b.n	8004d88 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8206 	beq.w	8004d88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004984:	e200      	b.n	8004d88 <HAL_DMA_IRQHandler+0xe08>
 8004986:	bf00      	nop
 8004988:	40020010 	.word	0x40020010
 800498c:	40020028 	.word	0x40020028
 8004990:	40020040 	.word	0x40020040
 8004994:	40020058 	.word	0x40020058
 8004998:	40020070 	.word	0x40020070
 800499c:	40020088 	.word	0x40020088
 80049a0:	400200a0 	.word	0x400200a0
 80049a4:	400200b8 	.word	0x400200b8
 80049a8:	40020410 	.word	0x40020410
 80049ac:	40020428 	.word	0x40020428
 80049b0:	40020440 	.word	0x40020440
 80049b4:	40020458 	.word	0x40020458
 80049b8:	40020470 	.word	0x40020470
 80049bc:	40020488 	.word	0x40020488
 80049c0:	400204a0 	.word	0x400204a0
 80049c4:	400204b8 	.word	0x400204b8
 80049c8:	58025408 	.word	0x58025408
 80049cc:	5802541c 	.word	0x5802541c
 80049d0:	58025430 	.word	0x58025430
 80049d4:	58025444 	.word	0x58025444
 80049d8:	58025458 	.word	0x58025458
 80049dc:	5802546c 	.word	0x5802546c
 80049e0:	58025480 	.word	0x58025480
 80049e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d160      	bne.n	8004ab4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a7f      	ldr	r2, [pc, #508]	@ (8004bf4 <HAL_DMA_IRQHandler+0xc74>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d04a      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xb12>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a7d      	ldr	r2, [pc, #500]	@ (8004bf8 <HAL_DMA_IRQHandler+0xc78>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d045      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xb12>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a7c      	ldr	r2, [pc, #496]	@ (8004bfc <HAL_DMA_IRQHandler+0xc7c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d040      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xb12>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a7a      	ldr	r2, [pc, #488]	@ (8004c00 <HAL_DMA_IRQHandler+0xc80>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d03b      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xb12>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a79      	ldr	r2, [pc, #484]	@ (8004c04 <HAL_DMA_IRQHandler+0xc84>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d036      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xb12>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a77      	ldr	r2, [pc, #476]	@ (8004c08 <HAL_DMA_IRQHandler+0xc88>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d031      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xb12>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a76      	ldr	r2, [pc, #472]	@ (8004c0c <HAL_DMA_IRQHandler+0xc8c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d02c      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xb12>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a74      	ldr	r2, [pc, #464]	@ (8004c10 <HAL_DMA_IRQHandler+0xc90>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d027      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xb12>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a73      	ldr	r2, [pc, #460]	@ (8004c14 <HAL_DMA_IRQHandler+0xc94>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d022      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xb12>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a71      	ldr	r2, [pc, #452]	@ (8004c18 <HAL_DMA_IRQHandler+0xc98>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d01d      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xb12>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a70      	ldr	r2, [pc, #448]	@ (8004c1c <HAL_DMA_IRQHandler+0xc9c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d018      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xb12>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a6e      	ldr	r2, [pc, #440]	@ (8004c20 <HAL_DMA_IRQHandler+0xca0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xb12>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a6d      	ldr	r2, [pc, #436]	@ (8004c24 <HAL_DMA_IRQHandler+0xca4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00e      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xb12>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a6b      	ldr	r2, [pc, #428]	@ (8004c28 <HAL_DMA_IRQHandler+0xca8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d009      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xb12>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a6a      	ldr	r2, [pc, #424]	@ (8004c2c <HAL_DMA_IRQHandler+0xcac>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xb12>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a68      	ldr	r2, [pc, #416]	@ (8004c30 <HAL_DMA_IRQHandler+0xcb0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d108      	bne.n	8004aa4 <HAL_DMA_IRQHandler+0xb24>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0208 	bic.w	r2, r2, #8
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e007      	b.n	8004ab4 <HAL_DMA_IRQHandler+0xb34>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0204 	bic.w	r2, r2, #4
 8004ab2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 8165 	beq.w	8004d88 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ac6:	e15f      	b.n	8004d88 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80c5 	beq.w	8004c68 <HAL_DMA_IRQHandler+0xce8>
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80bf 	beq.w	8004c68 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	2202      	movs	r2, #2
 8004af4:	409a      	lsls	r2, r3
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d018      	beq.n	8004b36 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d109      	bne.n	8004b22 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 813a 	beq.w	8004d8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b20:	e134      	b.n	8004d8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 8130 	beq.w	8004d8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b34:	e12a      	b.n	8004d8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f040 8089 	bne.w	8004c54 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf4 <HAL_DMA_IRQHandler+0xc74>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d04a      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc62>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a29      	ldr	r2, [pc, #164]	@ (8004bf8 <HAL_DMA_IRQHandler+0xc78>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d045      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc62>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a28      	ldr	r2, [pc, #160]	@ (8004bfc <HAL_DMA_IRQHandler+0xc7c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d040      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc62>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a26      	ldr	r2, [pc, #152]	@ (8004c00 <HAL_DMA_IRQHandler+0xc80>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d03b      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc62>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a25      	ldr	r2, [pc, #148]	@ (8004c04 <HAL_DMA_IRQHandler+0xc84>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d036      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc62>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a23      	ldr	r2, [pc, #140]	@ (8004c08 <HAL_DMA_IRQHandler+0xc88>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d031      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc62>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a22      	ldr	r2, [pc, #136]	@ (8004c0c <HAL_DMA_IRQHandler+0xc8c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d02c      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc62>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a20      	ldr	r2, [pc, #128]	@ (8004c10 <HAL_DMA_IRQHandler+0xc90>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d027      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc62>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1f      	ldr	r2, [pc, #124]	@ (8004c14 <HAL_DMA_IRQHandler+0xc94>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d022      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc62>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c18 <HAL_DMA_IRQHandler+0xc98>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d01d      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc62>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1c      	ldr	r2, [pc, #112]	@ (8004c1c <HAL_DMA_IRQHandler+0xc9c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d018      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc62>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8004c20 <HAL_DMA_IRQHandler+0xca0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d013      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc62>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a19      	ldr	r2, [pc, #100]	@ (8004c24 <HAL_DMA_IRQHandler+0xca4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00e      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc62>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a17      	ldr	r2, [pc, #92]	@ (8004c28 <HAL_DMA_IRQHandler+0xca8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc62>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a16      	ldr	r2, [pc, #88]	@ (8004c2c <HAL_DMA_IRQHandler+0xcac>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc62>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a14      	ldr	r2, [pc, #80]	@ (8004c30 <HAL_DMA_IRQHandler+0xcb0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d128      	bne.n	8004c34 <HAL_DMA_IRQHandler+0xcb4>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0214 	bic.w	r2, r2, #20
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	e027      	b.n	8004c44 <HAL_DMA_IRQHandler+0xcc4>
 8004bf4:	40020010 	.word	0x40020010
 8004bf8:	40020028 	.word	0x40020028
 8004bfc:	40020040 	.word	0x40020040
 8004c00:	40020058 	.word	0x40020058
 8004c04:	40020070 	.word	0x40020070
 8004c08:	40020088 	.word	0x40020088
 8004c0c:	400200a0 	.word	0x400200a0
 8004c10:	400200b8 	.word	0x400200b8
 8004c14:	40020410 	.word	0x40020410
 8004c18:	40020428 	.word	0x40020428
 8004c1c:	40020440 	.word	0x40020440
 8004c20:	40020458 	.word	0x40020458
 8004c24:	40020470 	.word	0x40020470
 8004c28:	40020488 	.word	0x40020488
 8004c2c:	400204a0 	.word	0x400204a0
 8004c30:	400204b8 	.word	0x400204b8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 020a 	bic.w	r2, r2, #10
 8004c42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8097 	beq.w	8004d8c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c66:	e091      	b.n	8004d8c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	2208      	movs	r2, #8
 8004c72:	409a      	lsls	r2, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 8088 	beq.w	8004d8e <HAL_DMA_IRQHandler+0xe0e>
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8082 	beq.w	8004d8e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a41      	ldr	r2, [pc, #260]	@ (8004d94 <HAL_DMA_IRQHandler+0xe14>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d04a      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xdaa>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a3f      	ldr	r2, [pc, #252]	@ (8004d98 <HAL_DMA_IRQHandler+0xe18>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d045      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xdaa>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a3e      	ldr	r2, [pc, #248]	@ (8004d9c <HAL_DMA_IRQHandler+0xe1c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d040      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xdaa>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a3c      	ldr	r2, [pc, #240]	@ (8004da0 <HAL_DMA_IRQHandler+0xe20>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d03b      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xdaa>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a3b      	ldr	r2, [pc, #236]	@ (8004da4 <HAL_DMA_IRQHandler+0xe24>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d036      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xdaa>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a39      	ldr	r2, [pc, #228]	@ (8004da8 <HAL_DMA_IRQHandler+0xe28>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d031      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xdaa>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a38      	ldr	r2, [pc, #224]	@ (8004dac <HAL_DMA_IRQHandler+0xe2c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d02c      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xdaa>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a36      	ldr	r2, [pc, #216]	@ (8004db0 <HAL_DMA_IRQHandler+0xe30>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d027      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xdaa>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a35      	ldr	r2, [pc, #212]	@ (8004db4 <HAL_DMA_IRQHandler+0xe34>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d022      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xdaa>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a33      	ldr	r2, [pc, #204]	@ (8004db8 <HAL_DMA_IRQHandler+0xe38>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01d      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xdaa>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a32      	ldr	r2, [pc, #200]	@ (8004dbc <HAL_DMA_IRQHandler+0xe3c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d018      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xdaa>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a30      	ldr	r2, [pc, #192]	@ (8004dc0 <HAL_DMA_IRQHandler+0xe40>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xdaa>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2f      	ldr	r2, [pc, #188]	@ (8004dc4 <HAL_DMA_IRQHandler+0xe44>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00e      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xdaa>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc8 <HAL_DMA_IRQHandler+0xe48>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d009      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xdaa>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8004dcc <HAL_DMA_IRQHandler+0xe4c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d004      	beq.n	8004d2a <HAL_DMA_IRQHandler+0xdaa>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2a      	ldr	r2, [pc, #168]	@ (8004dd0 <HAL_DMA_IRQHandler+0xe50>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d108      	bne.n	8004d3c <HAL_DMA_IRQHandler+0xdbc>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 021c 	bic.w	r2, r2, #28
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	e007      	b.n	8004d4c <HAL_DMA_IRQHandler+0xdcc>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 020e 	bic.w	r2, r2, #14
 8004d4a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	2201      	movs	r2, #1
 8004d56:	409a      	lsls	r2, r3
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	4798      	blx	r3
 8004d82:	e004      	b.n	8004d8e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004d84:	bf00      	nop
 8004d86:	e002      	b.n	8004d8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d88:	bf00      	nop
 8004d8a:	e000      	b.n	8004d8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d8c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d8e:	3728      	adds	r7, #40	@ 0x28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40020010 	.word	0x40020010
 8004d98:	40020028 	.word	0x40020028
 8004d9c:	40020040 	.word	0x40020040
 8004da0:	40020058 	.word	0x40020058
 8004da4:	40020070 	.word	0x40020070
 8004da8:	40020088 	.word	0x40020088
 8004dac:	400200a0 	.word	0x400200a0
 8004db0:	400200b8 	.word	0x400200b8
 8004db4:	40020410 	.word	0x40020410
 8004db8:	40020428 	.word	0x40020428
 8004dbc:	40020440 	.word	0x40020440
 8004dc0:	40020458 	.word	0x40020458
 8004dc4:	40020470 	.word	0x40020470
 8004dc8:	40020488 	.word	0x40020488
 8004dcc:	400204a0 	.word	0x400204a0
 8004dd0:	400204b8 	.word	0x400204b8

08004dd4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a7f      	ldr	r2, [pc, #508]	@ (8004ff0 <DMA_SetConfig+0x21c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d072      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a7d      	ldr	r2, [pc, #500]	@ (8004ff4 <DMA_SetConfig+0x220>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d06d      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a7c      	ldr	r2, [pc, #496]	@ (8004ff8 <DMA_SetConfig+0x224>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d068      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a7a      	ldr	r2, [pc, #488]	@ (8004ffc <DMA_SetConfig+0x228>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d063      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a79      	ldr	r2, [pc, #484]	@ (8005000 <DMA_SetConfig+0x22c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d05e      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a77      	ldr	r2, [pc, #476]	@ (8005004 <DMA_SetConfig+0x230>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d059      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a76      	ldr	r2, [pc, #472]	@ (8005008 <DMA_SetConfig+0x234>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d054      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a74      	ldr	r2, [pc, #464]	@ (800500c <DMA_SetConfig+0x238>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d04f      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a73      	ldr	r2, [pc, #460]	@ (8005010 <DMA_SetConfig+0x23c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d04a      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a71      	ldr	r2, [pc, #452]	@ (8005014 <DMA_SetConfig+0x240>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d045      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a70      	ldr	r2, [pc, #448]	@ (8005018 <DMA_SetConfig+0x244>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d040      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a6e      	ldr	r2, [pc, #440]	@ (800501c <DMA_SetConfig+0x248>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d03b      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a6d      	ldr	r2, [pc, #436]	@ (8005020 <DMA_SetConfig+0x24c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d036      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a6b      	ldr	r2, [pc, #428]	@ (8005024 <DMA_SetConfig+0x250>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d031      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a6a      	ldr	r2, [pc, #424]	@ (8005028 <DMA_SetConfig+0x254>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d02c      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a68      	ldr	r2, [pc, #416]	@ (800502c <DMA_SetConfig+0x258>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d027      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a67      	ldr	r2, [pc, #412]	@ (8005030 <DMA_SetConfig+0x25c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d022      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a65      	ldr	r2, [pc, #404]	@ (8005034 <DMA_SetConfig+0x260>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d01d      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a64      	ldr	r2, [pc, #400]	@ (8005038 <DMA_SetConfig+0x264>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d018      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a62      	ldr	r2, [pc, #392]	@ (800503c <DMA_SetConfig+0x268>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d013      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a61      	ldr	r2, [pc, #388]	@ (8005040 <DMA_SetConfig+0x26c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00e      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a5f      	ldr	r2, [pc, #380]	@ (8005044 <DMA_SetConfig+0x270>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d009      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a5e      	ldr	r2, [pc, #376]	@ (8005048 <DMA_SetConfig+0x274>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <DMA_SetConfig+0x10a>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a5c      	ldr	r2, [pc, #368]	@ (800504c <DMA_SetConfig+0x278>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d101      	bne.n	8004ee2 <DMA_SetConfig+0x10e>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <DMA_SetConfig+0x110>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00d      	beq.n	8004f04 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004ef0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004f02:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a39      	ldr	r2, [pc, #228]	@ (8004ff0 <DMA_SetConfig+0x21c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d04a      	beq.n	8004fa4 <DMA_SetConfig+0x1d0>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a38      	ldr	r2, [pc, #224]	@ (8004ff4 <DMA_SetConfig+0x220>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d045      	beq.n	8004fa4 <DMA_SetConfig+0x1d0>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a36      	ldr	r2, [pc, #216]	@ (8004ff8 <DMA_SetConfig+0x224>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d040      	beq.n	8004fa4 <DMA_SetConfig+0x1d0>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a35      	ldr	r2, [pc, #212]	@ (8004ffc <DMA_SetConfig+0x228>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d03b      	beq.n	8004fa4 <DMA_SetConfig+0x1d0>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a33      	ldr	r2, [pc, #204]	@ (8005000 <DMA_SetConfig+0x22c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d036      	beq.n	8004fa4 <DMA_SetConfig+0x1d0>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a32      	ldr	r2, [pc, #200]	@ (8005004 <DMA_SetConfig+0x230>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d031      	beq.n	8004fa4 <DMA_SetConfig+0x1d0>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a30      	ldr	r2, [pc, #192]	@ (8005008 <DMA_SetConfig+0x234>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d02c      	beq.n	8004fa4 <DMA_SetConfig+0x1d0>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800500c <DMA_SetConfig+0x238>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d027      	beq.n	8004fa4 <DMA_SetConfig+0x1d0>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a2d      	ldr	r2, [pc, #180]	@ (8005010 <DMA_SetConfig+0x23c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d022      	beq.n	8004fa4 <DMA_SetConfig+0x1d0>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2c      	ldr	r2, [pc, #176]	@ (8005014 <DMA_SetConfig+0x240>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d01d      	beq.n	8004fa4 <DMA_SetConfig+0x1d0>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8005018 <DMA_SetConfig+0x244>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d018      	beq.n	8004fa4 <DMA_SetConfig+0x1d0>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a29      	ldr	r2, [pc, #164]	@ (800501c <DMA_SetConfig+0x248>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d013      	beq.n	8004fa4 <DMA_SetConfig+0x1d0>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a27      	ldr	r2, [pc, #156]	@ (8005020 <DMA_SetConfig+0x24c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00e      	beq.n	8004fa4 <DMA_SetConfig+0x1d0>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a26      	ldr	r2, [pc, #152]	@ (8005024 <DMA_SetConfig+0x250>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d009      	beq.n	8004fa4 <DMA_SetConfig+0x1d0>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a24      	ldr	r2, [pc, #144]	@ (8005028 <DMA_SetConfig+0x254>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <DMA_SetConfig+0x1d0>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a23      	ldr	r2, [pc, #140]	@ (800502c <DMA_SetConfig+0x258>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d101      	bne.n	8004fa8 <DMA_SetConfig+0x1d4>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <DMA_SetConfig+0x1d6>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d059      	beq.n	8005062 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	223f      	movs	r2, #63	@ 0x3f
 8004fb8:	409a      	lsls	r2, r3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004fcc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b40      	cmp	r3, #64	@ 0x40
 8004fdc:	d138      	bne.n	8005050 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004fee:	e086      	b.n	80050fe <DMA_SetConfig+0x32a>
 8004ff0:	40020010 	.word	0x40020010
 8004ff4:	40020028 	.word	0x40020028
 8004ff8:	40020040 	.word	0x40020040
 8004ffc:	40020058 	.word	0x40020058
 8005000:	40020070 	.word	0x40020070
 8005004:	40020088 	.word	0x40020088
 8005008:	400200a0 	.word	0x400200a0
 800500c:	400200b8 	.word	0x400200b8
 8005010:	40020410 	.word	0x40020410
 8005014:	40020428 	.word	0x40020428
 8005018:	40020440 	.word	0x40020440
 800501c:	40020458 	.word	0x40020458
 8005020:	40020470 	.word	0x40020470
 8005024:	40020488 	.word	0x40020488
 8005028:	400204a0 	.word	0x400204a0
 800502c:	400204b8 	.word	0x400204b8
 8005030:	58025408 	.word	0x58025408
 8005034:	5802541c 	.word	0x5802541c
 8005038:	58025430 	.word	0x58025430
 800503c:	58025444 	.word	0x58025444
 8005040:	58025458 	.word	0x58025458
 8005044:	5802546c 	.word	0x5802546c
 8005048:	58025480 	.word	0x58025480
 800504c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	60da      	str	r2, [r3, #12]
}
 8005060:	e04d      	b.n	80050fe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a29      	ldr	r2, [pc, #164]	@ (800510c <DMA_SetConfig+0x338>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d022      	beq.n	80050b2 <DMA_SetConfig+0x2de>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a27      	ldr	r2, [pc, #156]	@ (8005110 <DMA_SetConfig+0x33c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d01d      	beq.n	80050b2 <DMA_SetConfig+0x2de>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a26      	ldr	r2, [pc, #152]	@ (8005114 <DMA_SetConfig+0x340>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d018      	beq.n	80050b2 <DMA_SetConfig+0x2de>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a24      	ldr	r2, [pc, #144]	@ (8005118 <DMA_SetConfig+0x344>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <DMA_SetConfig+0x2de>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a23      	ldr	r2, [pc, #140]	@ (800511c <DMA_SetConfig+0x348>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00e      	beq.n	80050b2 <DMA_SetConfig+0x2de>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a21      	ldr	r2, [pc, #132]	@ (8005120 <DMA_SetConfig+0x34c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d009      	beq.n	80050b2 <DMA_SetConfig+0x2de>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a20      	ldr	r2, [pc, #128]	@ (8005124 <DMA_SetConfig+0x350>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d004      	beq.n	80050b2 <DMA_SetConfig+0x2de>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005128 <DMA_SetConfig+0x354>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d101      	bne.n	80050b6 <DMA_SetConfig+0x2e2>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <DMA_SetConfig+0x2e4>
 80050b6:	2300      	movs	r3, #0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d020      	beq.n	80050fe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	2201      	movs	r2, #1
 80050c6:	409a      	lsls	r2, r3
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2b40      	cmp	r3, #64	@ 0x40
 80050da:	d108      	bne.n	80050ee <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	60da      	str	r2, [r3, #12]
}
 80050ec:	e007      	b.n	80050fe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	60da      	str	r2, [r3, #12]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	58025408 	.word	0x58025408
 8005110:	5802541c 	.word	0x5802541c
 8005114:	58025430 	.word	0x58025430
 8005118:	58025444 	.word	0x58025444
 800511c:	58025458 	.word	0x58025458
 8005120:	5802546c 	.word	0x5802546c
 8005124:	58025480 	.word	0x58025480
 8005128:	58025494 	.word	0x58025494

0800512c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a42      	ldr	r2, [pc, #264]	@ (8005244 <DMA_CalcBaseAndBitshift+0x118>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d04a      	beq.n	80051d4 <DMA_CalcBaseAndBitshift+0xa8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a41      	ldr	r2, [pc, #260]	@ (8005248 <DMA_CalcBaseAndBitshift+0x11c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d045      	beq.n	80051d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a3f      	ldr	r2, [pc, #252]	@ (800524c <DMA_CalcBaseAndBitshift+0x120>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d040      	beq.n	80051d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a3e      	ldr	r2, [pc, #248]	@ (8005250 <DMA_CalcBaseAndBitshift+0x124>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d03b      	beq.n	80051d4 <DMA_CalcBaseAndBitshift+0xa8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a3c      	ldr	r2, [pc, #240]	@ (8005254 <DMA_CalcBaseAndBitshift+0x128>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d036      	beq.n	80051d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a3b      	ldr	r2, [pc, #236]	@ (8005258 <DMA_CalcBaseAndBitshift+0x12c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d031      	beq.n	80051d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a39      	ldr	r2, [pc, #228]	@ (800525c <DMA_CalcBaseAndBitshift+0x130>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d02c      	beq.n	80051d4 <DMA_CalcBaseAndBitshift+0xa8>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a38      	ldr	r2, [pc, #224]	@ (8005260 <DMA_CalcBaseAndBitshift+0x134>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d027      	beq.n	80051d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a36      	ldr	r2, [pc, #216]	@ (8005264 <DMA_CalcBaseAndBitshift+0x138>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d022      	beq.n	80051d4 <DMA_CalcBaseAndBitshift+0xa8>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a35      	ldr	r2, [pc, #212]	@ (8005268 <DMA_CalcBaseAndBitshift+0x13c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d01d      	beq.n	80051d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a33      	ldr	r2, [pc, #204]	@ (800526c <DMA_CalcBaseAndBitshift+0x140>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d018      	beq.n	80051d4 <DMA_CalcBaseAndBitshift+0xa8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a32      	ldr	r2, [pc, #200]	@ (8005270 <DMA_CalcBaseAndBitshift+0x144>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <DMA_CalcBaseAndBitshift+0xa8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a30      	ldr	r2, [pc, #192]	@ (8005274 <DMA_CalcBaseAndBitshift+0x148>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00e      	beq.n	80051d4 <DMA_CalcBaseAndBitshift+0xa8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005278 <DMA_CalcBaseAndBitshift+0x14c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d009      	beq.n	80051d4 <DMA_CalcBaseAndBitshift+0xa8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a2d      	ldr	r2, [pc, #180]	@ (800527c <DMA_CalcBaseAndBitshift+0x150>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <DMA_CalcBaseAndBitshift+0xa8>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005280 <DMA_CalcBaseAndBitshift+0x154>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d101      	bne.n	80051d8 <DMA_CalcBaseAndBitshift+0xac>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <DMA_CalcBaseAndBitshift+0xae>
 80051d8:	2300      	movs	r3, #0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d024      	beq.n	8005228 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	3b10      	subs	r3, #16
 80051e6:	4a27      	ldr	r2, [pc, #156]	@ (8005284 <DMA_CalcBaseAndBitshift+0x158>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	091b      	lsrs	r3, r3, #4
 80051ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	4a24      	ldr	r2, [pc, #144]	@ (8005288 <DMA_CalcBaseAndBitshift+0x15c>)
 80051f8:	5cd3      	ldrb	r3, [r2, r3]
 80051fa:	461a      	mov	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b03      	cmp	r3, #3
 8005204:	d908      	bls.n	8005218 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	4b1f      	ldr	r3, [pc, #124]	@ (800528c <DMA_CalcBaseAndBitshift+0x160>)
 800520e:	4013      	ands	r3, r2
 8005210:	1d1a      	adds	r2, r3, #4
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	659a      	str	r2, [r3, #88]	@ 0x58
 8005216:	e00d      	b.n	8005234 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	4b1b      	ldr	r3, [pc, #108]	@ (800528c <DMA_CalcBaseAndBitshift+0x160>)
 8005220:	4013      	ands	r3, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6593      	str	r3, [r2, #88]	@ 0x58
 8005226:	e005      	b.n	8005234 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	40020010 	.word	0x40020010
 8005248:	40020028 	.word	0x40020028
 800524c:	40020040 	.word	0x40020040
 8005250:	40020058 	.word	0x40020058
 8005254:	40020070 	.word	0x40020070
 8005258:	40020088 	.word	0x40020088
 800525c:	400200a0 	.word	0x400200a0
 8005260:	400200b8 	.word	0x400200b8
 8005264:	40020410 	.word	0x40020410
 8005268:	40020428 	.word	0x40020428
 800526c:	40020440 	.word	0x40020440
 8005270:	40020458 	.word	0x40020458
 8005274:	40020470 	.word	0x40020470
 8005278:	40020488 	.word	0x40020488
 800527c:	400204a0 	.word	0x400204a0
 8005280:	400204b8 	.word	0x400204b8
 8005284:	aaaaaaab 	.word	0xaaaaaaab
 8005288:	08009dc8 	.word	0x08009dc8
 800528c:	fffffc00 	.word	0xfffffc00

08005290 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d120      	bne.n	80052e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d858      	bhi.n	800535e <DMA_CheckFifoParam+0xce>
 80052ac:	a201      	add	r2, pc, #4	@ (adr r2, 80052b4 <DMA_CheckFifoParam+0x24>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052c5 	.word	0x080052c5
 80052b8:	080052d7 	.word	0x080052d7
 80052bc:	080052c5 	.word	0x080052c5
 80052c0:	0800535f 	.word	0x0800535f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d048      	beq.n	8005362 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052d4:	e045      	b.n	8005362 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80052de:	d142      	bne.n	8005366 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052e4:	e03f      	b.n	8005366 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ee:	d123      	bne.n	8005338 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d838      	bhi.n	800536a <DMA_CheckFifoParam+0xda>
 80052f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005300 <DMA_CheckFifoParam+0x70>)
 80052fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fe:	bf00      	nop
 8005300:	08005311 	.word	0x08005311
 8005304:	08005317 	.word	0x08005317
 8005308:	08005311 	.word	0x08005311
 800530c:	08005329 	.word	0x08005329
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
        break;
 8005314:	e030      	b.n	8005378 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d025      	beq.n	800536e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005326:	e022      	b.n	800536e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005330:	d11f      	bne.n	8005372 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005336:	e01c      	b.n	8005372 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533c:	2b02      	cmp	r3, #2
 800533e:	d902      	bls.n	8005346 <DMA_CheckFifoParam+0xb6>
 8005340:	2b03      	cmp	r3, #3
 8005342:	d003      	beq.n	800534c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005344:	e018      	b.n	8005378 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	73fb      	strb	r3, [r7, #15]
        break;
 800534a:	e015      	b.n	8005378 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005350:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00e      	beq.n	8005376 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
    break;
 800535c:	e00b      	b.n	8005376 <DMA_CheckFifoParam+0xe6>
        break;
 800535e:	bf00      	nop
 8005360:	e00a      	b.n	8005378 <DMA_CheckFifoParam+0xe8>
        break;
 8005362:	bf00      	nop
 8005364:	e008      	b.n	8005378 <DMA_CheckFifoParam+0xe8>
        break;
 8005366:	bf00      	nop
 8005368:	e006      	b.n	8005378 <DMA_CheckFifoParam+0xe8>
        break;
 800536a:	bf00      	nop
 800536c:	e004      	b.n	8005378 <DMA_CheckFifoParam+0xe8>
        break;
 800536e:	bf00      	nop
 8005370:	e002      	b.n	8005378 <DMA_CheckFifoParam+0xe8>
        break;
 8005372:	bf00      	nop
 8005374:	e000      	b.n	8005378 <DMA_CheckFifoParam+0xe8>
    break;
 8005376:	bf00      	nop
    }
  }

  return status;
 8005378:	7bfb      	ldrb	r3, [r7, #15]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop

08005388 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a38      	ldr	r2, [pc, #224]	@ (800547c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d022      	beq.n	80053e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a36      	ldr	r2, [pc, #216]	@ (8005480 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d01d      	beq.n	80053e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a35      	ldr	r2, [pc, #212]	@ (8005484 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d018      	beq.n	80053e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a33      	ldr	r2, [pc, #204]	@ (8005488 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a32      	ldr	r2, [pc, #200]	@ (800548c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00e      	beq.n	80053e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a30      	ldr	r2, [pc, #192]	@ (8005490 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d009      	beq.n	80053e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a2f      	ldr	r2, [pc, #188]	@ (8005494 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d004      	beq.n	80053e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005498 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d101      	bne.n	80053ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80053ea:	2300      	movs	r3, #0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01a      	beq.n	8005426 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	3b08      	subs	r3, #8
 80053f8:	4a28      	ldr	r2, [pc, #160]	@ (800549c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	091b      	lsrs	r3, r3, #4
 8005400:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4b26      	ldr	r3, [pc, #152]	@ (80054a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	461a      	mov	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a24      	ldr	r2, [pc, #144]	@ (80054a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005414:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f003 031f 	and.w	r3, r3, #31
 800541c:	2201      	movs	r2, #1
 800541e:	409a      	lsls	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005424:	e024      	b.n	8005470 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	3b10      	subs	r3, #16
 800542e:	4a1e      	ldr	r2, [pc, #120]	@ (80054a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005430:	fba2 2303 	umull	r2, r3, r2, r3
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4a1c      	ldr	r2, [pc, #112]	@ (80054ac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d806      	bhi.n	800544e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4a1b      	ldr	r2, [pc, #108]	@ (80054b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d902      	bls.n	800544e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3308      	adds	r3, #8
 800544c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4b18      	ldr	r3, [pc, #96]	@ (80054b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	461a      	mov	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a16      	ldr	r2, [pc, #88]	@ (80054b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005460:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	2201      	movs	r2, #1
 800546a:	409a      	lsls	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	58025408 	.word	0x58025408
 8005480:	5802541c 	.word	0x5802541c
 8005484:	58025430 	.word	0x58025430
 8005488:	58025444 	.word	0x58025444
 800548c:	58025458 	.word	0x58025458
 8005490:	5802546c 	.word	0x5802546c
 8005494:	58025480 	.word	0x58025480
 8005498:	58025494 	.word	0x58025494
 800549c:	cccccccd 	.word	0xcccccccd
 80054a0:	16009600 	.word	0x16009600
 80054a4:	58025880 	.word	0x58025880
 80054a8:	aaaaaaab 	.word	0xaaaaaaab
 80054ac:	400204b8 	.word	0x400204b8
 80054b0:	4002040f 	.word	0x4002040f
 80054b4:	10008200 	.word	0x10008200
 80054b8:	40020880 	.word	0x40020880

080054bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d04a      	beq.n	8005568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d847      	bhi.n	8005568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a25      	ldr	r2, [pc, #148]	@ (8005574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d022      	beq.n	8005528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a24      	ldr	r2, [pc, #144]	@ (8005578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d01d      	beq.n	8005528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a22      	ldr	r2, [pc, #136]	@ (800557c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d018      	beq.n	8005528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a21      	ldr	r2, [pc, #132]	@ (8005580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d013      	beq.n	8005528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1f      	ldr	r2, [pc, #124]	@ (8005584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00e      	beq.n	8005528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1e      	ldr	r2, [pc, #120]	@ (8005588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d009      	beq.n	8005528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1c      	ldr	r2, [pc, #112]	@ (800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d004      	beq.n	8005528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1b      	ldr	r2, [pc, #108]	@ (8005590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d101      	bne.n	800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005528:	2301      	movs	r3, #1
 800552a:	e000      	b.n	800552e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800552c:	2300      	movs	r3, #0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4b17      	ldr	r3, [pc, #92]	@ (8005594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005536:	4413      	add	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	461a      	mov	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a15      	ldr	r2, [pc, #84]	@ (8005598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005544:	671a      	str	r2, [r3, #112]	@ 0x70
 8005546:	e009      	b.n	800555c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	4b14      	ldr	r3, [pc, #80]	@ (800559c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	461a      	mov	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a11      	ldr	r2, [pc, #68]	@ (80055a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800555a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3b01      	subs	r3, #1
 8005560:	2201      	movs	r2, #1
 8005562:	409a      	lsls	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	58025408 	.word	0x58025408
 8005578:	5802541c 	.word	0x5802541c
 800557c:	58025430 	.word	0x58025430
 8005580:	58025444 	.word	0x58025444
 8005584:	58025458 	.word	0x58025458
 8005588:	5802546c 	.word	0x5802546c
 800558c:	58025480 	.word	0x58025480
 8005590:	58025494 	.word	0x58025494
 8005594:	1600963f 	.word	0x1600963f
 8005598:	58025940 	.word	0x58025940
 800559c:	1000823f 	.word	0x1000823f
 80055a0:	40020940 	.word	0x40020940

080055a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b089      	sub	sp, #36	@ 0x24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80055b2:	4b86      	ldr	r3, [pc, #536]	@ (80057cc <HAL_GPIO_Init+0x228>)
 80055b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055b6:	e18c      	b.n	80058d2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	2101      	movs	r1, #1
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	fa01 f303 	lsl.w	r3, r1, r3
 80055c4:	4013      	ands	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 817e 	beq.w	80058cc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d005      	beq.n	80055e8 <HAL_GPIO_Init+0x44>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d130      	bne.n	800564a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	2203      	movs	r2, #3
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	43db      	mvns	r3, r3
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	4013      	ands	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4313      	orrs	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800561e:	2201      	movs	r2, #1
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	43db      	mvns	r3, r3
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	4013      	ands	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	091b      	lsrs	r3, r3, #4
 8005634:	f003 0201 	and.w	r2, r3, #1
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	fa02 f303 	lsl.w	r3, r2, r3
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	4313      	orrs	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	2b03      	cmp	r3, #3
 8005654:	d017      	beq.n	8005686 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	2203      	movs	r2, #3
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	43db      	mvns	r3, r3
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	4013      	ands	r3, r2
 800566c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	4313      	orrs	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d123      	bne.n	80056da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	08da      	lsrs	r2, r3, #3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3208      	adds	r2, #8
 800569a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800569e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	220f      	movs	r2, #15
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	43db      	mvns	r3, r3
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	4013      	ands	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	691a      	ldr	r2, [r3, #16]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	08da      	lsrs	r2, r3, #3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3208      	adds	r2, #8
 80056d4:	69b9      	ldr	r1, [r7, #24]
 80056d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	2203      	movs	r2, #3
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	43db      	mvns	r3, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4013      	ands	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 0203 	and.w	r2, r3, #3
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	4313      	orrs	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 80d8 	beq.w	80058cc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800571c:	4b2c      	ldr	r3, [pc, #176]	@ (80057d0 <HAL_GPIO_Init+0x22c>)
 800571e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005722:	4a2b      	ldr	r2, [pc, #172]	@ (80057d0 <HAL_GPIO_Init+0x22c>)
 8005724:	f043 0302 	orr.w	r3, r3, #2
 8005728:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800572c:	4b28      	ldr	r3, [pc, #160]	@ (80057d0 <HAL_GPIO_Init+0x22c>)
 800572e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800573a:	4a26      	ldr	r2, [pc, #152]	@ (80057d4 <HAL_GPIO_Init+0x230>)
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	089b      	lsrs	r3, r3, #2
 8005740:	3302      	adds	r3, #2
 8005742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	220f      	movs	r2, #15
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	43db      	mvns	r3, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4013      	ands	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a1d      	ldr	r2, [pc, #116]	@ (80057d8 <HAL_GPIO_Init+0x234>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d04a      	beq.n	80057fc <HAL_GPIO_Init+0x258>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a1c      	ldr	r2, [pc, #112]	@ (80057dc <HAL_GPIO_Init+0x238>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d02b      	beq.n	80057c6 <HAL_GPIO_Init+0x222>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a1b      	ldr	r2, [pc, #108]	@ (80057e0 <HAL_GPIO_Init+0x23c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d025      	beq.n	80057c2 <HAL_GPIO_Init+0x21e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a1a      	ldr	r2, [pc, #104]	@ (80057e4 <HAL_GPIO_Init+0x240>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d01f      	beq.n	80057be <HAL_GPIO_Init+0x21a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a19      	ldr	r2, [pc, #100]	@ (80057e8 <HAL_GPIO_Init+0x244>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d019      	beq.n	80057ba <HAL_GPIO_Init+0x216>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a18      	ldr	r2, [pc, #96]	@ (80057ec <HAL_GPIO_Init+0x248>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <HAL_GPIO_Init+0x212>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a17      	ldr	r2, [pc, #92]	@ (80057f0 <HAL_GPIO_Init+0x24c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00d      	beq.n	80057b2 <HAL_GPIO_Init+0x20e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a16      	ldr	r2, [pc, #88]	@ (80057f4 <HAL_GPIO_Init+0x250>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d007      	beq.n	80057ae <HAL_GPIO_Init+0x20a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a15      	ldr	r2, [pc, #84]	@ (80057f8 <HAL_GPIO_Init+0x254>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d101      	bne.n	80057aa <HAL_GPIO_Init+0x206>
 80057a6:	2309      	movs	r3, #9
 80057a8:	e029      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057aa:	230a      	movs	r3, #10
 80057ac:	e027      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057ae:	2307      	movs	r3, #7
 80057b0:	e025      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057b2:	2306      	movs	r3, #6
 80057b4:	e023      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057b6:	2305      	movs	r3, #5
 80057b8:	e021      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057ba:	2304      	movs	r3, #4
 80057bc:	e01f      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057be:	2303      	movs	r3, #3
 80057c0:	e01d      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e01b      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e019      	b.n	80057fe <HAL_GPIO_Init+0x25a>
 80057ca:	bf00      	nop
 80057cc:	58000080 	.word	0x58000080
 80057d0:	58024400 	.word	0x58024400
 80057d4:	58000400 	.word	0x58000400
 80057d8:	58020000 	.word	0x58020000
 80057dc:	58020400 	.word	0x58020400
 80057e0:	58020800 	.word	0x58020800
 80057e4:	58020c00 	.word	0x58020c00
 80057e8:	58021000 	.word	0x58021000
 80057ec:	58021400 	.word	0x58021400
 80057f0:	58021800 	.word	0x58021800
 80057f4:	58021c00 	.word	0x58021c00
 80057f8:	58022400 	.word	0x58022400
 80057fc:	2300      	movs	r3, #0
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	f002 0203 	and.w	r2, r2, #3
 8005804:	0092      	lsls	r2, r2, #2
 8005806:	4093      	lsls	r3, r2
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4313      	orrs	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800580e:	4938      	ldr	r1, [pc, #224]	@ (80058f0 <HAL_GPIO_Init+0x34c>)
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	089b      	lsrs	r3, r3, #2
 8005814:	3302      	adds	r3, #2
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800581c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	43db      	mvns	r3, r3
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	4013      	ands	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005842:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800584a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005870:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	43db      	mvns	r3, r3
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	4013      	ands	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	43db      	mvns	r3, r3
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	4013      	ands	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	3301      	adds	r3, #1
 80058d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f47f ae6b 	bne.w	80055b8 <HAL_GPIO_Init+0x14>
  }
}
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	3724      	adds	r7, #36	@ 0x24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	58000400 	.word	0x58000400

080058f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80058fc:	4b19      	ldr	r3, [pc, #100]	@ (8005964 <HAL_PWREx_ConfigSupply+0x70>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b04      	cmp	r3, #4
 8005906:	d00a      	beq.n	800591e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005908:	4b16      	ldr	r3, [pc, #88]	@ (8005964 <HAL_PWREx_ConfigSupply+0x70>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	429a      	cmp	r2, r3
 8005914:	d001      	beq.n	800591a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e01f      	b.n	800595a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	e01d      	b.n	800595a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800591e:	4b11      	ldr	r3, [pc, #68]	@ (8005964 <HAL_PWREx_ConfigSupply+0x70>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f023 0207 	bic.w	r2, r3, #7
 8005926:	490f      	ldr	r1, [pc, #60]	@ (8005964 <HAL_PWREx_ConfigSupply+0x70>)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4313      	orrs	r3, r2
 800592c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800592e:	f7fb fc3b 	bl	80011a8 <HAL_GetTick>
 8005932:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005934:	e009      	b.n	800594a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005936:	f7fb fc37 	bl	80011a8 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005944:	d901      	bls.n	800594a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e007      	b.n	800595a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800594a:	4b06      	ldr	r3, [pc, #24]	@ (8005964 <HAL_PWREx_ConfigSupply+0x70>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005956:	d1ee      	bne.n	8005936 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	58024800 	.word	0x58024800

08005968 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08c      	sub	sp, #48	@ 0x30
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e3c8      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 8087 	beq.w	8005a96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005988:	4b88      	ldr	r3, [pc, #544]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005990:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005992:	4b86      	ldr	r3, [pc, #536]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005996:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599a:	2b10      	cmp	r3, #16
 800599c:	d007      	beq.n	80059ae <HAL_RCC_OscConfig+0x46>
 800599e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a0:	2b18      	cmp	r3, #24
 80059a2:	d110      	bne.n	80059c6 <HAL_RCC_OscConfig+0x5e>
 80059a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d10b      	bne.n	80059c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ae:	4b7f      	ldr	r3, [pc, #508]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d06c      	beq.n	8005a94 <HAL_RCC_OscConfig+0x12c>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d168      	bne.n	8005a94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e3a2      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059ce:	d106      	bne.n	80059de <HAL_RCC_OscConfig+0x76>
 80059d0:	4b76      	ldr	r3, [pc, #472]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a75      	ldr	r2, [pc, #468]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 80059d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	e02e      	b.n	8005a3c <HAL_RCC_OscConfig+0xd4>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10c      	bne.n	8005a00 <HAL_RCC_OscConfig+0x98>
 80059e6:	4b71      	ldr	r3, [pc, #452]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a70      	ldr	r2, [pc, #448]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 80059ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	4b6e      	ldr	r3, [pc, #440]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a6d      	ldr	r2, [pc, #436]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 80059f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	e01d      	b.n	8005a3c <HAL_RCC_OscConfig+0xd4>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a08:	d10c      	bne.n	8005a24 <HAL_RCC_OscConfig+0xbc>
 8005a0a:	4b68      	ldr	r3, [pc, #416]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a67      	ldr	r2, [pc, #412]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	4b65      	ldr	r3, [pc, #404]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a64      	ldr	r2, [pc, #400]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	e00b      	b.n	8005a3c <HAL_RCC_OscConfig+0xd4>
 8005a24:	4b61      	ldr	r3, [pc, #388]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a60      	ldr	r2, [pc, #384]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	4b5e      	ldr	r3, [pc, #376]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a5d      	ldr	r2, [pc, #372]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d013      	beq.n	8005a6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a44:	f7fb fbb0 	bl	80011a8 <HAL_GetTick>
 8005a48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a4c:	f7fb fbac 	bl	80011a8 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b64      	cmp	r3, #100	@ 0x64
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e356      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a5e:	4b53      	ldr	r3, [pc, #332]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0f0      	beq.n	8005a4c <HAL_RCC_OscConfig+0xe4>
 8005a6a:	e014      	b.n	8005a96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6c:	f7fb fb9c 	bl	80011a8 <HAL_GetTick>
 8005a70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a74:	f7fb fb98 	bl	80011a8 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b64      	cmp	r3, #100	@ 0x64
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e342      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a86:	4b49      	ldr	r3, [pc, #292]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <HAL_RCC_OscConfig+0x10c>
 8005a92:	e000      	b.n	8005a96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 808c 	beq.w	8005bbc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aa4:	4b41      	ldr	r3, [pc, #260]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005aae:	4b3f      	ldr	r3, [pc, #252]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <HAL_RCC_OscConfig+0x162>
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	2b18      	cmp	r3, #24
 8005abe:	d137      	bne.n	8005b30 <HAL_RCC_OscConfig+0x1c8>
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d132      	bne.n	8005b30 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aca:	4b38      	ldr	r3, [pc, #224]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d005      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x17a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e314      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ae2:	4b32      	ldr	r3, [pc, #200]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f023 0219 	bic.w	r2, r3, #25
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	492f      	ldr	r1, [pc, #188]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af4:	f7fb fb58 	bl	80011a8 <HAL_GetTick>
 8005af8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005afc:	f7fb fb54 	bl	80011a8 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e2fe      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b0e:	4b27      	ldr	r3, [pc, #156]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b1a:	4b24      	ldr	r3, [pc, #144]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	061b      	lsls	r3, r3, #24
 8005b28:	4920      	ldr	r1, [pc, #128]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b2e:	e045      	b.n	8005bbc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d026      	beq.n	8005b86 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b38:	4b1c      	ldr	r3, [pc, #112]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f023 0219 	bic.w	r2, r3, #25
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4919      	ldr	r1, [pc, #100]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4a:	f7fb fb2d 	bl	80011a8 <HAL_GetTick>
 8005b4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b50:	e008      	b.n	8005b64 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b52:	f7fb fb29 	bl	80011a8 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e2d3      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b64:	4b11      	ldr	r3, [pc, #68]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0f0      	beq.n	8005b52 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b70:	4b0e      	ldr	r3, [pc, #56]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	061b      	lsls	r3, r3, #24
 8005b7e:	490b      	ldr	r1, [pc, #44]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	604b      	str	r3, [r1, #4]
 8005b84:	e01a      	b.n	8005bbc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b86:	4b09      	ldr	r3, [pc, #36]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a08      	ldr	r2, [pc, #32]	@ (8005bac <HAL_RCC_OscConfig+0x244>)
 8005b8c:	f023 0301 	bic.w	r3, r3, #1
 8005b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b92:	f7fb fb09 	bl	80011a8 <HAL_GetTick>
 8005b96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b98:	e00a      	b.n	8005bb0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9a:	f7fb fb05 	bl	80011a8 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d903      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e2af      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
 8005bac:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bb0:	4b96      	ldr	r3, [pc, #600]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1ee      	bne.n	8005b9a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d06a      	beq.n	8005c9e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bc8:	4b90      	ldr	r3, [pc, #576]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bd0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bd2:	4b8e      	ldr	r3, [pc, #568]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d007      	beq.n	8005bee <HAL_RCC_OscConfig+0x286>
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b18      	cmp	r3, #24
 8005be2:	d11b      	bne.n	8005c1c <HAL_RCC_OscConfig+0x2b4>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d116      	bne.n	8005c1c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bee:	4b87      	ldr	r3, [pc, #540]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d005      	beq.n	8005c06 <HAL_RCC_OscConfig+0x29e>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	2b80      	cmp	r3, #128	@ 0x80
 8005c00:	d001      	beq.n	8005c06 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e282      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c06:	4b81      	ldr	r3, [pc, #516]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	061b      	lsls	r3, r3, #24
 8005c14:	497d      	ldr	r1, [pc, #500]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c1a:	e040      	b.n	8005c9e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d023      	beq.n	8005c6c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c24:	4b79      	ldr	r3, [pc, #484]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a78      	ldr	r2, [pc, #480]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c30:	f7fb faba 	bl	80011a8 <HAL_GetTick>
 8005c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005c38:	f7fb fab6 	bl	80011a8 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e260      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c4a:	4b70      	ldr	r3, [pc, #448]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f0      	beq.n	8005c38 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c56:	4b6d      	ldr	r3, [pc, #436]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	061b      	lsls	r3, r3, #24
 8005c64:	4969      	ldr	r1, [pc, #420]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60cb      	str	r3, [r1, #12]
 8005c6a:	e018      	b.n	8005c9e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005c6c:	4b67      	ldr	r3, [pc, #412]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a66      	ldr	r2, [pc, #408]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005c72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c78:	f7fb fa96 	bl	80011a8 <HAL_GetTick>
 8005c7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005c80:	f7fb fa92 	bl	80011a8 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e23c      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c92:	4b5e      	ldr	r3, [pc, #376]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f0      	bne.n	8005c80 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d036      	beq.n	8005d18 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d019      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cb2:	4b56      	ldr	r3, [pc, #344]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cb6:	4a55      	ldr	r2, [pc, #340]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005cb8:	f043 0301 	orr.w	r3, r3, #1
 8005cbc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cbe:	f7fb fa73 	bl	80011a8 <HAL_GetTick>
 8005cc2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005cc4:	e008      	b.n	8005cd8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cc6:	f7fb fa6f 	bl	80011a8 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e219      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005cd8:	4b4c      	ldr	r3, [pc, #304]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0f0      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x35e>
 8005ce4:	e018      	b.n	8005d18 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ce6:	4b49      	ldr	r3, [pc, #292]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cea:	4a48      	ldr	r2, [pc, #288]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005cec:	f023 0301 	bic.w	r3, r3, #1
 8005cf0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf2:	f7fb fa59 	bl	80011a8 <HAL_GetTick>
 8005cf6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005cf8:	e008      	b.n	8005d0c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cfa:	f7fb fa55 	bl	80011a8 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e1ff      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d0c:	4b3f      	ldr	r3, [pc, #252]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f0      	bne.n	8005cfa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d036      	beq.n	8005d92 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d019      	beq.n	8005d60 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d2c:	4b37      	ldr	r3, [pc, #220]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a36      	ldr	r2, [pc, #216]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005d32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005d36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d38:	f7fb fa36 	bl	80011a8 <HAL_GetTick>
 8005d3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d40:	f7fb fa32 	bl	80011a8 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e1dc      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d52:	4b2e      	ldr	r3, [pc, #184]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0f0      	beq.n	8005d40 <HAL_RCC_OscConfig+0x3d8>
 8005d5e:	e018      	b.n	8005d92 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d60:	4b2a      	ldr	r3, [pc, #168]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a29      	ldr	r2, [pc, #164]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005d66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d6c:	f7fb fa1c 	bl	80011a8 <HAL_GetTick>
 8005d70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d74:	f7fb fa18 	bl	80011a8 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e1c2      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d86:	4b21      	ldr	r3, [pc, #132]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f0      	bne.n	8005d74 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 8086 	beq.w	8005eac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005da0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e10 <HAL_RCC_OscConfig+0x4a8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1a      	ldr	r2, [pc, #104]	@ (8005e10 <HAL_RCC_OscConfig+0x4a8>)
 8005da6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005daa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dac:	f7fb f9fc 	bl	80011a8 <HAL_GetTick>
 8005db0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005db4:	f7fb f9f8 	bl	80011a8 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b64      	cmp	r3, #100	@ 0x64
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e1a2      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dc6:	4b12      	ldr	r3, [pc, #72]	@ (8005e10 <HAL_RCC_OscConfig+0x4a8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0f0      	beq.n	8005db4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d106      	bne.n	8005de8 <HAL_RCC_OscConfig+0x480>
 8005dda:	4b0c      	ldr	r3, [pc, #48]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dde:	4a0b      	ldr	r2, [pc, #44]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005de0:	f043 0301 	orr.w	r3, r3, #1
 8005de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005de6:	e032      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e6>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d111      	bne.n	8005e14 <HAL_RCC_OscConfig+0x4ac>
 8005df0:	4b06      	ldr	r3, [pc, #24]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df4:	4a05      	ldr	r2, [pc, #20]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dfc:	4b03      	ldr	r3, [pc, #12]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e00:	4a02      	ldr	r2, [pc, #8]	@ (8005e0c <HAL_RCC_OscConfig+0x4a4>)
 8005e02:	f023 0304 	bic.w	r3, r3, #4
 8005e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e08:	e021      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e6>
 8005e0a:	bf00      	nop
 8005e0c:	58024400 	.word	0x58024400
 8005e10:	58024800 	.word	0x58024800
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	2b05      	cmp	r3, #5
 8005e1a:	d10c      	bne.n	8005e36 <HAL_RCC_OscConfig+0x4ce>
 8005e1c:	4b83      	ldr	r3, [pc, #524]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e20:	4a82      	ldr	r2, [pc, #520]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005e22:	f043 0304 	orr.w	r3, r3, #4
 8005e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e28:	4b80      	ldr	r3, [pc, #512]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e2c:	4a7f      	ldr	r2, [pc, #508]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005e2e:	f043 0301 	orr.w	r3, r3, #1
 8005e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e34:	e00b      	b.n	8005e4e <HAL_RCC_OscConfig+0x4e6>
 8005e36:	4b7d      	ldr	r3, [pc, #500]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e3a:	4a7c      	ldr	r2, [pc, #496]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005e3c:	f023 0301 	bic.w	r3, r3, #1
 8005e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e42:	4b7a      	ldr	r3, [pc, #488]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e46:	4a79      	ldr	r2, [pc, #484]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005e48:	f023 0304 	bic.w	r3, r3, #4
 8005e4c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d015      	beq.n	8005e82 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e56:	f7fb f9a7 	bl	80011a8 <HAL_GetTick>
 8005e5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e5c:	e00a      	b.n	8005e74 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e5e:	f7fb f9a3 	bl	80011a8 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e14b      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e74:	4b6d      	ldr	r3, [pc, #436]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0ee      	beq.n	8005e5e <HAL_RCC_OscConfig+0x4f6>
 8005e80:	e014      	b.n	8005eac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e82:	f7fb f991 	bl	80011a8 <HAL_GetTick>
 8005e86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e88:	e00a      	b.n	8005ea0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e8a:	f7fb f98d 	bl	80011a8 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e135      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ea0:	4b62      	ldr	r3, [pc, #392]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1ee      	bne.n	8005e8a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 812a 	beq.w	800610a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ebe:	2b18      	cmp	r3, #24
 8005ec0:	f000 80ba 	beq.w	8006038 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	f040 8095 	bne.w	8005ff8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ece:	4b57      	ldr	r3, [pc, #348]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a56      	ldr	r2, [pc, #344]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005ed4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eda:	f7fb f965 	bl	80011a8 <HAL_GetTick>
 8005ede:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee2:	f7fb f961 	bl	80011a8 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e10b      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1f0      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f00:	4b4a      	ldr	r3, [pc, #296]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005f02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f04:	4b4a      	ldr	r3, [pc, #296]	@ (8006030 <HAL_RCC_OscConfig+0x6c8>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f10:	0112      	lsls	r2, r2, #4
 8005f12:	430a      	orrs	r2, r1
 8005f14:	4945      	ldr	r1, [pc, #276]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	628b      	str	r3, [r1, #40]	@ 0x28
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	025b      	lsls	r3, r3, #9
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f34:	3b01      	subs	r3, #1
 8005f36:	041b      	lsls	r3, r3, #16
 8005f38:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f42:	3b01      	subs	r3, #1
 8005f44:	061b      	lsls	r3, r3, #24
 8005f46:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005f4a:	4938      	ldr	r1, [pc, #224]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005f50:	4b36      	ldr	r3, [pc, #216]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f54:	4a35      	ldr	r2, [pc, #212]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005f56:	f023 0301 	bic.w	r3, r3, #1
 8005f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f5c:	4b33      	ldr	r3, [pc, #204]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005f5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f60:	4b34      	ldr	r3, [pc, #208]	@ (8006034 <HAL_RCC_OscConfig+0x6cc>)
 8005f62:	4013      	ands	r3, r2
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005f68:	00d2      	lsls	r2, r2, #3
 8005f6a:	4930      	ldr	r1, [pc, #192]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005f70:	4b2e      	ldr	r3, [pc, #184]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f74:	f023 020c 	bic.w	r2, r3, #12
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7c:	492b      	ldr	r1, [pc, #172]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005f82:	4b2a      	ldr	r3, [pc, #168]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f86:	f023 0202 	bic.w	r2, r3, #2
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f8e:	4927      	ldr	r1, [pc, #156]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f94:	4b25      	ldr	r3, [pc, #148]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f98:	4a24      	ldr	r2, [pc, #144]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fa0:	4b22      	ldr	r3, [pc, #136]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa4:	4a21      	ldr	r2, [pc, #132]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005fac:	4b1f      	ldr	r3, [pc, #124]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005fb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005fbe:	f043 0301 	orr.w	r3, r3, #1
 8005fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fc4:	4b19      	ldr	r3, [pc, #100]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a18      	ldr	r2, [pc, #96]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd0:	f7fb f8ea 	bl	80011a8 <HAL_GetTick>
 8005fd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fd8:	f7fb f8e6 	bl	80011a8 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e090      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fea:	4b10      	ldr	r3, [pc, #64]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0f0      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x670>
 8005ff6:	e088      	b.n	800610a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8005ffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006004:	f7fb f8d0 	bl	80011a8 <HAL_GetTick>
 8006008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800600c:	f7fb f8cc 	bl	80011a8 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e076      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800601e:	4b03      	ldr	r3, [pc, #12]	@ (800602c <HAL_RCC_OscConfig+0x6c4>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1f0      	bne.n	800600c <HAL_RCC_OscConfig+0x6a4>
 800602a:	e06e      	b.n	800610a <HAL_RCC_OscConfig+0x7a2>
 800602c:	58024400 	.word	0x58024400
 8006030:	fffffc0c 	.word	0xfffffc0c
 8006034:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006038:	4b36      	ldr	r3, [pc, #216]	@ (8006114 <HAL_RCC_OscConfig+0x7ac>)
 800603a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800603e:	4b35      	ldr	r3, [pc, #212]	@ (8006114 <HAL_RCC_OscConfig+0x7ac>)
 8006040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006042:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006048:	2b01      	cmp	r3, #1
 800604a:	d031      	beq.n	80060b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f003 0203 	and.w	r2, r3, #3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006056:	429a      	cmp	r2, r3
 8006058:	d12a      	bne.n	80060b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	091b      	lsrs	r3, r3, #4
 800605e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006066:	429a      	cmp	r2, r3
 8006068:	d122      	bne.n	80060b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006074:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006076:	429a      	cmp	r2, r3
 8006078:	d11a      	bne.n	80060b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	0a5b      	lsrs	r3, r3, #9
 800607e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006086:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006088:	429a      	cmp	r2, r3
 800608a:	d111      	bne.n	80060b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	0c1b      	lsrs	r3, r3, #16
 8006090:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006098:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800609a:	429a      	cmp	r2, r3
 800609c:	d108      	bne.n	80060b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	0e1b      	lsrs	r3, r3, #24
 80060a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d001      	beq.n	80060b4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e02b      	b.n	800610c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80060b4:	4b17      	ldr	r3, [pc, #92]	@ (8006114 <HAL_RCC_OscConfig+0x7ac>)
 80060b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060b8:	08db      	lsrs	r3, r3, #3
 80060ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d01f      	beq.n	800610a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80060ca:	4b12      	ldr	r3, [pc, #72]	@ (8006114 <HAL_RCC_OscConfig+0x7ac>)
 80060cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ce:	4a11      	ldr	r2, [pc, #68]	@ (8006114 <HAL_RCC_OscConfig+0x7ac>)
 80060d0:	f023 0301 	bic.w	r3, r3, #1
 80060d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060d6:	f7fb f867 	bl	80011a8 <HAL_GetTick>
 80060da:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80060dc:	bf00      	nop
 80060de:	f7fb f863 	bl	80011a8 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d0f9      	beq.n	80060de <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80060ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006114 <HAL_RCC_OscConfig+0x7ac>)
 80060ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006118 <HAL_RCC_OscConfig+0x7b0>)
 80060f0:	4013      	ands	r3, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80060f6:	00d2      	lsls	r2, r2, #3
 80060f8:	4906      	ldr	r1, [pc, #24]	@ (8006114 <HAL_RCC_OscConfig+0x7ac>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80060fe:	4b05      	ldr	r3, [pc, #20]	@ (8006114 <HAL_RCC_OscConfig+0x7ac>)
 8006100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006102:	4a04      	ldr	r2, [pc, #16]	@ (8006114 <HAL_RCC_OscConfig+0x7ac>)
 8006104:	f043 0301 	orr.w	r3, r3, #1
 8006108:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3730      	adds	r7, #48	@ 0x30
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	58024400 	.word	0x58024400
 8006118:	ffff0007 	.word	0xffff0007

0800611c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e19c      	b.n	800646a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006130:	4b8a      	ldr	r3, [pc, #552]	@ (800635c <HAL_RCC_ClockConfig+0x240>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 030f 	and.w	r3, r3, #15
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	429a      	cmp	r2, r3
 800613c:	d910      	bls.n	8006160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800613e:	4b87      	ldr	r3, [pc, #540]	@ (800635c <HAL_RCC_ClockConfig+0x240>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f023 020f 	bic.w	r2, r3, #15
 8006146:	4985      	ldr	r1, [pc, #532]	@ (800635c <HAL_RCC_ClockConfig+0x240>)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	4313      	orrs	r3, r2
 800614c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800614e:	4b83      	ldr	r3, [pc, #524]	@ (800635c <HAL_RCC_ClockConfig+0x240>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 030f 	and.w	r3, r3, #15
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	429a      	cmp	r2, r3
 800615a:	d001      	beq.n	8006160 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e184      	b.n	800646a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b00      	cmp	r3, #0
 800616a:	d010      	beq.n	800618e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	4b7b      	ldr	r3, [pc, #492]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006178:	429a      	cmp	r2, r3
 800617a:	d908      	bls.n	800618e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800617c:	4b78      	ldr	r3, [pc, #480]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	4975      	ldr	r1, [pc, #468]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 800618a:	4313      	orrs	r3, r2
 800618c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b00      	cmp	r3, #0
 8006198:	d010      	beq.n	80061bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695a      	ldr	r2, [r3, #20]
 800619e:	4b70      	ldr	r3, [pc, #448]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d908      	bls.n	80061bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80061aa:	4b6d      	ldr	r3, [pc, #436]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	496a      	ldr	r1, [pc, #424]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0310 	and.w	r3, r3, #16
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d010      	beq.n	80061ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	699a      	ldr	r2, [r3, #24]
 80061cc:	4b64      	ldr	r3, [pc, #400]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d908      	bls.n	80061ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80061d8:	4b61      	ldr	r3, [pc, #388]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	495e      	ldr	r1, [pc, #376]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d010      	beq.n	8006218 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69da      	ldr	r2, [r3, #28]
 80061fa:	4b59      	ldr	r3, [pc, #356]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006202:	429a      	cmp	r2, r3
 8006204:	d908      	bls.n	8006218 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006206:	4b56      	ldr	r3, [pc, #344]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	4953      	ldr	r1, [pc, #332]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 8006214:	4313      	orrs	r3, r2
 8006216:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d010      	beq.n	8006246 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	4b4d      	ldr	r3, [pc, #308]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	429a      	cmp	r2, r3
 8006232:	d908      	bls.n	8006246 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006234:	4b4a      	ldr	r3, [pc, #296]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	f023 020f 	bic.w	r2, r3, #15
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	4947      	ldr	r1, [pc, #284]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 8006242:	4313      	orrs	r3, r2
 8006244:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d055      	beq.n	80062fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006252:	4b43      	ldr	r3, [pc, #268]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	4940      	ldr	r1, [pc, #256]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 8006260:	4313      	orrs	r3, r2
 8006262:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d107      	bne.n	800627c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800626c:	4b3c      	ldr	r3, [pc, #240]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d121      	bne.n	80062bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e0f6      	b.n	800646a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2b03      	cmp	r3, #3
 8006282:	d107      	bne.n	8006294 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006284:	4b36      	ldr	r3, [pc, #216]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d115      	bne.n	80062bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e0ea      	b.n	800646a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d107      	bne.n	80062ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800629c:	4b30      	ldr	r3, [pc, #192]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d109      	bne.n	80062bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e0de      	b.n	800646a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062ac:	4b2c      	ldr	r3, [pc, #176]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e0d6      	b.n	800646a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062bc:	4b28      	ldr	r3, [pc, #160]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f023 0207 	bic.w	r2, r3, #7
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	4925      	ldr	r1, [pc, #148]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ce:	f7fa ff6b 	bl	80011a8 <HAL_GetTick>
 80062d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062d4:	e00a      	b.n	80062ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062d6:	f7fa ff67 	bl	80011a8 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e0be      	b.n	800646a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d1eb      	bne.n	80062d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d010      	beq.n	800632c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	4b14      	ldr	r3, [pc, #80]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	429a      	cmp	r2, r3
 8006318:	d208      	bcs.n	800632c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800631a:	4b11      	ldr	r3, [pc, #68]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	f023 020f 	bic.w	r2, r3, #15
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	490e      	ldr	r1, [pc, #56]	@ (8006360 <HAL_RCC_ClockConfig+0x244>)
 8006328:	4313      	orrs	r3, r2
 800632a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800632c:	4b0b      	ldr	r3, [pc, #44]	@ (800635c <HAL_RCC_ClockConfig+0x240>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d214      	bcs.n	8006364 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633a:	4b08      	ldr	r3, [pc, #32]	@ (800635c <HAL_RCC_ClockConfig+0x240>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f023 020f 	bic.w	r2, r3, #15
 8006342:	4906      	ldr	r1, [pc, #24]	@ (800635c <HAL_RCC_ClockConfig+0x240>)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	4313      	orrs	r3, r2
 8006348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800634a:	4b04      	ldr	r3, [pc, #16]	@ (800635c <HAL_RCC_ClockConfig+0x240>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d005      	beq.n	8006364 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e086      	b.n	800646a <HAL_RCC_ClockConfig+0x34e>
 800635c:	52002000 	.word	0x52002000
 8006360:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b00      	cmp	r3, #0
 800636e:	d010      	beq.n	8006392 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	4b3f      	ldr	r3, [pc, #252]	@ (8006474 <HAL_RCC_ClockConfig+0x358>)
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800637c:	429a      	cmp	r2, r3
 800637e:	d208      	bcs.n	8006392 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006380:	4b3c      	ldr	r3, [pc, #240]	@ (8006474 <HAL_RCC_ClockConfig+0x358>)
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	4939      	ldr	r1, [pc, #228]	@ (8006474 <HAL_RCC_ClockConfig+0x358>)
 800638e:	4313      	orrs	r3, r2
 8006390:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d010      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695a      	ldr	r2, [r3, #20]
 80063a2:	4b34      	ldr	r3, [pc, #208]	@ (8006474 <HAL_RCC_ClockConfig+0x358>)
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d208      	bcs.n	80063c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063ae:	4b31      	ldr	r3, [pc, #196]	@ (8006474 <HAL_RCC_ClockConfig+0x358>)
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	492e      	ldr	r1, [pc, #184]	@ (8006474 <HAL_RCC_ClockConfig+0x358>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d010      	beq.n	80063ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	699a      	ldr	r2, [r3, #24]
 80063d0:	4b28      	ldr	r3, [pc, #160]	@ (8006474 <HAL_RCC_ClockConfig+0x358>)
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063d8:	429a      	cmp	r2, r3
 80063da:	d208      	bcs.n	80063ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063dc:	4b25      	ldr	r3, [pc, #148]	@ (8006474 <HAL_RCC_ClockConfig+0x358>)
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	4922      	ldr	r1, [pc, #136]	@ (8006474 <HAL_RCC_ClockConfig+0x358>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d010      	beq.n	800641c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	69da      	ldr	r2, [r3, #28]
 80063fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006474 <HAL_RCC_ClockConfig+0x358>)
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006406:	429a      	cmp	r2, r3
 8006408:	d208      	bcs.n	800641c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800640a:	4b1a      	ldr	r3, [pc, #104]	@ (8006474 <HAL_RCC_ClockConfig+0x358>)
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	4917      	ldr	r1, [pc, #92]	@ (8006474 <HAL_RCC_ClockConfig+0x358>)
 8006418:	4313      	orrs	r3, r2
 800641a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800641c:	f000 f834 	bl	8006488 <HAL_RCC_GetSysClockFreq>
 8006420:	4602      	mov	r2, r0
 8006422:	4b14      	ldr	r3, [pc, #80]	@ (8006474 <HAL_RCC_ClockConfig+0x358>)
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	0a1b      	lsrs	r3, r3, #8
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	4912      	ldr	r1, [pc, #72]	@ (8006478 <HAL_RCC_ClockConfig+0x35c>)
 800642e:	5ccb      	ldrb	r3, [r1, r3]
 8006430:	f003 031f 	and.w	r3, r3, #31
 8006434:	fa22 f303 	lsr.w	r3, r2, r3
 8006438:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800643a:	4b0e      	ldr	r3, [pc, #56]	@ (8006474 <HAL_RCC_ClockConfig+0x358>)
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	4a0d      	ldr	r2, [pc, #52]	@ (8006478 <HAL_RCC_ClockConfig+0x35c>)
 8006444:	5cd3      	ldrb	r3, [r2, r3]
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	fa22 f303 	lsr.w	r3, r2, r3
 8006450:	4a0a      	ldr	r2, [pc, #40]	@ (800647c <HAL_RCC_ClockConfig+0x360>)
 8006452:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006454:	4a0a      	ldr	r2, [pc, #40]	@ (8006480 <HAL_RCC_ClockConfig+0x364>)
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800645a:	4b0a      	ldr	r3, [pc, #40]	@ (8006484 <HAL_RCC_ClockConfig+0x368>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f7fa fe58 	bl	8001114 <HAL_InitTick>
 8006464:	4603      	mov	r3, r0
 8006466:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006468:	7bfb      	ldrb	r3, [r7, #15]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	58024400 	.word	0x58024400
 8006478:	08009db8 	.word	0x08009db8
 800647c:	24000004 	.word	0x24000004
 8006480:	24000000 	.word	0x24000000
 8006484:	24000008 	.word	0x24000008

08006488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006488:	b480      	push	{r7}
 800648a:	b089      	sub	sp, #36	@ 0x24
 800648c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800648e:	4bb3      	ldr	r3, [pc, #716]	@ (800675c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006496:	2b18      	cmp	r3, #24
 8006498:	f200 8155 	bhi.w	8006746 <HAL_RCC_GetSysClockFreq+0x2be>
 800649c:	a201      	add	r2, pc, #4	@ (adr r2, 80064a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	08006509 	.word	0x08006509
 80064a8:	08006747 	.word	0x08006747
 80064ac:	08006747 	.word	0x08006747
 80064b0:	08006747 	.word	0x08006747
 80064b4:	08006747 	.word	0x08006747
 80064b8:	08006747 	.word	0x08006747
 80064bc:	08006747 	.word	0x08006747
 80064c0:	08006747 	.word	0x08006747
 80064c4:	0800652f 	.word	0x0800652f
 80064c8:	08006747 	.word	0x08006747
 80064cc:	08006747 	.word	0x08006747
 80064d0:	08006747 	.word	0x08006747
 80064d4:	08006747 	.word	0x08006747
 80064d8:	08006747 	.word	0x08006747
 80064dc:	08006747 	.word	0x08006747
 80064e0:	08006747 	.word	0x08006747
 80064e4:	08006535 	.word	0x08006535
 80064e8:	08006747 	.word	0x08006747
 80064ec:	08006747 	.word	0x08006747
 80064f0:	08006747 	.word	0x08006747
 80064f4:	08006747 	.word	0x08006747
 80064f8:	08006747 	.word	0x08006747
 80064fc:	08006747 	.word	0x08006747
 8006500:	08006747 	.word	0x08006747
 8006504:	0800653b 	.word	0x0800653b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006508:	4b94      	ldr	r3, [pc, #592]	@ (800675c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b00      	cmp	r3, #0
 8006512:	d009      	beq.n	8006528 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006514:	4b91      	ldr	r3, [pc, #580]	@ (800675c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	08db      	lsrs	r3, r3, #3
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	4a90      	ldr	r2, [pc, #576]	@ (8006760 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006520:	fa22 f303 	lsr.w	r3, r2, r3
 8006524:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006526:	e111      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006528:	4b8d      	ldr	r3, [pc, #564]	@ (8006760 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800652a:	61bb      	str	r3, [r7, #24]
      break;
 800652c:	e10e      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800652e:	4b8d      	ldr	r3, [pc, #564]	@ (8006764 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006530:	61bb      	str	r3, [r7, #24]
      break;
 8006532:	e10b      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006534:	4b8c      	ldr	r3, [pc, #560]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006536:	61bb      	str	r3, [r7, #24]
      break;
 8006538:	e108      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800653a:	4b88      	ldr	r3, [pc, #544]	@ (800675c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800653c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006544:	4b85      	ldr	r3, [pc, #532]	@ (800675c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006548:	091b      	lsrs	r3, r3, #4
 800654a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800654e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006550:	4b82      	ldr	r3, [pc, #520]	@ (800675c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800655a:	4b80      	ldr	r3, [pc, #512]	@ (800675c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800655c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800655e:	08db      	lsrs	r3, r3, #3
 8006560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	fb02 f303 	mul.w	r3, r2, r3
 800656a:	ee07 3a90 	vmov	s15, r3
 800656e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006572:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 80e1 	beq.w	8006740 <HAL_RCC_GetSysClockFreq+0x2b8>
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b02      	cmp	r3, #2
 8006582:	f000 8083 	beq.w	800668c <HAL_RCC_GetSysClockFreq+0x204>
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b02      	cmp	r3, #2
 800658a:	f200 80a1 	bhi.w	80066d0 <HAL_RCC_GetSysClockFreq+0x248>
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d003      	beq.n	800659c <HAL_RCC_GetSysClockFreq+0x114>
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d056      	beq.n	8006648 <HAL_RCC_GetSysClockFreq+0x1c0>
 800659a:	e099      	b.n	80066d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800659c:	4b6f      	ldr	r3, [pc, #444]	@ (800675c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0320 	and.w	r3, r3, #32
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d02d      	beq.n	8006604 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065a8:	4b6c      	ldr	r3, [pc, #432]	@ (800675c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	08db      	lsrs	r3, r3, #3
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	4a6b      	ldr	r2, [pc, #428]	@ (8006760 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065b4:	fa22 f303 	lsr.w	r3, r2, r3
 80065b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	ee07 3a90 	vmov	s15, r3
 80065c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065d2:	4b62      	ldr	r3, [pc, #392]	@ (800675c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80065e6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800676c <HAL_RCC_GetSysClockFreq+0x2e4>
 80065ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006602:	e087      	b.n	8006714 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	ee07 3a90 	vmov	s15, r3
 800660a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800660e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006770 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006616:	4b51      	ldr	r3, [pc, #324]	@ (800675c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006626:	ed97 6a02 	vldr	s12, [r7, #8]
 800662a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800676c <HAL_RCC_GetSysClockFreq+0x2e4>
 800662e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800663a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800663e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006642:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006646:	e065      	b.n	8006714 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	ee07 3a90 	vmov	s15, r3
 800664e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006652:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006774 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800665a:	4b40      	ldr	r3, [pc, #256]	@ (800675c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800665c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800665e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006662:	ee07 3a90 	vmov	s15, r3
 8006666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800666a:	ed97 6a02 	vldr	s12, [r7, #8]
 800666e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800676c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800667a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800667e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006686:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800668a:	e043      	b.n	8006714 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	ee07 3a90 	vmov	s15, r3
 8006692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006696:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006778 <HAL_RCC_GetSysClockFreq+0x2f0>
 800669a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800669e:	4b2f      	ldr	r3, [pc, #188]	@ (800675c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80066b2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800676c <HAL_RCC_GetSysClockFreq+0x2e4>
 80066b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066ce:	e021      	b.n	8006714 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	ee07 3a90 	vmov	s15, r3
 80066d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066da:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006774 <HAL_RCC_GetSysClockFreq+0x2ec>
 80066de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066e2:	4b1e      	ldr	r3, [pc, #120]	@ (800675c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80066f6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800676c <HAL_RCC_GetSysClockFreq+0x2e4>
 80066fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800670a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800670e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006712:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006714:	4b11      	ldr	r3, [pc, #68]	@ (800675c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006718:	0a5b      	lsrs	r3, r3, #9
 800671a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800671e:	3301      	adds	r3, #1
 8006720:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	ee07 3a90 	vmov	s15, r3
 8006728:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800672c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006738:	ee17 3a90 	vmov	r3, s15
 800673c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800673e:	e005      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	61bb      	str	r3, [r7, #24]
      break;
 8006744:	e002      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006746:	4b07      	ldr	r3, [pc, #28]	@ (8006764 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006748:	61bb      	str	r3, [r7, #24]
      break;
 800674a:	bf00      	nop
  }

  return sysclockfreq;
 800674c:	69bb      	ldr	r3, [r7, #24]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3724      	adds	r7, #36	@ 0x24
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	58024400 	.word	0x58024400
 8006760:	03d09000 	.word	0x03d09000
 8006764:	003d0900 	.word	0x003d0900
 8006768:	017d7840 	.word	0x017d7840
 800676c:	46000000 	.word	0x46000000
 8006770:	4c742400 	.word	0x4c742400
 8006774:	4a742400 	.word	0x4a742400
 8006778:	4bbebc20 	.word	0x4bbebc20

0800677c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006782:	f7ff fe81 	bl	8006488 <HAL_RCC_GetSysClockFreq>
 8006786:	4602      	mov	r2, r0
 8006788:	4b10      	ldr	r3, [pc, #64]	@ (80067cc <HAL_RCC_GetHCLKFreq+0x50>)
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	0a1b      	lsrs	r3, r3, #8
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	490f      	ldr	r1, [pc, #60]	@ (80067d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006794:	5ccb      	ldrb	r3, [r1, r3]
 8006796:	f003 031f 	and.w	r3, r3, #31
 800679a:	fa22 f303 	lsr.w	r3, r2, r3
 800679e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80067a0:	4b0a      	ldr	r3, [pc, #40]	@ (80067cc <HAL_RCC_GetHCLKFreq+0x50>)
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f003 030f 	and.w	r3, r3, #15
 80067a8:	4a09      	ldr	r2, [pc, #36]	@ (80067d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80067aa:	5cd3      	ldrb	r3, [r2, r3]
 80067ac:	f003 031f 	and.w	r3, r3, #31
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	fa22 f303 	lsr.w	r3, r2, r3
 80067b6:	4a07      	ldr	r2, [pc, #28]	@ (80067d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80067b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80067ba:	4a07      	ldr	r2, [pc, #28]	@ (80067d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80067c0:	4b04      	ldr	r3, [pc, #16]	@ (80067d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80067c2:	681b      	ldr	r3, [r3, #0]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	58024400 	.word	0x58024400
 80067d0:	08009db8 	.word	0x08009db8
 80067d4:	24000004 	.word	0x24000004
 80067d8:	24000000 	.word	0x24000000

080067dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80067e0:	f7ff ffcc 	bl	800677c <HAL_RCC_GetHCLKFreq>
 80067e4:	4602      	mov	r2, r0
 80067e6:	4b06      	ldr	r3, [pc, #24]	@ (8006800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	091b      	lsrs	r3, r3, #4
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	4904      	ldr	r1, [pc, #16]	@ (8006804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067f2:	5ccb      	ldrb	r3, [r1, r3]
 80067f4:	f003 031f 	and.w	r3, r3, #31
 80067f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	58024400 	.word	0x58024400
 8006804:	08009db8 	.word	0x08009db8

08006808 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800680c:	b0c6      	sub	sp, #280	@ 0x118
 800680e:	af00      	add	r7, sp, #0
 8006810:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006814:	2300      	movs	r3, #0
 8006816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800681a:	2300      	movs	r3, #0
 800681c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800682c:	2500      	movs	r5, #0
 800682e:	ea54 0305 	orrs.w	r3, r4, r5
 8006832:	d049      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006838:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800683a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800683e:	d02f      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006840:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006844:	d828      	bhi.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006846:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800684a:	d01a      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800684c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006850:	d822      	bhi.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006856:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800685a:	d007      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800685c:	e01c      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800685e:	4bab      	ldr	r3, [pc, #684]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006862:	4aaa      	ldr	r2, [pc, #680]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800686a:	e01a      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800686c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006870:	3308      	adds	r3, #8
 8006872:	2102      	movs	r1, #2
 8006874:	4618      	mov	r0, r3
 8006876:	f002 fa49 	bl	8008d0c <RCCEx_PLL2_Config>
 800687a:	4603      	mov	r3, r0
 800687c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006880:	e00f      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006886:	3328      	adds	r3, #40	@ 0x28
 8006888:	2102      	movs	r1, #2
 800688a:	4618      	mov	r0, r3
 800688c:	f002 faf0 	bl	8008e70 <RCCEx_PLL3_Config>
 8006890:	4603      	mov	r3, r0
 8006892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006896:	e004      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800689e:	e000      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80068a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10a      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80068aa:	4b98      	ldr	r3, [pc, #608]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80068b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068b8:	4a94      	ldr	r2, [pc, #592]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068ba:	430b      	orrs	r3, r1
 80068bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80068be:	e003      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80068d4:	f04f 0900 	mov.w	r9, #0
 80068d8:	ea58 0309 	orrs.w	r3, r8, r9
 80068dc:	d047      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80068de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e4:	2b04      	cmp	r3, #4
 80068e6:	d82a      	bhi.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80068e8:	a201      	add	r2, pc, #4	@ (adr r2, 80068f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80068ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ee:	bf00      	nop
 80068f0:	08006905 	.word	0x08006905
 80068f4:	08006913 	.word	0x08006913
 80068f8:	08006929 	.word	0x08006929
 80068fc:	08006947 	.word	0x08006947
 8006900:	08006947 	.word	0x08006947
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006904:	4b81      	ldr	r3, [pc, #516]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006908:	4a80      	ldr	r2, [pc, #512]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800690a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800690e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006910:	e01a      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006916:	3308      	adds	r3, #8
 8006918:	2100      	movs	r1, #0
 800691a:	4618      	mov	r0, r3
 800691c:	f002 f9f6 	bl	8008d0c <RCCEx_PLL2_Config>
 8006920:	4603      	mov	r3, r0
 8006922:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006926:	e00f      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692c:	3328      	adds	r3, #40	@ 0x28
 800692e:	2100      	movs	r1, #0
 8006930:	4618      	mov	r0, r3
 8006932:	f002 fa9d 	bl	8008e70 <RCCEx_PLL3_Config>
 8006936:	4603      	mov	r3, r0
 8006938:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800693c:	e004      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006944:	e000      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006948:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006950:	4b6e      	ldr	r3, [pc, #440]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006954:	f023 0107 	bic.w	r1, r3, #7
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800695e:	4a6b      	ldr	r2, [pc, #428]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006960:	430b      	orrs	r3, r1
 8006962:	6513      	str	r3, [r2, #80]	@ 0x50
 8006964:	e003      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006966:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800696a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800696e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800697a:	f04f 0b00 	mov.w	fp, #0
 800697e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006982:	d05b      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006988:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800698c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006990:	d03b      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006992:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006996:	d834      	bhi.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006998:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800699c:	d037      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800699e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069a2:	d82e      	bhi.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80069a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80069a8:	d033      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80069aa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80069ae:	d828      	bhi.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80069b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069b4:	d01a      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80069b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069ba:	d822      	bhi.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80069c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069c4:	d007      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80069c6:	e01c      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c8:	4b50      	ldr	r3, [pc, #320]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069cc:	4a4f      	ldr	r2, [pc, #316]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069d4:	e01e      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069da:	3308      	adds	r3, #8
 80069dc:	2100      	movs	r1, #0
 80069de:	4618      	mov	r0, r3
 80069e0:	f002 f994 	bl	8008d0c <RCCEx_PLL2_Config>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80069ea:	e013      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f0:	3328      	adds	r3, #40	@ 0x28
 80069f2:	2100      	movs	r1, #0
 80069f4:	4618      	mov	r0, r3
 80069f6:	f002 fa3b 	bl	8008e70 <RCCEx_PLL3_Config>
 80069fa:	4603      	mov	r3, r0
 80069fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a00:	e008      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a08:	e004      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006a0a:	bf00      	nop
 8006a0c:	e002      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006a0e:	bf00      	nop
 8006a10:	e000      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10b      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a20:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a2c:	4a37      	ldr	r2, [pc, #220]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a2e:	430b      	orrs	r3, r1
 8006a30:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a32:	e003      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006a48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a52:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006a56:	460b      	mov	r3, r1
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	d05d      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a64:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006a68:	d03b      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006a6a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006a6e:	d834      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006a70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a74:	d037      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006a76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a7a:	d82e      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006a7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a80:	d033      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006a82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a86:	d828      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006a88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a8c:	d01a      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006a8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a92:	d822      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006a98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a9c:	d007      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006a9e:	e01c      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa4:	4a19      	ldr	r2, [pc, #100]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006aac:	e01e      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f002 f928 	bl	8008d0c <RCCEx_PLL2_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ac2:	e013      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac8:	3328      	adds	r3, #40	@ 0x28
 8006aca:	2100      	movs	r1, #0
 8006acc:	4618      	mov	r0, r3
 8006ace:	f002 f9cf 	bl	8008e70 <RCCEx_PLL3_Config>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ad8:	e008      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ae0:	e004      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006ae2:	bf00      	nop
 8006ae4:	e002      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006ae6:	bf00      	nop
 8006ae8:	e000      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10d      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006af4:	4b05      	ldr	r3, [pc, #20]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006af8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006b04:	4a01      	ldr	r2, [pc, #4]	@ (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b06:	430b      	orrs	r3, r1
 8006b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b0a:	e005      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006b0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006b24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b2e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4313      	orrs	r3, r2
 8006b36:	d03a      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b3e:	2b30      	cmp	r3, #48	@ 0x30
 8006b40:	d01f      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006b42:	2b30      	cmp	r3, #48	@ 0x30
 8006b44:	d819      	bhi.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	d00c      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	d815      	bhi.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d019      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006b52:	2b10      	cmp	r3, #16
 8006b54:	d111      	bne.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b56:	4baa      	ldr	r3, [pc, #680]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5a:	4aa9      	ldr	r2, [pc, #676]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006b62:	e011      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b68:	3308      	adds	r3, #8
 8006b6a:	2102      	movs	r1, #2
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f002 f8cd 	bl	8008d0c <RCCEx_PLL2_Config>
 8006b72:	4603      	mov	r3, r0
 8006b74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006b78:	e006      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b80:	e002      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006b82:	bf00      	nop
 8006b84:	e000      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10a      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006b90:	4b9b      	ldr	r3, [pc, #620]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b9e:	4a98      	ldr	r2, [pc, #608]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ba4:	e003      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006baa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006bba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006bc4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	d051      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bd8:	d035      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006bda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bde:	d82e      	bhi.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006be0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006be4:	d031      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006be6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bea:	d828      	bhi.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bf0:	d01a      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bf6:	d822      	bhi.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c00:	d007      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006c02:	e01c      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c04:	4b7e      	ldr	r3, [pc, #504]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c08:	4a7d      	ldr	r2, [pc, #500]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c10:	e01c      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c16:	3308      	adds	r3, #8
 8006c18:	2100      	movs	r1, #0
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f002 f876 	bl	8008d0c <RCCEx_PLL2_Config>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c26:	e011      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2c:	3328      	adds	r3, #40	@ 0x28
 8006c2e:	2100      	movs	r1, #0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f002 f91d 	bl	8008e70 <RCCEx_PLL3_Config>
 8006c36:	4603      	mov	r3, r0
 8006c38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c3c:	e006      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c44:	e002      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006c46:	bf00      	nop
 8006c48:	e000      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c54:	4b6a      	ldr	r3, [pc, #424]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c58:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c62:	4a67      	ldr	r2, [pc, #412]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c64:	430b      	orrs	r3, r1
 8006c66:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c68:	e003      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006c7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c82:	2300      	movs	r3, #0
 8006c84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c88:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	d053      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c9c:	d033      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006c9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ca2:	d82c      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ca4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ca8:	d02f      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006caa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cae:	d826      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006cb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006cb4:	d02b      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006cb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006cba:	d820      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006cbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cc0:	d012      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006cc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cc6:	d81a      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d022      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cd0:	d115      	bne.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	2101      	movs	r1, #1
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f002 f816 	bl	8008d0c <RCCEx_PLL2_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ce6:	e015      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cec:	3328      	adds	r3, #40	@ 0x28
 8006cee:	2101      	movs	r1, #1
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f002 f8bd 	bl	8008e70 <RCCEx_PLL3_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006cfc:	e00a      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d04:	e006      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d06:	bf00      	nop
 8006d08:	e004      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d0a:	bf00      	nop
 8006d0c:	e002      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d0e:	bf00      	nop
 8006d10:	e000      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d1c:	4b38      	ldr	r3, [pc, #224]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d2a:	4a35      	ldr	r2, [pc, #212]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d30:	e003      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006d46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d50:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d54:	460b      	mov	r3, r1
 8006d56:	4313      	orrs	r3, r2
 8006d58:	d058      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d66:	d033      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d6c:	d82c      	bhi.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d72:	d02f      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d78:	d826      	bhi.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006d7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d7e:	d02b      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006d80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d84:	d820      	bhi.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006d86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d8a:	d012      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d90:	d81a      	bhi.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d022      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006d96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d9a:	d115      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da0:	3308      	adds	r3, #8
 8006da2:	2101      	movs	r1, #1
 8006da4:	4618      	mov	r0, r3
 8006da6:	f001 ffb1 	bl	8008d0c <RCCEx_PLL2_Config>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006db0:	e015      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db6:	3328      	adds	r3, #40	@ 0x28
 8006db8:	2101      	movs	r1, #1
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f002 f858 	bl	8008e70 <RCCEx_PLL3_Config>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006dc6:	e00a      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006dce:	e006      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006dd0:	bf00      	nop
 8006dd2:	e004      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006dd4:	bf00      	nop
 8006dd6:	e002      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006dd8:	bf00      	nop
 8006dda:	e000      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10e      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006de6:	4b06      	ldr	r3, [pc, #24]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006df6:	4a02      	ldr	r2, [pc, #8]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006df8:	430b      	orrs	r3, r1
 8006dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dfc:	e006      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006dfe:	bf00      	nop
 8006e00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006e18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	d037      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e36:	d00e      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e3c:	d816      	bhi.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d018      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006e42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e46:	d111      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e48:	4bc4      	ldr	r3, [pc, #784]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4c:	4ac3      	ldr	r2, [pc, #780]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e54:	e00f      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f001 ff54 	bl	8008d0c <RCCEx_PLL2_Config>
 8006e64:	4603      	mov	r3, r0
 8006e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e6a:	e004      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e72:	e000      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10a      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e7e:	4bb7      	ldr	r3, [pc, #732]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e82:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e8c:	4ab3      	ldr	r2, [pc, #716]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e8e:	430b      	orrs	r3, r1
 8006e90:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e92:	e003      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006eac:	2300      	movs	r3, #0
 8006eae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006eb2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	d039      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d81c      	bhi.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ecc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006f09 	.word	0x08006f09
 8006ed0:	08006edd 	.word	0x08006edd
 8006ed4:	08006eeb 	.word	0x08006eeb
 8006ed8:	08006f09 	.word	0x08006f09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006edc:	4b9f      	ldr	r3, [pc, #636]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee0:	4a9e      	ldr	r2, [pc, #632]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ee8:	e00f      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eee:	3308      	adds	r3, #8
 8006ef0:	2102      	movs	r1, #2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 ff0a 	bl	8008d0c <RCCEx_PLL2_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006efe:	e004      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f06:	e000      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f12:	4b92      	ldr	r3, [pc, #584]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f16:	f023 0103 	bic.w	r1, r3, #3
 8006f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f20:	4a8e      	ldr	r2, [pc, #568]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f22:	430b      	orrs	r3, r1
 8006f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f26:	e003      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f40:	2300      	movs	r3, #0
 8006f42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f000 8099 	beq.w	8007084 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f52:	4b83      	ldr	r3, [pc, #524]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a82      	ldr	r2, [pc, #520]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f5e:	f7fa f923 	bl	80011a8 <HAL_GetTick>
 8006f62:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f66:	e00b      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f68:	f7fa f91e 	bl	80011a8 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b64      	cmp	r3, #100	@ 0x64
 8006f76:	d903      	bls.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f7e:	e005      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f80:	4b77      	ldr	r3, [pc, #476]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d0ed      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d173      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f94:	4b71      	ldr	r3, [pc, #452]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006fa0:	4053      	eors	r3, r2
 8006fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d015      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006faa:	4b6c      	ldr	r3, [pc, #432]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fb2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fb6:	4b69      	ldr	r3, [pc, #420]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fba:	4a68      	ldr	r2, [pc, #416]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fc0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fc2:	4b66      	ldr	r3, [pc, #408]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc6:	4a65      	ldr	r2, [pc, #404]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fcc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006fce:	4a63      	ldr	r2, [pc, #396]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fd4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fe2:	d118      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe4:	f7fa f8e0 	bl	80011a8 <HAL_GetTick>
 8006fe8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fec:	e00d      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fee:	f7fa f8db 	bl	80011a8 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006ff8:	1ad2      	subs	r2, r2, r3
 8006ffa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d903      	bls.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007008:	e005      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800700a:	4b54      	ldr	r3, [pc, #336]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800700c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0eb      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007016:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800701a:	2b00      	cmp	r3, #0
 800701c:	d129      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800701e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800702a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800702e:	d10e      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007030:	4b4a      	ldr	r3, [pc, #296]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007040:	091a      	lsrs	r2, r3, #4
 8007042:	4b48      	ldr	r3, [pc, #288]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007044:	4013      	ands	r3, r2
 8007046:	4a45      	ldr	r2, [pc, #276]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007048:	430b      	orrs	r3, r1
 800704a:	6113      	str	r3, [r2, #16]
 800704c:	e005      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800704e:	4b43      	ldr	r3, [pc, #268]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	4a42      	ldr	r2, [pc, #264]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007054:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007058:	6113      	str	r3, [r2, #16]
 800705a:	4b40      	ldr	r3, [pc, #256]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800705c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800705e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800706a:	4a3c      	ldr	r2, [pc, #240]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800706c:	430b      	orrs	r3, r1
 800706e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007070:	e008      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007072:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007076:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800707a:	e003      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007080:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	f002 0301 	and.w	r3, r2, #1
 8007090:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007094:	2300      	movs	r3, #0
 8007096:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800709a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800709e:	460b      	mov	r3, r1
 80070a0:	4313      	orrs	r3, r2
 80070a2:	f000 808f 	beq.w	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80070a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070ac:	2b28      	cmp	r3, #40	@ 0x28
 80070ae:	d871      	bhi.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80070b0:	a201      	add	r2, pc, #4	@ (adr r2, 80070b8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80070b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b6:	bf00      	nop
 80070b8:	0800719d 	.word	0x0800719d
 80070bc:	08007195 	.word	0x08007195
 80070c0:	08007195 	.word	0x08007195
 80070c4:	08007195 	.word	0x08007195
 80070c8:	08007195 	.word	0x08007195
 80070cc:	08007195 	.word	0x08007195
 80070d0:	08007195 	.word	0x08007195
 80070d4:	08007195 	.word	0x08007195
 80070d8:	08007169 	.word	0x08007169
 80070dc:	08007195 	.word	0x08007195
 80070e0:	08007195 	.word	0x08007195
 80070e4:	08007195 	.word	0x08007195
 80070e8:	08007195 	.word	0x08007195
 80070ec:	08007195 	.word	0x08007195
 80070f0:	08007195 	.word	0x08007195
 80070f4:	08007195 	.word	0x08007195
 80070f8:	0800717f 	.word	0x0800717f
 80070fc:	08007195 	.word	0x08007195
 8007100:	08007195 	.word	0x08007195
 8007104:	08007195 	.word	0x08007195
 8007108:	08007195 	.word	0x08007195
 800710c:	08007195 	.word	0x08007195
 8007110:	08007195 	.word	0x08007195
 8007114:	08007195 	.word	0x08007195
 8007118:	0800719d 	.word	0x0800719d
 800711c:	08007195 	.word	0x08007195
 8007120:	08007195 	.word	0x08007195
 8007124:	08007195 	.word	0x08007195
 8007128:	08007195 	.word	0x08007195
 800712c:	08007195 	.word	0x08007195
 8007130:	08007195 	.word	0x08007195
 8007134:	08007195 	.word	0x08007195
 8007138:	0800719d 	.word	0x0800719d
 800713c:	08007195 	.word	0x08007195
 8007140:	08007195 	.word	0x08007195
 8007144:	08007195 	.word	0x08007195
 8007148:	08007195 	.word	0x08007195
 800714c:	08007195 	.word	0x08007195
 8007150:	08007195 	.word	0x08007195
 8007154:	08007195 	.word	0x08007195
 8007158:	0800719d 	.word	0x0800719d
 800715c:	58024400 	.word	0x58024400
 8007160:	58024800 	.word	0x58024800
 8007164:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716c:	3308      	adds	r3, #8
 800716e:	2101      	movs	r1, #1
 8007170:	4618      	mov	r0, r3
 8007172:	f001 fdcb 	bl	8008d0c <RCCEx_PLL2_Config>
 8007176:	4603      	mov	r3, r0
 8007178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800717c:	e00f      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800717e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007182:	3328      	adds	r3, #40	@ 0x28
 8007184:	2101      	movs	r1, #1
 8007186:	4618      	mov	r0, r3
 8007188:	f001 fe72 	bl	8008e70 <RCCEx_PLL3_Config>
 800718c:	4603      	mov	r3, r0
 800718e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007192:	e004      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800719a:	e000      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800719c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800719e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10a      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80071a6:	4bbf      	ldr	r3, [pc, #764]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80071ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071b4:	4abb      	ldr	r2, [pc, #748]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071b6:	430b      	orrs	r3, r1
 80071b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80071ba:	e003      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f002 0302 	and.w	r3, r2, #2
 80071d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071d4:	2300      	movs	r3, #0
 80071d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80071de:	460b      	mov	r3, r1
 80071e0:	4313      	orrs	r3, r2
 80071e2:	d041      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80071e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ea:	2b05      	cmp	r3, #5
 80071ec:	d824      	bhi.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80071ee:	a201      	add	r2, pc, #4	@ (adr r2, 80071f4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	08007241 	.word	0x08007241
 80071f8:	0800720d 	.word	0x0800720d
 80071fc:	08007223 	.word	0x08007223
 8007200:	08007241 	.word	0x08007241
 8007204:	08007241 	.word	0x08007241
 8007208:	08007241 	.word	0x08007241
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007210:	3308      	adds	r3, #8
 8007212:	2101      	movs	r1, #1
 8007214:	4618      	mov	r0, r3
 8007216:	f001 fd79 	bl	8008d0c <RCCEx_PLL2_Config>
 800721a:	4603      	mov	r3, r0
 800721c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007220:	e00f      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007226:	3328      	adds	r3, #40	@ 0x28
 8007228:	2101      	movs	r1, #1
 800722a:	4618      	mov	r0, r3
 800722c:	f001 fe20 	bl	8008e70 <RCCEx_PLL3_Config>
 8007230:	4603      	mov	r3, r0
 8007232:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007236:	e004      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800723e:	e000      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007242:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800724a:	4b96      	ldr	r3, [pc, #600]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800724c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724e:	f023 0107 	bic.w	r1, r3, #7
 8007252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007258:	4a92      	ldr	r2, [pc, #584]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800725a:	430b      	orrs	r3, r1
 800725c:	6553      	str	r3, [r2, #84]	@ 0x54
 800725e:	e003      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007260:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007264:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007270:	f002 0304 	and.w	r3, r2, #4
 8007274:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007278:	2300      	movs	r3, #0
 800727a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800727e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007282:	460b      	mov	r3, r1
 8007284:	4313      	orrs	r3, r2
 8007286:	d044      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007290:	2b05      	cmp	r3, #5
 8007292:	d825      	bhi.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007294:	a201      	add	r2, pc, #4	@ (adr r2, 800729c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729a:	bf00      	nop
 800729c:	080072e9 	.word	0x080072e9
 80072a0:	080072b5 	.word	0x080072b5
 80072a4:	080072cb 	.word	0x080072cb
 80072a8:	080072e9 	.word	0x080072e9
 80072ac:	080072e9 	.word	0x080072e9
 80072b0:	080072e9 	.word	0x080072e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b8:	3308      	adds	r3, #8
 80072ba:	2101      	movs	r1, #1
 80072bc:	4618      	mov	r0, r3
 80072be:	f001 fd25 	bl	8008d0c <RCCEx_PLL2_Config>
 80072c2:	4603      	mov	r3, r0
 80072c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80072c8:	e00f      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ce:	3328      	adds	r3, #40	@ 0x28
 80072d0:	2101      	movs	r1, #1
 80072d2:	4618      	mov	r0, r3
 80072d4:	f001 fdcc 	bl	8008e70 <RCCEx_PLL3_Config>
 80072d8:	4603      	mov	r3, r0
 80072da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80072de:	e004      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072e6:	e000      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80072e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10b      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072f2:	4b6c      	ldr	r3, [pc, #432]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072f6:	f023 0107 	bic.w	r1, r3, #7
 80072fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007302:	4a68      	ldr	r2, [pc, #416]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007304:	430b      	orrs	r3, r1
 8007306:	6593      	str	r3, [r2, #88]	@ 0x58
 8007308:	e003      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800730e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	f002 0320 	and.w	r3, r2, #32
 800731e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007322:	2300      	movs	r3, #0
 8007324:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007328:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800732c:	460b      	mov	r3, r1
 800732e:	4313      	orrs	r3, r2
 8007330:	d055      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800733a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800733e:	d033      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007344:	d82c      	bhi.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800734a:	d02f      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800734c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007350:	d826      	bhi.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007352:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007356:	d02b      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007358:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800735c:	d820      	bhi.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800735e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007362:	d012      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007368:	d81a      	bhi.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d022      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800736e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007372:	d115      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007378:	3308      	adds	r3, #8
 800737a:	2100      	movs	r1, #0
 800737c:	4618      	mov	r0, r3
 800737e:	f001 fcc5 	bl	8008d0c <RCCEx_PLL2_Config>
 8007382:	4603      	mov	r3, r0
 8007384:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007388:	e015      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800738a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738e:	3328      	adds	r3, #40	@ 0x28
 8007390:	2102      	movs	r1, #2
 8007392:	4618      	mov	r0, r3
 8007394:	f001 fd6c 	bl	8008e70 <RCCEx_PLL3_Config>
 8007398:	4603      	mov	r3, r0
 800739a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800739e:	e00a      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073a6:	e006      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80073a8:	bf00      	nop
 80073aa:	e004      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80073ac:	bf00      	nop
 80073ae:	e002      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80073b0:	bf00      	nop
 80073b2:	e000      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80073b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10b      	bne.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073be:	4b39      	ldr	r3, [pc, #228]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80073c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073ce:	4a35      	ldr	r2, [pc, #212]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073d0:	430b      	orrs	r3, r1
 80073d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80073d4:	e003      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80073de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80073ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073ee:	2300      	movs	r3, #0
 80073f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073f4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80073f8:	460b      	mov	r3, r1
 80073fa:	4313      	orrs	r3, r2
 80073fc:	d058      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80073fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007402:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007406:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800740a:	d033      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800740c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007410:	d82c      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007416:	d02f      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800741c:	d826      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800741e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007422:	d02b      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007424:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007428:	d820      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800742a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800742e:	d012      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007434:	d81a      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d022      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800743a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800743e:	d115      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007444:	3308      	adds	r3, #8
 8007446:	2100      	movs	r1, #0
 8007448:	4618      	mov	r0, r3
 800744a:	f001 fc5f 	bl	8008d0c <RCCEx_PLL2_Config>
 800744e:	4603      	mov	r3, r0
 8007450:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007454:	e015      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745a:	3328      	adds	r3, #40	@ 0x28
 800745c:	2102      	movs	r1, #2
 800745e:	4618      	mov	r0, r3
 8007460:	f001 fd06 	bl	8008e70 <RCCEx_PLL3_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800746a:	e00a      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007472:	e006      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007474:	bf00      	nop
 8007476:	e004      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007478:	bf00      	nop
 800747a:	e002      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800747c:	bf00      	nop
 800747e:	e000      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007482:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10e      	bne.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800748a:	4b06      	ldr	r3, [pc, #24]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800748c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800748e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007496:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800749a:	4a02      	ldr	r2, [pc, #8]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800749c:	430b      	orrs	r3, r1
 800749e:	6593      	str	r3, [r2, #88]	@ 0x58
 80074a0:	e006      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80074a2:	bf00      	nop
 80074a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80074b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80074bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074c0:	2300      	movs	r3, #0
 80074c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80074ca:	460b      	mov	r3, r1
 80074cc:	4313      	orrs	r3, r2
 80074ce:	d055      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80074d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80074dc:	d033      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80074de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80074e2:	d82c      	bhi.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80074e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074e8:	d02f      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80074ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074ee:	d826      	bhi.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80074f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80074f4:	d02b      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80074f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80074fa:	d820      	bhi.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80074fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007500:	d012      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007502:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007506:	d81a      	bhi.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007508:	2b00      	cmp	r3, #0
 800750a:	d022      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800750c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007510:	d115      	bne.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007516:	3308      	adds	r3, #8
 8007518:	2100      	movs	r1, #0
 800751a:	4618      	mov	r0, r3
 800751c:	f001 fbf6 	bl	8008d0c <RCCEx_PLL2_Config>
 8007520:	4603      	mov	r3, r0
 8007522:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007526:	e015      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752c:	3328      	adds	r3, #40	@ 0x28
 800752e:	2102      	movs	r1, #2
 8007530:	4618      	mov	r0, r3
 8007532:	f001 fc9d 	bl	8008e70 <RCCEx_PLL3_Config>
 8007536:	4603      	mov	r3, r0
 8007538:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800753c:	e00a      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007544:	e006      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007546:	bf00      	nop
 8007548:	e004      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800754a:	bf00      	nop
 800754c:	e002      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800754e:	bf00      	nop
 8007550:	e000      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007554:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10b      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800755c:	4ba0      	ldr	r3, [pc, #640]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800755e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007560:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007568:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800756c:	4a9c      	ldr	r2, [pc, #624]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800756e:	430b      	orrs	r3, r1
 8007570:	6593      	str	r3, [r2, #88]	@ 0x58
 8007572:	e003      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007574:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007578:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800757c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	f002 0308 	and.w	r3, r2, #8
 8007588:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800758c:	2300      	movs	r3, #0
 800758e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007592:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007596:	460b      	mov	r3, r1
 8007598:	4313      	orrs	r3, r2
 800759a:	d01e      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a8:	d10c      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ae:	3328      	adds	r3, #40	@ 0x28
 80075b0:	2102      	movs	r1, #2
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 fc5c 	bl	8008e70 <RCCEx_PLL3_Config>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80075c4:	4b86      	ldr	r3, [pc, #536]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075d4:	4a82      	ldr	r2, [pc, #520]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075d6:	430b      	orrs	r3, r1
 80075d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f002 0310 	and.w	r3, r2, #16
 80075e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075ea:	2300      	movs	r3, #0
 80075ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075f0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80075f4:	460b      	mov	r3, r1
 80075f6:	4313      	orrs	r3, r2
 80075f8:	d01e      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80075fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007606:	d10c      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760c:	3328      	adds	r3, #40	@ 0x28
 800760e:	2102      	movs	r1, #2
 8007610:	4618      	mov	r0, r3
 8007612:	f001 fc2d 	bl	8008e70 <RCCEx_PLL3_Config>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007622:	4b6f      	ldr	r3, [pc, #444]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007626:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800762a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007632:	4a6b      	ldr	r2, [pc, #428]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007634:	430b      	orrs	r3, r1
 8007636:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007640:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007644:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007646:	2300      	movs	r3, #0
 8007648:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800764a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800764e:	460b      	mov	r3, r1
 8007650:	4313      	orrs	r3, r2
 8007652:	d03e      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007658:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800765c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007660:	d022      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007666:	d81b      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800766c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007670:	d00b      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007672:	e015      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007678:	3308      	adds	r3, #8
 800767a:	2100      	movs	r1, #0
 800767c:	4618      	mov	r0, r3
 800767e:	f001 fb45 	bl	8008d0c <RCCEx_PLL2_Config>
 8007682:	4603      	mov	r3, r0
 8007684:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007688:	e00f      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800768a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768e:	3328      	adds	r3, #40	@ 0x28
 8007690:	2102      	movs	r1, #2
 8007692:	4618      	mov	r0, r3
 8007694:	f001 fbec 	bl	8008e70 <RCCEx_PLL3_Config>
 8007698:	4603      	mov	r3, r0
 800769a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800769e:	e004      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076a6:	e000      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80076a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10b      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076b2:	4b4b      	ldr	r3, [pc, #300]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80076ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80076c2:	4a47      	ldr	r2, [pc, #284]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076c4:	430b      	orrs	r3, r1
 80076c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80076c8:	e003      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80076de:	673b      	str	r3, [r7, #112]	@ 0x70
 80076e0:	2300      	movs	r3, #0
 80076e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80076e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80076e8:	460b      	mov	r3, r1
 80076ea:	4313      	orrs	r3, r2
 80076ec:	d03b      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80076ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076fa:	d01f      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80076fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007700:	d818      	bhi.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007706:	d003      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007708:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800770c:	d007      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800770e:	e011      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007710:	4b33      	ldr	r3, [pc, #204]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007714:	4a32      	ldr	r2, [pc, #200]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800771a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800771c:	e00f      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800771e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007722:	3328      	adds	r3, #40	@ 0x28
 8007724:	2101      	movs	r1, #1
 8007726:	4618      	mov	r0, r3
 8007728:	f001 fba2 	bl	8008e70 <RCCEx_PLL3_Config>
 800772c:	4603      	mov	r3, r0
 800772e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007732:	e004      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800773a:	e000      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800773c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800773e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10b      	bne.n	800775e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007746:	4b26      	ldr	r3, [pc, #152]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800774a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800774e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007756:	4a22      	ldr	r2, [pc, #136]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007758:	430b      	orrs	r3, r1
 800775a:	6553      	str	r3, [r2, #84]	@ 0x54
 800775c:	e003      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007762:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007772:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007774:	2300      	movs	r3, #0
 8007776:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007778:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800777c:	460b      	mov	r3, r1
 800777e:	4313      	orrs	r3, r2
 8007780:	d034      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800778c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007790:	d007      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007792:	e011      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007794:	4b12      	ldr	r3, [pc, #72]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007798:	4a11      	ldr	r2, [pc, #68]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800779a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800779e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80077a0:	e00e      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a6:	3308      	adds	r3, #8
 80077a8:	2102      	movs	r1, #2
 80077aa:	4618      	mov	r0, r3
 80077ac:	f001 faae 	bl	8008d0c <RCCEx_PLL2_Config>
 80077b0:	4603      	mov	r3, r0
 80077b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80077b6:	e003      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10d      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80077c8:	4b05      	ldr	r3, [pc, #20]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80077d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d6:	4a02      	ldr	r2, [pc, #8]	@ (80077e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077d8:	430b      	orrs	r3, r1
 80077da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077dc:	e006      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80077de:	bf00      	nop
 80077e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80077f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80077fa:	2300      	movs	r3, #0
 80077fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80077fe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007802:	460b      	mov	r3, r1
 8007804:	4313      	orrs	r3, r2
 8007806:	d00c      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780c:	3328      	adds	r3, #40	@ 0x28
 800780e:	2102      	movs	r1, #2
 8007810:	4618      	mov	r0, r3
 8007812:	f001 fb2d 	bl	8008e70 <RCCEx_PLL3_Config>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800782e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007830:	2300      	movs	r3, #0
 8007832:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007834:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007838:	460b      	mov	r3, r1
 800783a:	4313      	orrs	r3, r2
 800783c:	d036      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800783e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007842:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007844:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007848:	d018      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800784a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800784e:	d811      	bhi.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007854:	d014      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800785a:	d80b      	bhi.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800785c:	2b00      	cmp	r3, #0
 800785e:	d011      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007864:	d106      	bne.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007866:	4bb7      	ldr	r3, [pc, #732]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786a:	4ab6      	ldr	r2, [pc, #728]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800786c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007870:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007872:	e008      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800787a:	e004      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800787c:	bf00      	nop
 800787e:	e002      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007880:	bf00      	nop
 8007882:	e000      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007886:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10a      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800788e:	4bad      	ldr	r3, [pc, #692]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007892:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800789a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800789c:	4aa9      	ldr	r2, [pc, #676]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800789e:	430b      	orrs	r3, r1
 80078a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80078a2:	e003      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80078b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80078ba:	2300      	movs	r3, #0
 80078bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80078be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80078c2:	460b      	mov	r3, r1
 80078c4:	4313      	orrs	r3, r2
 80078c6:	d009      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078c8:	4b9e      	ldr	r3, [pc, #632]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80078d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078d6:	4a9b      	ldr	r2, [pc, #620]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078d8:	430b      	orrs	r3, r1
 80078da:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80078dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80078e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078ea:	2300      	movs	r3, #0
 80078ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80078f2:	460b      	mov	r3, r1
 80078f4:	4313      	orrs	r3, r2
 80078f6:	d009      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80078f8:	4b92      	ldr	r3, [pc, #584]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078fc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007904:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007906:	4a8f      	ldr	r2, [pc, #572]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007908:	430b      	orrs	r3, r1
 800790a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800790c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007918:	643b      	str	r3, [r7, #64]	@ 0x40
 800791a:	2300      	movs	r3, #0
 800791c:	647b      	str	r3, [r7, #68]	@ 0x44
 800791e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007922:	460b      	mov	r3, r1
 8007924:	4313      	orrs	r3, r2
 8007926:	d00e      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007928:	4b86      	ldr	r3, [pc, #536]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	4a85      	ldr	r2, [pc, #532]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800792e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007932:	6113      	str	r3, [r2, #16]
 8007934:	4b83      	ldr	r3, [pc, #524]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007936:	6919      	ldr	r1, [r3, #16]
 8007938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007940:	4a80      	ldr	r2, [pc, #512]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007942:	430b      	orrs	r3, r1
 8007944:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007952:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007954:	2300      	movs	r3, #0
 8007956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007958:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800795c:	460b      	mov	r3, r1
 800795e:	4313      	orrs	r3, r2
 8007960:	d009      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007962:	4b78      	ldr	r3, [pc, #480]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007966:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800796a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007970:	4a74      	ldr	r2, [pc, #464]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007972:	430b      	orrs	r3, r1
 8007974:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007982:	633b      	str	r3, [r7, #48]	@ 0x30
 8007984:	2300      	movs	r3, #0
 8007986:	637b      	str	r3, [r7, #52]	@ 0x34
 8007988:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800798c:	460b      	mov	r3, r1
 800798e:	4313      	orrs	r3, r2
 8007990:	d00a      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007992:	4b6c      	ldr	r3, [pc, #432]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007996:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800799a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800799e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079a2:	4a68      	ldr	r2, [pc, #416]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079a4:	430b      	orrs	r3, r1
 80079a6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80079a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	2100      	movs	r1, #0
 80079b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80079be:	460b      	mov	r3, r1
 80079c0:	4313      	orrs	r3, r2
 80079c2:	d011      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c8:	3308      	adds	r3, #8
 80079ca:	2100      	movs	r1, #0
 80079cc:	4618      	mov	r0, r3
 80079ce:	f001 f99d 	bl	8008d0c <RCCEx_PLL2_Config>
 80079d2:	4603      	mov	r3, r0
 80079d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80079d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80079e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	2100      	movs	r1, #0
 80079f2:	6239      	str	r1, [r7, #32]
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80079fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80079fe:	460b      	mov	r3, r1
 8007a00:	4313      	orrs	r3, r2
 8007a02:	d011      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a08:	3308      	adds	r3, #8
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 f97d 	bl	8008d0c <RCCEx_PLL2_Config>
 8007a12:	4603      	mov	r3, r0
 8007a14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	2100      	movs	r1, #0
 8007a32:	61b9      	str	r1, [r7, #24]
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	61fb      	str	r3, [r7, #28]
 8007a3a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4313      	orrs	r3, r2
 8007a42:	d011      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a48:	3308      	adds	r3, #8
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f001 f95d 	bl	8008d0c <RCCEx_PLL2_Config>
 8007a52:	4603      	mov	r3, r0
 8007a54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007a58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	2100      	movs	r1, #0
 8007a72:	6139      	str	r1, [r7, #16]
 8007a74:	f003 0308 	and.w	r3, r3, #8
 8007a78:	617b      	str	r3, [r7, #20]
 8007a7a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4313      	orrs	r3, r2
 8007a82:	d011      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a88:	3328      	adds	r3, #40	@ 0x28
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f001 f9ef 	bl	8008e70 <RCCEx_PLL3_Config>
 8007a92:	4603      	mov	r3, r0
 8007a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007a98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	d011      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac8:	3328      	adds	r3, #40	@ 0x28
 8007aca:	2101      	movs	r1, #1
 8007acc:	4618      	mov	r0, r3
 8007ace:	f001 f9cf 	bl	8008e70 <RCCEx_PLL3_Config>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d003      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ae4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	2100      	movs	r1, #0
 8007af2:	6039      	str	r1, [r7, #0]
 8007af4:	f003 0320 	and.w	r3, r3, #32
 8007af8:	607b      	str	r3, [r7, #4]
 8007afa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007afe:	460b      	mov	r3, r1
 8007b00:	4313      	orrs	r3, r2
 8007b02:	d011      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b08:	3328      	adds	r3, #40	@ 0x28
 8007b0a:	2102      	movs	r1, #2
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f001 f9af 	bl	8008e70 <RCCEx_PLL3_Config>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d003      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007b28:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	e000      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b42:	bf00      	nop
 8007b44:	58024400 	.word	0x58024400

08007b48 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b090      	sub	sp, #64	@ 0x40
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b56:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007b5a:	430b      	orrs	r3, r1
 8007b5c:	f040 8094 	bne.w	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007b60:	4b9b      	ldr	r3, [pc, #620]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b64:	f003 0307 	and.w	r3, r3, #7
 8007b68:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	f200 8087 	bhi.w	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007b72:	a201      	add	r2, pc, #4	@ (adr r2, 8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007b8d 	.word	0x08007b8d
 8007b7c:	08007bb5 	.word	0x08007bb5
 8007b80:	08007bdd 	.word	0x08007bdd
 8007b84:	08007c79 	.word	0x08007c79
 8007b88:	08007c05 	.word	0x08007c05
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b8c:	4b90      	ldr	r3, [pc, #576]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b98:	d108      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 ff62 	bl	8008a68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ba8:	f000 bc93 	b.w	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bb0:	f000 bc8f 	b.w	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bb4:	4b86      	ldr	r3, [pc, #536]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bc0:	d108      	bne.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bc2:	f107 0318 	add.w	r3, r7, #24
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 fca6 	bl	8008518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bd0:	f000 bc7f 	b.w	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bd8:	f000 bc7b 	b.w	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bdc:	4b7c      	ldr	r3, [pc, #496]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007be4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007be8:	d108      	bne.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bea:	f107 030c 	add.w	r3, r7, #12
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fde6 	bl	80087c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bf8:	f000 bc6b 	b.w	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c00:	f000 bc67 	b.w	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c04:	4b72      	ldr	r3, [pc, #456]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c0c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c0e:	4b70      	ldr	r3, [pc, #448]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0304 	and.w	r3, r3, #4
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d10c      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d109      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c20:	4b6b      	ldr	r3, [pc, #428]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	08db      	lsrs	r3, r3, #3
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	4a6a      	ldr	r2, [pc, #424]	@ (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c32:	e01f      	b.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c34:	4b66      	ldr	r3, [pc, #408]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c40:	d106      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c48:	d102      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c4a:	4b63      	ldr	r3, [pc, #396]	@ (8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c4e:	e011      	b.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c50:	4b5f      	ldr	r3, [pc, #380]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c5c:	d106      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c64:	d102      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c66:	4b5d      	ldr	r3, [pc, #372]	@ (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c6a:	e003      	b.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007c70:	f000 bc2f 	b.w	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007c74:	f000 bc2d 	b.w	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c78:	4b59      	ldr	r3, [pc, #356]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c7c:	f000 bc29 	b.w	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c84:	f000 bc25 	b.w	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c8c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007c90:	430b      	orrs	r3, r1
 8007c92:	f040 80a7 	bne.w	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007c96:	4b4e      	ldr	r3, [pc, #312]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c9a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007c9e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ca6:	d054      	beq.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007caa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007cae:	f200 808b 	bhi.w	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007cb8:	f000 8083 	beq.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007cc2:	f200 8081 	bhi.w	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ccc:	d02f      	beq.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cd4:	d878      	bhi.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d004      	beq.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ce2:	d012      	beq.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007ce4:	e070      	b.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cf2:	d107      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 feb5 	bl	8008a68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d02:	e3e6      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d04:	2300      	movs	r3, #0
 8007d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d08:	e3e3      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d0a:	4b31      	ldr	r3, [pc, #196]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d16:	d107      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d18:	f107 0318 	add.w	r3, r7, #24
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f000 fbfb 	bl	8008518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d26:	e3d4      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d2c:	e3d1      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d2e:	4b28      	ldr	r3, [pc, #160]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d3a:	d107      	bne.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d3c:	f107 030c 	add.w	r3, r7, #12
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 fd3d 	bl	80087c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d4a:	e3c2      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d50:	e3bf      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d52:	4b1f      	ldr	r3, [pc, #124]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d5a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0304 	and.w	r3, r3, #4
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	d10c      	bne.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d6e:	4b18      	ldr	r3, [pc, #96]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	08db      	lsrs	r3, r3, #3
 8007d74:	f003 0303 	and.w	r3, r3, #3
 8007d78:	4a16      	ldr	r2, [pc, #88]	@ (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d80:	e01e      	b.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d82:	4b13      	ldr	r3, [pc, #76]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d8e:	d106      	bne.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d96:	d102      	bne.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d98:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d9c:	e010      	b.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007da6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007daa:	d106      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007db2:	d102      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007db4:	4b09      	ldr	r3, [pc, #36]	@ (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007db8:	e002      	b.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007dbe:	e388      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007dc0:	e387      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007dc2:	4b07      	ldr	r3, [pc, #28]	@ (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dc6:	e384      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dcc:	e381      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007dce:	bf00      	nop
 8007dd0:	58024400 	.word	0x58024400
 8007dd4:	03d09000 	.word	0x03d09000
 8007dd8:	003d0900 	.word	0x003d0900
 8007ddc:	017d7840 	.word	0x017d7840
 8007de0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007de8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007dec:	430b      	orrs	r3, r1
 8007dee:	f040 809c 	bne.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007df2:	4b9e      	ldr	r3, [pc, #632]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007df6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007dfa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e02:	d054      	beq.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e0a:	f200 808b 	bhi.w	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e14:	f000 8083 	beq.w	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e1e:	f200 8081 	bhi.w	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e28:	d02f      	beq.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e30:	d878      	bhi.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d004      	beq.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e3e:	d012      	beq.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007e40:	e070      	b.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e42:	4b8a      	ldr	r3, [pc, #552]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e4e:	d107      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 fe07 	bl	8008a68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e5e:	e338      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e64:	e335      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e66:	4b81      	ldr	r3, [pc, #516]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e72:	d107      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e74:	f107 0318 	add.w	r3, r7, #24
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fb4d 	bl	8008518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e82:	e326      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e88:	e323      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e8a:	4b78      	ldr	r3, [pc, #480]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e96:	d107      	bne.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e98:	f107 030c 	add.w	r3, r7, #12
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fc8f 	bl	80087c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ea6:	e314      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eac:	e311      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007eae:	4b6f      	ldr	r3, [pc, #444]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007eb8:	4b6c      	ldr	r3, [pc, #432]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	d10c      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d109      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007eca:	4b68      	ldr	r3, [pc, #416]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	08db      	lsrs	r3, r3, #3
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	4a66      	ldr	r2, [pc, #408]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007edc:	e01e      	b.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ede:	4b63      	ldr	r3, [pc, #396]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eea:	d106      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ef2:	d102      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ef4:	4b5f      	ldr	r3, [pc, #380]	@ (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ef8:	e010      	b.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007efa:	4b5c      	ldr	r3, [pc, #368]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f06:	d106      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8007f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f0e:	d102      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f10:	4b59      	ldr	r3, [pc, #356]	@ (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f14:	e002      	b.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007f1a:	e2da      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007f1c:	e2d9      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f1e:	4b57      	ldr	r3, [pc, #348]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f22:	e2d6      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f28:	e2d3      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f2e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007f32:	430b      	orrs	r3, r1
 8007f34:	f040 80a7 	bne.w	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007f38:	4b4c      	ldr	r3, [pc, #304]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f3c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007f40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f48:	d055      	beq.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f50:	f200 8096 	bhi.w	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f5a:	f000 8084 	beq.w	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f64:	f200 808c 	bhi.w	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f6e:	d030      	beq.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f76:	f200 8083 	bhi.w	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f86:	d012      	beq.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007f88:	e07a      	b.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f8a:	4b38      	ldr	r3, [pc, #224]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f96:	d107      	bne.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fd63 	bl	8008a68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fa6:	e294      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fac:	e291      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fae:	4b2f      	ldr	r3, [pc, #188]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fba:	d107      	bne.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fbc:	f107 0318 	add.w	r3, r7, #24
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 faa9 	bl	8008518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fca:	e282      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fd0:	e27f      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fd2:	4b26      	ldr	r3, [pc, #152]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fde:	d107      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fe0:	f107 030c 	add.w	r3, r7, #12
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fbeb 	bl	80087c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fee:	e270      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff4:	e26d      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ffa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ffe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008000:	4b1a      	ldr	r3, [pc, #104]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b04      	cmp	r3, #4
 800800a:	d10c      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800800c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800800e:	2b00      	cmp	r3, #0
 8008010:	d109      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008012:	4b16      	ldr	r3, [pc, #88]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	08db      	lsrs	r3, r3, #3
 8008018:	f003 0303 	and.w	r3, r3, #3
 800801c:	4a14      	ldr	r2, [pc, #80]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800801e:	fa22 f303 	lsr.w	r3, r2, r3
 8008022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008024:	e01e      	b.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008026:	4b11      	ldr	r3, [pc, #68]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800802e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008032:	d106      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800803a:	d102      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800803c:	4b0d      	ldr	r3, [pc, #52]	@ (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800803e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008040:	e010      	b.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008042:	4b0a      	ldr	r3, [pc, #40]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800804a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800804e:	d106      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008056:	d102      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008058:	4b07      	ldr	r3, [pc, #28]	@ (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800805a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800805c:	e002      	b.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008062:	e236      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008064:	e235      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008066:	4b05      	ldr	r3, [pc, #20]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800806a:	e232      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800806c:	58024400 	.word	0x58024400
 8008070:	03d09000 	.word	0x03d09000
 8008074:	003d0900 	.word	0x003d0900
 8008078:	017d7840 	.word	0x017d7840
 800807c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008080:	2300      	movs	r3, #0
 8008082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008084:	e225      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800808a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800808e:	430b      	orrs	r3, r1
 8008090:	f040 8085 	bne.w	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008094:	4b9c      	ldr	r3, [pc, #624]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008098:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800809c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800809e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080a4:	d06b      	beq.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80080a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080ac:	d874      	bhi.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80080ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080b4:	d056      	beq.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80080b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080bc:	d86c      	bhi.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80080be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080c4:	d03b      	beq.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80080c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080cc:	d864      	bhi.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80080ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080d4:	d021      	beq.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80080d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080dc:	d85c      	bhi.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80080de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d004      	beq.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80080e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080ea:	d004      	beq.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80080ec:	e054      	b.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80080ee:	f7fe fb75 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 80080f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080f4:	e1ed      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080f6:	4b84      	ldr	r3, [pc, #528]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008102:	d107      	bne.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008104:	f107 0318 	add.w	r3, r7, #24
 8008108:	4618      	mov	r0, r3
 800810a:	f000 fa05 	bl	8008518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008112:	e1de      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008114:	2300      	movs	r3, #0
 8008116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008118:	e1db      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800811a:	4b7b      	ldr	r3, [pc, #492]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008126:	d107      	bne.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008128:	f107 030c 	add.w	r3, r7, #12
 800812c:	4618      	mov	r0, r3
 800812e:	f000 fb47 	bl	80087c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008136:	e1cc      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800813c:	e1c9      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800813e:	4b72      	ldr	r3, [pc, #456]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0304 	and.w	r3, r3, #4
 8008146:	2b04      	cmp	r3, #4
 8008148:	d109      	bne.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800814a:	4b6f      	ldr	r3, [pc, #444]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	08db      	lsrs	r3, r3, #3
 8008150:	f003 0303 	and.w	r3, r3, #3
 8008154:	4a6d      	ldr	r2, [pc, #436]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008156:	fa22 f303 	lsr.w	r3, r2, r3
 800815a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800815c:	e1b9      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008162:	e1b6      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008164:	4b68      	ldr	r3, [pc, #416]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800816c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008170:	d102      	bne.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008172:	4b67      	ldr	r3, [pc, #412]	@ (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008176:	e1ac      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008178:	2300      	movs	r3, #0
 800817a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800817c:	e1a9      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800817e:	4b62      	ldr	r3, [pc, #392]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008186:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800818a:	d102      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800818c:	4b61      	ldr	r3, [pc, #388]	@ (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800818e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008190:	e19f      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008196:	e19c      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008198:	2300      	movs	r3, #0
 800819a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800819c:	e199      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800819e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081a2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80081a6:	430b      	orrs	r3, r1
 80081a8:	d173      	bne.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80081aa:	4b57      	ldr	r3, [pc, #348]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80081ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80081b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80081b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081ba:	d02f      	beq.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80081bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081c2:	d863      	bhi.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80081c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d004      	beq.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80081ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081d0:	d012      	beq.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80081d2:	e05b      	b.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081d4:	4b4c      	ldr	r3, [pc, #304]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081e0:	d107      	bne.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081e2:	f107 0318 	add.w	r3, r7, #24
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 f996 	bl	8008518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081f0:	e16f      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081f6:	e16c      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081f8:	4b43      	ldr	r3, [pc, #268]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008204:	d107      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008206:	f107 030c 	add.w	r3, r7, #12
 800820a:	4618      	mov	r0, r3
 800820c:	f000 fad8 	bl	80087c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008214:	e15d      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800821a:	e15a      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800821c:	4b3a      	ldr	r3, [pc, #232]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800821e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008220:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008224:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008226:	4b38      	ldr	r3, [pc, #224]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0304 	and.w	r3, r3, #4
 800822e:	2b04      	cmp	r3, #4
 8008230:	d10c      	bne.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008234:	2b00      	cmp	r3, #0
 8008236:	d109      	bne.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008238:	4b33      	ldr	r3, [pc, #204]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	08db      	lsrs	r3, r3, #3
 800823e:	f003 0303 	and.w	r3, r3, #3
 8008242:	4a32      	ldr	r2, [pc, #200]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008244:	fa22 f303 	lsr.w	r3, r2, r3
 8008248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800824a:	e01e      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800824c:	4b2e      	ldr	r3, [pc, #184]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008258:	d106      	bne.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800825a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008260:	d102      	bne.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008262:	4b2b      	ldr	r3, [pc, #172]	@ (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008266:	e010      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008268:	4b27      	ldr	r3, [pc, #156]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008274:	d106      	bne.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800827c:	d102      	bne.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800827e:	4b25      	ldr	r3, [pc, #148]	@ (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008282:	e002      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008284:	2300      	movs	r3, #0
 8008286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008288:	e123      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800828a:	e122      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008290:	e11f      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008296:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800829a:	430b      	orrs	r3, r1
 800829c:	d13c      	bne.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800829e:	4b1a      	ldr	r3, [pc, #104]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80082a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082a6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80082a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d004      	beq.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80082ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082b4:	d012      	beq.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80082b6:	e023      	b.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082b8:	4b13      	ldr	r3, [pc, #76]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082c4:	d107      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fbcc 	bl	8008a68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082d4:	e0fd      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082d6:	2300      	movs	r3, #0
 80082d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082da:	e0fa      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082e8:	d107      	bne.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082ea:	f107 0318 	add.w	r3, r7, #24
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 f912 	bl	8008518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082f8:	e0eb      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082fa:	2300      	movs	r3, #0
 80082fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082fe:	e0e8      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008304:	e0e5      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008306:	bf00      	nop
 8008308:	58024400 	.word	0x58024400
 800830c:	03d09000 	.word	0x03d09000
 8008310:	003d0900 	.word	0x003d0900
 8008314:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800831c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008320:	430b      	orrs	r3, r1
 8008322:	f040 8085 	bne.w	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008326:	4b6d      	ldr	r3, [pc, #436]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800832a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800832e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008332:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008336:	d06b      	beq.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800833e:	d874      	bhi.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008346:	d056      	beq.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800834e:	d86c      	bhi.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008352:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008356:	d03b      	beq.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800835e:	d864      	bhi.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008366:	d021      	beq.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800836e:	d85c      	bhi.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008372:	2b00      	cmp	r3, #0
 8008374:	d004      	beq.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008378:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800837c:	d004      	beq.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800837e:	e054      	b.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008380:	f000 f8b4 	bl	80084ec <HAL_RCCEx_GetD3PCLK1Freq>
 8008384:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008386:	e0a4      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008388:	4b54      	ldr	r3, [pc, #336]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008390:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008394:	d107      	bne.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008396:	f107 0318 	add.w	r3, r7, #24
 800839a:	4618      	mov	r0, r3
 800839c:	f000 f8bc 	bl	8008518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083a4:	e095      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083a6:	2300      	movs	r3, #0
 80083a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083aa:	e092      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083ac:	4b4b      	ldr	r3, [pc, #300]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083b8:	d107      	bne.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083ba:	f107 030c 	add.w	r3, r7, #12
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 f9fe 	bl	80087c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083c8:	e083      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ce:	e080      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083d0:	4b42      	ldr	r3, [pc, #264]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d109      	bne.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083dc:	4b3f      	ldr	r3, [pc, #252]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	08db      	lsrs	r3, r3, #3
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	4a3e      	ldr	r2, [pc, #248]	@ (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80083e8:	fa22 f303 	lsr.w	r3, r2, r3
 80083ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ee:	e070      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083f0:	2300      	movs	r3, #0
 80083f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083f4:	e06d      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80083f6:	4b39      	ldr	r3, [pc, #228]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008402:	d102      	bne.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008404:	4b37      	ldr	r3, [pc, #220]	@ (80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008408:	e063      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800840e:	e060      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008410:	4b32      	ldr	r3, [pc, #200]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800841c:	d102      	bne.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800841e:	4b32      	ldr	r3, [pc, #200]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008422:	e056      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008424:	2300      	movs	r3, #0
 8008426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008428:	e053      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800842e:	e050      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008434:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008438:	430b      	orrs	r3, r1
 800843a:	d148      	bne.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800843c:	4b27      	ldr	r3, [pc, #156]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800843e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008440:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008444:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800844c:	d02a      	beq.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800844e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008454:	d838      	bhi.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008458:	2b00      	cmp	r3, #0
 800845a:	d004      	beq.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800845c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008462:	d00d      	beq.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008464:	e030      	b.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008466:	4b1d      	ldr	r3, [pc, #116]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800846e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008472:	d102      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008474:	4b1c      	ldr	r3, [pc, #112]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008478:	e02b      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800847e:	e028      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008480:	4b16      	ldr	r3, [pc, #88]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008488:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800848c:	d107      	bne.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800848e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fae8 	bl	8008a68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800849c:	e019      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800849e:	2300      	movs	r3, #0
 80084a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084a2:	e016      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084a4:	4b0d      	ldr	r3, [pc, #52]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084b0:	d107      	bne.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084b2:	f107 0318 	add.w	r3, r7, #24
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 f82e 	bl	8008518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084c0:	e007      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c6:	e004      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084cc:	e001      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80084ce:	2300      	movs	r3, #0
 80084d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80084d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3740      	adds	r7, #64	@ 0x40
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	58024400 	.word	0x58024400
 80084e0:	03d09000 	.word	0x03d09000
 80084e4:	003d0900 	.word	0x003d0900
 80084e8:	017d7840 	.word	0x017d7840

080084ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80084f0:	f7fe f944 	bl	800677c <HAL_RCC_GetHCLKFreq>
 80084f4:	4602      	mov	r2, r0
 80084f6:	4b06      	ldr	r3, [pc, #24]	@ (8008510 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	091b      	lsrs	r3, r3, #4
 80084fc:	f003 0307 	and.w	r3, r3, #7
 8008500:	4904      	ldr	r1, [pc, #16]	@ (8008514 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008502:	5ccb      	ldrb	r3, [r1, r3]
 8008504:	f003 031f 	and.w	r3, r3, #31
 8008508:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800850c:	4618      	mov	r0, r3
 800850e:	bd80      	pop	{r7, pc}
 8008510:	58024400 	.word	0x58024400
 8008514:	08009db8 	.word	0x08009db8

08008518 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008518:	b480      	push	{r7}
 800851a:	b089      	sub	sp, #36	@ 0x24
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008520:	4ba1      	ldr	r3, [pc, #644]	@ (80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008524:	f003 0303 	and.w	r3, r3, #3
 8008528:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800852a:	4b9f      	ldr	r3, [pc, #636]	@ (80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800852c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852e:	0b1b      	lsrs	r3, r3, #12
 8008530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008534:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008536:	4b9c      	ldr	r3, [pc, #624]	@ (80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853a:	091b      	lsrs	r3, r3, #4
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008542:	4b99      	ldr	r3, [pc, #612]	@ (80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008546:	08db      	lsrs	r3, r3, #3
 8008548:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	fb02 f303 	mul.w	r3, r2, r3
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 8111 	beq.w	8008788 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	2b02      	cmp	r3, #2
 800856a:	f000 8083 	beq.w	8008674 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	2b02      	cmp	r3, #2
 8008572:	f200 80a1 	bhi.w	80086b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d056      	beq.n	8008630 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008582:	e099      	b.n	80086b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008584:	4b88      	ldr	r3, [pc, #544]	@ (80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0320 	and.w	r3, r3, #32
 800858c:	2b00      	cmp	r3, #0
 800858e:	d02d      	beq.n	80085ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008590:	4b85      	ldr	r3, [pc, #532]	@ (80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	08db      	lsrs	r3, r3, #3
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	4a84      	ldr	r2, [pc, #528]	@ (80087ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800859c:	fa22 f303 	lsr.w	r3, r2, r3
 80085a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	ee07 3a90 	vmov	s15, r3
 80085a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ba:	4b7b      	ldr	r3, [pc, #492]	@ (80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c2:	ee07 3a90 	vmov	s15, r3
 80085c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80087b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80085ea:	e087      	b.n	80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	ee07 3a90 	vmov	s15, r3
 80085f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80087b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80085fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085fe:	4b6a      	ldr	r3, [pc, #424]	@ (80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800860e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008612:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80087b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800861a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800861e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800862a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800862e:	e065      	b.n	80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	ee07 3a90 	vmov	s15, r3
 8008636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80087b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800863e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008642:	4b59      	ldr	r3, [pc, #356]	@ (80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800864a:	ee07 3a90 	vmov	s15, r3
 800864e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008652:	ed97 6a03 	vldr	s12, [r7, #12]
 8008656:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80087b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800865a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800865e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800866a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800866e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008672:	e043      	b.n	80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008686:	4b48      	ldr	r3, [pc, #288]	@ (80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800868a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800868e:	ee07 3a90 	vmov	s15, r3
 8008692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008696:	ed97 6a03 	vldr	s12, [r7, #12]
 800869a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80087b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800869e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086b6:	e021      	b.n	80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	ee07 3a90 	vmov	s15, r3
 80086be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80087b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80086c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ca:	4b37      	ldr	r3, [pc, #220]	@ (80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d2:	ee07 3a90 	vmov	s15, r3
 80086d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086da:	ed97 6a03 	vldr	s12, [r7, #12]
 80086de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80087b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80086fc:	4b2a      	ldr	r3, [pc, #168]	@ (80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008700:	0a5b      	lsrs	r3, r3, #9
 8008702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008706:	ee07 3a90 	vmov	s15, r3
 800870a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008712:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008716:	edd7 6a07 	vldr	s13, [r7, #28]
 800871a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800871e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008722:	ee17 2a90 	vmov	r2, s15
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800872a:	4b1f      	ldr	r3, [pc, #124]	@ (80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800872c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872e:	0c1b      	lsrs	r3, r3, #16
 8008730:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008734:	ee07 3a90 	vmov	s15, r3
 8008738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008740:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008744:	edd7 6a07 	vldr	s13, [r7, #28]
 8008748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800874c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008750:	ee17 2a90 	vmov	r2, s15
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008758:	4b13      	ldr	r3, [pc, #76]	@ (80087a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800875a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800875c:	0e1b      	lsrs	r3, r3, #24
 800875e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008762:	ee07 3a90 	vmov	s15, r3
 8008766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800876e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008772:	edd7 6a07 	vldr	s13, [r7, #28]
 8008776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800877a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800877e:	ee17 2a90 	vmov	r2, s15
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008786:	e008      	b.n	800879a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	609a      	str	r2, [r3, #8]
}
 800879a:	bf00      	nop
 800879c:	3724      	adds	r7, #36	@ 0x24
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	58024400 	.word	0x58024400
 80087ac:	03d09000 	.word	0x03d09000
 80087b0:	46000000 	.word	0x46000000
 80087b4:	4c742400 	.word	0x4c742400
 80087b8:	4a742400 	.word	0x4a742400
 80087bc:	4bbebc20 	.word	0x4bbebc20

080087c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b089      	sub	sp, #36	@ 0x24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087c8:	4ba1      	ldr	r3, [pc, #644]	@ (8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087cc:	f003 0303 	and.w	r3, r3, #3
 80087d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80087d2:	4b9f      	ldr	r3, [pc, #636]	@ (8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d6:	0d1b      	lsrs	r3, r3, #20
 80087d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80087de:	4b9c      	ldr	r3, [pc, #624]	@ (8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e2:	0a1b      	lsrs	r3, r3, #8
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80087ea:	4b99      	ldr	r3, [pc, #612]	@ (8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ee:	08db      	lsrs	r3, r3, #3
 80087f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	fb02 f303 	mul.w	r3, r2, r3
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008802:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 8111 	beq.w	8008a30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	2b02      	cmp	r3, #2
 8008812:	f000 8083 	beq.w	800891c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	2b02      	cmp	r3, #2
 800881a:	f200 80a1 	bhi.w	8008960 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d003      	beq.n	800882c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d056      	beq.n	80088d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800882a:	e099      	b.n	8008960 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800882c:	4b88      	ldr	r3, [pc, #544]	@ (8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0320 	and.w	r3, r3, #32
 8008834:	2b00      	cmp	r3, #0
 8008836:	d02d      	beq.n	8008894 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008838:	4b85      	ldr	r3, [pc, #532]	@ (8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	08db      	lsrs	r3, r3, #3
 800883e:	f003 0303 	and.w	r3, r3, #3
 8008842:	4a84      	ldr	r2, [pc, #528]	@ (8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008844:	fa22 f303 	lsr.w	r3, r2, r3
 8008848:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	ee07 3a90 	vmov	s15, r3
 8008850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008862:	4b7b      	ldr	r3, [pc, #492]	@ (8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800886a:	ee07 3a90 	vmov	s15, r3
 800886e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008872:	ed97 6a03 	vldr	s12, [r7, #12]
 8008876:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008a58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800887a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800887e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800888a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008892:	e087      	b.n	80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	ee07 3a90 	vmov	s15, r3
 800889a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008a5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80088a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a6:	4b6a      	ldr	r3, [pc, #424]	@ (8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ae:	ee07 3a90 	vmov	s15, r3
 80088b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008a58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088d6:	e065      	b.n	80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	ee07 3a90 	vmov	s15, r3
 80088de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008a60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80088e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ea:	4b59      	ldr	r3, [pc, #356]	@ (8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f2:	ee07 3a90 	vmov	s15, r3
 80088f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80088fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008a58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800890a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800890e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800891a:	e043      	b.n	80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008926:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008a64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800892a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800892e:	4b48      	ldr	r3, [pc, #288]	@ (8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008936:	ee07 3a90 	vmov	s15, r3
 800893a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800893e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008942:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008a58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800894a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800894e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800895e:	e021      	b.n	80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008a60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800896e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008972:	4b37      	ldr	r3, [pc, #220]	@ (8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897a:	ee07 3a90 	vmov	s15, r3
 800897e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008982:	ed97 6a03 	vldr	s12, [r7, #12]
 8008986:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008a58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800898a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800898e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800899e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80089a4:	4b2a      	ldr	r3, [pc, #168]	@ (8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a8:	0a5b      	lsrs	r3, r3, #9
 80089aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089ae:	ee07 3a90 	vmov	s15, r3
 80089b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089be:	edd7 6a07 	vldr	s13, [r7, #28]
 80089c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ca:	ee17 2a90 	vmov	r2, s15
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80089d2:	4b1f      	ldr	r3, [pc, #124]	@ (8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d6:	0c1b      	lsrs	r3, r3, #16
 80089d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089dc:	ee07 3a90 	vmov	s15, r3
 80089e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80089f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089f8:	ee17 2a90 	vmov	r2, s15
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008a00:	4b13      	ldr	r3, [pc, #76]	@ (8008a50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a04:	0e1b      	lsrs	r3, r3, #24
 8008a06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a0a:	ee07 3a90 	vmov	s15, r3
 8008a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a26:	ee17 2a90 	vmov	r2, s15
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008a2e:	e008      	b.n	8008a42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	609a      	str	r2, [r3, #8]
}
 8008a42:	bf00      	nop
 8008a44:	3724      	adds	r7, #36	@ 0x24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	58024400 	.word	0x58024400
 8008a54:	03d09000 	.word	0x03d09000
 8008a58:	46000000 	.word	0x46000000
 8008a5c:	4c742400 	.word	0x4c742400
 8008a60:	4a742400 	.word	0x4a742400
 8008a64:	4bbebc20 	.word	0x4bbebc20

08008a68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b089      	sub	sp, #36	@ 0x24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a70:	4ba0      	ldr	r3, [pc, #640]	@ (8008cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a74:	f003 0303 	and.w	r3, r3, #3
 8008a78:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008a7a:	4b9e      	ldr	r3, [pc, #632]	@ (8008cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a7e:	091b      	lsrs	r3, r3, #4
 8008a80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a84:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008a86:	4b9b      	ldr	r3, [pc, #620]	@ (8008cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a90:	4b98      	ldr	r3, [pc, #608]	@ (8008cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a94:	08db      	lsrs	r3, r3, #3
 8008a96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	fb02 f303 	mul.w	r3, r2, r3
 8008aa0:	ee07 3a90 	vmov	s15, r3
 8008aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 8111 	beq.w	8008cd6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	f000 8083 	beq.w	8008bc2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	f200 80a1 	bhi.w	8008c06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d056      	beq.n	8008b7e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008ad0:	e099      	b.n	8008c06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ad2:	4b88      	ldr	r3, [pc, #544]	@ (8008cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0320 	and.w	r3, r3, #32
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d02d      	beq.n	8008b3a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ade:	4b85      	ldr	r3, [pc, #532]	@ (8008cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	08db      	lsrs	r3, r3, #3
 8008ae4:	f003 0303 	and.w	r3, r3, #3
 8008ae8:	4a83      	ldr	r2, [pc, #524]	@ (8008cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008aea:	fa22 f303 	lsr.w	r3, r2, r3
 8008aee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	ee07 3a90 	vmov	s15, r3
 8008af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	ee07 3a90 	vmov	s15, r3
 8008b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b08:	4b7a      	ldr	r3, [pc, #488]	@ (8008cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b10:	ee07 3a90 	vmov	s15, r3
 8008b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b18:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b1c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008cfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b34:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b38:	e087      	b.n	8008c4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	ee07 3a90 	vmov	s15, r3
 8008b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b44:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008d00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008b48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b4c:	4b69      	ldr	r3, [pc, #420]	@ (8008cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b54:	ee07 3a90 	vmov	s15, r3
 8008b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b60:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008cfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b7c:	e065      	b.n	8008c4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	ee07 3a90 	vmov	s15, r3
 8008b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b88:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008d04 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008b8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b90:	4b58      	ldr	r3, [pc, #352]	@ (8008cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b98:	ee07 3a90 	vmov	s15, r3
 8008b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ba4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008cfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bc0:	e043      	b.n	8008c4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	ee07 3a90 	vmov	s15, r3
 8008bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bcc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008d08 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bd4:	4b47      	ldr	r3, [pc, #284]	@ (8008cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bdc:	ee07 3a90 	vmov	s15, r3
 8008be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008be8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008cfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008bec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c04:	e021      	b.n	8008c4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	ee07 3a90 	vmov	s15, r3
 8008c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c10:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008d00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c18:	4b36      	ldr	r3, [pc, #216]	@ (8008cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c20:	ee07 3a90 	vmov	s15, r3
 8008c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c28:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c2c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008cfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c48:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8008cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c4e:	0a5b      	lsrs	r3, r3, #9
 8008c50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c54:	ee07 3a90 	vmov	s15, r3
 8008c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c64:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c70:	ee17 2a90 	vmov	r2, s15
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008c78:	4b1e      	ldr	r3, [pc, #120]	@ (8008cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c7c:	0c1b      	lsrs	r3, r3, #16
 8008c7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c82:	ee07 3a90 	vmov	s15, r3
 8008c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c9e:	ee17 2a90 	vmov	r2, s15
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008ca6:	4b13      	ldr	r3, [pc, #76]	@ (8008cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008caa:	0e1b      	lsrs	r3, r3, #24
 8008cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cb0:	ee07 3a90 	vmov	s15, r3
 8008cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ccc:	ee17 2a90 	vmov	r2, s15
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008cd4:	e008      	b.n	8008ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	609a      	str	r2, [r3, #8]
}
 8008ce8:	bf00      	nop
 8008cea:	3724      	adds	r7, #36	@ 0x24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	58024400 	.word	0x58024400
 8008cf8:	03d09000 	.word	0x03d09000
 8008cfc:	46000000 	.word	0x46000000
 8008d00:	4c742400 	.word	0x4c742400
 8008d04:	4a742400 	.word	0x4a742400
 8008d08:	4bbebc20 	.word	0x4bbebc20

08008d0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d1a:	4b53      	ldr	r3, [pc, #332]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d1e:	f003 0303 	and.w	r3, r3, #3
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d101      	bne.n	8008d2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e099      	b.n	8008e5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a4e      	ldr	r2, [pc, #312]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008d30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d36:	f7f8 fa37 	bl	80011a8 <HAL_GetTick>
 8008d3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d3c:	e008      	b.n	8008d50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d3e:	f7f8 fa33 	bl	80011a8 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d901      	bls.n	8008d50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e086      	b.n	8008e5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d50:	4b45      	ldr	r3, [pc, #276]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1f0      	bne.n	8008d3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008d5c:	4b42      	ldr	r3, [pc, #264]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d60:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	031b      	lsls	r3, r3, #12
 8008d6a:	493f      	ldr	r1, [pc, #252]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	3b01      	subs	r3, #1
 8008d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	025b      	lsls	r3, r3, #9
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	431a      	orrs	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	041b      	lsls	r3, r3, #16
 8008d8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008d92:	431a      	orrs	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	061b      	lsls	r3, r3, #24
 8008d9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008da0:	4931      	ldr	r1, [pc, #196]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008da6:	4b30      	ldr	r3, [pc, #192]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008daa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	492d      	ldr	r1, [pc, #180]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008db8:	4b2b      	ldr	r3, [pc, #172]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dbc:	f023 0220 	bic.w	r2, r3, #32
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	4928      	ldr	r1, [pc, #160]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008dca:	4b27      	ldr	r3, [pc, #156]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dce:	4a26      	ldr	r2, [pc, #152]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008dd0:	f023 0310 	bic.w	r3, r3, #16
 8008dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008dd6:	4b24      	ldr	r3, [pc, #144]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008dd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dda:	4b24      	ldr	r3, [pc, #144]	@ (8008e6c <RCCEx_PLL2_Config+0x160>)
 8008ddc:	4013      	ands	r3, r2
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	69d2      	ldr	r2, [r2, #28]
 8008de2:	00d2      	lsls	r2, r2, #3
 8008de4:	4920      	ldr	r1, [pc, #128]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008dea:	4b1f      	ldr	r3, [pc, #124]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dee:	4a1e      	ldr	r2, [pc, #120]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008df0:	f043 0310 	orr.w	r3, r3, #16
 8008df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d106      	bne.n	8008e0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e00:	4a19      	ldr	r2, [pc, #100]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008e08:	e00f      	b.n	8008e2a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d106      	bne.n	8008e1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008e10:	4b15      	ldr	r3, [pc, #84]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e14:	4a14      	ldr	r2, [pc, #80]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008e1c:	e005      	b.n	8008e2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008e1e:	4b12      	ldr	r3, [pc, #72]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e22:	4a11      	ldr	r2, [pc, #68]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008e28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e36:	f7f8 f9b7 	bl	80011a8 <HAL_GetTick>
 8008e3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e3c:	e008      	b.n	8008e50 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e3e:	f7f8 f9b3 	bl	80011a8 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d901      	bls.n	8008e50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e006      	b.n	8008e5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e50:	4b05      	ldr	r3, [pc, #20]	@ (8008e68 <RCCEx_PLL2_Config+0x15c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d0f0      	beq.n	8008e3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	58024400 	.word	0x58024400
 8008e6c:	ffff0007 	.word	0xffff0007

08008e70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e7e:	4b53      	ldr	r3, [pc, #332]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d101      	bne.n	8008e8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e099      	b.n	8008fc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008e8e:	4b4f      	ldr	r3, [pc, #316]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a4e      	ldr	r2, [pc, #312]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e9a:	f7f8 f985 	bl	80011a8 <HAL_GetTick>
 8008e9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ea0:	e008      	b.n	8008eb4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ea2:	f7f8 f981 	bl	80011a8 <HAL_GetTick>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d901      	bls.n	8008eb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e086      	b.n	8008fc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008eb4:	4b45      	ldr	r3, [pc, #276]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1f0      	bne.n	8008ea2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008ec0:	4b42      	ldr	r3, [pc, #264]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	051b      	lsls	r3, r3, #20
 8008ece:	493f      	ldr	r1, [pc, #252]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	025b      	lsls	r3, r3, #9
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	041b      	lsls	r3, r3, #16
 8008ef2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	061b      	lsls	r3, r3, #24
 8008f00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f04:	4931      	ldr	r1, [pc, #196]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008f0a:	4b30      	ldr	r3, [pc, #192]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	492d      	ldr	r1, [pc, #180]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f20:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	4928      	ldr	r1, [pc, #160]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008f2e:	4b27      	ldr	r3, [pc, #156]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f32:	4a26      	ldr	r2, [pc, #152]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f3a:	4b24      	ldr	r3, [pc, #144]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f3e:	4b24      	ldr	r3, [pc, #144]	@ (8008fd0 <RCCEx_PLL3_Config+0x160>)
 8008f40:	4013      	ands	r3, r2
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	69d2      	ldr	r2, [r2, #28]
 8008f46:	00d2      	lsls	r2, r2, #3
 8008f48:	4920      	ldr	r1, [pc, #128]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f52:	4a1e      	ldr	r2, [pc, #120]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d106      	bne.n	8008f6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008f60:	4b1a      	ldr	r3, [pc, #104]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f64:	4a19      	ldr	r2, [pc, #100]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f6c:	e00f      	b.n	8008f8e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d106      	bne.n	8008f82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008f74:	4b15      	ldr	r3, [pc, #84]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f78:	4a14      	ldr	r2, [pc, #80]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f80:	e005      	b.n	8008f8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008f82:	4b12      	ldr	r3, [pc, #72]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f86:	4a11      	ldr	r2, [pc, #68]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a0e      	ldr	r2, [pc, #56]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f9a:	f7f8 f905 	bl	80011a8 <HAL_GetTick>
 8008f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008fa0:	e008      	b.n	8008fb4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008fa2:	f7f8 f901 	bl	80011a8 <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d901      	bls.n	8008fb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e006      	b.n	8008fc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008fb4:	4b05      	ldr	r3, [pc, #20]	@ (8008fcc <RCCEx_PLL3_Config+0x15c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d0f0      	beq.n	8008fa2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	58024400 	.word	0x58024400
 8008fd0:	ffff0007 	.word	0xffff0007

08008fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d101      	bne.n	8008fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e049      	b.n	800907a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d106      	bne.n	8009000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7f7 ff1a 	bl	8000e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2202      	movs	r2, #2
 8009004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3304      	adds	r3, #4
 8009010:	4619      	mov	r1, r3
 8009012:	4610      	mov	r0, r2
 8009014:	f000 fb38 	bl	8009688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
	...

08009084 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b01      	cmp	r3, #1
 8009096:	d001      	beq.n	800909c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e056      	b.n	800914a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2202      	movs	r2, #2
 80090a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a2b      	ldr	r2, [pc, #172]	@ (8009158 <HAL_TIM_Base_Start+0xd4>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d02c      	beq.n	8009108 <HAL_TIM_Base_Start+0x84>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090b6:	d027      	beq.n	8009108 <HAL_TIM_Base_Start+0x84>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a27      	ldr	r2, [pc, #156]	@ (800915c <HAL_TIM_Base_Start+0xd8>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d022      	beq.n	8009108 <HAL_TIM_Base_Start+0x84>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a26      	ldr	r2, [pc, #152]	@ (8009160 <HAL_TIM_Base_Start+0xdc>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d01d      	beq.n	8009108 <HAL_TIM_Base_Start+0x84>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a24      	ldr	r2, [pc, #144]	@ (8009164 <HAL_TIM_Base_Start+0xe0>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d018      	beq.n	8009108 <HAL_TIM_Base_Start+0x84>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a23      	ldr	r2, [pc, #140]	@ (8009168 <HAL_TIM_Base_Start+0xe4>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d013      	beq.n	8009108 <HAL_TIM_Base_Start+0x84>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a21      	ldr	r2, [pc, #132]	@ (800916c <HAL_TIM_Base_Start+0xe8>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d00e      	beq.n	8009108 <HAL_TIM_Base_Start+0x84>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a20      	ldr	r2, [pc, #128]	@ (8009170 <HAL_TIM_Base_Start+0xec>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d009      	beq.n	8009108 <HAL_TIM_Base_Start+0x84>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a1e      	ldr	r2, [pc, #120]	@ (8009174 <HAL_TIM_Base_Start+0xf0>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d004      	beq.n	8009108 <HAL_TIM_Base_Start+0x84>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a1d      	ldr	r2, [pc, #116]	@ (8009178 <HAL_TIM_Base_Start+0xf4>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d115      	bne.n	8009134 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	689a      	ldr	r2, [r3, #8]
 800910e:	4b1b      	ldr	r3, [pc, #108]	@ (800917c <HAL_TIM_Base_Start+0xf8>)
 8009110:	4013      	ands	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2b06      	cmp	r3, #6
 8009118:	d015      	beq.n	8009146 <HAL_TIM_Base_Start+0xc2>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009120:	d011      	beq.n	8009146 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f042 0201 	orr.w	r2, r2, #1
 8009130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009132:	e008      	b.n	8009146 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f042 0201 	orr.w	r2, r2, #1
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	e000      	b.n	8009148 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009146:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	40010000 	.word	0x40010000
 800915c:	40000400 	.word	0x40000400
 8009160:	40000800 	.word	0x40000800
 8009164:	40000c00 	.word	0x40000c00
 8009168:	40010400 	.word	0x40010400
 800916c:	40001800 	.word	0x40001800
 8009170:	40014000 	.word	0x40014000
 8009174:	4000e000 	.word	0x4000e000
 8009178:	4000e400 	.word	0x4000e400
 800917c:	00010007 	.word	0x00010007

08009180 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d101      	bne.n	8009194 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	e08f      	b.n	80092b4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b00      	cmp	r3, #0
 800919e:	d106      	bne.n	80091ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7f7 fdf1 	bl	8000d90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2202      	movs	r2, #2
 80091b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	6899      	ldr	r1, [r3, #8]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	4b3e      	ldr	r3, [pc, #248]	@ (80092bc <HAL_TIM_Encoder_Init+0x13c>)
 80091c2:	400b      	ands	r3, r1
 80091c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	3304      	adds	r3, #4
 80091ce:	4619      	mov	r1, r3
 80091d0:	4610      	mov	r0, r2
 80091d2:	f000 fa59 	bl	8009688 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	4b31      	ldr	r3, [pc, #196]	@ (80092c0 <HAL_TIM_Encoder_Init+0x140>)
 80091fc:	4013      	ands	r3, r2
 80091fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	689a      	ldr	r2, [r3, #8]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	021b      	lsls	r3, r3, #8
 800920a:	4313      	orrs	r3, r2
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	4b2b      	ldr	r3, [pc, #172]	@ (80092c4 <HAL_TIM_Encoder_Init+0x144>)
 8009216:	4013      	ands	r3, r2
 8009218:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	4b2a      	ldr	r3, [pc, #168]	@ (80092c8 <HAL_TIM_Encoder_Init+0x148>)
 800921e:	4013      	ands	r3, r2
 8009220:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	68da      	ldr	r2, [r3, #12]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	021b      	lsls	r3, r3, #8
 800922c:	4313      	orrs	r3, r2
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	4313      	orrs	r3, r2
 8009232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	011a      	lsls	r2, r3, #4
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	031b      	lsls	r3, r3, #12
 8009240:	4313      	orrs	r3, r2
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	4313      	orrs	r3, r2
 8009246:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800924e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009256:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	011b      	lsls	r3, r3, #4
 8009262:	4313      	orrs	r3, r2
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	4313      	orrs	r3, r2
 8009268:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	fffebff8 	.word	0xfffebff8
 80092c0:	fffffcfc 	.word	0xfffffcfc
 80092c4:	fffff3f3 	.word	0xfffff3f3
 80092c8:	ffff0f0f 	.word	0xffff0f0f

080092cc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80092dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80092e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d110      	bne.n	800931e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d102      	bne.n	8009308 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009302:	7b7b      	ldrb	r3, [r7, #13]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d001      	beq.n	800930c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	e089      	b.n	8009420 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2202      	movs	r2, #2
 8009318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800931c:	e031      	b.n	8009382 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b04      	cmp	r3, #4
 8009322:	d110      	bne.n	8009346 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009324:	7bbb      	ldrb	r3, [r7, #14]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d102      	bne.n	8009330 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800932a:	7b3b      	ldrb	r3, [r7, #12]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d001      	beq.n	8009334 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e075      	b.n	8009420 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2202      	movs	r2, #2
 8009338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009344:	e01d      	b.n	8009382 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009346:	7bfb      	ldrb	r3, [r7, #15]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d108      	bne.n	800935e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d105      	bne.n	800935e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009352:	7b7b      	ldrb	r3, [r7, #13]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d102      	bne.n	800935e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009358:	7b3b      	ldrb	r3, [r7, #12]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d001      	beq.n	8009362 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e05e      	b.n	8009420 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2202      	movs	r2, #2
 8009366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2202      	movs	r2, #2
 800936e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2202      	movs	r2, #2
 8009376:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2202      	movs	r2, #2
 800937e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <HAL_TIM_Encoder_Start_IT+0xc4>
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2b04      	cmp	r3, #4
 800938c:	d010      	beq.n	80093b0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800938e:	e01f      	b.n	80093d0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2201      	movs	r2, #1
 8009396:	2100      	movs	r1, #0
 8009398:	4618      	mov	r0, r3
 800939a:	f000 fa27 	bl	80097ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68da      	ldr	r2, [r3, #12]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f042 0202 	orr.w	r2, r2, #2
 80093ac:	60da      	str	r2, [r3, #12]
      break;
 80093ae:	e02e      	b.n	800940e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2201      	movs	r2, #1
 80093b6:	2104      	movs	r1, #4
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 fa17 	bl	80097ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68da      	ldr	r2, [r3, #12]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f042 0204 	orr.w	r2, r2, #4
 80093cc:	60da      	str	r2, [r3, #12]
      break;
 80093ce:	e01e      	b.n	800940e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2201      	movs	r2, #1
 80093d6:	2100      	movs	r1, #0
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 fa07 	bl	80097ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2201      	movs	r2, #1
 80093e4:	2104      	movs	r1, #4
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 fa00 	bl	80097ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68da      	ldr	r2, [r3, #12]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f042 0202 	orr.w	r2, r2, #2
 80093fa:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f042 0204 	orr.w	r2, r2, #4
 800940a:	60da      	str	r2, [r3, #12]
      break;
 800940c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f042 0201 	orr.w	r2, r2, #1
 800941c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	f003 0302 	and.w	r3, r3, #2
 8009446:	2b00      	cmp	r3, #0
 8009448:	d020      	beq.n	800948c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f003 0302 	and.w	r3, r3, #2
 8009450:	2b00      	cmp	r3, #0
 8009452:	d01b      	beq.n	800948c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f06f 0202 	mvn.w	r2, #2
 800945c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7f6 ff4c 	bl	8000310 <HAL_TIM_IC_CaptureCallback>
 8009478:	e005      	b.n	8009486 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f8e5 	bl	800964a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f8ec 	bl	800965e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	f003 0304 	and.w	r3, r3, #4
 8009492:	2b00      	cmp	r3, #0
 8009494:	d020      	beq.n	80094d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b00      	cmp	r3, #0
 800949e:	d01b      	beq.n	80094d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f06f 0204 	mvn.w	r2, #4
 80094a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2202      	movs	r2, #2
 80094ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d003      	beq.n	80094c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7f6 ff26 	bl	8000310 <HAL_TIM_IC_CaptureCallback>
 80094c4:	e005      	b.n	80094d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f8bf 	bl	800964a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f8c6 	bl	800965e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	f003 0308 	and.w	r3, r3, #8
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d020      	beq.n	8009524 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f003 0308 	and.w	r3, r3, #8
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d01b      	beq.n	8009524 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f06f 0208 	mvn.w	r2, #8
 80094f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2204      	movs	r2, #4
 80094fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	f003 0303 	and.w	r3, r3, #3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7f6 ff00 	bl	8000310 <HAL_TIM_IC_CaptureCallback>
 8009510:	e005      	b.n	800951e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f899 	bl	800964a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f8a0 	bl	800965e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f003 0310 	and.w	r3, r3, #16
 800952a:	2b00      	cmp	r3, #0
 800952c:	d020      	beq.n	8009570 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f003 0310 	and.w	r3, r3, #16
 8009534:	2b00      	cmp	r3, #0
 8009536:	d01b      	beq.n	8009570 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f06f 0210 	mvn.w	r2, #16
 8009540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2208      	movs	r2, #8
 8009546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009552:	2b00      	cmp	r3, #0
 8009554:	d003      	beq.n	800955e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7f6 feda 	bl	8000310 <HAL_TIM_IC_CaptureCallback>
 800955c:	e005      	b.n	800956a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f873 	bl	800964a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f87a 	bl	800965e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00c      	beq.n	8009594 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b00      	cmp	r3, #0
 8009582:	d007      	beq.n	8009594 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f06f 0201 	mvn.w	r2, #1
 800958c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f851 	bl	8009636 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800959a:	2b00      	cmp	r3, #0
 800959c:	d104      	bne.n	80095a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00c      	beq.n	80095c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d007      	beq.n	80095c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80095ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f9e1 	bl	8009984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d00c      	beq.n	80095e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d007      	beq.n	80095e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80095de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f9d9 	bl	8009998 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00c      	beq.n	800960a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d007      	beq.n	800960a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f834 	bl	8009672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	f003 0320 	and.w	r3, r3, #32
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00c      	beq.n	800962e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f003 0320 	and.w	r3, r3, #32
 800961a:	2b00      	cmp	r3, #0
 800961c:	d007      	beq.n	800962e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f06f 0220 	mvn.w	r2, #32
 8009626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f9a1 	bl	8009970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800962e:	bf00      	nop
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800963e:	bf00      	nop
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800964a:	b480      	push	{r7}
 800964c:	b083      	sub	sp, #12
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009652:	bf00      	nop
 8009654:	370c      	adds	r7, #12
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800965e:	b480      	push	{r7}
 8009660:	b083      	sub	sp, #12
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009666:	bf00      	nop
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009672:	b480      	push	{r7}
 8009674:	b083      	sub	sp, #12
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800967a:	bf00      	nop
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
	...

08009688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a4a      	ldr	r2, [pc, #296]	@ (80097c4 <TIM_Base_SetConfig+0x13c>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d013      	beq.n	80096c8 <TIM_Base_SetConfig+0x40>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096a6:	d00f      	beq.n	80096c8 <TIM_Base_SetConfig+0x40>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a47      	ldr	r2, [pc, #284]	@ (80097c8 <TIM_Base_SetConfig+0x140>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d00b      	beq.n	80096c8 <TIM_Base_SetConfig+0x40>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a46      	ldr	r2, [pc, #280]	@ (80097cc <TIM_Base_SetConfig+0x144>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d007      	beq.n	80096c8 <TIM_Base_SetConfig+0x40>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a45      	ldr	r2, [pc, #276]	@ (80097d0 <TIM_Base_SetConfig+0x148>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d003      	beq.n	80096c8 <TIM_Base_SetConfig+0x40>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a44      	ldr	r2, [pc, #272]	@ (80097d4 <TIM_Base_SetConfig+0x14c>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d108      	bne.n	80096da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a39      	ldr	r2, [pc, #228]	@ (80097c4 <TIM_Base_SetConfig+0x13c>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d027      	beq.n	8009732 <TIM_Base_SetConfig+0xaa>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096e8:	d023      	beq.n	8009732 <TIM_Base_SetConfig+0xaa>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a36      	ldr	r2, [pc, #216]	@ (80097c8 <TIM_Base_SetConfig+0x140>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d01f      	beq.n	8009732 <TIM_Base_SetConfig+0xaa>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a35      	ldr	r2, [pc, #212]	@ (80097cc <TIM_Base_SetConfig+0x144>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d01b      	beq.n	8009732 <TIM_Base_SetConfig+0xaa>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a34      	ldr	r2, [pc, #208]	@ (80097d0 <TIM_Base_SetConfig+0x148>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d017      	beq.n	8009732 <TIM_Base_SetConfig+0xaa>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a33      	ldr	r2, [pc, #204]	@ (80097d4 <TIM_Base_SetConfig+0x14c>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d013      	beq.n	8009732 <TIM_Base_SetConfig+0xaa>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a32      	ldr	r2, [pc, #200]	@ (80097d8 <TIM_Base_SetConfig+0x150>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d00f      	beq.n	8009732 <TIM_Base_SetConfig+0xaa>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a31      	ldr	r2, [pc, #196]	@ (80097dc <TIM_Base_SetConfig+0x154>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00b      	beq.n	8009732 <TIM_Base_SetConfig+0xaa>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a30      	ldr	r2, [pc, #192]	@ (80097e0 <TIM_Base_SetConfig+0x158>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d007      	beq.n	8009732 <TIM_Base_SetConfig+0xaa>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a2f      	ldr	r2, [pc, #188]	@ (80097e4 <TIM_Base_SetConfig+0x15c>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d003      	beq.n	8009732 <TIM_Base_SetConfig+0xaa>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a2e      	ldr	r2, [pc, #184]	@ (80097e8 <TIM_Base_SetConfig+0x160>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d108      	bne.n	8009744 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	4313      	orrs	r3, r2
 8009742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a16      	ldr	r2, [pc, #88]	@ (80097c4 <TIM_Base_SetConfig+0x13c>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d00f      	beq.n	8009790 <TIM_Base_SetConfig+0x108>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a18      	ldr	r2, [pc, #96]	@ (80097d4 <TIM_Base_SetConfig+0x14c>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00b      	beq.n	8009790 <TIM_Base_SetConfig+0x108>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a17      	ldr	r2, [pc, #92]	@ (80097d8 <TIM_Base_SetConfig+0x150>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d007      	beq.n	8009790 <TIM_Base_SetConfig+0x108>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a16      	ldr	r2, [pc, #88]	@ (80097dc <TIM_Base_SetConfig+0x154>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d003      	beq.n	8009790 <TIM_Base_SetConfig+0x108>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a15      	ldr	r2, [pc, #84]	@ (80097e0 <TIM_Base_SetConfig+0x158>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d103      	bne.n	8009798 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	691a      	ldr	r2, [r3, #16]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	f003 0301 	and.w	r3, r3, #1
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d105      	bne.n	80097b6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	f023 0201 	bic.w	r2, r3, #1
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	611a      	str	r2, [r3, #16]
  }
}
 80097b6:	bf00      	nop
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	40010000 	.word	0x40010000
 80097c8:	40000400 	.word	0x40000400
 80097cc:	40000800 	.word	0x40000800
 80097d0:	40000c00 	.word	0x40000c00
 80097d4:	40010400 	.word	0x40010400
 80097d8:	40014000 	.word	0x40014000
 80097dc:	40014400 	.word	0x40014400
 80097e0:	40014800 	.word	0x40014800
 80097e4:	4000e000 	.word	0x4000e000
 80097e8:	4000e400 	.word	0x4000e400

080097ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	f003 031f 	and.w	r3, r3, #31
 80097fe:	2201      	movs	r2, #1
 8009800:	fa02 f303 	lsl.w	r3, r2, r3
 8009804:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6a1a      	ldr	r2, [r3, #32]
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	43db      	mvns	r3, r3
 800980e:	401a      	ands	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6a1a      	ldr	r2, [r3, #32]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	f003 031f 	and.w	r3, r3, #31
 800981e:	6879      	ldr	r1, [r7, #4]
 8009820:	fa01 f303 	lsl.w	r3, r1, r3
 8009824:	431a      	orrs	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	621a      	str	r2, [r3, #32]
}
 800982a:	bf00      	nop
 800982c:	371c      	adds	r7, #28
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
	...

08009838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009848:	2b01      	cmp	r3, #1
 800984a:	d101      	bne.n	8009850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800984c:	2302      	movs	r3, #2
 800984e:	e077      	b.n	8009940 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2202      	movs	r2, #2
 800985c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a35      	ldr	r2, [pc, #212]	@ (800994c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d004      	beq.n	8009884 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a34      	ldr	r2, [pc, #208]	@ (8009950 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d108      	bne.n	8009896 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800988a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	4313      	orrs	r3, r2
 8009894:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800989c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a25      	ldr	r2, [pc, #148]	@ (800994c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d02c      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098c2:	d027      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a22      	ldr	r2, [pc, #136]	@ (8009954 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d022      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a21      	ldr	r2, [pc, #132]	@ (8009958 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d01d      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a1f      	ldr	r2, [pc, #124]	@ (800995c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d018      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a1a      	ldr	r2, [pc, #104]	@ (8009950 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d013      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a1b      	ldr	r2, [pc, #108]	@ (8009960 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d00e      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a1a      	ldr	r2, [pc, #104]	@ (8009964 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d009      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a18      	ldr	r2, [pc, #96]	@ (8009968 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d004      	beq.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a17      	ldr	r2, [pc, #92]	@ (800996c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d10c      	bne.n	800992e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800991a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	4313      	orrs	r3, r2
 8009924:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3714      	adds	r7, #20
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	40010000 	.word	0x40010000
 8009950:	40010400 	.word	0x40010400
 8009954:	40000400 	.word	0x40000400
 8009958:	40000800 	.word	0x40000800
 800995c:	40000c00 	.word	0x40000c00
 8009960:	40001800 	.word	0x40001800
 8009964:	40014000 	.word	0x40014000
 8009968:	4000e000 	.word	0x4000e000
 800996c:	4000e400 	.word	0x4000e400

08009970 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <checkint>:
 80099ac:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80099b0:	2b7e      	cmp	r3, #126	@ 0x7e
 80099b2:	d910      	bls.n	80099d6 <checkint+0x2a>
 80099b4:	2b96      	cmp	r3, #150	@ 0x96
 80099b6:	d80c      	bhi.n	80099d2 <checkint+0x26>
 80099b8:	2201      	movs	r2, #1
 80099ba:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80099be:	fa02 f303 	lsl.w	r3, r2, r3
 80099c2:	1e5a      	subs	r2, r3, #1
 80099c4:	4202      	tst	r2, r0
 80099c6:	d106      	bne.n	80099d6 <checkint+0x2a>
 80099c8:	4203      	tst	r3, r0
 80099ca:	bf0c      	ite	eq
 80099cc:	2002      	moveq	r0, #2
 80099ce:	2001      	movne	r0, #1
 80099d0:	4770      	bx	lr
 80099d2:	2002      	movs	r0, #2
 80099d4:	4770      	bx	lr
 80099d6:	2000      	movs	r0, #0
 80099d8:	4770      	bx	lr
 80099da:	0000      	movs	r0, r0
 80099dc:	0000      	movs	r0, r0
	...

080099e0 <powf>:
 80099e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099e2:	ee10 1a10 	vmov	r1, s0
 80099e6:	ee10 4a90 	vmov	r4, s1
 80099ea:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 80099ee:	0063      	lsls	r3, r4, #1
 80099f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80099f4:	eef0 7a40 	vmov.f32	s15, s0
 80099f8:	eeb0 7a60 	vmov.f32	s14, s1
 80099fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8009a00:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 8009a04:	d252      	bcs.n	8009aac <powf+0xcc>
 8009a06:	4290      	cmp	r0, r2
 8009a08:	d258      	bcs.n	8009abc <powf+0xdc>
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 8009a10:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 8009a14:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8009a18:	0ddb      	lsrs	r3, r3, #23
 8009a1a:	4a9d      	ldr	r2, [pc, #628]	@ (8009c90 <powf+0x2b0>)
 8009a1c:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 8009a20:	05db      	lsls	r3, r3, #23
 8009a22:	1ac9      	subs	r1, r1, r3
 8009a24:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8009a28:	ee07 1a90 	vmov	s15, r1
 8009a2c:	ed94 5b02 	vldr	d5, [r4, #8]
 8009a30:	ed94 4b00 	vldr	d4, [r4]
 8009a34:	15db      	asrs	r3, r3, #23
 8009a36:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8009a3a:	ee07 3a90 	vmov	s15, r3
 8009a3e:	eea4 2b06 	vfma.f64	d2, d4, d6
 8009a42:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 8009a46:	ee22 4b02 	vmul.f64	d4, d2, d2
 8009a4a:	ee24 0b04 	vmul.f64	d0, d4, d4
 8009a4e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8009a52:	ee36 6b05 	vadd.f64	d6, d6, d5
 8009a56:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 8009a5a:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 8009a5e:	eea2 1b05 	vfma.f64	d1, d2, d5
 8009a62:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 8009a66:	eea2 5b03 	vfma.f64	d5, d2, d3
 8009a6a:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 8009a6e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8009a72:	eea2 6b03 	vfma.f64	d6, d2, d3
 8009a76:	eea4 6b05 	vfma.f64	d6, d4, d5
 8009a7a:	eea1 6b00 	vfma.f64	d6, d1, d0
 8009a7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a82:	ee17 3a90 	vmov	r3, s15
 8009a86:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8009a8a:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	f0c0 80b8 	bcc.w	8009c04 <powf+0x224>
 8009a94:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8009c70 <powf+0x290>
 8009a98:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa0:	dd79      	ble.n	8009b96 <powf+0x1b6>
 8009aa2:	b003      	add	sp, #12
 8009aa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009aa8:	f000 b920 	b.w	8009cec <__math_oflowf>
 8009aac:	4290      	cmp	r0, r2
 8009aae:	d330      	bcc.n	8009b12 <powf+0x132>
 8009ab0:	b12b      	cbz	r3, 8009abe <powf+0xde>
 8009ab2:	0049      	lsls	r1, r1, #1
 8009ab4:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 8009ab8:	d808      	bhi.n	8009acc <powf+0xec>
 8009aba:	e015      	b.n	8009ae8 <powf+0x108>
 8009abc:	b953      	cbnz	r3, 8009ad4 <powf+0xf4>
 8009abe:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 8009ac2:	0049      	lsls	r1, r1, #1
 8009ac4:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 8009ac8:	f240 80ca 	bls.w	8009c60 <powf+0x280>
 8009acc:	ee37 0a87 	vadd.f32	s0, s15, s14
 8009ad0:	b003      	add	sp, #12
 8009ad2:	bd30      	pop	{r4, r5, pc}
 8009ad4:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8009ad8:	d105      	bne.n	8009ae6 <powf+0x106>
 8009ada:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8009ade:	0064      	lsls	r4, r4, #1
 8009ae0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009ae4:	e7f0      	b.n	8009ac8 <powf+0xe8>
 8009ae6:	0049      	lsls	r1, r1, #1
 8009ae8:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 8009aec:	d1ee      	bne.n	8009acc <powf+0xec>
 8009aee:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8009af2:	f000 80b5 	beq.w	8009c60 <powf+0x280>
 8009af6:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8009afa:	ea6f 0404 	mvn.w	r4, r4
 8009afe:	bf34      	ite	cc
 8009b00:	2100      	movcc	r1, #0
 8009b02:	2101      	movcs	r1, #1
 8009b04:	0fe4      	lsrs	r4, r4, #31
 8009b06:	42a1      	cmp	r1, r4
 8009b08:	f040 80ad 	bne.w	8009c66 <powf+0x286>
 8009b0c:	ee27 0a07 	vmul.f32	s0, s14, s14
 8009b10:	e7de      	b.n	8009ad0 <powf+0xf0>
 8009b12:	004d      	lsls	r5, r1, #1
 8009b14:	1e6b      	subs	r3, r5, #1
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d31b      	bcc.n	8009b52 <powf+0x172>
 8009b1a:	2900      	cmp	r1, #0
 8009b1c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009b20:	da0e      	bge.n	8009b40 <powf+0x160>
 8009b22:	4620      	mov	r0, r4
 8009b24:	f7ff ff42 	bl	80099ac <checkint>
 8009b28:	2801      	cmp	r0, #1
 8009b2a:	d109      	bne.n	8009b40 <powf+0x160>
 8009b2c:	eeb1 0a40 	vneg.f32	s0, s0
 8009b30:	b945      	cbnz	r5, 8009b44 <powf+0x164>
 8009b32:	2c00      	cmp	r4, #0
 8009b34:	dacc      	bge.n	8009ad0 <powf+0xf0>
 8009b36:	b003      	add	sp, #12
 8009b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b3c:	f000 b8dc 	b.w	8009cf8 <__math_divzerof>
 8009b40:	2000      	movs	r0, #0
 8009b42:	e7f5      	b.n	8009b30 <powf+0x150>
 8009b44:	2c00      	cmp	r4, #0
 8009b46:	dac3      	bge.n	8009ad0 <powf+0xf0>
 8009b48:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009b4c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009b50:	e7be      	b.n	8009ad0 <powf+0xf0>
 8009b52:	2900      	cmp	r1, #0
 8009b54:	da1d      	bge.n	8009b92 <powf+0x1b2>
 8009b56:	4620      	mov	r0, r4
 8009b58:	f7ff ff28 	bl	80099ac <checkint>
 8009b5c:	b920      	cbnz	r0, 8009b68 <powf+0x188>
 8009b5e:	b003      	add	sp, #12
 8009b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b64:	f000 b8da 	b.w	8009d1c <__math_invalidf>
 8009b68:	1e43      	subs	r3, r0, #1
 8009b6a:	4258      	negs	r0, r3
 8009b6c:	4158      	adcs	r0, r3
 8009b6e:	0400      	lsls	r0, r0, #16
 8009b70:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8009b74:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8009b78:	f4bf af48 	bcs.w	8009a0c <powf+0x2c>
 8009b7c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8009c94 <powf+0x2b4>
 8009b80:	ee27 0aa6 	vmul.f32	s0, s15, s13
 8009b84:	ee10 3a10 	vmov	r3, s0
 8009b88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b8c:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 8009b90:	e73c      	b.n	8009a0c <powf+0x2c>
 8009b92:	2000      	movs	r0, #0
 8009b94:	e7ee      	b.n	8009b74 <powf+0x194>
 8009b96:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8009c78 <powf+0x298>
 8009b9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba2:	dd0f      	ble.n	8009bc4 <powf+0x1e4>
 8009ba4:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 8009ba8:	b1c0      	cbz	r0, 8009bdc <powf+0x1fc>
 8009baa:	9301      	str	r3, [sp, #4]
 8009bac:	eddd 6a01 	vldr	s13, [sp, #4]
 8009bb0:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 8009bb4:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009bb8:	eef4 6a46 	vcmp.f32	s13, s12
 8009bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc0:	f47f af6f 	bne.w	8009aa2 <powf+0xc2>
 8009bc4:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8009c80 <powf+0x2a0>
 8009bc8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd0:	d80c      	bhi.n	8009bec <powf+0x20c>
 8009bd2:	b003      	add	sp, #12
 8009bd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bd8:	f000 b87c 	b.w	8009cd4 <__math_uflowf>
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	eddd 6a00 	vldr	s13, [sp]
 8009be2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8009be6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009bea:	e7e5      	b.n	8009bb8 <powf+0x1d8>
 8009bec:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8009c88 <powf+0x2a8>
 8009bf0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bf8:	d504      	bpl.n	8009c04 <powf+0x224>
 8009bfa:	b003      	add	sp, #12
 8009bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c00:	f000 b86e 	b.w	8009ce0 <__math_may_uflowf>
 8009c04:	4b24      	ldr	r3, [pc, #144]	@ (8009c98 <powf+0x2b8>)
 8009c06:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8009c0a:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 8009c0e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009c12:	ee16 2a10 	vmov	r2, s12
 8009c16:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c1a:	f002 011f 	and.w	r1, r2, #31
 8009c1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009c22:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 8009c26:	ee27 4b07 	vmul.f64	d4, d7, d7
 8009c2a:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 8009c2e:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8009c32:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8009c36:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009c3a:	686d      	ldr	r5, [r5, #4]
 8009c3c:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 8009c40:	1880      	adds	r0, r0, r2
 8009c42:	2100      	movs	r1, #0
 8009c44:	190a      	adds	r2, r1, r4
 8009c46:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8009c4a:	eea7 0b05 	vfma.f64	d0, d7, d5
 8009c4e:	ec43 2b17 	vmov	d7, r2, r3
 8009c52:	eea6 0b04 	vfma.f64	d0, d6, d4
 8009c56:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009c5a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009c5e:	e737      	b.n	8009ad0 <powf+0xf0>
 8009c60:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009c64:	e734      	b.n	8009ad0 <powf+0xf0>
 8009c66:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8009c9c <powf+0x2bc>
 8009c6a:	e731      	b.n	8009ad0 <powf+0xf0>
 8009c6c:	f3af 8000 	nop.w
 8009c70:	ffd1d571 	.word	0xffd1d571
 8009c74:	405fffff 	.word	0x405fffff
 8009c78:	ffa3aae2 	.word	0xffa3aae2
 8009c7c:	405fffff 	.word	0x405fffff
 8009c80:	00000000 	.word	0x00000000
 8009c84:	c062c000 	.word	0xc062c000
 8009c88:	00000000 	.word	0x00000000
 8009c8c:	c062a000 	.word	0xc062a000
 8009c90:	08009f18 	.word	0x08009f18
 8009c94:	4b000000 	.word	0x4b000000
 8009c98:	08009dd0 	.word	0x08009dd0
 8009c9c:	00000000 	.word	0x00000000

08009ca0 <with_errnof>:
 8009ca0:	b510      	push	{r4, lr}
 8009ca2:	ed2d 8b02 	vpush	{d8}
 8009ca6:	eeb0 8a40 	vmov.f32	s16, s0
 8009caa:	4604      	mov	r4, r0
 8009cac:	f000 f84e 	bl	8009d4c <__errno>
 8009cb0:	eeb0 0a48 	vmov.f32	s0, s16
 8009cb4:	ecbd 8b02 	vpop	{d8}
 8009cb8:	6004      	str	r4, [r0, #0]
 8009cba:	bd10      	pop	{r4, pc}

08009cbc <xflowf>:
 8009cbc:	b130      	cbz	r0, 8009ccc <xflowf+0x10>
 8009cbe:	eef1 7a40 	vneg.f32	s15, s0
 8009cc2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009cc6:	2022      	movs	r0, #34	@ 0x22
 8009cc8:	f7ff bfea 	b.w	8009ca0 <with_errnof>
 8009ccc:	eef0 7a40 	vmov.f32	s15, s0
 8009cd0:	e7f7      	b.n	8009cc2 <xflowf+0x6>
	...

08009cd4 <__math_uflowf>:
 8009cd4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009cdc <__math_uflowf+0x8>
 8009cd8:	f7ff bff0 	b.w	8009cbc <xflowf>
 8009cdc:	10000000 	.word	0x10000000

08009ce0 <__math_may_uflowf>:
 8009ce0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009ce8 <__math_may_uflowf+0x8>
 8009ce4:	f7ff bfea 	b.w	8009cbc <xflowf>
 8009ce8:	1a200000 	.word	0x1a200000

08009cec <__math_oflowf>:
 8009cec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009cf4 <__math_oflowf+0x8>
 8009cf0:	f7ff bfe4 	b.w	8009cbc <xflowf>
 8009cf4:	70000000 	.word	0x70000000

08009cf8 <__math_divzerof>:
 8009cf8:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8009d18 <__math_divzerof+0x20>
 8009cfc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009d00:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009d04:	2800      	cmp	r0, #0
 8009d06:	f04f 0022 	mov.w	r0, #34	@ 0x22
 8009d0a:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8009d0e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009d12:	f7ff bfc5 	b.w	8009ca0 <with_errnof>
 8009d16:	bf00      	nop
 8009d18:	00000000 	.word	0x00000000

08009d1c <__math_invalidf>:
 8009d1c:	eef0 7a40 	vmov.f32	s15, s0
 8009d20:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009d24:	eef4 7a67 	vcmp.f32	s15, s15
 8009d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d2c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8009d30:	d602      	bvs.n	8009d38 <__math_invalidf+0x1c>
 8009d32:	2021      	movs	r0, #33	@ 0x21
 8009d34:	f7ff bfb4 	b.w	8009ca0 <with_errnof>
 8009d38:	4770      	bx	lr

08009d3a <memset>:
 8009d3a:	4402      	add	r2, r0
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d100      	bne.n	8009d44 <memset+0xa>
 8009d42:	4770      	bx	lr
 8009d44:	f803 1b01 	strb.w	r1, [r3], #1
 8009d48:	e7f9      	b.n	8009d3e <memset+0x4>
	...

08009d4c <__errno>:
 8009d4c:	4b01      	ldr	r3, [pc, #4]	@ (8009d54 <__errno+0x8>)
 8009d4e:	6818      	ldr	r0, [r3, #0]
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	24000010 	.word	0x24000010

08009d58 <__libc_init_array>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8009d90 <__libc_init_array+0x38>)
 8009d5c:	4c0d      	ldr	r4, [pc, #52]	@ (8009d94 <__libc_init_array+0x3c>)
 8009d5e:	1b64      	subs	r4, r4, r5
 8009d60:	10a4      	asrs	r4, r4, #2
 8009d62:	2600      	movs	r6, #0
 8009d64:	42a6      	cmp	r6, r4
 8009d66:	d109      	bne.n	8009d7c <__libc_init_array+0x24>
 8009d68:	4d0b      	ldr	r5, [pc, #44]	@ (8009d98 <__libc_init_array+0x40>)
 8009d6a:	4c0c      	ldr	r4, [pc, #48]	@ (8009d9c <__libc_init_array+0x44>)
 8009d6c:	f000 f818 	bl	8009da0 <_init>
 8009d70:	1b64      	subs	r4, r4, r5
 8009d72:	10a4      	asrs	r4, r4, #2
 8009d74:	2600      	movs	r6, #0
 8009d76:	42a6      	cmp	r6, r4
 8009d78:	d105      	bne.n	8009d86 <__libc_init_array+0x2e>
 8009d7a:	bd70      	pop	{r4, r5, r6, pc}
 8009d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d80:	4798      	blx	r3
 8009d82:	3601      	adds	r6, #1
 8009d84:	e7ee      	b.n	8009d64 <__libc_init_array+0xc>
 8009d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d8a:	4798      	blx	r3
 8009d8c:	3601      	adds	r6, #1
 8009d8e:	e7f2      	b.n	8009d76 <__libc_init_array+0x1e>
 8009d90:	0800a040 	.word	0x0800a040
 8009d94:	0800a040 	.word	0x0800a040
 8009d98:	0800a040 	.word	0x0800a040
 8009d9c:	0800a044 	.word	0x0800a044

08009da0 <_init>:
 8009da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da2:	bf00      	nop
 8009da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da6:	bc08      	pop	{r3}
 8009da8:	469e      	mov	lr, r3
 8009daa:	4770      	bx	lr

08009dac <_fini>:
 8009dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dae:	bf00      	nop
 8009db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009db2:	bc08      	pop	{r3}
 8009db4:	469e      	mov	lr, r3
 8009db6:	4770      	bx	lr
