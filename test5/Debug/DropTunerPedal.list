
DropTunerPedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009308  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  080095d8  080095d8  0000a5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009860  08009860  0000a860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08009864  08009864  0000a864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000064  24000000  08009868  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000c328  24000064  080098cc  0000b064  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400c38c  080098cc  0000b38c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000b064  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001338d  00000000  00000000  0000b092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000026e6  00000000  00000000  0001e41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001178  00000000  00000000  00020b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000d7a  00000000  00000000  00021c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000343cc  00000000  00000000  000229fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001659f  00000000  00000000  00056dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015c090  00000000  00000000  0006d365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001c93f5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004d3c  00000000  00000000  001c9438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000072  00000000  00000000  001ce174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080095c0 	.word	0x080095c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	080095c0 	.word	0x080095c0

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fd9b 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f841 	bl	80003a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  WtrP = 0;
 800031e:	4b16      	ldr	r3, [pc, #88]	@ (8000378 <main+0x68>)
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
  Rd_P = 0.0f;
 8000324:	4b15      	ldr	r3, [pc, #84]	@ (800037c <main+0x6c>)
 8000326:	f04f 0200 	mov.w	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
  Shift = 1.4f;  // Pitch shift amount (adjust as needed)
 800032c:	4b14      	ldr	r3, [pc, #80]	@ (8000380 <main+0x70>)
 800032e:	4a15      	ldr	r2, [pc, #84]	@ (8000384 <main+0x74>)
 8000330:	601a      	str	r2, [r3, #0]
  CrossFade = 1.0f;
 8000332:	4b15      	ldr	r3, [pc, #84]	@ (8000388 <main+0x78>)
 8000334:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000338:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800033a:	f000 f9a5 	bl	8000688 <MX_GPIO_Init>
  MX_DMA_Init();
 800033e:	f000 f97b 	bl	8000638 <MX_DMA_Init>
  MX_ADC3_Init();
 8000342:	f000 f89d 	bl	8000480 <MX_ADC3_Init>
  MX_DAC1_Init();
 8000346:	f000 f90f 	bl	8000568 <MX_DAC1_Init>
  MX_TIM6_Init();
 800034a:	f000 f93f 	bl	80005cc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc3, adc_buffer, N);
 800034e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000352:	490e      	ldr	r1, [pc, #56]	@ (800038c <main+0x7c>)
 8000354:	480e      	ldr	r0, [pc, #56]	@ (8000390 <main+0x80>)
 8000356:	f001 fb2d 	bl	80019b4 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, dac_buffer, N, DAC_ALIGN_12B_R);
 800035a:	2300      	movs	r3, #0
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000362:	4a0c      	ldr	r2, [pc, #48]	@ (8000394 <main+0x84>)
 8000364:	2110      	movs	r1, #16
 8000366:	480c      	ldr	r0, [pc, #48]	@ (8000398 <main+0x88>)
 8000368:	f002 fc78 	bl	8002c5c <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 800036c:	480b      	ldr	r0, [pc, #44]	@ (800039c <main+0x8c>)
 800036e:	f008 fd63 	bl	8008e38 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000372:	bf00      	nop
 8000374:	e7fd      	b.n	8000372 <main+0x62>
 8000376:	bf00      	nop
 8000378:	24004080 	.word	0x24004080
 800037c:	24004084 	.word	0x24004084
 8000380:	24004088 	.word	0x24004088
 8000384:	3fb33333 	.word	0x3fb33333
 8000388:	2400408c 	.word	0x2400408c
 800038c:	24004250 	.word	0x24004250
 8000390:	24004090 	.word	0x24004090
 8000394:	24008250 	.word	0x24008250
 8000398:	24004178 	.word	0x24004178
 800039c:	24004204 	.word	0x24004204

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b09c      	sub	sp, #112	@ 0x70
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003aa:	224c      	movs	r2, #76	@ 0x4c
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f009 f8d3 	bl	800955a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2220      	movs	r2, #32
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f009 f8cd 	bl	800955a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003c0:	2002      	movs	r0, #2
 80003c2:	f005 f971 	bl	80056a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003c6:	2300      	movs	r3, #0
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	4b2c      	ldr	r3, [pc, #176]	@ (800047c <SystemClock_Config+0xdc>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4a2b      	ldr	r2, [pc, #172]	@ (800047c <SystemClock_Config+0xdc>)
 80003d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80003d4:	6193      	str	r3, [r2, #24]
 80003d6:	4b29      	ldr	r3, [pc, #164]	@ (800047c <SystemClock_Config+0xdc>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003e2:	bf00      	nop
 80003e4:	4b25      	ldr	r3, [pc, #148]	@ (800047c <SystemClock_Config+0xdc>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003f0:	d1f8      	bne.n	80003e4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f2:	2302      	movs	r3, #2
 80003f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003f6:	2301      	movs	r3, #1
 80003f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003fa:	2340      	movs	r3, #64	@ 0x40
 80003fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fe:	2302      	movs	r3, #2
 8000400:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000402:	2300      	movs	r3, #0
 8000404:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000406:	2304      	movs	r3, #4
 8000408:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 800040a:	2322      	movs	r3, #34	@ 0x22
 800040c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800040e:	2301      	movs	r3, #1
 8000410:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000412:	2302      	movs	r3, #2
 8000414:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000416:	2302      	movs	r3, #2
 8000418:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800041a:	230c      	movs	r3, #12
 800041c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800041e:	2300      	movs	r3, #0
 8000420:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000422:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000426:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800042c:	4618      	mov	r0, r3
 800042e:	f005 f975 	bl	800571c <HAL_RCC_OscConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000438:	f000 faaa 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043c:	233f      	movs	r3, #63	@ 0x3f
 800043e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000440:	2303      	movs	r3, #3
 8000442:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000448:	2308      	movs	r3, #8
 800044a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800044c:	2340      	movs	r3, #64	@ 0x40
 800044e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000450:	2340      	movs	r3, #64	@ 0x40
 8000452:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000454:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000458:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800045a:	2340      	movs	r3, #64	@ 0x40
 800045c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2103      	movs	r1, #3
 8000462:	4618      	mov	r0, r3
 8000464:	f005 fd34 	bl	8005ed0 <HAL_RCC_ClockConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800046e:	f000 fa8f 	bl	8000990 <Error_Handler>
  }
}
 8000472:	bf00      	nop
 8000474:	3770      	adds	r7, #112	@ 0x70
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	58024800 	.word	0x58024800

08000480 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08a      	sub	sp, #40	@ 0x28
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2224      	movs	r2, #36	@ 0x24
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f009 f864 	bl	800955a <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000492:	4b32      	ldr	r3, [pc, #200]	@ (800055c <MX_ADC3_Init+0xdc>)
 8000494:	4a32      	ldr	r2, [pc, #200]	@ (8000560 <MX_ADC3_Init+0xe0>)
 8000496:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000498:	4b30      	ldr	r3, [pc, #192]	@ (800055c <MX_ADC3_Init+0xdc>)
 800049a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800049e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80004a0:	4b2e      	ldr	r3, [pc, #184]	@ (800055c <MX_ADC3_Init+0xdc>)
 80004a2:	2208      	movs	r2, #8
 80004a4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80004a6:	4b2d      	ldr	r3, [pc, #180]	@ (800055c <MX_ADC3_Init+0xdc>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ac:	4b2b      	ldr	r3, [pc, #172]	@ (800055c <MX_ADC3_Init+0xdc>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b2:	4b2a      	ldr	r3, [pc, #168]	@ (800055c <MX_ADC3_Init+0xdc>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80004b8:	4b28      	ldr	r3, [pc, #160]	@ (800055c <MX_ADC3_Init+0xdc>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80004be:	4b27      	ldr	r3, [pc, #156]	@ (800055c <MX_ADC3_Init+0xdc>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80004c4:	4b25      	ldr	r3, [pc, #148]	@ (800055c <MX_ADC3_Init+0xdc>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80004ca:	4b24      	ldr	r3, [pc, #144]	@ (800055c <MX_ADC3_Init+0xdc>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80004d2:	4b22      	ldr	r3, [pc, #136]	@ (800055c <MX_ADC3_Init+0xdc>)
 80004d4:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80004d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004da:	4b20      	ldr	r3, [pc, #128]	@ (800055c <MX_ADC3_Init+0xdc>)
 80004dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80004e2:	4b1e      	ldr	r3, [pc, #120]	@ (800055c <MX_ADC3_Init+0xdc>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80004ea:	4b1c      	ldr	r3, [pc, #112]	@ (800055c <MX_ADC3_Init+0xdc>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80004f0:	4b1a      	ldr	r3, [pc, #104]	@ (800055c <MX_ADC3_Init+0xdc>)
 80004f2:	2203      	movs	r2, #3
 80004f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004f6:	4b19      	ldr	r3, [pc, #100]	@ (800055c <MX_ADC3_Init+0xdc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80004fc:	4b17      	ldr	r3, [pc, #92]	@ (800055c <MX_ADC3_Init+0xdc>)
 80004fe:	2200      	movs	r2, #0
 8000500:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000502:	4b16      	ldr	r3, [pc, #88]	@ (800055c <MX_ADC3_Init+0xdc>)
 8000504:	2200      	movs	r2, #0
 8000506:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 800050a:	4b14      	ldr	r3, [pc, #80]	@ (800055c <MX_ADC3_Init+0xdc>)
 800050c:	2200      	movs	r2, #0
 800050e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000510:	4812      	ldr	r0, [pc, #72]	@ (800055c <MX_ADC3_Init+0xdc>)
 8000512:	f001 f847 	bl	80015a4 <HAL_ADC_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 800051c:	f000 fa38 	bl	8000990 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000520:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <MX_ADC3_Init+0xe4>)
 8000522:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000524:	2306      	movs	r3, #6
 8000526:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800052c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000530:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000532:	2304      	movs	r3, #4
 8000534:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800053a:	2300      	movs	r3, #0
 800053c:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	4619      	mov	r1, r3
 8000542:	4806      	ldr	r0, [pc, #24]	@ (800055c <MX_ADC3_Init+0xdc>)
 8000544:	f001 fb1c 	bl	8001b80 <HAL_ADC_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 800054e:	f000 fa1f 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	3728      	adds	r7, #40	@ 0x28
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	24004090 	.word	0x24004090
 8000560:	58026000 	.word	0x58026000
 8000564:	2e300800 	.word	0x2e300800

08000568 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	@ 0x28
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2224      	movs	r2, #36	@ 0x24
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f008 fff0 	bl	800955a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800057a:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <MX_DAC1_Init+0x5c>)
 800057c:	4a12      	ldr	r2, [pc, #72]	@ (80005c8 <MX_DAC1_Init+0x60>)
 800057e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000580:	4810      	ldr	r0, [pc, #64]	@ (80005c4 <MX_DAC1_Init+0x5c>)
 8000582:	f002 fb48 	bl	8002c16 <HAL_DAC_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800058c:	f000 fa00 	bl	8000990 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000594:	2316      	movs	r3, #22
 8000596:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800059c:	2301      	movs	r3, #1
 800059e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2210      	movs	r2, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	4806      	ldr	r0, [pc, #24]	@ (80005c4 <MX_DAC1_Init+0x5c>)
 80005ac:	f002 fc34 	bl	8002e18 <HAL_DAC_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005b6:	f000 f9eb 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	3728      	adds	r7, #40	@ 0x28
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	24004178 	.word	0x24004178
 80005c8:	40007400 	.word	0x40007400

080005cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005dc:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <MX_TIM6_Init+0x64>)
 80005de:	4a15      	ldr	r2, [pc, #84]	@ (8000634 <MX_TIM6_Init+0x68>)
 80005e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80005e2:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <MX_TIM6_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e8:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <MX_TIM6_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2865;
 80005ee:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <MX_TIM6_Init+0x64>)
 80005f0:	f640 3231 	movw	r2, #2865	@ 0xb31
 80005f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <MX_TIM6_Init+0x64>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005fc:	480c      	ldr	r0, [pc, #48]	@ (8000630 <MX_TIM6_Init+0x64>)
 80005fe:	f008 fbc3 	bl	8008d88 <HAL_TIM_Base_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000608:	f000 f9c2 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800060c:	2320      	movs	r3, #32
 800060e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	@ (8000630 <MX_TIM6_Init+0x64>)
 800061a:	f008 fd3d 	bl	8009098 <HAL_TIMEx_MasterConfigSynchronization>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000624:	f000 f9b4 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	24004204 	.word	0x24004204
 8000634:	40001000 	.word	0x40001000

08000638 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <MX_DMA_Init+0x4c>)
 8000640:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000644:	4a0f      	ldr	r2, [pc, #60]	@ (8000684 <MX_DMA_Init+0x4c>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800064e:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <MX_DMA_Init+0x4c>)
 8000650:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	200b      	movs	r0, #11
 8000662:	f002 faa4 	bl	8002bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000666:	200b      	movs	r0, #11
 8000668:	f002 fabb 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	200c      	movs	r0, #12
 8000672:	f002 fa9c 	bl	8002bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000676:	200c      	movs	r0, #12
 8000678:	f002 fab3 	bl	8002be2 <HAL_NVIC_EnableIRQ>

}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	58024400 	.word	0x58024400

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <MX_GPIO_Init+0x50>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000694:	4a10      	ldr	r2, [pc, #64]	@ (80006d8 <MX_GPIO_Init+0x50>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_GPIO_Init+0x50>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <MX_GPIO_Init+0x50>)
 80006ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006b2:	4a09      	ldr	r2, [pc, #36]	@ (80006d8 <MX_GPIO_Init+0x50>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_GPIO_Init+0x50>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	58024400 	.word	0x58024400

080006dc <Do_PitchShift>:

/* USER CODE BEGIN 4 */
// Pitch shifting function (downward only)
uint32_t Do_PitchShift(uint32_t sample) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	@ 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
    // Write the original sample to the ring buffer
    Buf[WtrP] = sample;
 80006e4:	4b7e      	ldr	r3, [pc, #504]	@ (80008e0 <Do_PitchShift+0x204>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	497e      	ldr	r1, [pc, #504]	@ (80008e4 <Do_PitchShift+0x208>)
 80006ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // Ensure semitoneShift is within the valid range (0 to MAX_DOWN_SHIFT)
    if (semitoneShift > MAX_DOWN_SHIFT) {
 80006f0:	4b7d      	ldr	r3, [pc, #500]	@ (80008e8 <Do_PitchShift+0x20c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b0c      	cmp	r3, #12
 80006f6:	d902      	bls.n	80006fe <Do_PitchShift+0x22>
        semitoneShift = MAX_DOWN_SHIFT;
 80006f8:	4b7b      	ldr	r3, [pc, #492]	@ (80008e8 <Do_PitchShift+0x20c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	601a      	str	r2, [r3, #0]
    }

    // Calculate the pitch shift ratio based on downward semitone shift
    float pitchShiftRatio = powf(2.0f, -(float)semitoneShift / 12.0f); // Only downshift
 80006fe:	4b7a      	ldr	r3, [pc, #488]	@ (80008e8 <Do_PitchShift+0x20c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	ee07 3a90 	vmov	s15, r3
 8000706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800070a:	eef1 7a67 	vneg.f32	s15, s15
 800070e:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8000712:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000716:	eef0 0a47 	vmov.f32	s1, s14
 800071a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800071e:	f008 fd6f 	bl	8009200 <powf>
 8000722:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

    // Update the read pointer based on the pitch shift ratio
    Rd_P += pitchShiftRatio;
 8000726:	4b71      	ldr	r3, [pc, #452]	@ (80008ec <Do_PitchShift+0x210>)
 8000728:	ed93 7a00 	vldr	s14, [r3]
 800072c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000734:	4b6d      	ldr	r3, [pc, #436]	@ (80008ec <Do_PitchShift+0x210>)
 8000736:	edc3 7a00 	vstr	s15, [r3]

    // Clamp the read pointer to prevent overflow
    if (Rd_P >= BufSize) Rd_P -= BufSize;
 800073a:	4b6c      	ldr	r3, [pc, #432]	@ (80008ec <Do_PitchShift+0x210>)
 800073c:	edd3 7a00 	vldr	s15, [r3]
 8000740:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80008f0 <Do_PitchShift+0x214>
 8000744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074c:	db09      	blt.n	8000762 <Do_PitchShift+0x86>
 800074e:	4b67      	ldr	r3, [pc, #412]	@ (80008ec <Do_PitchShift+0x210>)
 8000750:	edd3 7a00 	vldr	s15, [r3]
 8000754:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80008f0 <Do_PitchShift+0x214>
 8000758:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800075c:	4b63      	ldr	r3, [pc, #396]	@ (80008ec <Do_PitchShift+0x210>)
 800075e:	edc3 7a00 	vstr	s15, [r3]

    // Compute integer read pointers for pitch-shifting (0° and 180° phases)
    int RdPtr_Int = (int)Rd_P % BufSize;             // Main read pointer
 8000762:	4b62      	ldr	r3, [pc, #392]	@ (80008ec <Do_PitchShift+0x210>)
 8000764:	edd3 7a00 	vldr	s15, [r3]
 8000768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800076c:	ee17 3a90 	vmov	r3, s15
 8000770:	425a      	negs	r2, r3
 8000772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000776:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800077a:	bf58      	it	pl
 800077c:	4253      	negpl	r3, r2
 800077e:	623b      	str	r3, [r7, #32]
    int RdPtr_Int2 = (RdPtr_Int + (BufSize / 2)) % BufSize; // 180° phase pointer
 8000780:	6a3b      	ldr	r3, [r7, #32]
 8000782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000786:	425a      	negs	r2, r3
 8000788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800078c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000790:	bf58      	it	pl
 8000792:	4253      	negpl	r3, r2
 8000794:	61fb      	str	r3, [r7, #28]

    // Read the two samples from the buffer
    float Rd0 = (float)Buf[RdPtr_Int];
 8000796:	4a53      	ldr	r2, [pc, #332]	@ (80008e4 <Do_PitchShift+0x208>)
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079e:	ee07 3a90 	vmov	s15, r3
 80007a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007a6:	edc7 7a06 	vstr	s15, [r7, #24]
    float Rd1 = (float)Buf[RdPtr_Int2];
 80007aa:	4a4e      	ldr	r2, [pc, #312]	@ (80008e4 <Do_PitchShift+0x208>)
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b2:	ee07 3a90 	vmov	s15, r3
 80007b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ba:	edc7 7a05 	vstr	s15, [r7, #20]

    // Cross-fade between two read pointers if overlap occurs
    if (Overlap >= (WtrP - RdPtr_Int) && (WtrP - RdPtr_Int) >= 0 && Shift != 1.0f) {
 80007be:	4b48      	ldr	r3, [pc, #288]	@ (80008e0 <Do_PitchShift+0x204>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	6a3b      	ldr	r3, [r7, #32]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	2b64      	cmp	r3, #100	@ 0x64
 80007c8:	dc21      	bgt.n	800080e <Do_PitchShift+0x132>
 80007ca:	4b45      	ldr	r3, [pc, #276]	@ (80008e0 <Do_PitchShift+0x204>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	6a3b      	ldr	r3, [r7, #32]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	db1b      	blt.n	800080e <Do_PitchShift+0x132>
 80007d6:	4b47      	ldr	r3, [pc, #284]	@ (80008f4 <Do_PitchShift+0x218>)
 80007d8:	edd3 7a00 	vldr	s15, [r3]
 80007dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80007e0:	eef4 7a47 	vcmp.f32	s15, s14
 80007e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e8:	d011      	beq.n	800080e <Do_PitchShift+0x132>
        int rel = WtrP - RdPtr_Int;
 80007ea:	4b3d      	ldr	r3, [pc, #244]	@ (80008e0 <Do_PitchShift+0x204>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	6a3b      	ldr	r3, [r7, #32]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	613b      	str	r3, [r7, #16]
        CrossFade = ((float)rel) / (float)Overlap;
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	ee07 3a90 	vmov	s15, r3
 80007fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007fe:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80008f8 <Do_PitchShift+0x21c>
 8000802:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000806:	4b3d      	ldr	r3, [pc, #244]	@ (80008fc <Do_PitchShift+0x220>)
 8000808:	edc3 7a00 	vstr	s15, [r3]
    if (Overlap >= (WtrP - RdPtr_Int) && (WtrP - RdPtr_Int) >= 0 && Shift != 1.0f) {
 800080c:	e008      	b.n	8000820 <Do_PitchShift+0x144>
    } else if (WtrP - RdPtr_Int == 0) {
 800080e:	4b34      	ldr	r3, [pc, #208]	@ (80008e0 <Do_PitchShift+0x204>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	6a3a      	ldr	r2, [r7, #32]
 8000814:	429a      	cmp	r2, r3
 8000816:	d103      	bne.n	8000820 <Do_PitchShift+0x144>
        CrossFade = 0.0f;
 8000818:	4b38      	ldr	r3, [pc, #224]	@ (80008fc <Do_PitchShift+0x220>)
 800081a:	f04f 0200 	mov.w	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
    }

    if (Overlap >= (WtrP - RdPtr_Int2) && (WtrP - RdPtr_Int2) >= 0 && Shift != 1.0f) {
 8000820:	4b2f      	ldr	r3, [pc, #188]	@ (80008e0 <Do_PitchShift+0x204>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	2b64      	cmp	r3, #100	@ 0x64
 800082a:	dc25      	bgt.n	8000878 <Do_PitchShift+0x19c>
 800082c:	4b2c      	ldr	r3, [pc, #176]	@ (80008e0 <Do_PitchShift+0x204>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	db1f      	blt.n	8000878 <Do_PitchShift+0x19c>
 8000838:	4b2e      	ldr	r3, [pc, #184]	@ (80008f4 <Do_PitchShift+0x218>)
 800083a:	edd3 7a00 	vldr	s15, [r3]
 800083e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000842:	eef4 7a47 	vcmp.f32	s15, s14
 8000846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800084a:	d015      	beq.n	8000878 <Do_PitchShift+0x19c>
        int rel = WtrP - RdPtr_Int2;
 800084c:	4b24      	ldr	r3, [pc, #144]	@ (80008e0 <Do_PitchShift+0x204>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	60fb      	str	r3, [r7, #12]
        CrossFade = 1.0f - ((float)rel) / (float)Overlap;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	ee07 3a90 	vmov	s15, r3
 800085c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000860:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80008f8 <Do_PitchShift+0x21c>
 8000864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000868:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800086c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000870:	4b22      	ldr	r3, [pc, #136]	@ (80008fc <Do_PitchShift+0x220>)
 8000872:	edc3 7a00 	vstr	s15, [r3]
    if (Overlap >= (WtrP - RdPtr_Int2) && (WtrP - RdPtr_Int2) >= 0 && Shift != 1.0f) {
 8000876:	e008      	b.n	800088a <Do_PitchShift+0x1ae>
    } else if (WtrP - RdPtr_Int2 == 0) {
 8000878:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <Do_PitchShift+0x204>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	69fa      	ldr	r2, [r7, #28]
 800087e:	429a      	cmp	r2, r3
 8000880:	d103      	bne.n	800088a <Do_PitchShift+0x1ae>
        CrossFade = 1.0f;
 8000882:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <Do_PitchShift+0x220>)
 8000884:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000888:	601a      	str	r2, [r3, #0]
    }

    // Perform cross-fading and combine the two read samples
    sample = (uint32_t)(Rd0 * CrossFade + Rd1 * (1.0f - CrossFade));
 800088a:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <Do_PitchShift+0x220>)
 800088c:	ed93 7a00 	vldr	s14, [r3]
 8000890:	edd7 7a06 	vldr	s15, [r7, #24]
 8000894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <Do_PitchShift+0x220>)
 800089a:	edd3 7a00 	vldr	s15, [r3]
 800089e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80008a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80008a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80008aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008b6:	ee17 3a90 	vmov	r3, s15
 80008ba:	607b      	str	r3, [r7, #4]

    // Increment the write pointer and handle wrap-around
    WtrP++;
 80008bc:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <Do_PitchShift+0x204>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	4a07      	ldr	r2, [pc, #28]	@ (80008e0 <Do_PitchShift+0x204>)
 80008c4:	6013      	str	r3, [r2, #0]
    if (WtrP == BufSize) WtrP = 0;
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <Do_PitchShift+0x204>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80008ce:	d102      	bne.n	80008d6 <Do_PitchShift+0x1fa>
 80008d0:	4b03      	ldr	r3, [pc, #12]	@ (80008e0 <Do_PitchShift+0x204>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]

    return sample;
 80008d6:	687b      	ldr	r3, [r7, #4]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3728      	adds	r7, #40	@ 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	24004080 	.word	0x24004080
 80008e4:	24000080 	.word	0x24000080
 80008e8:	24000000 	.word	0x24000000
 80008ec:	24004084 	.word	0x24004084
 80008f0:	45800000 	.word	0x45800000
 80008f4:	24004088 	.word	0x24004088
 80008f8:	42c80000 	.word	0x42c80000
 80008fc:	2400408c 	.word	0x2400408c

08000900 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	for(int n = 0; n < halfN; n++)
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	e00e      	b.n	800092c <HAL_ADC_ConvHalfCpltCallback+0x2c>
	{
		dac_buffer[n] = Do_PitchShift(adc_buffer[n]);
 800090e:	4a0c      	ldr	r2, [pc, #48]	@ (8000940 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fee0 	bl	80006dc <Do_PitchShift>
 800091c:	4602      	mov	r2, r0
 800091e:	4909      	ldr	r1, [pc, #36]	@ (8000944 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int n = 0; n < halfN; n++)
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	3301      	adds	r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000932:	dbec      	blt.n	800090e <HAL_ADC_ConvHalfCpltCallback+0xe>
	}
}
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	24004250 	.word	0x24004250
 8000944:	24008250 	.word	0x24008250

08000948 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	for(int n = halfN; n < N; n++)
 8000950:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	e00e      	b.n	8000976 <HAL_ADC_ConvCpltCallback+0x2e>
	{
		dac_buffer[n] =  Do_PitchShift(adc_buffer[n]);
 8000958:	4a0b      	ldr	r2, [pc, #44]	@ (8000988 <HAL_ADC_ConvCpltCallback+0x40>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff febb 	bl	80006dc <Do_PitchShift>
 8000966:	4602      	mov	r2, r0
 8000968:	4908      	ldr	r1, [pc, #32]	@ (800098c <HAL_ADC_ConvCpltCallback+0x44>)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int n = halfN; n < N; n++)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800097c:	dbec      	blt.n	8000958 <HAL_ADC_ConvCpltCallback+0x10>
	}
}
 800097e:	bf00      	nop
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	24004250 	.word	0x24004250
 800098c:	24008250 	.word	0x24008250

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <Error_Handler+0x8>

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <HAL_MspInit+0x5c>)
 80009a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009a8:	4a13      	ldr	r2, [pc, #76]	@ (80009f8 <HAL_MspInit+0x5c>)
 80009aa:	f043 0302 	orr.w	r3, r3, #2
 80009ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <HAL_MspInit+0x5c>)
 80009b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009b8:	f003 0302 	and.w	r3, r3, #2
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80009c0:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <HAL_MspInit+0x5c>)
 80009c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009c6:	4a0c      	ldr	r2, [pc, #48]	@ (80009f8 <HAL_MspInit+0x5c>)
 80009c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <HAL_MspInit+0x5c>)
 80009d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f000 fac8 	bl	8000f74 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80009e4:	f000 faee 	bl	8000fc4 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f000 fad7 	bl	8000f9c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	58024400 	.word	0x58024400

080009fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b0b8      	sub	sp, #224	@ 0xe0
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	22b8      	movs	r2, #184	@ 0xb8
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f008 fd9c 	bl	800955a <memset>
  if(hadc->Instance==ADC3)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a44      	ldr	r2, [pc, #272]	@ (8000b38 <HAL_ADC_MspInit+0x13c>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	f040 8081 	bne.w	8000b30 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a2e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a32:	f04f 0300 	mov.w	r3, #0
 8000a36:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a3e:	230c      	movs	r3, #12
 8000a40:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000a42:	2304      	movs	r3, #4
 8000a44:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a4e:	23c0      	movs	r3, #192	@ 0xc0
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4618      	mov	r0, r3
 8000a66:	f005 fda9 	bl	80065bc <HAL_RCCEx_PeriphCLKConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000a70:	f7ff ff8e 	bl	8000990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a74:	4b31      	ldr	r3, [pc, #196]	@ (8000b3c <HAL_ADC_MspInit+0x140>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7a:	4a30      	ldr	r2, [pc, #192]	@ (8000b3c <HAL_ADC_MspInit+0x140>)
 8000a7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a84:	4b2d      	ldr	r3, [pc, #180]	@ (8000b3c <HAL_ADC_MspInit+0x140>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	4b2a      	ldr	r3, [pc, #168]	@ (8000b3c <HAL_ADC_MspInit+0x140>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a98:	4a28      	ldr	r2, [pc, #160]	@ (8000b3c <HAL_ADC_MspInit+0x140>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa2:	4b26      	ldr	r3, [pc, #152]	@ (8000b3c <HAL_ADC_MspInit+0x140>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC1     ------> ADC3_INP11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	481d      	ldr	r0, [pc, #116]	@ (8000b40 <HAL_ADC_MspInit+0x144>)
 8000aca:	f004 fc45 	bl	8005358 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8000ace:	4b1d      	ldr	r3, [pc, #116]	@ (8000b44 <HAL_ADC_MspInit+0x148>)
 8000ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b48 <HAL_ADC_MspInit+0x14c>)
 8000ad2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <HAL_ADC_MspInit+0x148>)
 8000ad6:	2273      	movs	r2, #115	@ 0x73
 8000ad8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <HAL_ADC_MspInit+0x148>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae0:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <HAL_ADC_MspInit+0x148>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <HAL_ADC_MspInit+0x148>)
 8000ae8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aec:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_ADC_MspInit+0x148>)
 8000af0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000af4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000af6:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <HAL_ADC_MspInit+0x148>)
 8000af8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000afc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <HAL_ADC_MspInit+0x148>)
 8000b00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b04:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <HAL_ADC_MspInit+0x148>)
 8000b08:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b0c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <HAL_ADC_MspInit+0x148>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b14:	480b      	ldr	r0, [pc, #44]	@ (8000b44 <HAL_ADC_MspInit+0x148>)
 8000b16:	f002 fb4b 	bl	80031b0 <HAL_DMA_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8000b20:	f7ff ff36 	bl	8000990 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <HAL_ADC_MspInit+0x148>)
 8000b28:	659a      	str	r2, [r3, #88]	@ 0x58
 8000b2a:	4a06      	ldr	r2, [pc, #24]	@ (8000b44 <HAL_ADC_MspInit+0x148>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000b30:	bf00      	nop
 8000b32:	37e0      	adds	r7, #224	@ 0xe0
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58026000 	.word	0x58026000
 8000b3c:	58024400 	.word	0x58024400
 8000b40:	58020800 	.word	0x58020800
 8000b44:	24004100 	.word	0x24004100
 8000b48:	40020010 	.word	0x40020010

08000b4c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	@ 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a30      	ldr	r2, [pc, #192]	@ (8000c2c <HAL_DAC_MspInit+0xe0>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d15a      	bne.n	8000c24 <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000b6e:	4b30      	ldr	r3, [pc, #192]	@ (8000c30 <HAL_DAC_MspInit+0xe4>)
 8000b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b74:	4a2e      	ldr	r2, [pc, #184]	@ (8000c30 <HAL_DAC_MspInit+0xe4>)
 8000b76:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000b7a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c30 <HAL_DAC_MspInit+0xe4>)
 8000b80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b28      	ldr	r3, [pc, #160]	@ (8000c30 <HAL_DAC_MspInit+0xe4>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b92:	4a27      	ldr	r2, [pc, #156]	@ (8000c30 <HAL_DAC_MspInit+0xe4>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9c:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <HAL_DAC_MspInit+0xe4>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000baa:	2320      	movs	r3, #32
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	481d      	ldr	r0, [pc, #116]	@ (8000c34 <HAL_DAC_MspInit+0xe8>)
 8000bbe:	f004 fbcb 	bl	8005358 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <HAL_DAC_MspInit+0xec>)
 8000bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c3c <HAL_DAC_MspInit+0xf0>)
 8000bc6:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <HAL_DAC_MspInit+0xec>)
 8000bca:	2244      	movs	r2, #68	@ 0x44
 8000bcc:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <HAL_DAC_MspInit+0xec>)
 8000bd0:	2240      	movs	r2, #64	@ 0x40
 8000bd2:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <HAL_DAC_MspInit+0xec>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <HAL_DAC_MspInit+0xec>)
 8000bdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000be0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <HAL_DAC_MspInit+0xec>)
 8000be4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000be8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bea:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <HAL_DAC_MspInit+0xec>)
 8000bec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bf0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <HAL_DAC_MspInit+0xec>)
 8000bf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bf8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <HAL_DAC_MspInit+0xec>)
 8000bfc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c00:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <HAL_DAC_MspInit+0xec>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8000c08:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <HAL_DAC_MspInit+0xec>)
 8000c0a:	f002 fad1 	bl	80031b0 <HAL_DMA_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8000c14:	f7ff febc 	bl	8000990 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a07      	ldr	r2, [pc, #28]	@ (8000c38 <HAL_DAC_MspInit+0xec>)
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	4a06      	ldr	r2, [pc, #24]	@ (8000c38 <HAL_DAC_MspInit+0xec>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	@ 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40007400 	.word	0x40007400
 8000c30:	58024400 	.word	0x58024400
 8000c34:	58020000 	.word	0x58020000
 8000c38:	2400418c 	.word	0x2400418c
 8000c3c:	40020028 	.word	0x40020028

08000c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c7c <HAL_TIM_Base_MspInit+0x3c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d10e      	bne.n	8000c70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <HAL_TIM_Base_MspInit+0x40>)
 8000c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c58:	4a09      	ldr	r2, [pc, #36]	@ (8000c80 <HAL_TIM_Base_MspInit+0x40>)
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <HAL_TIM_Base_MspInit+0x40>)
 8000c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c68:	f003 0310 	and.w	r3, r3, #16
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	40001000 	.word	0x40001000
 8000c80:	58024400 	.word	0x58024400

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <NMI_Handler+0x4>

08000c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cda:	f000 f92b 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <DMA1_Stream0_IRQHandler+0x10>)
 8000cea:	f003 f823 	bl	8003d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	24004100 	.word	0x24004100

08000cf8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8000cfc:	4802      	ldr	r0, [pc, #8]	@ (8000d08 <DMA1_Stream1_IRQHandler+0x10>)
 8000cfe:	f003 f819 	bl	8003d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2400418c 	.word	0x2400418c

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d10:	4b32      	ldr	r3, [pc, #200]	@ (8000ddc <SystemInit+0xd0>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d16:	4a31      	ldr	r2, [pc, #196]	@ (8000ddc <SystemInit+0xd0>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d20:	4b2f      	ldr	r3, [pc, #188]	@ (8000de0 <SystemInit+0xd4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 030f 	and.w	r3, r3, #15
 8000d28:	2b06      	cmp	r3, #6
 8000d2a:	d807      	bhi.n	8000d3c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000de0 <SystemInit+0xd4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f023 030f 	bic.w	r3, r3, #15
 8000d34:	4a2a      	ldr	r2, [pc, #168]	@ (8000de0 <SystemInit+0xd4>)
 8000d36:	f043 0307 	orr.w	r3, r3, #7
 8000d3a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d3c:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <SystemInit+0xd8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a28      	ldr	r2, [pc, #160]	@ (8000de4 <SystemInit+0xd8>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d48:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <SystemInit+0xd8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d4e:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <SystemInit+0xd8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4924      	ldr	r1, [pc, #144]	@ (8000de4 <SystemInit+0xd8>)
 8000d54:	4b24      	ldr	r3, [pc, #144]	@ (8000de8 <SystemInit+0xdc>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d5a:	4b21      	ldr	r3, [pc, #132]	@ (8000de0 <SystemInit+0xd4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d66:	4b1e      	ldr	r3, [pc, #120]	@ (8000de0 <SystemInit+0xd4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f023 030f 	bic.w	r3, r3, #15
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000de0 <SystemInit+0xd4>)
 8000d70:	f043 0307 	orr.w	r3, r3, #7
 8000d74:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d76:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <SystemInit+0xd8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <SystemInit+0xd8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <SystemInit+0xd8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d88:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <SystemInit+0xd8>)
 8000d8a:	4a18      	ldr	r2, [pc, #96]	@ (8000dec <SystemInit+0xe0>)
 8000d8c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <SystemInit+0xd8>)
 8000d90:	4a17      	ldr	r2, [pc, #92]	@ (8000df0 <SystemInit+0xe4>)
 8000d92:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <SystemInit+0xd8>)
 8000d96:	4a17      	ldr	r2, [pc, #92]	@ (8000df4 <SystemInit+0xe8>)
 8000d98:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <SystemInit+0xd8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <SystemInit+0xd8>)
 8000da2:	4a14      	ldr	r2, [pc, #80]	@ (8000df4 <SystemInit+0xe8>)
 8000da4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <SystemInit+0xd8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <SystemInit+0xd8>)
 8000dae:	4a11      	ldr	r2, [pc, #68]	@ (8000df4 <SystemInit+0xe8>)
 8000db0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <SystemInit+0xd8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <SystemInit+0xd8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a09      	ldr	r2, [pc, #36]	@ (8000de4 <SystemInit+0xd8>)
 8000dbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dc2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <SystemInit+0xd8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <SystemInit+0xec>)
 8000dcc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000dd0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00
 8000de0:	52002000 	.word	0x52002000
 8000de4:	58024400 	.word	0x58024400
 8000de8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dec:	02020200 	.word	0x02020200
 8000df0:	01ff0000 	.word	0x01ff0000
 8000df4:	01010280 	.word	0x01010280
 8000df8:	52004000 	.word	0x52004000

08000dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e00:	f7ff ff84 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	@ (8000e38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	@ (8000e3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	@ (8000e40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f008 fba5 	bl	8009578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff fa6f 	bl	8000310 <main>
  bx  lr
 8000e32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e34:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000e38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e3c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000e40:	08009868 	.word	0x08009868
  ldr r2, =_sbss
 8000e44:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8000e48:	2400c38c 	.word	0x2400c38c

08000e4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC3_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e56:	2003      	movs	r0, #3
 8000e58:	f001 fe9e 	bl	8002b98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e5c:	f005 f9ee 	bl	800623c <HAL_RCC_GetSysClockFreq>
 8000e60:	4602      	mov	r2, r0
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <HAL_Init+0x68>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	0a1b      	lsrs	r3, r3, #8
 8000e68:	f003 030f 	and.w	r3, r3, #15
 8000e6c:	4913      	ldr	r1, [pc, #76]	@ (8000ebc <HAL_Init+0x6c>)
 8000e6e:	5ccb      	ldrb	r3, [r1, r3]
 8000e70:	f003 031f 	and.w	r3, r3, #31
 8000e74:	fa22 f303 	lsr.w	r3, r2, r3
 8000e78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <HAL_Init+0x68>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	4a0e      	ldr	r2, [pc, #56]	@ (8000ebc <HAL_Init+0x6c>)
 8000e84:	5cd3      	ldrb	r3, [r2, r3]
 8000e86:	f003 031f 	and.w	r3, r3, #31
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <HAL_Init+0x70>)
 8000e92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e94:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec4 <HAL_Init+0x74>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f000 f814 	bl	8000ec8 <HAL_InitTick>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e002      	b.n	8000eb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000eaa:	f7ff fd77 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	58024400 	.word	0x58024400
 8000ebc:	080095d8 	.word	0x080095d8
 8000ec0:	24000008 	.word	0x24000008
 8000ec4:	24000004 	.word	0x24000004

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <HAL_InitTick+0x60>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e021      	b.n	8000f20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <HAL_InitTick+0x64>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <HAL_InitTick+0x60>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 fe83 	bl	8002bfe <HAL_SYSTICK_Config>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d80a      	bhi.n	8000f1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f001 fe4d 	bl	8002bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4a06      	ldr	r2, [pc, #24]	@ (8000f30 <HAL_InitTick+0x68>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	24000010 	.word	0x24000010
 8000f2c:	24000004 	.word	0x24000004
 8000f30:	2400000c 	.word	0x2400000c

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	24000010 	.word	0x24000010
 8000f58:	2400c250 	.word	0x2400c250

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	@ (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	2400c250 	.word	0x2400c250

08000f74 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000f84:	4904      	ldr	r1, [pc, #16]	@ (8000f98 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	600b      	str	r3, [r1, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	58003c00 	.word	0x58003c00

08000f9c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f023 0202 	bic.w	r2, r3, #2
 8000fac:	4904      	ldr	r1, [pc, #16]	@ (8000fc0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	600b      	str	r3, [r1, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	58003c00 	.word	0x58003c00

08000fc4 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000fca:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a0e      	ldr	r2, [pc, #56]	@ (8001008 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000fd6:	f7ff ffc1 	bl	8000f5c <HAL_GetTick>
 8000fda:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8000fdc:	e008      	b.n	8000ff0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8000fde:	f7ff ffbd 	bl	8000f5c <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b0a      	cmp	r3, #10
 8000fea:	d901      	bls.n	8000ff0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e006      	b.n	8000ffe <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f0      	beq.n	8000fde <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	58003c00 	.word	0x58003c00

0800100c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	609a      	str	r2, [r3, #8]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3360      	adds	r3, #96	@ 0x60
 8001086:	461a      	mov	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4a10      	ldr	r2, [pc, #64]	@ (80010d4 <LL_ADC_SetOffset+0x60>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d10b      	bne.n	80010b0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80010ae:	e00b      	b.n	80010c8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	430b      	orrs	r3, r1
 80010c2:	431a      	orrs	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	601a      	str	r2, [r3, #0]
}
 80010c8:	bf00      	nop
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	58026000 	.word	0x58026000

080010d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3360      	adds	r3, #96	@ 0x60
 80010e6:	461a      	mov	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	f003 031f 	and.w	r3, r3, #31
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	431a      	orrs	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	611a      	str	r2, [r3, #16]
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4a0c      	ldr	r2, [pc, #48]	@ (8001178 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d00e      	beq.n	800116a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3360      	adds	r3, #96	@ 0x60
 8001150:	461a      	mov	r2, r3
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	431a      	orrs	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	601a      	str	r2, [r3, #0]
  }
}
 800116a:	bf00      	nop
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	58026000 	.word	0x58026000

0800117c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800117c:	b480      	push	{r7}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4a0c      	ldr	r2, [pc, #48]	@ (80011bc <LL_ADC_SetOffsetSaturation+0x40>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d10e      	bne.n	80011ae <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3360      	adds	r3, #96	@ 0x60
 8001194:	461a      	mov	r2, r3
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80011ae:	bf00      	nop
 80011b0:	371c      	adds	r7, #28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	58026000 	.word	0x58026000

080011c0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001200 <LL_ADC_SetOffsetSign+0x40>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d10e      	bne.n	80011f2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3360      	adds	r3, #96	@ 0x60
 80011d8:	461a      	mov	r2, r3
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	431a      	orrs	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80011f2:	bf00      	nop
 80011f4:	371c      	adds	r7, #28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	58026000 	.word	0x58026000

08001204 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3360      	adds	r3, #96	@ 0x60
 8001214:	461a      	mov	r2, r3
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4a0c      	ldr	r2, [pc, #48]	@ (8001254 <LL_ADC_SetOffsetState+0x50>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d108      	bne.n	8001238 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	431a      	orrs	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001236:	e007      	b.n	8001248 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	431a      	orrs	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	601a      	str	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	58026000 	.word	0x58026000

08001258 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800126c:	2301      	movs	r3, #1
 800126e:	e000      	b.n	8001272 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800127e:	b480      	push	{r7}
 8001280:	b087      	sub	sp, #28
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3330      	adds	r3, #48	@ 0x30
 800128e:	461a      	mov	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	0a1b      	lsrs	r3, r3, #8
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	4413      	add	r3, r2
 800129c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	211f      	movs	r1, #31
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	401a      	ands	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	0e9b      	lsrs	r3, r3, #26
 80012b6:	f003 011f 	and.w	r1, r3, #31
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	431a      	orrs	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012ca:	bf00      	nop
 80012cc:	371c      	adds	r7, #28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	f023 0203 	bic.w	r2, r3, #3
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	60da      	str	r2, [r3, #12]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f043 0201 	orr.w	r2, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	60da      	str	r2, [r3, #12]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a08      	ldr	r2, [pc, #32]	@ (800134c <LL_ADC_REG_SetDMATransferMode+0x30>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d107      	bne.n	800133e <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	f023 0203 	bic.w	r2, r3, #3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60da      	str	r2, [r3, #12]
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	58026000 	.word	0x58026000

08001350 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001350:	b480      	push	{r7}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3314      	adds	r3, #20
 8001360:	461a      	mov	r2, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	0e5b      	lsrs	r3, r3, #25
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	4413      	add	r3, r2
 800136e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	0d1b      	lsrs	r3, r3, #20
 8001378:	f003 031f 	and.w	r3, r3, #31
 800137c:	2107      	movs	r1, #7
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	401a      	ands	r2, r3
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	0d1b      	lsrs	r3, r3, #20
 800138a:	f003 031f 	and.w	r3, r3, #31
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	431a      	orrs	r2, r3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800139a:	bf00      	nop
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001420 <LL_ADC_SetChannelSingleDiff+0x78>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d115      	bne.n	80013e8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013c8:	43db      	mvns	r3, r3
 80013ca:	401a      	ands	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0318 	and.w	r3, r3, #24
 80013d2:	4914      	ldr	r1, [pc, #80]	@ (8001424 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80013d4:	40d9      	lsrs	r1, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	400b      	ands	r3, r1
 80013da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013de:	431a      	orrs	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80013e6:	e014      	b.n	8001412 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013f4:	43db      	mvns	r3, r3
 80013f6:	401a      	ands	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f003 0318 	and.w	r3, r3, #24
 80013fe:	4909      	ldr	r1, [pc, #36]	@ (8001424 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001400:	40d9      	lsrs	r1, r3
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	400b      	ands	r3, r1
 8001406:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800140a:	431a      	orrs	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	58026000 	.word	0x58026000
 8001424:	000fffff 	.word	0x000fffff

08001428 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 031f 	and.w	r3, r3, #31
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001452:	4013      	ands	r3, r2
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6093      	str	r3, [r2, #8]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	5fffffc0 	.word	0x5fffffc0

08001468 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800147c:	d101      	bne.n	8001482 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800149e:	4013      	ands	r3, r2
 80014a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	6fffffc0 	.word	0x6fffffc0

080014b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80014cc:	d101      	bne.n	80014d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <LL_ADC_Enable+0x24>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	f043 0201 	orr.w	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	7fffffc0 	.word	0x7fffffc0

08001508 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <LL_ADC_IsEnabled+0x18>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <LL_ADC_IsEnabled+0x1a>
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <LL_ADC_REG_StartConversion+0x24>)
 800153e:	4013      	ands	r3, r2
 8001540:	f043 0204 	orr.w	r2, r3, #4
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	7fffffc0 	.word	0x7fffffc0

08001558 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b04      	cmp	r3, #4
 800156a:	d101      	bne.n	8001570 <LL_ADC_REG_IsConversionOngoing+0x18>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b08      	cmp	r3, #8
 8001590:	d101      	bne.n	8001596 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b089      	sub	sp, #36	@ 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e1ee      	b.n	800199c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff fa15 	bl	80009fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff3f 	bl	8001468 <LL_ADC_IsDeepPowerDownEnabled>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d004      	beq.n	80015fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff25 	bl	8001444 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff5a 	bl	80014b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d114      	bne.n	8001634 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff3e 	bl	8001490 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001614:	4b8e      	ldr	r3, [pc, #568]	@ (8001850 <HAL_ADC_Init+0x2ac>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	099b      	lsrs	r3, r3, #6
 800161a:	4a8e      	ldr	r2, [pc, #568]	@ (8001854 <HAL_ADC_Init+0x2b0>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	099b      	lsrs	r3, r3, #6
 8001622:	3301      	adds	r3, #1
 8001624:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001626:	e002      	b.n	800162e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3b01      	subs	r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f9      	bne.n	8001628 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff3d 	bl	80014b8 <LL_ADC_IsInternalRegulatorEnabled>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10d      	bne.n	8001660 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001648:	f043 0210 	orr.w	r2, r3, #16
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001654:	f043 0201 	orr.w	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff77 	bl	8001558 <LL_ADC_REG_IsConversionOngoing>
 800166a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2b00      	cmp	r3, #0
 8001676:	f040 8188 	bne.w	800198a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	f040 8184 	bne.w	800198a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001686:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800168a:	f043 0202 	orr.w	r2, r3, #2
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff36 	bl	8001508 <LL_ADC_IsEnabled>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d136      	bne.n	8001710 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a6c      	ldr	r2, [pc, #432]	@ (8001858 <HAL_ADC_Init+0x2b4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d004      	beq.n	80016b6 <HAL_ADC_Init+0x112>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6a      	ldr	r2, [pc, #424]	@ (800185c <HAL_ADC_Init+0x2b8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d10e      	bne.n	80016d4 <HAL_ADC_Init+0x130>
 80016b6:	4868      	ldr	r0, [pc, #416]	@ (8001858 <HAL_ADC_Init+0x2b4>)
 80016b8:	f7ff ff26 	bl	8001508 <LL_ADC_IsEnabled>
 80016bc:	4604      	mov	r4, r0
 80016be:	4867      	ldr	r0, [pc, #412]	@ (800185c <HAL_ADC_Init+0x2b8>)
 80016c0:	f7ff ff22 	bl	8001508 <LL_ADC_IsEnabled>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4323      	orrs	r3, r4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf0c      	ite	eq
 80016cc:	2301      	moveq	r3, #1
 80016ce:	2300      	movne	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	e008      	b.n	80016e6 <HAL_ADC_Init+0x142>
 80016d4:	4862      	ldr	r0, [pc, #392]	@ (8001860 <HAL_ADC_Init+0x2bc>)
 80016d6:	f7ff ff17 	bl	8001508 <LL_ADC_IsEnabled>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d012      	beq.n	8001710 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001858 <HAL_ADC_Init+0x2b4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d004      	beq.n	80016fe <HAL_ADC_Init+0x15a>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a58      	ldr	r2, [pc, #352]	@ (800185c <HAL_ADC_Init+0x2b8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_ADC_Init+0x15e>
 80016fe:	4a59      	ldr	r2, [pc, #356]	@ (8001864 <HAL_ADC_Init+0x2c0>)
 8001700:	e000      	b.n	8001704 <HAL_ADC_Init+0x160>
 8001702:	4a59      	ldr	r2, [pc, #356]	@ (8001868 <HAL_ADC_Init+0x2c4>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4619      	mov	r1, r3
 800170a:	4610      	mov	r0, r2
 800170c:	f7ff fc7e 	bl	800100c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a52      	ldr	r2, [pc, #328]	@ (8001860 <HAL_ADC_Init+0x2bc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d129      	bne.n	800176e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7e5b      	ldrb	r3, [r3, #25]
 800171e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001724:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800172a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b08      	cmp	r3, #8
 8001732:	d013      	beq.n	800175c <HAL_ADC_Init+0x1b8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b0c      	cmp	r3, #12
 800173a:	d00d      	beq.n	8001758 <HAL_ADC_Init+0x1b4>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b1c      	cmp	r3, #28
 8001742:	d007      	beq.n	8001754 <HAL_ADC_Init+0x1b0>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b18      	cmp	r3, #24
 800174a:	d101      	bne.n	8001750 <HAL_ADC_Init+0x1ac>
 800174c:	2318      	movs	r3, #24
 800174e:	e006      	b.n	800175e <HAL_ADC_Init+0x1ba>
 8001750:	2300      	movs	r3, #0
 8001752:	e004      	b.n	800175e <HAL_ADC_Init+0x1ba>
 8001754:	2310      	movs	r3, #16
 8001756:	e002      	b.n	800175e <HAL_ADC_Init+0x1ba>
 8001758:	2308      	movs	r3, #8
 800175a:	e000      	b.n	800175e <HAL_ADC_Init+0x1ba>
 800175c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800175e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001766:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	e00e      	b.n	800178c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7e5b      	ldrb	r3, [r3, #25]
 8001772:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001778:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800177e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001786:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d106      	bne.n	80017a4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179a:	3b01      	subs	r3, #1
 800179c:	045b      	lsls	r3, r3, #17
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d009      	beq.n	80017c0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a26      	ldr	r2, [pc, #152]	@ (8001860 <HAL_ADC_Init+0x2bc>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d115      	bne.n	80017f6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	4b26      	ldr	r3, [pc, #152]	@ (800186c <HAL_ADC_Init+0x2c8>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	69b9      	ldr	r1, [r7, #24]
 80017da:	430b      	orrs	r3, r1
 80017dc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	611a      	str	r2, [r3, #16]
 80017f4:	e009      	b.n	800180a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <HAL_ADC_Init+0x2cc>)
 80017fe:	4013      	ands	r3, r2
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	69b9      	ldr	r1, [r7, #24]
 8001806:	430b      	orrs	r3, r1
 8001808:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fea2 	bl	8001558 <LL_ADC_REG_IsConversionOngoing>
 8001814:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff feaf 	bl	800157e <LL_ADC_INJ_IsConversionOngoing>
 8001820:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	f040 808e 	bne.w	8001946 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	f040 808a 	bne.w	8001946 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <HAL_ADC_Init+0x2bc>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d11b      	bne.n	8001874 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7e1b      	ldrb	r3, [r3, #24]
 8001840:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001848:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	e018      	b.n	8001882 <HAL_ADC_Init+0x2de>
 8001850:	24000004 	.word	0x24000004
 8001854:	053e2d63 	.word	0x053e2d63
 8001858:	40022000 	.word	0x40022000
 800185c:	40022100 	.word	0x40022100
 8001860:	58026000 	.word	0x58026000
 8001864:	40022300 	.word	0x40022300
 8001868:	58026300 	.word	0x58026300
 800186c:	fff04007 	.word	0xfff04007
 8001870:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7e1b      	ldrb	r3, [r3, #24]
 8001878:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	4b46      	ldr	r3, [pc, #280]	@ (80019a4 <HAL_ADC_Init+0x400>)
 800188a:	4013      	ands	r3, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	69b9      	ldr	r1, [r7, #24]
 8001892:	430b      	orrs	r3, r1
 8001894:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800189c:	2b01      	cmp	r3, #1
 800189e:	d137      	bne.n	8001910 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a3f      	ldr	r2, [pc, #252]	@ (80019a8 <HAL_ADC_Init+0x404>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d116      	bne.n	80018de <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	4b3d      	ldr	r3, [pc, #244]	@ (80019ac <HAL_ADC_Init+0x408>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80018c2:	4311      	orrs	r1, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018c8:	4311      	orrs	r1, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80018ce:	430a      	orrs	r2, r1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	e020      	b.n	8001920 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	4b32      	ldr	r3, [pc, #200]	@ (80019b0 <HAL_ADC_Init+0x40c>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018ec:	3a01      	subs	r2, #1
 80018ee:	0411      	lsls	r1, r2, #16
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80018f4:	4311      	orrs	r1, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018fa:	4311      	orrs	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001900:	430a      	orrs	r2, r1
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 0201 	orr.w	r2, r2, #1
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	e007      	b.n	8001920 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691a      	ldr	r2, [r3, #16]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a1b      	ldr	r2, [pc, #108]	@ (80019a8 <HAL_ADC_Init+0x404>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d002      	beq.n	8001946 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 ff6b 	bl	800281c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d10c      	bne.n	8001968 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001954:	f023 010f 	bic.w	r1, r3, #15
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	1e5a      	subs	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	631a      	str	r2, [r3, #48]	@ 0x30
 8001966:	e007      	b.n	8001978 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 020f 	bic.w	r2, r2, #15
 8001976:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197c:	f023 0303 	bic.w	r3, r3, #3
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	661a      	str	r2, [r3, #96]	@ 0x60
 8001988:	e007      	b.n	800199a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198e:	f043 0210 	orr.w	r2, r3, #16
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800199a:	7ffb      	ldrb	r3, [r7, #31]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3724      	adds	r7, #36	@ 0x24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd90      	pop	{r4, r7, pc}
 80019a4:	ffffbffc 	.word	0xffffbffc
 80019a8:	58026000 	.word	0x58026000
 80019ac:	fc00f81f 	.word	0xfc00f81f
 80019b0:	fc00f81e 	.word	0xfc00f81e

080019b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a60      	ldr	r2, [pc, #384]	@ (8001b48 <HAL_ADC_Start_DMA+0x194>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d004      	beq.n	80019d4 <HAL_ADC_Start_DMA+0x20>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a5f      	ldr	r2, [pc, #380]	@ (8001b4c <HAL_ADC_Start_DMA+0x198>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_ADC_Start_DMA+0x24>
 80019d4:	4b5e      	ldr	r3, [pc, #376]	@ (8001b50 <HAL_ADC_Start_DMA+0x19c>)
 80019d6:	e000      	b.n	80019da <HAL_ADC_Start_DMA+0x26>
 80019d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b54 <HAL_ADC_Start_DMA+0x1a0>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fd24 	bl	8001428 <LL_ADC_GetMultimode>
 80019e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fdb6 	bl	8001558 <LL_ADC_REG_IsConversionOngoing>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 80a2 	bne.w	8001b38 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_Start_DMA+0x4e>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e09d      	b.n	8001b3e <HAL_ADC_Start_DMA+0x18a>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d006      	beq.n	8001a1e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	2b05      	cmp	r3, #5
 8001a14:	d003      	beq.n	8001a1e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2b09      	cmp	r3, #9
 8001a1a:	f040 8086 	bne.w	8001b2a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 fdde 	bl	80025e0 <ADC_Enable>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d178      	bne.n	8001b20 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a32:	4b49      	ldr	r3, [pc, #292]	@ (8001b58 <HAL_ADC_Start_DMA+0x1a4>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a42      	ldr	r2, [pc, #264]	@ (8001b4c <HAL_ADC_Start_DMA+0x198>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d002      	beq.n	8001a4e <HAL_ADC_Start_DMA+0x9a>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	e000      	b.n	8001a50 <HAL_ADC_Start_DMA+0x9c>
 8001a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b48 <HAL_ADC_Start_DMA+0x194>)
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d002      	beq.n	8001a5e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d105      	bne.n	8001a6a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a62:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a7a:	f023 0206 	bic.w	r2, r3, #6
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	665a      	str	r2, [r3, #100]	@ 0x64
 8001a82:	e002      	b.n	8001a8a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8e:	4a33      	ldr	r2, [pc, #204]	@ (8001b5c <HAL_ADC_Start_DMA+0x1a8>)
 8001a90:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a96:	4a32      	ldr	r2, [pc, #200]	@ (8001b60 <HAL_ADC_Start_DMA+0x1ac>)
 8001a98:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9e:	4a31      	ldr	r2, [pc, #196]	@ (8001b64 <HAL_ADC_Start_DMA+0x1b0>)
 8001aa0:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	221c      	movs	r2, #28
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0210 	orr.w	r2, r2, #16
 8001ac0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a28      	ldr	r2, [pc, #160]	@ (8001b68 <HAL_ADC_Start_DMA+0x1b4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d10f      	bne.n	8001aec <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4610      	mov	r0, r2
 8001adc:	f7ff fc1e 	bl	800131c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fc09 	bl	80012fc <LL_ADC_EnableDMAReq>
 8001aea:	e007      	b.n	8001afc <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f7ff fbed 	bl	80012d6 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3340      	adds	r3, #64	@ 0x40
 8001b06:	4619      	mov	r1, r3
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f001 fea8 	bl	8003860 <HAL_DMA_Start_IT>
 8001b10:	4603      	mov	r3, r0
 8001b12:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fd09 	bl	8001530 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001b1e:	e00d      	b.n	8001b3c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8001b28:	e008      	b.n	8001b3c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8001b36:	e001      	b.n	8001b3c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40022000 	.word	0x40022000
 8001b4c:	40022100 	.word	0x40022100
 8001b50:	40022300 	.word	0x40022300
 8001b54:	58026300 	.word	0x58026300
 8001b58:	fffff0fe 	.word	0xfffff0fe
 8001b5c:	080026f5 	.word	0x080026f5
 8001b60:	080027cd 	.word	0x080027cd
 8001b64:	080027e9 	.word	0x080027e9
 8001b68:	58026000 	.word	0x58026000

08001b6c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b0b9      	sub	sp, #228	@ 0xe4
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001b9a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	4aab      	ldr	r2, [pc, #684]	@ (8001e50 <HAL_ADC_ConfigChannel+0x2d0>)
 8001ba2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d102      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x34>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	f000 bcfe 	b.w	80025b0 <HAL_ADC_ConfigChannel+0xa30>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fcc9 	bl	8001558 <LL_ADC_REG_IsConversionOngoing>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f040 84e2 	bne.w	8002592 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	db38      	blt.n	8001c48 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a9e      	ldr	r2, [pc, #632]	@ (8001e54 <HAL_ADC_ConfigChannel+0x2d4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d033      	beq.n	8001c48 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d108      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x7e>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0e9b      	lsrs	r3, r3, #26
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	e01d      	b.n	8001c3a <HAL_ADC_ConfigChannel+0xba>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8001c22:	2320      	movs	r3, #32
 8001c24:	e004      	b.n	8001c30 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8001c26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	2201      	movs	r2, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	69d1      	ldr	r1, [r2, #28]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	430b      	orrs	r3, r1
 8001c46:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6859      	ldr	r1, [r3, #4]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	f7ff fb12 	bl	800127e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fc7a 	bl	8001558 <LL_ADC_REG_IsConversionOngoing>
 8001c64:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fc86 	bl	800157e <LL_ADC_INJ_IsConversionOngoing>
 8001c72:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 8270 	bne.w	8002160 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c80:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f040 826b 	bne.w	8002160 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6819      	ldr	r1, [r3, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	461a      	mov	r2, r3
 8001c98:	f7ff fb5a 	bl	8001350 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6c      	ldr	r2, [pc, #432]	@ (8001e54 <HAL_ADC_ConfigChannel+0x2d4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d10d      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001cc0:	e032      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001cc2:	4b65      	ldr	r3, [pc, #404]	@ (8001e58 <HAL_ADC_ConfigChannel+0x2d8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cce:	d10b      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x168>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	695a      	ldr	r2, [r3, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	e01d      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x1a4>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10b      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x18e>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	e00a      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x1a4>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d048      	beq.n	8001dc2 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6919      	ldr	r1, [r3, #16]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d40:	f7ff f998 	bl	8001074 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a42      	ldr	r2, [pc, #264]	@ (8001e54 <HAL_ADC_ConfigChannel+0x2d4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d119      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6919      	ldr	r1, [r3, #16]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f7ff fa30 	bl	80011c0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	6919      	ldr	r1, [r3, #16]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d102      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x1f8>
 8001d72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d76:	e000      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1fa>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f7ff f9fe 	bl	800117c <LL_ADC_SetOffsetSaturation>
 8001d80:	e1ee      	b.n	8002160 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6919      	ldr	r1, [r3, #16]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d102      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x21a>
 8001d94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001d98:	e000      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x21c>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f7ff f9cb 	bl	8001138 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6919      	ldr	r1, [r3, #16]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	7e1b      	ldrb	r3, [r3, #24]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d102      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x238>
 8001db2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001db6:	e000      	b.n	8001dba <HAL_ADC_ConfigChannel+0x23a>
 8001db8:	2300      	movs	r3, #0
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f7ff f9a2 	bl	8001104 <LL_ADC_SetDataRightShift>
 8001dc0:	e1ce      	b.n	8002160 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a23      	ldr	r2, [pc, #140]	@ (8001e54 <HAL_ADC_ConfigChannel+0x2d4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	f040 8181 	bne.w	80020d0 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff f97f 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10a      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x27a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff f974 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	0e9b      	lsrs	r3, r3, #26
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	e01e      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x2b8>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f969 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8001e18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8001e20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8001e28:	2320      	movs	r3, #32
 8001e2a:	e004      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8001e2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10b      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x2dc>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	0e9b      	lsrs	r3, r3, #26
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	e01e      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x30e>
 8001e50:	47ff0000 	.word	0x47ff0000
 8001e54:	58026000 	.word	0x58026000
 8001e58:	5c001000 	.word	0x5c001000
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e68:	fa93 f3a3 	rbit	r3, r3
 8001e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001e78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8001e80:	2320      	movs	r3, #32
 8001e82:	e004      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8001e84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d106      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff f9b2 	bl	8001204 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff f916 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10a      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x34c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2101      	movs	r1, #1
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff f90b 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	0e9b      	lsrs	r3, r3, #26
 8001ec6:	f003 021f 	and.w	r2, r3, #31
 8001eca:	e01e      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x38a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f900 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001eea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001eee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001ef2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001efa:	2320      	movs	r3, #32
 8001efc:	e004      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8001efe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d105      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x3a2>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	0e9b      	lsrs	r3, r3, #26
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	e018      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x3d4>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001f36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001f3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8001f46:	2320      	movs	r3, #32
 8001f48:	e004      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8001f4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d106      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2101      	movs	r1, #1
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff f94f 	bl	8001204 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2102      	movs	r1, #2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff f8b3 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10a      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x412>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2102      	movs	r1, #2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f8a8 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	0e9b      	lsrs	r3, r3, #26
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	e01e      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x450>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2102      	movs	r1, #2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff f89d 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	e004      	b.n	8001fce <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8001fc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d105      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x468>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	f003 031f 	and.w	r3, r3, #31
 8001fe6:	e014      	b.n	8002012 <HAL_ADC_ConfigChannel+0x492>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001ff6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ff8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002004:	2320      	movs	r3, #32
 8002006:	e004      	b.n	8002012 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002008:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	429a      	cmp	r2, r3
 8002014:	d106      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2200      	movs	r2, #0
 800201c:	2102      	movs	r1, #2
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f8f0 	bl	8001204 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2103      	movs	r1, #3
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f854 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10a      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x4d0>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2103      	movs	r1, #3
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff f849 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	0e9b      	lsrs	r3, r3, #26
 800204a:	f003 021f 	and.w	r2, r3, #31
 800204e:	e017      	b.n	8002080 <HAL_ADC_ConfigChannel+0x500>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2103      	movs	r1, #3
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff f83e 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 800205c:	4603      	mov	r3, r0
 800205e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800206a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800206c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8002072:	2320      	movs	r3, #32
 8002074:	e003      	b.n	800207e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8002076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x518>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0e9b      	lsrs	r3, r3, #26
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	e011      	b.n	80020bc <HAL_ADC_ConfigChannel+0x53c>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80020a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80020aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80020b0:	2320      	movs	r3, #32
 80020b2:	e003      	b.n	80020bc <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80020b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	429a      	cmp	r2, r3
 80020be:	d14f      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2200      	movs	r2, #0
 80020c6:	2103      	movs	r1, #3
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f89b 	bl	8001204 <LL_ADC_SetOffsetState>
 80020ce:	e047      	b.n	8002160 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	069b      	lsls	r3, r3, #26
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d107      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020f2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	069b      	lsls	r3, r3, #26
 8002104:	429a      	cmp	r2, r3
 8002106:	d107      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002116:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800211e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	069b      	lsls	r3, r3, #26
 8002128:	429a      	cmp	r2, r3
 800212a:	d107      	bne.n	800213c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800213a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002142:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	069b      	lsls	r3, r3, #26
 800214c:	429a      	cmp	r2, r3
 800214e:	d107      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800215e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff f9cf 	bl	8001508 <LL_ADC_IsEnabled>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	f040 8219 	bne.w	80025a4 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	461a      	mov	r2, r3
 8002180:	f7ff f912 	bl	80013a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4aa1      	ldr	r2, [pc, #644]	@ (8002410 <HAL_ADC_ConfigChannel+0x890>)
 800218a:	4293      	cmp	r3, r2
 800218c:	f040 812e 	bne.w	80023ec <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x638>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	3301      	adds	r3, #1
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	2b09      	cmp	r3, #9
 80021ae:	bf94      	ite	ls
 80021b0:	2301      	movls	r3, #1
 80021b2:	2300      	movhi	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	e019      	b.n	80021ec <HAL_ADC_ConfigChannel+0x66c>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80021c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80021ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e003      	b.n	80021dc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80021d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	2b09      	cmp	r3, #9
 80021e4:	bf94      	ite	ls
 80021e6:	2301      	movls	r3, #1
 80021e8:	2300      	movhi	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d079      	beq.n	80022e4 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d107      	bne.n	800220c <HAL_ADC_ConfigChannel+0x68c>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	0e9b      	lsrs	r3, r3, #26
 8002202:	3301      	adds	r3, #1
 8002204:	069b      	lsls	r3, r3, #26
 8002206:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800220a:	e015      	b.n	8002238 <HAL_ADC_ConfigChannel+0x6b8>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800221a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800221c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800221e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002224:	2320      	movs	r3, #32
 8002226:	e003      	b.n	8002230 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8002228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	3301      	adds	r3, #1
 8002232:	069b      	lsls	r3, r3, #26
 8002234:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x6d8>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0e9b      	lsrs	r3, r3, #26
 800224a:	3301      	adds	r3, #1
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	2101      	movs	r1, #1
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	e017      	b.n	8002288 <HAL_ADC_ConfigChannel+0x708>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002268:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800226a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8002274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	ea42 0103 	orr.w	r1, r2, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x72e>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	3301      	adds	r3, #1
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	051b      	lsls	r3, r3, #20
 80022ac:	e018      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x760>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80022bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80022c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80022c6:	2320      	movs	r3, #32
 80022c8:	e003      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80022ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	3301      	adds	r3, #1
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	4613      	mov	r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4413      	add	r3, r2
 80022de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e0:	430b      	orrs	r3, r1
 80022e2:	e07e      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x780>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0e9b      	lsrs	r3, r3, #26
 80022f6:	3301      	adds	r3, #1
 80022f8:	069b      	lsls	r3, r3, #26
 80022fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022fe:	e015      	b.n	800232c <HAL_ADC_ConfigChannel+0x7ac>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8002318:	2320      	movs	r3, #32
 800231a:	e003      	b.n	8002324 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800231c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	3301      	adds	r3, #1
 8002326:	069b      	lsls	r3, r3, #26
 8002328:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <HAL_ADC_ConfigChannel+0x7cc>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0e9b      	lsrs	r3, r3, #26
 800233e:	3301      	adds	r3, #1
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	2101      	movs	r1, #1
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	e017      	b.n	800237c <HAL_ADC_ConfigChannel+0x7fc>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	61bb      	str	r3, [r7, #24]
  return result;
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e003      	b.n	8002370 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	2101      	movs	r1, #1
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	ea42 0103 	orr.w	r1, r2, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10d      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x828>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0e9b      	lsrs	r3, r3, #26
 8002392:	3301      	adds	r3, #1
 8002394:	f003 021f 	and.w	r2, r3, #31
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	3b1e      	subs	r3, #30
 80023a0:	051b      	lsls	r3, r3, #20
 80023a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	e01b      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x860>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	60fb      	str	r3, [r7, #12]
  return result;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80023c0:	2320      	movs	r3, #32
 80023c2:	e003      	b.n	80023cc <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	f003 021f 	and.w	r2, r3, #31
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	3b1e      	subs	r3, #30
 80023da:	051b      	lsls	r3, r3, #20
 80023dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023e0:	430b      	orrs	r3, r1
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	6892      	ldr	r2, [r2, #8]
 80023e6:	4619      	mov	r1, r3
 80023e8:	f7fe ffb2 	bl	8001350 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f280 80d7 	bge.w	80025a4 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a06      	ldr	r2, [pc, #24]	@ (8002414 <HAL_ADC_ConfigChannel+0x894>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d004      	beq.n	800240a <HAL_ADC_ConfigChannel+0x88a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <HAL_ADC_ConfigChannel+0x898>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d10a      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x8a0>
 800240a:	4b04      	ldr	r3, [pc, #16]	@ (800241c <HAL_ADC_ConfigChannel+0x89c>)
 800240c:	e009      	b.n	8002422 <HAL_ADC_ConfigChannel+0x8a2>
 800240e:	bf00      	nop
 8002410:	47ff0000 	.word	0x47ff0000
 8002414:	40022000 	.word	0x40022000
 8002418:	40022100 	.word	0x40022100
 800241c:	40022300 	.word	0x40022300
 8002420:	4b65      	ldr	r3, [pc, #404]	@ (80025b8 <HAL_ADC_ConfigChannel+0xa38>)
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fe18 	bl	8001058 <LL_ADC_GetCommonPathInternalCh>
 8002428:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a62      	ldr	r2, [pc, #392]	@ (80025bc <HAL_ADC_ConfigChannel+0xa3c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_ADC_ConfigChannel+0x8c0>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a61      	ldr	r2, [pc, #388]	@ (80025c0 <HAL_ADC_ConfigChannel+0xa40>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d10e      	bne.n	800245e <HAL_ADC_ConfigChannel+0x8de>
 8002440:	485e      	ldr	r0, [pc, #376]	@ (80025bc <HAL_ADC_ConfigChannel+0xa3c>)
 8002442:	f7ff f861 	bl	8001508 <LL_ADC_IsEnabled>
 8002446:	4604      	mov	r4, r0
 8002448:	485d      	ldr	r0, [pc, #372]	@ (80025c0 <HAL_ADC_ConfigChannel+0xa40>)
 800244a:	f7ff f85d 	bl	8001508 <LL_ADC_IsEnabled>
 800244e:	4603      	mov	r3, r0
 8002450:	4323      	orrs	r3, r4
 8002452:	2b00      	cmp	r3, #0
 8002454:	bf0c      	ite	eq
 8002456:	2301      	moveq	r3, #1
 8002458:	2300      	movne	r3, #0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	e008      	b.n	8002470 <HAL_ADC_ConfigChannel+0x8f0>
 800245e:	4859      	ldr	r0, [pc, #356]	@ (80025c4 <HAL_ADC_ConfigChannel+0xa44>)
 8002460:	f7ff f852 	bl	8001508 <LL_ADC_IsEnabled>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	bf0c      	ite	eq
 800246a:	2301      	moveq	r3, #1
 800246c:	2300      	movne	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8084 	beq.w	800257e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a53      	ldr	r2, [pc, #332]	@ (80025c8 <HAL_ADC_ConfigChannel+0xa48>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d132      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x966>
 8002480:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002484:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d12c      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a4c      	ldr	r2, [pc, #304]	@ (80025c4 <HAL_ADC_ConfigChannel+0xa44>)
 8002492:	4293      	cmp	r3, r2
 8002494:	f040 8086 	bne.w	80025a4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a47      	ldr	r2, [pc, #284]	@ (80025bc <HAL_ADC_ConfigChannel+0xa3c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d004      	beq.n	80024ac <HAL_ADC_ConfigChannel+0x92c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a46      	ldr	r2, [pc, #280]	@ (80025c0 <HAL_ADC_ConfigChannel+0xa40>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x930>
 80024ac:	4a47      	ldr	r2, [pc, #284]	@ (80025cc <HAL_ADC_ConfigChannel+0xa4c>)
 80024ae:	e000      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x932>
 80024b0:	4a41      	ldr	r2, [pc, #260]	@ (80025b8 <HAL_ADC_ConfigChannel+0xa38>)
 80024b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024ba:	4619      	mov	r1, r3
 80024bc:	4610      	mov	r0, r2
 80024be:	f7fe fdb8 	bl	8001032 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024c2:	4b43      	ldr	r3, [pc, #268]	@ (80025d0 <HAL_ADC_ConfigChannel+0xa50>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	4a42      	ldr	r2, [pc, #264]	@ (80025d4 <HAL_ADC_ConfigChannel+0xa54>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	099b      	lsrs	r3, r3, #6
 80024d0:	3301      	adds	r3, #1
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024d6:	e002      	b.n	80024de <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	3b01      	subs	r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f9      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e4:	e05e      	b.n	80025a4 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a3b      	ldr	r2, [pc, #236]	@ (80025d8 <HAL_ADC_ConfigChannel+0xa58>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d120      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x9b2>
 80024f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d11a      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a30      	ldr	r2, [pc, #192]	@ (80025c4 <HAL_ADC_ConfigChannel+0xa44>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d14e      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2c      	ldr	r2, [pc, #176]	@ (80025bc <HAL_ADC_ConfigChannel+0xa3c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d004      	beq.n	800251a <HAL_ADC_ConfigChannel+0x99a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a2a      	ldr	r2, [pc, #168]	@ (80025c0 <HAL_ADC_ConfigChannel+0xa40>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x99e>
 800251a:	4a2c      	ldr	r2, [pc, #176]	@ (80025cc <HAL_ADC_ConfigChannel+0xa4c>)
 800251c:	e000      	b.n	8002520 <HAL_ADC_ConfigChannel+0x9a0>
 800251e:	4a26      	ldr	r2, [pc, #152]	@ (80025b8 <HAL_ADC_ConfigChannel+0xa38>)
 8002520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002524:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f7fe fd81 	bl	8001032 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002530:	e038      	b.n	80025a4 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a29      	ldr	r2, [pc, #164]	@ (80025dc <HAL_ADC_ConfigChannel+0xa5c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d133      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0xa24>
 800253c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002540:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d12d      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1d      	ldr	r2, [pc, #116]	@ (80025c4 <HAL_ADC_ConfigChannel+0xa44>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d128      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a19      	ldr	r2, [pc, #100]	@ (80025bc <HAL_ADC_ConfigChannel+0xa3c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d004      	beq.n	8002566 <HAL_ADC_ConfigChannel+0x9e6>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a17      	ldr	r2, [pc, #92]	@ (80025c0 <HAL_ADC_ConfigChannel+0xa40>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x9ea>
 8002566:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <HAL_ADC_ConfigChannel+0xa4c>)
 8002568:	e000      	b.n	800256c <HAL_ADC_ConfigChannel+0x9ec>
 800256a:	4a13      	ldr	r2, [pc, #76]	@ (80025b8 <HAL_ADC_ConfigChannel+0xa38>)
 800256c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002570:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f7fe fd5b 	bl	8001032 <LL_ADC_SetCommonPathInternalCh>
 800257c:	e012      	b.n	80025a4 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002582:	f043 0220 	orr.w	r2, r3, #32
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002590:	e008      	b.n	80025a4 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002596:	f043 0220 	orr.w	r2, r3, #32
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80025ac:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	37e4      	adds	r7, #228	@ 0xe4
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd90      	pop	{r4, r7, pc}
 80025b8:	58026300 	.word	0x58026300
 80025bc:	40022000 	.word	0x40022000
 80025c0:	40022100 	.word	0x40022100
 80025c4:	58026000 	.word	0x58026000
 80025c8:	c7520000 	.word	0xc7520000
 80025cc:	40022300 	.word	0x40022300
 80025d0:	24000004 	.word	0x24000004
 80025d4:	053e2d63 	.word	0x053e2d63
 80025d8:	c3210000 	.word	0xc3210000
 80025dc:	cb840000 	.word	0xcb840000

080025e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe ff8b 	bl	8001508 <LL_ADC_IsEnabled>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d16e      	bne.n	80026d6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	4b38      	ldr	r3, [pc, #224]	@ (80026e0 <ADC_Enable+0x100>)
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00d      	beq.n	8002622 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260a:	f043 0210 	orr.w	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e05a      	b.n	80026d8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe ff5a 	bl	80014e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800262c:	f7fe fc96 	bl	8000f5c <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a2b      	ldr	r2, [pc, #172]	@ (80026e4 <ADC_Enable+0x104>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d004      	beq.n	8002646 <ADC_Enable+0x66>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a29      	ldr	r2, [pc, #164]	@ (80026e8 <ADC_Enable+0x108>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <ADC_Enable+0x6a>
 8002646:	4b29      	ldr	r3, [pc, #164]	@ (80026ec <ADC_Enable+0x10c>)
 8002648:	e000      	b.n	800264c <ADC_Enable+0x6c>
 800264a:	4b29      	ldr	r3, [pc, #164]	@ (80026f0 <ADC_Enable+0x110>)
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe feeb 	bl	8001428 <LL_ADC_GetMultimode>
 8002652:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a23      	ldr	r2, [pc, #140]	@ (80026e8 <ADC_Enable+0x108>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d002      	beq.n	8002664 <ADC_Enable+0x84>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	e000      	b.n	8002666 <ADC_Enable+0x86>
 8002664:	4b1f      	ldr	r3, [pc, #124]	@ (80026e4 <ADC_Enable+0x104>)
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	4293      	cmp	r3, r2
 800266c:	d02c      	beq.n	80026c8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d130      	bne.n	80026d6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002674:	e028      	b.n	80026c8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe ff44 	bl	8001508 <LL_ADC_IsEnabled>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d104      	bne.n	8002690 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe ff28 	bl	80014e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002690:	f7fe fc64 	bl	8000f5c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d914      	bls.n	80026c8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d00d      	beq.n	80026c8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b0:	f043 0210 	orr.w	r2, r3, #16
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e007      	b.n	80026d8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d1cf      	bne.n	8002676 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	8000003f 	.word	0x8000003f
 80026e4:	40022000 	.word	0x40022000
 80026e8:	40022100 	.word	0x40022100
 80026ec:	40022300 	.word	0x40022300
 80026f0:	58026300 	.word	0x58026300

080026f4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002700:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002706:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800270a:	2b00      	cmp	r3, #0
 800270c:	d14b      	bne.n	80027a6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002712:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d021      	beq.n	800276c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fd93 	bl	8001258 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d032      	beq.n	800279e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d12b      	bne.n	800279e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800274a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002756:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d11f      	bne.n	800279e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002762:	f043 0201 	orr.w	r2, r3, #1
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	661a      	str	r2, [r3, #96]	@ 0x60
 800276a:	e018      	b.n	800279e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d111      	bne.n	800279e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d105      	bne.n	800279e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002796:	f043 0201 	orr.w	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7fe f8d2 	bl	8000948 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027a4:	e00e      	b.n	80027c4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f7ff f9da 	bl	8001b6c <HAL_ADC_ErrorCallback>
}
 80027b8:	e004      	b.n	80027c4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f7fe f890 	bl	8000900 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002806:	f043 0204 	orr.w	r2, r3, #4
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f7ff f9ac 	bl	8001b6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002814:	bf00      	nop
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a6c      	ldr	r2, [pc, #432]	@ (80029dc <ADC_ConfigureBoostMode+0x1c0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d004      	beq.n	8002838 <ADC_ConfigureBoostMode+0x1c>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a6b      	ldr	r2, [pc, #428]	@ (80029e0 <ADC_ConfigureBoostMode+0x1c4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d109      	bne.n	800284c <ADC_ConfigureBoostMode+0x30>
 8002838:	4b6a      	ldr	r3, [pc, #424]	@ (80029e4 <ADC_ConfigureBoostMode+0x1c8>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf14      	ite	ne
 8002844:	2301      	movne	r3, #1
 8002846:	2300      	moveq	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	e008      	b.n	800285e <ADC_ConfigureBoostMode+0x42>
 800284c:	4b66      	ldr	r3, [pc, #408]	@ (80029e8 <ADC_ConfigureBoostMode+0x1cc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf14      	ite	ne
 8002858:	2301      	movne	r3, #1
 800285a:	2300      	moveq	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01c      	beq.n	800289c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002862:	f003 fe65 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 8002866:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002870:	d010      	beq.n	8002894 <ADC_ConfigureBoostMode+0x78>
 8002872:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002876:	d873      	bhi.n	8002960 <ADC_ConfigureBoostMode+0x144>
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800287c:	d002      	beq.n	8002884 <ADC_ConfigureBoostMode+0x68>
 800287e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002882:	d16d      	bne.n	8002960 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	0c1b      	lsrs	r3, r3, #16
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	60fb      	str	r3, [r7, #12]
        break;
 8002892:	e068      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	60fb      	str	r3, [r7, #12]
        break;
 800289a:	e064      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800289c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80028a0:	f04f 0100 	mov.w	r1, #0
 80028a4:	f005 f82a 	bl	80078fc <HAL_RCCEx_GetPeriphCLKFreq>
 80028a8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80028b2:	d051      	beq.n	8002958 <ADC_ConfigureBoostMode+0x13c>
 80028b4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80028b8:	d854      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 80028ba:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80028be:	d047      	beq.n	8002950 <ADC_ConfigureBoostMode+0x134>
 80028c0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80028c4:	d84e      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 80028c6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80028ca:	d03d      	beq.n	8002948 <ADC_ConfigureBoostMode+0x12c>
 80028cc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80028d0:	d848      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 80028d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028d6:	d033      	beq.n	8002940 <ADC_ConfigureBoostMode+0x124>
 80028d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028dc:	d842      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 80028de:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80028e2:	d029      	beq.n	8002938 <ADC_ConfigureBoostMode+0x11c>
 80028e4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80028e8:	d83c      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 80028ea:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80028ee:	d01a      	beq.n	8002926 <ADC_ConfigureBoostMode+0x10a>
 80028f0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80028f4:	d836      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 80028f6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80028fa:	d014      	beq.n	8002926 <ADC_ConfigureBoostMode+0x10a>
 80028fc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002900:	d830      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 8002902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002906:	d00e      	beq.n	8002926 <ADC_ConfigureBoostMode+0x10a>
 8002908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800290c:	d82a      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 800290e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002912:	d008      	beq.n	8002926 <ADC_ConfigureBoostMode+0x10a>
 8002914:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002918:	d824      	bhi.n	8002964 <ADC_ConfigureBoostMode+0x148>
 800291a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800291e:	d002      	beq.n	8002926 <ADC_ConfigureBoostMode+0x10a>
 8002920:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002924:	d11e      	bne.n	8002964 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	0c9b      	lsrs	r3, r3, #18
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	60fb      	str	r3, [r7, #12]
        break;
 8002936:	e016      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
        break;
 800293e:	e012      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	60fb      	str	r3, [r7, #12]
        break;
 8002946:	e00e      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	099b      	lsrs	r3, r3, #6
 800294c:	60fb      	str	r3, [r7, #12]
        break;
 800294e:	e00a      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	09db      	lsrs	r3, r3, #7
 8002954:	60fb      	str	r3, [r7, #12]
        break;
 8002956:	e006      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	60fb      	str	r3, [r7, #12]
        break;
 800295e:	e002      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002960:	bf00      	nop
 8002962:	e000      	b.n	8002966 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002964:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4a1f      	ldr	r2, [pc, #124]	@ (80029ec <ADC_ConfigureBoostMode+0x1d0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d808      	bhi.n	8002986 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002982:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002984:	e025      	b.n	80029d2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4a19      	ldr	r2, [pc, #100]	@ (80029f0 <ADC_ConfigureBoostMode+0x1d4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d80a      	bhi.n	80029a4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029a0:	609a      	str	r2, [r3, #8]
}
 80029a2:	e016      	b.n	80029d2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a13      	ldr	r2, [pc, #76]	@ (80029f4 <ADC_ConfigureBoostMode+0x1d8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d80a      	bhi.n	80029c2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029be:	609a      	str	r2, [r3, #8]
}
 80029c0:	e007      	b.n	80029d2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80029d0:	609a      	str	r2, [r3, #8]
}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40022000 	.word	0x40022000
 80029e0:	40022100 	.word	0x40022100
 80029e4:	40022300 	.word	0x40022300
 80029e8:	58026300 	.word	0x58026300
 80029ec:	005f5e10 	.word	0x005f5e10
 80029f0:	00bebc20 	.word	0x00bebc20
 80029f4:	017d7840 	.word	0x017d7840

080029f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a08:	4b0b      	ldr	r3, [pc, #44]	@ (8002a38 <__NVIC_SetPriorityGrouping+0x40>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a14:	4013      	ands	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a20:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <__NVIC_SetPriorityGrouping+0x44>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a26:	4a04      	ldr	r2, [pc, #16]	@ (8002a38 <__NVIC_SetPriorityGrouping+0x40>)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	60d3      	str	r3, [r2, #12]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed00 	.word	0xe000ed00
 8002a3c:	05fa0000 	.word	0x05fa0000

08002a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a44:	4b04      	ldr	r3, [pc, #16]	@ (8002a58 <__NVIC_GetPriorityGrouping+0x18>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	f003 0307 	and.w	r3, r3, #7
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	db0b      	blt.n	8002a86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	f003 021f 	and.w	r2, r3, #31
 8002a74:	4907      	ldr	r1, [pc, #28]	@ (8002a94 <__NVIC_EnableIRQ+0x38>)
 8002a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000e100 	.word	0xe000e100

08002a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002aa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	db0a      	blt.n	8002ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	490c      	ldr	r1, [pc, #48]	@ (8002ae4 <__NVIC_SetPriority+0x4c>)
 8002ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ab6:	0112      	lsls	r2, r2, #4
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	440b      	add	r3, r1
 8002abc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac0:	e00a      	b.n	8002ad8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4908      	ldr	r1, [pc, #32]	@ (8002ae8 <__NVIC_SetPriority+0x50>)
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	3b04      	subs	r3, #4
 8002ad0:	0112      	lsls	r2, r2, #4
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	761a      	strb	r2, [r3, #24]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000e100 	.word	0xe000e100
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	@ 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f1c3 0307 	rsb	r3, r3, #7
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	bf28      	it	cs
 8002b0a:	2304      	movcs	r3, #4
 8002b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d902      	bls.n	8002b1c <NVIC_EncodePriority+0x30>
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3b03      	subs	r3, #3
 8002b1a:	e000      	b.n	8002b1e <NVIC_EncodePriority+0x32>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b20:	f04f 32ff 	mov.w	r2, #4294967295
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	401a      	ands	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b34:	f04f 31ff 	mov.w	r1, #4294967295
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	43d9      	mvns	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	4313      	orrs	r3, r2
         );
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3724      	adds	r7, #36	@ 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b64:	d301      	bcc.n	8002b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00f      	b.n	8002b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b94 <SysTick_Config+0x40>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b72:	210f      	movs	r1, #15
 8002b74:	f04f 30ff 	mov.w	r0, #4294967295
 8002b78:	f7ff ff8e 	bl	8002a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b7c:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <SysTick_Config+0x40>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b82:	4b04      	ldr	r3, [pc, #16]	@ (8002b94 <SysTick_Config+0x40>)
 8002b84:	2207      	movs	r2, #7
 8002b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	e000e010 	.word	0xe000e010

08002b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ff29 	bl	80029f8 <__NVIC_SetPriorityGrouping>
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b086      	sub	sp, #24
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bbc:	f7ff ff40 	bl	8002a40 <__NVIC_GetPriorityGrouping>
 8002bc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f7ff ff90 	bl	8002aec <NVIC_EncodePriority>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff5f 	bl	8002a98 <__NVIC_SetPriority>
}
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff33 	bl	8002a5c <__NVIC_EnableIRQ>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ffa4 	bl	8002b54 <SysTick_Config>
 8002c0c:	4603      	mov	r3, r0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e014      	b.n	8002c52 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	791b      	ldrb	r3, [r3, #4]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d105      	bne.n	8002c3e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fd ff87 	bl	8000b4c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0a2      	b.n	8002dba <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	795b      	ldrb	r3, [r3, #5]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_DAC_Start_DMA+0x24>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e09c      	b.n	8002dba <HAL_DAC_Start_DMA+0x15e>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d129      	bne.n	8002ce6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	4a4b      	ldr	r2, [pc, #300]	@ (8002dc4 <HAL_DAC_Start_DMA+0x168>)
 8002c98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	4a4a      	ldr	r2, [pc, #296]	@ (8002dc8 <HAL_DAC_Start_DMA+0x16c>)
 8002ca0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	4a49      	ldr	r2, [pc, #292]	@ (8002dcc <HAL_DAC_Start_DMA+0x170>)
 8002ca8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cb8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_DAC_Start_DMA+0x6c>
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d005      	beq.n	8002cd2 <HAL_DAC_Start_DMA+0x76>
 8002cc6:	e009      	b.n	8002cdc <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3308      	adds	r3, #8
 8002cce:	613b      	str	r3, [r7, #16]
        break;
 8002cd0:	e033      	b.n	8002d3a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	330c      	adds	r3, #12
 8002cd8:	613b      	str	r3, [r7, #16]
        break;
 8002cda:	e02e      	b.n	8002d3a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3310      	adds	r3, #16
 8002ce2:	613b      	str	r3, [r7, #16]
        break;
 8002ce4:	e029      	b.n	8002d3a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	4a39      	ldr	r2, [pc, #228]	@ (8002dd0 <HAL_DAC_Start_DMA+0x174>)
 8002cec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	4a38      	ldr	r2, [pc, #224]	@ (8002dd4 <HAL_DAC_Start_DMA+0x178>)
 8002cf4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	4a37      	ldr	r2, [pc, #220]	@ (8002dd8 <HAL_DAC_Start_DMA+0x17c>)
 8002cfc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002d0c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_DAC_Start_DMA+0xc0>
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d005      	beq.n	8002d26 <HAL_DAC_Start_DMA+0xca>
 8002d1a:	e009      	b.n	8002d30 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3314      	adds	r3, #20
 8002d22:	613b      	str	r3, [r7, #16]
        break;
 8002d24:	e009      	b.n	8002d3a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3318      	adds	r3, #24
 8002d2c:	613b      	str	r3, [r7, #16]
        break;
 8002d2e:	e004      	b.n	8002d3a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	331c      	adds	r3, #28
 8002d36:	613b      	str	r3, [r7, #16]
        break;
 8002d38:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d111      	bne.n	8002d64 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6898      	ldr	r0, [r3, #8]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	f000 fd81 	bl	8003860 <HAL_DMA_Start_IT>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	75fb      	strb	r3, [r7, #23]
 8002d62:	e010      	b.n	8002d86 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002d72:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	68d8      	ldr	r0, [r3, #12]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	f000 fd6f 	bl	8003860 <HAL_DMA_Start_IT>
 8002d82:	4603      	mov	r3, r0
 8002d84:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10c      	bne.n	8002dac <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6819      	ldr	r1, [r3, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2201      	movs	r2, #1
 8002da0:	409a      	lsls	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e005      	b.n	8002db8 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f043 0204 	orr.w	r2, r3, #4
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	0800309d 	.word	0x0800309d
 8002dc8:	080030bf 	.word	0x080030bf
 8002dcc:	080030db 	.word	0x080030db
 8002dd0:	08003145 	.word	0x08003145
 8002dd4:	08003167 	.word	0x08003167
 8002dd8:	08003183 	.word	0x08003183

08002ddc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	@ 0x28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <HAL_DAC_ConfigChannel+0x1e>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e12a      	b.n	8003090 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	795b      	ldrb	r3, [r3, #5]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_DAC_ConfigChannel+0x2e>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e124      	b.n	8003090 <HAL_DAC_ConfigChannel+0x278>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d17a      	bne.n	8002f50 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002e5a:	f7fe f87f 	bl	8000f5c <HAL_GetTick>
 8002e5e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d13d      	bne.n	8002ee2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e66:	e018      	b.n	8002e9a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e68:	f7fe f878 	bl	8000f5c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d911      	bls.n	8002e9a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e7c:	4b86      	ldr	r3, [pc, #536]	@ (8003098 <HAL_DAC_ConfigChannel+0x280>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f043 0208 	orr.w	r2, r3, #8
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2203      	movs	r2, #3
 8002e94:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e0fa      	b.n	8003090 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ea0:	4b7d      	ldr	r3, [pc, #500]	@ (8003098 <HAL_DAC_ConfigChannel+0x280>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1df      	bne.n	8002e68 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	6992      	ldr	r2, [r2, #24]
 8002eb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002eb2:	e020      	b.n	8002ef6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002eb4:	f7fe f852 	bl	8000f5c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d90f      	bls.n	8002ee2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	da0a      	bge.n	8002ee2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f043 0208 	orr.w	r2, r3, #8
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2203      	movs	r2, #3
 8002edc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e0d6      	b.n	8003090 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	dbe3      	blt.n	8002eb4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	6992      	ldr	r2, [r2, #24]
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	ea02 0103 	and.w	r1, r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	21ff      	movs	r1, #255	@ 0xff
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	ea02 0103 	and.w	r1, r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	6a1a      	ldr	r2, [r3, #32]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	409a      	lsls	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d11d      	bne.n	8002f94 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	221f      	movs	r2, #31
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2207      	movs	r2, #7
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d102      	bne.n	8002fbe <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fbc:	e00f      	b.n	8002fde <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d102      	bne.n	8002fcc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fca:	e008      	b.n	8002fde <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd8:	e001      	b.n	8002fde <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6819      	ldr	r1, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43da      	mvns	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	400a      	ands	r2, r1
 8003024:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6819      	ldr	r1, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	22c0      	movs	r2, #192	@ 0xc0
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43da      	mvns	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	400a      	ands	r2, r1
 800307e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800308c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003090:	4618      	mov	r0, r3
 8003092:	3728      	adds	r7, #40	@ 0x28
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20008000 	.word	0x20008000

0800309c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f7ff fe96 	bl	8002ddc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2201      	movs	r2, #1
 80030b4:	711a      	strb	r2, [r3, #4]
}
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ca:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff fe8f 	bl	8002df0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f043 0204 	orr.w	r2, r3, #4
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f7ff fe85 	bl	8002e04 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	711a      	strb	r2, [r3, #4]
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003150:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f7ff ffd8 	bl	8003108 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	711a      	strb	r2, [r3, #4]
}
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003172:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7ff ffd1 	bl	800311c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f043 0204 	orr.w	r2, r3, #4
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f7ff ffc7 	bl	8003130 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2201      	movs	r2, #1
 80031a6:	711a      	strb	r2, [r3, #4]
}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80031b8:	f7fd fed0 	bl	8000f5c <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e312      	b.n	80037ee <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a66      	ldr	r2, [pc, #408]	@ (8003368 <HAL_DMA_Init+0x1b8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d04a      	beq.n	8003268 <HAL_DMA_Init+0xb8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a65      	ldr	r2, [pc, #404]	@ (800336c <HAL_DMA_Init+0x1bc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d045      	beq.n	8003268 <HAL_DMA_Init+0xb8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a63      	ldr	r2, [pc, #396]	@ (8003370 <HAL_DMA_Init+0x1c0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d040      	beq.n	8003268 <HAL_DMA_Init+0xb8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a62      	ldr	r2, [pc, #392]	@ (8003374 <HAL_DMA_Init+0x1c4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d03b      	beq.n	8003268 <HAL_DMA_Init+0xb8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a60      	ldr	r2, [pc, #384]	@ (8003378 <HAL_DMA_Init+0x1c8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d036      	beq.n	8003268 <HAL_DMA_Init+0xb8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a5f      	ldr	r2, [pc, #380]	@ (800337c <HAL_DMA_Init+0x1cc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d031      	beq.n	8003268 <HAL_DMA_Init+0xb8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a5d      	ldr	r2, [pc, #372]	@ (8003380 <HAL_DMA_Init+0x1d0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d02c      	beq.n	8003268 <HAL_DMA_Init+0xb8>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a5c      	ldr	r2, [pc, #368]	@ (8003384 <HAL_DMA_Init+0x1d4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d027      	beq.n	8003268 <HAL_DMA_Init+0xb8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a5a      	ldr	r2, [pc, #360]	@ (8003388 <HAL_DMA_Init+0x1d8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d022      	beq.n	8003268 <HAL_DMA_Init+0xb8>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a59      	ldr	r2, [pc, #356]	@ (800338c <HAL_DMA_Init+0x1dc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d01d      	beq.n	8003268 <HAL_DMA_Init+0xb8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a57      	ldr	r2, [pc, #348]	@ (8003390 <HAL_DMA_Init+0x1e0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d018      	beq.n	8003268 <HAL_DMA_Init+0xb8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a56      	ldr	r2, [pc, #344]	@ (8003394 <HAL_DMA_Init+0x1e4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d013      	beq.n	8003268 <HAL_DMA_Init+0xb8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a54      	ldr	r2, [pc, #336]	@ (8003398 <HAL_DMA_Init+0x1e8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00e      	beq.n	8003268 <HAL_DMA_Init+0xb8>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a53      	ldr	r2, [pc, #332]	@ (800339c <HAL_DMA_Init+0x1ec>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d009      	beq.n	8003268 <HAL_DMA_Init+0xb8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a51      	ldr	r2, [pc, #324]	@ (80033a0 <HAL_DMA_Init+0x1f0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d004      	beq.n	8003268 <HAL_DMA_Init+0xb8>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a50      	ldr	r2, [pc, #320]	@ (80033a4 <HAL_DMA_Init+0x1f4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d101      	bne.n	800326c <HAL_DMA_Init+0xbc>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_DMA_Init+0xbe>
 800326c:	2300      	movs	r3, #0
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 813c 	beq.w	80034ec <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a37      	ldr	r2, [pc, #220]	@ (8003368 <HAL_DMA_Init+0x1b8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d04a      	beq.n	8003324 <HAL_DMA_Init+0x174>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a36      	ldr	r2, [pc, #216]	@ (800336c <HAL_DMA_Init+0x1bc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d045      	beq.n	8003324 <HAL_DMA_Init+0x174>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a34      	ldr	r2, [pc, #208]	@ (8003370 <HAL_DMA_Init+0x1c0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d040      	beq.n	8003324 <HAL_DMA_Init+0x174>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a33      	ldr	r2, [pc, #204]	@ (8003374 <HAL_DMA_Init+0x1c4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d03b      	beq.n	8003324 <HAL_DMA_Init+0x174>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a31      	ldr	r2, [pc, #196]	@ (8003378 <HAL_DMA_Init+0x1c8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d036      	beq.n	8003324 <HAL_DMA_Init+0x174>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a30      	ldr	r2, [pc, #192]	@ (800337c <HAL_DMA_Init+0x1cc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d031      	beq.n	8003324 <HAL_DMA_Init+0x174>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003380 <HAL_DMA_Init+0x1d0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d02c      	beq.n	8003324 <HAL_DMA_Init+0x174>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003384 <HAL_DMA_Init+0x1d4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d027      	beq.n	8003324 <HAL_DMA_Init+0x174>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003388 <HAL_DMA_Init+0x1d8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d022      	beq.n	8003324 <HAL_DMA_Init+0x174>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a2a      	ldr	r2, [pc, #168]	@ (800338c <HAL_DMA_Init+0x1dc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d01d      	beq.n	8003324 <HAL_DMA_Init+0x174>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a28      	ldr	r2, [pc, #160]	@ (8003390 <HAL_DMA_Init+0x1e0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d018      	beq.n	8003324 <HAL_DMA_Init+0x174>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a27      	ldr	r2, [pc, #156]	@ (8003394 <HAL_DMA_Init+0x1e4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d013      	beq.n	8003324 <HAL_DMA_Init+0x174>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a25      	ldr	r2, [pc, #148]	@ (8003398 <HAL_DMA_Init+0x1e8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00e      	beq.n	8003324 <HAL_DMA_Init+0x174>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a24      	ldr	r2, [pc, #144]	@ (800339c <HAL_DMA_Init+0x1ec>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d009      	beq.n	8003324 <HAL_DMA_Init+0x174>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a22      	ldr	r2, [pc, #136]	@ (80033a0 <HAL_DMA_Init+0x1f0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <HAL_DMA_Init+0x174>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a21      	ldr	r2, [pc, #132]	@ (80033a4 <HAL_DMA_Init+0x1f4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d108      	bne.n	8003336 <HAL_DMA_Init+0x186>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e007      	b.n	8003346 <HAL_DMA_Init+0x196>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0201 	bic.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003346:	e02f      	b.n	80033a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003348:	f7fd fe08 	bl	8000f5c <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b05      	cmp	r3, #5
 8003354:	d928      	bls.n	80033a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2203      	movs	r2, #3
 8003360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e242      	b.n	80037ee <HAL_DMA_Init+0x63e>
 8003368:	40020010 	.word	0x40020010
 800336c:	40020028 	.word	0x40020028
 8003370:	40020040 	.word	0x40020040
 8003374:	40020058 	.word	0x40020058
 8003378:	40020070 	.word	0x40020070
 800337c:	40020088 	.word	0x40020088
 8003380:	400200a0 	.word	0x400200a0
 8003384:	400200b8 	.word	0x400200b8
 8003388:	40020410 	.word	0x40020410
 800338c:	40020428 	.word	0x40020428
 8003390:	40020440 	.word	0x40020440
 8003394:	40020458 	.word	0x40020458
 8003398:	40020470 	.word	0x40020470
 800339c:	40020488 	.word	0x40020488
 80033a0:	400204a0 	.word	0x400204a0
 80033a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1c8      	bne.n	8003348 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4b83      	ldr	r3, [pc, #524]	@ (80035d0 <HAL_DMA_Init+0x420>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80033ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d107      	bne.n	800340c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003404:	4313      	orrs	r3, r2
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b28      	cmp	r3, #40	@ 0x28
 8003412:	d903      	bls.n	800341c <HAL_DMA_Init+0x26c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b2e      	cmp	r3, #46	@ 0x2e
 800341a:	d91f      	bls.n	800345c <HAL_DMA_Init+0x2ac>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b3e      	cmp	r3, #62	@ 0x3e
 8003422:	d903      	bls.n	800342c <HAL_DMA_Init+0x27c>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b42      	cmp	r3, #66	@ 0x42
 800342a:	d917      	bls.n	800345c <HAL_DMA_Init+0x2ac>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b46      	cmp	r3, #70	@ 0x46
 8003432:	d903      	bls.n	800343c <HAL_DMA_Init+0x28c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b48      	cmp	r3, #72	@ 0x48
 800343a:	d90f      	bls.n	800345c <HAL_DMA_Init+0x2ac>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b4e      	cmp	r3, #78	@ 0x4e
 8003442:	d903      	bls.n	800344c <HAL_DMA_Init+0x29c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b52      	cmp	r3, #82	@ 0x52
 800344a:	d907      	bls.n	800345c <HAL_DMA_Init+0x2ac>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b73      	cmp	r3, #115	@ 0x73
 8003452:	d905      	bls.n	8003460 <HAL_DMA_Init+0x2b0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b77      	cmp	r3, #119	@ 0x77
 800345a:	d801      	bhi.n	8003460 <HAL_DMA_Init+0x2b0>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <HAL_DMA_Init+0x2b2>
 8003460:	2300      	movs	r3, #0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800346c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f023 0307 	bic.w	r3, r3, #7
 8003484:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	2b04      	cmp	r3, #4
 8003496:	d117      	bne.n	80034c8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00e      	beq.n	80034c8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f001 fdca 	bl	8005044 <DMA_CheckFifoParam>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2240      	movs	r2, #64	@ 0x40
 80034ba:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e192      	b.n	80037ee <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f001 fd05 	bl	8004ee0 <DMA_CalcBaseAndBitshift>
 80034d6:	4603      	mov	r3, r0
 80034d8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	223f      	movs	r2, #63	@ 0x3f
 80034e4:	409a      	lsls	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	e0c8      	b.n	800367e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a38      	ldr	r2, [pc, #224]	@ (80035d4 <HAL_DMA_Init+0x424>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d022      	beq.n	800353c <HAL_DMA_Init+0x38c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a37      	ldr	r2, [pc, #220]	@ (80035d8 <HAL_DMA_Init+0x428>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d01d      	beq.n	800353c <HAL_DMA_Init+0x38c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a35      	ldr	r2, [pc, #212]	@ (80035dc <HAL_DMA_Init+0x42c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d018      	beq.n	800353c <HAL_DMA_Init+0x38c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a34      	ldr	r2, [pc, #208]	@ (80035e0 <HAL_DMA_Init+0x430>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d013      	beq.n	800353c <HAL_DMA_Init+0x38c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a32      	ldr	r2, [pc, #200]	@ (80035e4 <HAL_DMA_Init+0x434>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d00e      	beq.n	800353c <HAL_DMA_Init+0x38c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a31      	ldr	r2, [pc, #196]	@ (80035e8 <HAL_DMA_Init+0x438>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d009      	beq.n	800353c <HAL_DMA_Init+0x38c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a2f      	ldr	r2, [pc, #188]	@ (80035ec <HAL_DMA_Init+0x43c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d004      	beq.n	800353c <HAL_DMA_Init+0x38c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2e      	ldr	r2, [pc, #184]	@ (80035f0 <HAL_DMA_Init+0x440>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d101      	bne.n	8003540 <HAL_DMA_Init+0x390>
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <HAL_DMA_Init+0x392>
 8003540:	2300      	movs	r3, #0
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8092 	beq.w	800366c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a21      	ldr	r2, [pc, #132]	@ (80035d4 <HAL_DMA_Init+0x424>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d021      	beq.n	8003596 <HAL_DMA_Init+0x3e6>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a20      	ldr	r2, [pc, #128]	@ (80035d8 <HAL_DMA_Init+0x428>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d01c      	beq.n	8003596 <HAL_DMA_Init+0x3e6>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1e      	ldr	r2, [pc, #120]	@ (80035dc <HAL_DMA_Init+0x42c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d017      	beq.n	8003596 <HAL_DMA_Init+0x3e6>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1d      	ldr	r2, [pc, #116]	@ (80035e0 <HAL_DMA_Init+0x430>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d012      	beq.n	8003596 <HAL_DMA_Init+0x3e6>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1b      	ldr	r2, [pc, #108]	@ (80035e4 <HAL_DMA_Init+0x434>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00d      	beq.n	8003596 <HAL_DMA_Init+0x3e6>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1a      	ldr	r2, [pc, #104]	@ (80035e8 <HAL_DMA_Init+0x438>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d008      	beq.n	8003596 <HAL_DMA_Init+0x3e6>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a18      	ldr	r2, [pc, #96]	@ (80035ec <HAL_DMA_Init+0x43c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d003      	beq.n	8003596 <HAL_DMA_Init+0x3e6>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a17      	ldr	r2, [pc, #92]	@ (80035f0 <HAL_DMA_Init+0x440>)
 8003594:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2202      	movs	r2, #2
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4b10      	ldr	r3, [pc, #64]	@ (80035f4 <HAL_DMA_Init+0x444>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b40      	cmp	r3, #64	@ 0x40
 80035bc:	d01c      	beq.n	80035f8 <HAL_DMA_Init+0x448>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b80      	cmp	r3, #128	@ 0x80
 80035c4:	d102      	bne.n	80035cc <HAL_DMA_Init+0x41c>
 80035c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80035ca:	e016      	b.n	80035fa <HAL_DMA_Init+0x44a>
 80035cc:	2300      	movs	r3, #0
 80035ce:	e014      	b.n	80035fa <HAL_DMA_Init+0x44a>
 80035d0:	fe10803f 	.word	0xfe10803f
 80035d4:	58025408 	.word	0x58025408
 80035d8:	5802541c 	.word	0x5802541c
 80035dc:	58025430 	.word	0x58025430
 80035e0:	58025444 	.word	0x58025444
 80035e4:	58025458 	.word	0x58025458
 80035e8:	5802546c 	.word	0x5802546c
 80035ec:	58025480 	.word	0x58025480
 80035f0:	58025494 	.word	0x58025494
 80035f4:	fffe000f 	.word	0xfffe000f
 80035f8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68d2      	ldr	r2, [r2, #12]
 80035fe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003600:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003608:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003610:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003618:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003620:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003628:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	4b6e      	ldr	r3, [pc, #440]	@ (80037f8 <HAL_DMA_Init+0x648>)
 8003640:	4413      	add	r3, r2
 8003642:	4a6e      	ldr	r2, [pc, #440]	@ (80037fc <HAL_DMA_Init+0x64c>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	009a      	lsls	r2, r3, #2
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f001 fc45 	bl	8004ee0 <DMA_CalcBaseAndBitshift>
 8003656:	4603      	mov	r3, r0
 8003658:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	2201      	movs	r2, #1
 8003664:	409a      	lsls	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	e008      	b.n	800367e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2240      	movs	r2, #64	@ 0x40
 8003670:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2203      	movs	r2, #3
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0b7      	b.n	80037ee <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a5f      	ldr	r2, [pc, #380]	@ (8003800 <HAL_DMA_Init+0x650>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d072      	beq.n	800376e <HAL_DMA_Init+0x5be>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a5d      	ldr	r2, [pc, #372]	@ (8003804 <HAL_DMA_Init+0x654>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d06d      	beq.n	800376e <HAL_DMA_Init+0x5be>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a5c      	ldr	r2, [pc, #368]	@ (8003808 <HAL_DMA_Init+0x658>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d068      	beq.n	800376e <HAL_DMA_Init+0x5be>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a5a      	ldr	r2, [pc, #360]	@ (800380c <HAL_DMA_Init+0x65c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d063      	beq.n	800376e <HAL_DMA_Init+0x5be>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a59      	ldr	r2, [pc, #356]	@ (8003810 <HAL_DMA_Init+0x660>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d05e      	beq.n	800376e <HAL_DMA_Init+0x5be>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a57      	ldr	r2, [pc, #348]	@ (8003814 <HAL_DMA_Init+0x664>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d059      	beq.n	800376e <HAL_DMA_Init+0x5be>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a56      	ldr	r2, [pc, #344]	@ (8003818 <HAL_DMA_Init+0x668>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d054      	beq.n	800376e <HAL_DMA_Init+0x5be>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a54      	ldr	r2, [pc, #336]	@ (800381c <HAL_DMA_Init+0x66c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d04f      	beq.n	800376e <HAL_DMA_Init+0x5be>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a53      	ldr	r2, [pc, #332]	@ (8003820 <HAL_DMA_Init+0x670>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d04a      	beq.n	800376e <HAL_DMA_Init+0x5be>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a51      	ldr	r2, [pc, #324]	@ (8003824 <HAL_DMA_Init+0x674>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d045      	beq.n	800376e <HAL_DMA_Init+0x5be>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a50      	ldr	r2, [pc, #320]	@ (8003828 <HAL_DMA_Init+0x678>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d040      	beq.n	800376e <HAL_DMA_Init+0x5be>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a4e      	ldr	r2, [pc, #312]	@ (800382c <HAL_DMA_Init+0x67c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d03b      	beq.n	800376e <HAL_DMA_Init+0x5be>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a4d      	ldr	r2, [pc, #308]	@ (8003830 <HAL_DMA_Init+0x680>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d036      	beq.n	800376e <HAL_DMA_Init+0x5be>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a4b      	ldr	r2, [pc, #300]	@ (8003834 <HAL_DMA_Init+0x684>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d031      	beq.n	800376e <HAL_DMA_Init+0x5be>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a4a      	ldr	r2, [pc, #296]	@ (8003838 <HAL_DMA_Init+0x688>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d02c      	beq.n	800376e <HAL_DMA_Init+0x5be>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a48      	ldr	r2, [pc, #288]	@ (800383c <HAL_DMA_Init+0x68c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d027      	beq.n	800376e <HAL_DMA_Init+0x5be>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a47      	ldr	r2, [pc, #284]	@ (8003840 <HAL_DMA_Init+0x690>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d022      	beq.n	800376e <HAL_DMA_Init+0x5be>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a45      	ldr	r2, [pc, #276]	@ (8003844 <HAL_DMA_Init+0x694>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d01d      	beq.n	800376e <HAL_DMA_Init+0x5be>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a44      	ldr	r2, [pc, #272]	@ (8003848 <HAL_DMA_Init+0x698>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d018      	beq.n	800376e <HAL_DMA_Init+0x5be>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a42      	ldr	r2, [pc, #264]	@ (800384c <HAL_DMA_Init+0x69c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <HAL_DMA_Init+0x5be>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a41      	ldr	r2, [pc, #260]	@ (8003850 <HAL_DMA_Init+0x6a0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00e      	beq.n	800376e <HAL_DMA_Init+0x5be>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a3f      	ldr	r2, [pc, #252]	@ (8003854 <HAL_DMA_Init+0x6a4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d009      	beq.n	800376e <HAL_DMA_Init+0x5be>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a3e      	ldr	r2, [pc, #248]	@ (8003858 <HAL_DMA_Init+0x6a8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_DMA_Init+0x5be>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a3c      	ldr	r2, [pc, #240]	@ (800385c <HAL_DMA_Init+0x6ac>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d101      	bne.n	8003772 <HAL_DMA_Init+0x5c2>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <HAL_DMA_Init+0x5c4>
 8003772:	2300      	movs	r3, #0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d032      	beq.n	80037de <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f001 fcdf 	bl	800513c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b80      	cmp	r3, #128	@ 0x80
 8003784:	d102      	bne.n	800378c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80037a0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d010      	beq.n	80037cc <HAL_DMA_Init+0x61c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d80c      	bhi.n	80037cc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f001 fd5c 	bl	8005270 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	e008      	b.n	80037de <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	a7fdabf8 	.word	0xa7fdabf8
 80037fc:	cccccccd 	.word	0xcccccccd
 8003800:	40020010 	.word	0x40020010
 8003804:	40020028 	.word	0x40020028
 8003808:	40020040 	.word	0x40020040
 800380c:	40020058 	.word	0x40020058
 8003810:	40020070 	.word	0x40020070
 8003814:	40020088 	.word	0x40020088
 8003818:	400200a0 	.word	0x400200a0
 800381c:	400200b8 	.word	0x400200b8
 8003820:	40020410 	.word	0x40020410
 8003824:	40020428 	.word	0x40020428
 8003828:	40020440 	.word	0x40020440
 800382c:	40020458 	.word	0x40020458
 8003830:	40020470 	.word	0x40020470
 8003834:	40020488 	.word	0x40020488
 8003838:	400204a0 	.word	0x400204a0
 800383c:	400204b8 	.word	0x400204b8
 8003840:	58025408 	.word	0x58025408
 8003844:	5802541c 	.word	0x5802541c
 8003848:	58025430 	.word	0x58025430
 800384c:	58025444 	.word	0x58025444
 8003850:	58025458 	.word	0x58025458
 8003854:	5802546c 	.word	0x5802546c
 8003858:	58025480 	.word	0x58025480
 800385c:	58025494 	.word	0x58025494

08003860 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e226      	b.n	8003cca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_DMA_Start_IT+0x2a>
 8003886:	2302      	movs	r3, #2
 8003888:	e21f      	b.n	8003cca <HAL_DMA_Start_IT+0x46a>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	f040 820a 	bne.w	8003cb4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a68      	ldr	r2, [pc, #416]	@ (8003a54 <HAL_DMA_Start_IT+0x1f4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d04a      	beq.n	800394e <HAL_DMA_Start_IT+0xee>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a66      	ldr	r2, [pc, #408]	@ (8003a58 <HAL_DMA_Start_IT+0x1f8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d045      	beq.n	800394e <HAL_DMA_Start_IT+0xee>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a65      	ldr	r2, [pc, #404]	@ (8003a5c <HAL_DMA_Start_IT+0x1fc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d040      	beq.n	800394e <HAL_DMA_Start_IT+0xee>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a63      	ldr	r2, [pc, #396]	@ (8003a60 <HAL_DMA_Start_IT+0x200>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d03b      	beq.n	800394e <HAL_DMA_Start_IT+0xee>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a62      	ldr	r2, [pc, #392]	@ (8003a64 <HAL_DMA_Start_IT+0x204>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d036      	beq.n	800394e <HAL_DMA_Start_IT+0xee>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a60      	ldr	r2, [pc, #384]	@ (8003a68 <HAL_DMA_Start_IT+0x208>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d031      	beq.n	800394e <HAL_DMA_Start_IT+0xee>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a5f      	ldr	r2, [pc, #380]	@ (8003a6c <HAL_DMA_Start_IT+0x20c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d02c      	beq.n	800394e <HAL_DMA_Start_IT+0xee>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a5d      	ldr	r2, [pc, #372]	@ (8003a70 <HAL_DMA_Start_IT+0x210>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d027      	beq.n	800394e <HAL_DMA_Start_IT+0xee>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a5c      	ldr	r2, [pc, #368]	@ (8003a74 <HAL_DMA_Start_IT+0x214>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d022      	beq.n	800394e <HAL_DMA_Start_IT+0xee>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a5a      	ldr	r2, [pc, #360]	@ (8003a78 <HAL_DMA_Start_IT+0x218>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01d      	beq.n	800394e <HAL_DMA_Start_IT+0xee>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a59      	ldr	r2, [pc, #356]	@ (8003a7c <HAL_DMA_Start_IT+0x21c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d018      	beq.n	800394e <HAL_DMA_Start_IT+0xee>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a57      	ldr	r2, [pc, #348]	@ (8003a80 <HAL_DMA_Start_IT+0x220>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <HAL_DMA_Start_IT+0xee>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a56      	ldr	r2, [pc, #344]	@ (8003a84 <HAL_DMA_Start_IT+0x224>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00e      	beq.n	800394e <HAL_DMA_Start_IT+0xee>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a54      	ldr	r2, [pc, #336]	@ (8003a88 <HAL_DMA_Start_IT+0x228>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d009      	beq.n	800394e <HAL_DMA_Start_IT+0xee>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a53      	ldr	r2, [pc, #332]	@ (8003a8c <HAL_DMA_Start_IT+0x22c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d004      	beq.n	800394e <HAL_DMA_Start_IT+0xee>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a51      	ldr	r2, [pc, #324]	@ (8003a90 <HAL_DMA_Start_IT+0x230>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d108      	bne.n	8003960 <HAL_DMA_Start_IT+0x100>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	e007      	b.n	8003970 <HAL_DMA_Start_IT+0x110>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f001 f906 	bl	8004b88 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a34      	ldr	r2, [pc, #208]	@ (8003a54 <HAL_DMA_Start_IT+0x1f4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d04a      	beq.n	8003a1c <HAL_DMA_Start_IT+0x1bc>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a33      	ldr	r2, [pc, #204]	@ (8003a58 <HAL_DMA_Start_IT+0x1f8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d045      	beq.n	8003a1c <HAL_DMA_Start_IT+0x1bc>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a31      	ldr	r2, [pc, #196]	@ (8003a5c <HAL_DMA_Start_IT+0x1fc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d040      	beq.n	8003a1c <HAL_DMA_Start_IT+0x1bc>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a30      	ldr	r2, [pc, #192]	@ (8003a60 <HAL_DMA_Start_IT+0x200>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d03b      	beq.n	8003a1c <HAL_DMA_Start_IT+0x1bc>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003a64 <HAL_DMA_Start_IT+0x204>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d036      	beq.n	8003a1c <HAL_DMA_Start_IT+0x1bc>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a2d      	ldr	r2, [pc, #180]	@ (8003a68 <HAL_DMA_Start_IT+0x208>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d031      	beq.n	8003a1c <HAL_DMA_Start_IT+0x1bc>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a2b      	ldr	r2, [pc, #172]	@ (8003a6c <HAL_DMA_Start_IT+0x20c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d02c      	beq.n	8003a1c <HAL_DMA_Start_IT+0x1bc>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a70 <HAL_DMA_Start_IT+0x210>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d027      	beq.n	8003a1c <HAL_DMA_Start_IT+0x1bc>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a28      	ldr	r2, [pc, #160]	@ (8003a74 <HAL_DMA_Start_IT+0x214>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <HAL_DMA_Start_IT+0x1bc>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a27      	ldr	r2, [pc, #156]	@ (8003a78 <HAL_DMA_Start_IT+0x218>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d01d      	beq.n	8003a1c <HAL_DMA_Start_IT+0x1bc>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a25      	ldr	r2, [pc, #148]	@ (8003a7c <HAL_DMA_Start_IT+0x21c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d018      	beq.n	8003a1c <HAL_DMA_Start_IT+0x1bc>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a24      	ldr	r2, [pc, #144]	@ (8003a80 <HAL_DMA_Start_IT+0x220>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_DMA_Start_IT+0x1bc>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a22      	ldr	r2, [pc, #136]	@ (8003a84 <HAL_DMA_Start_IT+0x224>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <HAL_DMA_Start_IT+0x1bc>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a21      	ldr	r2, [pc, #132]	@ (8003a88 <HAL_DMA_Start_IT+0x228>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_DMA_Start_IT+0x1bc>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a8c <HAL_DMA_Start_IT+0x22c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_DMA_Start_IT+0x1bc>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1e      	ldr	r2, [pc, #120]	@ (8003a90 <HAL_DMA_Start_IT+0x230>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <HAL_DMA_Start_IT+0x1c0>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <HAL_DMA_Start_IT+0x1c2>
 8003a20:	2300      	movs	r3, #0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d036      	beq.n	8003a94 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f023 021e 	bic.w	r2, r3, #30
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0216 	orr.w	r2, r2, #22
 8003a38:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d03e      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0208 	orr.w	r2, r2, #8
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e035      	b.n	8003ac0 <HAL_DMA_Start_IT+0x260>
 8003a54:	40020010 	.word	0x40020010
 8003a58:	40020028 	.word	0x40020028
 8003a5c:	40020040 	.word	0x40020040
 8003a60:	40020058 	.word	0x40020058
 8003a64:	40020070 	.word	0x40020070
 8003a68:	40020088 	.word	0x40020088
 8003a6c:	400200a0 	.word	0x400200a0
 8003a70:	400200b8 	.word	0x400200b8
 8003a74:	40020410 	.word	0x40020410
 8003a78:	40020428 	.word	0x40020428
 8003a7c:	40020440 	.word	0x40020440
 8003a80:	40020458 	.word	0x40020458
 8003a84:	40020470 	.word	0x40020470
 8003a88:	40020488 	.word	0x40020488
 8003a8c:	400204a0 	.word	0x400204a0
 8003a90:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 020e 	bic.w	r2, r3, #14
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 020a 	orr.w	r2, r2, #10
 8003aa6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0204 	orr.w	r2, r2, #4
 8003abe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a83      	ldr	r2, [pc, #524]	@ (8003cd4 <HAL_DMA_Start_IT+0x474>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d072      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a82      	ldr	r2, [pc, #520]	@ (8003cd8 <HAL_DMA_Start_IT+0x478>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d06d      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a80      	ldr	r2, [pc, #512]	@ (8003cdc <HAL_DMA_Start_IT+0x47c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d068      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ce0 <HAL_DMA_Start_IT+0x480>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d063      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a7d      	ldr	r2, [pc, #500]	@ (8003ce4 <HAL_DMA_Start_IT+0x484>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d05e      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ce8 <HAL_DMA_Start_IT+0x488>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d059      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a7a      	ldr	r2, [pc, #488]	@ (8003cec <HAL_DMA_Start_IT+0x48c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d054      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a79      	ldr	r2, [pc, #484]	@ (8003cf0 <HAL_DMA_Start_IT+0x490>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d04f      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a77      	ldr	r2, [pc, #476]	@ (8003cf4 <HAL_DMA_Start_IT+0x494>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d04a      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a76      	ldr	r2, [pc, #472]	@ (8003cf8 <HAL_DMA_Start_IT+0x498>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d045      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a74      	ldr	r2, [pc, #464]	@ (8003cfc <HAL_DMA_Start_IT+0x49c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d040      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a73      	ldr	r2, [pc, #460]	@ (8003d00 <HAL_DMA_Start_IT+0x4a0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d03b      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a71      	ldr	r2, [pc, #452]	@ (8003d04 <HAL_DMA_Start_IT+0x4a4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d036      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a70      	ldr	r2, [pc, #448]	@ (8003d08 <HAL_DMA_Start_IT+0x4a8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d031      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a6e      	ldr	r2, [pc, #440]	@ (8003d0c <HAL_DMA_Start_IT+0x4ac>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d02c      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a6d      	ldr	r2, [pc, #436]	@ (8003d10 <HAL_DMA_Start_IT+0x4b0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d027      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a6b      	ldr	r2, [pc, #428]	@ (8003d14 <HAL_DMA_Start_IT+0x4b4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d022      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6a      	ldr	r2, [pc, #424]	@ (8003d18 <HAL_DMA_Start_IT+0x4b8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d01d      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a68      	ldr	r2, [pc, #416]	@ (8003d1c <HAL_DMA_Start_IT+0x4bc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d018      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a67      	ldr	r2, [pc, #412]	@ (8003d20 <HAL_DMA_Start_IT+0x4c0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d013      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a65      	ldr	r2, [pc, #404]	@ (8003d24 <HAL_DMA_Start_IT+0x4c4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00e      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a64      	ldr	r2, [pc, #400]	@ (8003d28 <HAL_DMA_Start_IT+0x4c8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d009      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a62      	ldr	r2, [pc, #392]	@ (8003d2c <HAL_DMA_Start_IT+0x4cc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d004      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x350>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a61      	ldr	r2, [pc, #388]	@ (8003d30 <HAL_DMA_Start_IT+0x4d0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_DMA_Start_IT+0x354>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <HAL_DMA_Start_IT+0x356>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01a      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bd6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a37      	ldr	r2, [pc, #220]	@ (8003cd4 <HAL_DMA_Start_IT+0x474>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d04a      	beq.n	8003c90 <HAL_DMA_Start_IT+0x430>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a36      	ldr	r2, [pc, #216]	@ (8003cd8 <HAL_DMA_Start_IT+0x478>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d045      	beq.n	8003c90 <HAL_DMA_Start_IT+0x430>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a34      	ldr	r2, [pc, #208]	@ (8003cdc <HAL_DMA_Start_IT+0x47c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d040      	beq.n	8003c90 <HAL_DMA_Start_IT+0x430>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a33      	ldr	r2, [pc, #204]	@ (8003ce0 <HAL_DMA_Start_IT+0x480>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d03b      	beq.n	8003c90 <HAL_DMA_Start_IT+0x430>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a31      	ldr	r2, [pc, #196]	@ (8003ce4 <HAL_DMA_Start_IT+0x484>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d036      	beq.n	8003c90 <HAL_DMA_Start_IT+0x430>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a30      	ldr	r2, [pc, #192]	@ (8003ce8 <HAL_DMA_Start_IT+0x488>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d031      	beq.n	8003c90 <HAL_DMA_Start_IT+0x430>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a2e      	ldr	r2, [pc, #184]	@ (8003cec <HAL_DMA_Start_IT+0x48c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d02c      	beq.n	8003c90 <HAL_DMA_Start_IT+0x430>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf0 <HAL_DMA_Start_IT+0x490>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d027      	beq.n	8003c90 <HAL_DMA_Start_IT+0x430>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf4 <HAL_DMA_Start_IT+0x494>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d022      	beq.n	8003c90 <HAL_DMA_Start_IT+0x430>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf8 <HAL_DMA_Start_IT+0x498>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d01d      	beq.n	8003c90 <HAL_DMA_Start_IT+0x430>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a28      	ldr	r2, [pc, #160]	@ (8003cfc <HAL_DMA_Start_IT+0x49c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d018      	beq.n	8003c90 <HAL_DMA_Start_IT+0x430>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a27      	ldr	r2, [pc, #156]	@ (8003d00 <HAL_DMA_Start_IT+0x4a0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d013      	beq.n	8003c90 <HAL_DMA_Start_IT+0x430>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a25      	ldr	r2, [pc, #148]	@ (8003d04 <HAL_DMA_Start_IT+0x4a4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00e      	beq.n	8003c90 <HAL_DMA_Start_IT+0x430>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a24      	ldr	r2, [pc, #144]	@ (8003d08 <HAL_DMA_Start_IT+0x4a8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d009      	beq.n	8003c90 <HAL_DMA_Start_IT+0x430>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a22      	ldr	r2, [pc, #136]	@ (8003d0c <HAL_DMA_Start_IT+0x4ac>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <HAL_DMA_Start_IT+0x430>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a21      	ldr	r2, [pc, #132]	@ (8003d10 <HAL_DMA_Start_IT+0x4b0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d108      	bne.n	8003ca2 <HAL_DMA_Start_IT+0x442>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	e012      	b.n	8003cc8 <HAL_DMA_Start_IT+0x468>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0201 	orr.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e009      	b.n	8003cc8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40020010 	.word	0x40020010
 8003cd8:	40020028 	.word	0x40020028
 8003cdc:	40020040 	.word	0x40020040
 8003ce0:	40020058 	.word	0x40020058
 8003ce4:	40020070 	.word	0x40020070
 8003ce8:	40020088 	.word	0x40020088
 8003cec:	400200a0 	.word	0x400200a0
 8003cf0:	400200b8 	.word	0x400200b8
 8003cf4:	40020410 	.word	0x40020410
 8003cf8:	40020428 	.word	0x40020428
 8003cfc:	40020440 	.word	0x40020440
 8003d00:	40020458 	.word	0x40020458
 8003d04:	40020470 	.word	0x40020470
 8003d08:	40020488 	.word	0x40020488
 8003d0c:	400204a0 	.word	0x400204a0
 8003d10:	400204b8 	.word	0x400204b8
 8003d14:	58025408 	.word	0x58025408
 8003d18:	5802541c 	.word	0x5802541c
 8003d1c:	58025430 	.word	0x58025430
 8003d20:	58025444 	.word	0x58025444
 8003d24:	58025458 	.word	0x58025458
 8003d28:	5802546c 	.word	0x5802546c
 8003d2c:	58025480 	.word	0x58025480
 8003d30:	58025494 	.word	0x58025494

08003d34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	@ 0x28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d40:	4b67      	ldr	r3, [pc, #412]	@ (8003ee0 <HAL_DMA_IRQHandler+0x1ac>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a67      	ldr	r2, [pc, #412]	@ (8003ee4 <HAL_DMA_IRQHandler+0x1b0>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	0a9b      	lsrs	r3, r3, #10
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d52:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d58:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a5f      	ldr	r2, [pc, #380]	@ (8003ee8 <HAL_DMA_IRQHandler+0x1b4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d04a      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xd2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a5d      	ldr	r2, [pc, #372]	@ (8003eec <HAL_DMA_IRQHandler+0x1b8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d045      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xd2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a5c      	ldr	r2, [pc, #368]	@ (8003ef0 <HAL_DMA_IRQHandler+0x1bc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d040      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xd2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a5a      	ldr	r2, [pc, #360]	@ (8003ef4 <HAL_DMA_IRQHandler+0x1c0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d03b      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xd2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a59      	ldr	r2, [pc, #356]	@ (8003ef8 <HAL_DMA_IRQHandler+0x1c4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d036      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xd2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a57      	ldr	r2, [pc, #348]	@ (8003efc <HAL_DMA_IRQHandler+0x1c8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d031      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xd2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a56      	ldr	r2, [pc, #344]	@ (8003f00 <HAL_DMA_IRQHandler+0x1cc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d02c      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xd2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a54      	ldr	r2, [pc, #336]	@ (8003f04 <HAL_DMA_IRQHandler+0x1d0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d027      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xd2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a53      	ldr	r2, [pc, #332]	@ (8003f08 <HAL_DMA_IRQHandler+0x1d4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d022      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xd2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a51      	ldr	r2, [pc, #324]	@ (8003f0c <HAL_DMA_IRQHandler+0x1d8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01d      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xd2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a50      	ldr	r2, [pc, #320]	@ (8003f10 <HAL_DMA_IRQHandler+0x1dc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d018      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xd2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a4e      	ldr	r2, [pc, #312]	@ (8003f14 <HAL_DMA_IRQHandler+0x1e0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xd2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a4d      	ldr	r2, [pc, #308]	@ (8003f18 <HAL_DMA_IRQHandler+0x1e4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00e      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xd2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a4b      	ldr	r2, [pc, #300]	@ (8003f1c <HAL_DMA_IRQHandler+0x1e8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d009      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xd2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a4a      	ldr	r2, [pc, #296]	@ (8003f20 <HAL_DMA_IRQHandler+0x1ec>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xd2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a48      	ldr	r2, [pc, #288]	@ (8003f24 <HAL_DMA_IRQHandler+0x1f0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d101      	bne.n	8003e0a <HAL_DMA_IRQHandler+0xd6>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_DMA_IRQHandler+0xd8>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 842b 	beq.w	8004668 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e16:	f003 031f 	and.w	r3, r3, #31
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	4013      	ands	r3, r2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80a2 	beq.w	8003f6c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ee8 <HAL_DMA_IRQHandler+0x1b4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d04a      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x194>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a2d      	ldr	r2, [pc, #180]	@ (8003eec <HAL_DMA_IRQHandler+0x1b8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d045      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x194>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a2b      	ldr	r2, [pc, #172]	@ (8003ef0 <HAL_DMA_IRQHandler+0x1bc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d040      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x194>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ef4 <HAL_DMA_IRQHandler+0x1c0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d03b      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x194>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a28      	ldr	r2, [pc, #160]	@ (8003ef8 <HAL_DMA_IRQHandler+0x1c4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d036      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x194>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a27      	ldr	r2, [pc, #156]	@ (8003efc <HAL_DMA_IRQHandler+0x1c8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d031      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x194>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a25      	ldr	r2, [pc, #148]	@ (8003f00 <HAL_DMA_IRQHandler+0x1cc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d02c      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x194>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a24      	ldr	r2, [pc, #144]	@ (8003f04 <HAL_DMA_IRQHandler+0x1d0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d027      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x194>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a22      	ldr	r2, [pc, #136]	@ (8003f08 <HAL_DMA_IRQHandler+0x1d4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d022      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x194>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a21      	ldr	r2, [pc, #132]	@ (8003f0c <HAL_DMA_IRQHandler+0x1d8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d01d      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x194>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1f      	ldr	r2, [pc, #124]	@ (8003f10 <HAL_DMA_IRQHandler+0x1dc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d018      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x194>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f14 <HAL_DMA_IRQHandler+0x1e0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d013      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x194>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f18 <HAL_DMA_IRQHandler+0x1e4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x194>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1b      	ldr	r2, [pc, #108]	@ (8003f1c <HAL_DMA_IRQHandler+0x1e8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d009      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x194>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a19      	ldr	r2, [pc, #100]	@ (8003f20 <HAL_DMA_IRQHandler+0x1ec>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x194>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a18      	ldr	r2, [pc, #96]	@ (8003f24 <HAL_DMA_IRQHandler+0x1f0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d12f      	bne.n	8003f28 <HAL_DMA_IRQHandler+0x1f4>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bf14      	ite	ne
 8003ed6:	2301      	movne	r3, #1
 8003ed8:	2300      	moveq	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	e02e      	b.n	8003f3c <HAL_DMA_IRQHandler+0x208>
 8003ede:	bf00      	nop
 8003ee0:	24000004 	.word	0x24000004
 8003ee4:	1b4e81b5 	.word	0x1b4e81b5
 8003ee8:	40020010 	.word	0x40020010
 8003eec:	40020028 	.word	0x40020028
 8003ef0:	40020040 	.word	0x40020040
 8003ef4:	40020058 	.word	0x40020058
 8003ef8:	40020070 	.word	0x40020070
 8003efc:	40020088 	.word	0x40020088
 8003f00:	400200a0 	.word	0x400200a0
 8003f04:	400200b8 	.word	0x400200b8
 8003f08:	40020410 	.word	0x40020410
 8003f0c:	40020428 	.word	0x40020428
 8003f10:	40020440 	.word	0x40020440
 8003f14:	40020458 	.word	0x40020458
 8003f18:	40020470 	.word	0x40020470
 8003f1c:	40020488 	.word	0x40020488
 8003f20:	400204a0 	.word	0x400204a0
 8003f24:	400204b8 	.word	0x400204b8
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d015      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0204 	bic.w	r2, r2, #4
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	2208      	movs	r2, #8
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f64:	f043 0201 	orr.w	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d06e      	beq.n	8004060 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a69      	ldr	r2, [pc, #420]	@ (800412c <HAL_DMA_IRQHandler+0x3f8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d04a      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2ee>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a67      	ldr	r2, [pc, #412]	@ (8004130 <HAL_DMA_IRQHandler+0x3fc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d045      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2ee>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a66      	ldr	r2, [pc, #408]	@ (8004134 <HAL_DMA_IRQHandler+0x400>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d040      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2ee>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a64      	ldr	r2, [pc, #400]	@ (8004138 <HAL_DMA_IRQHandler+0x404>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d03b      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2ee>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a63      	ldr	r2, [pc, #396]	@ (800413c <HAL_DMA_IRQHandler+0x408>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d036      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2ee>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a61      	ldr	r2, [pc, #388]	@ (8004140 <HAL_DMA_IRQHandler+0x40c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d031      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2ee>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a60      	ldr	r2, [pc, #384]	@ (8004144 <HAL_DMA_IRQHandler+0x410>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d02c      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2ee>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a5e      	ldr	r2, [pc, #376]	@ (8004148 <HAL_DMA_IRQHandler+0x414>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d027      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2ee>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a5d      	ldr	r2, [pc, #372]	@ (800414c <HAL_DMA_IRQHandler+0x418>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d022      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2ee>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a5b      	ldr	r2, [pc, #364]	@ (8004150 <HAL_DMA_IRQHandler+0x41c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01d      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2ee>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a5a      	ldr	r2, [pc, #360]	@ (8004154 <HAL_DMA_IRQHandler+0x420>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d018      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2ee>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a58      	ldr	r2, [pc, #352]	@ (8004158 <HAL_DMA_IRQHandler+0x424>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2ee>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a57      	ldr	r2, [pc, #348]	@ (800415c <HAL_DMA_IRQHandler+0x428>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00e      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2ee>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a55      	ldr	r2, [pc, #340]	@ (8004160 <HAL_DMA_IRQHandler+0x42c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2ee>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a54      	ldr	r2, [pc, #336]	@ (8004164 <HAL_DMA_IRQHandler+0x430>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_DMA_IRQHandler+0x2ee>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a52      	ldr	r2, [pc, #328]	@ (8004168 <HAL_DMA_IRQHandler+0x434>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10a      	bne.n	8004038 <HAL_DMA_IRQHandler+0x304>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf14      	ite	ne
 8004030:	2301      	movne	r3, #1
 8004032:	2300      	moveq	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	e003      	b.n	8004040 <HAL_DMA_IRQHandler+0x30c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2300      	movs	r3, #0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00d      	beq.n	8004060 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2201      	movs	r2, #1
 800404e:	409a      	lsls	r2, r3
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004058:	f043 0202 	orr.w	r2, r3, #2
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	2204      	movs	r2, #4
 800406a:	409a      	lsls	r2, r3
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 808f 	beq.w	8004194 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a2c      	ldr	r2, [pc, #176]	@ (800412c <HAL_DMA_IRQHandler+0x3f8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d04a      	beq.n	8004116 <HAL_DMA_IRQHandler+0x3e2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a2a      	ldr	r2, [pc, #168]	@ (8004130 <HAL_DMA_IRQHandler+0x3fc>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d045      	beq.n	8004116 <HAL_DMA_IRQHandler+0x3e2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a29      	ldr	r2, [pc, #164]	@ (8004134 <HAL_DMA_IRQHandler+0x400>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d040      	beq.n	8004116 <HAL_DMA_IRQHandler+0x3e2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a27      	ldr	r2, [pc, #156]	@ (8004138 <HAL_DMA_IRQHandler+0x404>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d03b      	beq.n	8004116 <HAL_DMA_IRQHandler+0x3e2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a26      	ldr	r2, [pc, #152]	@ (800413c <HAL_DMA_IRQHandler+0x408>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d036      	beq.n	8004116 <HAL_DMA_IRQHandler+0x3e2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a24      	ldr	r2, [pc, #144]	@ (8004140 <HAL_DMA_IRQHandler+0x40c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d031      	beq.n	8004116 <HAL_DMA_IRQHandler+0x3e2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a23      	ldr	r2, [pc, #140]	@ (8004144 <HAL_DMA_IRQHandler+0x410>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d02c      	beq.n	8004116 <HAL_DMA_IRQHandler+0x3e2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a21      	ldr	r2, [pc, #132]	@ (8004148 <HAL_DMA_IRQHandler+0x414>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d027      	beq.n	8004116 <HAL_DMA_IRQHandler+0x3e2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a20      	ldr	r2, [pc, #128]	@ (800414c <HAL_DMA_IRQHandler+0x418>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d022      	beq.n	8004116 <HAL_DMA_IRQHandler+0x3e2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004150 <HAL_DMA_IRQHandler+0x41c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d01d      	beq.n	8004116 <HAL_DMA_IRQHandler+0x3e2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a1d      	ldr	r2, [pc, #116]	@ (8004154 <HAL_DMA_IRQHandler+0x420>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d018      	beq.n	8004116 <HAL_DMA_IRQHandler+0x3e2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004158 <HAL_DMA_IRQHandler+0x424>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <HAL_DMA_IRQHandler+0x3e2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1a      	ldr	r2, [pc, #104]	@ (800415c <HAL_DMA_IRQHandler+0x428>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00e      	beq.n	8004116 <HAL_DMA_IRQHandler+0x3e2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a18      	ldr	r2, [pc, #96]	@ (8004160 <HAL_DMA_IRQHandler+0x42c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d009      	beq.n	8004116 <HAL_DMA_IRQHandler+0x3e2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a17      	ldr	r2, [pc, #92]	@ (8004164 <HAL_DMA_IRQHandler+0x430>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d004      	beq.n	8004116 <HAL_DMA_IRQHandler+0x3e2>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a15      	ldr	r2, [pc, #84]	@ (8004168 <HAL_DMA_IRQHandler+0x434>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d12a      	bne.n	800416c <HAL_DMA_IRQHandler+0x438>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	e023      	b.n	8004174 <HAL_DMA_IRQHandler+0x440>
 800412c:	40020010 	.word	0x40020010
 8004130:	40020028 	.word	0x40020028
 8004134:	40020040 	.word	0x40020040
 8004138:	40020058 	.word	0x40020058
 800413c:	40020070 	.word	0x40020070
 8004140:	40020088 	.word	0x40020088
 8004144:	400200a0 	.word	0x400200a0
 8004148:	400200b8 	.word	0x400200b8
 800414c:	40020410 	.word	0x40020410
 8004150:	40020428 	.word	0x40020428
 8004154:	40020440 	.word	0x40020440
 8004158:	40020458 	.word	0x40020458
 800415c:	40020470 	.word	0x40020470
 8004160:	40020488 	.word	0x40020488
 8004164:	400204a0 	.word	0x400204a0
 8004168:	400204b8 	.word	0x400204b8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2300      	movs	r3, #0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00d      	beq.n	8004194 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2204      	movs	r2, #4
 8004182:	409a      	lsls	r2, r3
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418c:	f043 0204 	orr.w	r2, r3, #4
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	2210      	movs	r2, #16
 800419e:	409a      	lsls	r2, r3
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80a6 	beq.w	80042f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a85      	ldr	r2, [pc, #532]	@ (80043c4 <HAL_DMA_IRQHandler+0x690>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d04a      	beq.n	800424a <HAL_DMA_IRQHandler+0x516>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a83      	ldr	r2, [pc, #524]	@ (80043c8 <HAL_DMA_IRQHandler+0x694>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d045      	beq.n	800424a <HAL_DMA_IRQHandler+0x516>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a82      	ldr	r2, [pc, #520]	@ (80043cc <HAL_DMA_IRQHandler+0x698>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d040      	beq.n	800424a <HAL_DMA_IRQHandler+0x516>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a80      	ldr	r2, [pc, #512]	@ (80043d0 <HAL_DMA_IRQHandler+0x69c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d03b      	beq.n	800424a <HAL_DMA_IRQHandler+0x516>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a7f      	ldr	r2, [pc, #508]	@ (80043d4 <HAL_DMA_IRQHandler+0x6a0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d036      	beq.n	800424a <HAL_DMA_IRQHandler+0x516>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a7d      	ldr	r2, [pc, #500]	@ (80043d8 <HAL_DMA_IRQHandler+0x6a4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d031      	beq.n	800424a <HAL_DMA_IRQHandler+0x516>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a7c      	ldr	r2, [pc, #496]	@ (80043dc <HAL_DMA_IRQHandler+0x6a8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d02c      	beq.n	800424a <HAL_DMA_IRQHandler+0x516>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a7a      	ldr	r2, [pc, #488]	@ (80043e0 <HAL_DMA_IRQHandler+0x6ac>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d027      	beq.n	800424a <HAL_DMA_IRQHandler+0x516>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a79      	ldr	r2, [pc, #484]	@ (80043e4 <HAL_DMA_IRQHandler+0x6b0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d022      	beq.n	800424a <HAL_DMA_IRQHandler+0x516>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a77      	ldr	r2, [pc, #476]	@ (80043e8 <HAL_DMA_IRQHandler+0x6b4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01d      	beq.n	800424a <HAL_DMA_IRQHandler+0x516>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a76      	ldr	r2, [pc, #472]	@ (80043ec <HAL_DMA_IRQHandler+0x6b8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d018      	beq.n	800424a <HAL_DMA_IRQHandler+0x516>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a74      	ldr	r2, [pc, #464]	@ (80043f0 <HAL_DMA_IRQHandler+0x6bc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_DMA_IRQHandler+0x516>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a73      	ldr	r2, [pc, #460]	@ (80043f4 <HAL_DMA_IRQHandler+0x6c0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_DMA_IRQHandler+0x516>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a71      	ldr	r2, [pc, #452]	@ (80043f8 <HAL_DMA_IRQHandler+0x6c4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_DMA_IRQHandler+0x516>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a70      	ldr	r2, [pc, #448]	@ (80043fc <HAL_DMA_IRQHandler+0x6c8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_DMA_IRQHandler+0x516>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a6e      	ldr	r2, [pc, #440]	@ (8004400 <HAL_DMA_IRQHandler+0x6cc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10a      	bne.n	8004260 <HAL_DMA_IRQHandler+0x52c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	bf14      	ite	ne
 8004258:	2301      	movne	r3, #1
 800425a:	2300      	moveq	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e009      	b.n	8004274 <HAL_DMA_IRQHandler+0x540>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	bf14      	ite	ne
 800426e:	2301      	movne	r3, #1
 8004270:	2300      	moveq	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d03e      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427c:	f003 031f 	and.w	r3, r3, #31
 8004280:	2210      	movs	r2, #16
 8004282:	409a      	lsls	r2, r3
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d018      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d108      	bne.n	80042b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d024      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4798      	blx	r3
 80042b4:	e01f      	b.n	80042f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01b      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	4798      	blx	r3
 80042c6:	e016      	b.n	80042f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d107      	bne.n	80042e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0208 	bic.w	r2, r2, #8
 80042e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	2220      	movs	r2, #32
 8004300:	409a      	lsls	r2, r3
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	4013      	ands	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 8110 	beq.w	800452c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a2c      	ldr	r2, [pc, #176]	@ (80043c4 <HAL_DMA_IRQHandler+0x690>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d04a      	beq.n	80043ac <HAL_DMA_IRQHandler+0x678>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a2b      	ldr	r2, [pc, #172]	@ (80043c8 <HAL_DMA_IRQHandler+0x694>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d045      	beq.n	80043ac <HAL_DMA_IRQHandler+0x678>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a29      	ldr	r2, [pc, #164]	@ (80043cc <HAL_DMA_IRQHandler+0x698>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d040      	beq.n	80043ac <HAL_DMA_IRQHandler+0x678>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a28      	ldr	r2, [pc, #160]	@ (80043d0 <HAL_DMA_IRQHandler+0x69c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d03b      	beq.n	80043ac <HAL_DMA_IRQHandler+0x678>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a26      	ldr	r2, [pc, #152]	@ (80043d4 <HAL_DMA_IRQHandler+0x6a0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d036      	beq.n	80043ac <HAL_DMA_IRQHandler+0x678>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a25      	ldr	r2, [pc, #148]	@ (80043d8 <HAL_DMA_IRQHandler+0x6a4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d031      	beq.n	80043ac <HAL_DMA_IRQHandler+0x678>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a23      	ldr	r2, [pc, #140]	@ (80043dc <HAL_DMA_IRQHandler+0x6a8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d02c      	beq.n	80043ac <HAL_DMA_IRQHandler+0x678>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a22      	ldr	r2, [pc, #136]	@ (80043e0 <HAL_DMA_IRQHandler+0x6ac>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d027      	beq.n	80043ac <HAL_DMA_IRQHandler+0x678>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a20      	ldr	r2, [pc, #128]	@ (80043e4 <HAL_DMA_IRQHandler+0x6b0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d022      	beq.n	80043ac <HAL_DMA_IRQHandler+0x678>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1f      	ldr	r2, [pc, #124]	@ (80043e8 <HAL_DMA_IRQHandler+0x6b4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d01d      	beq.n	80043ac <HAL_DMA_IRQHandler+0x678>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1d      	ldr	r2, [pc, #116]	@ (80043ec <HAL_DMA_IRQHandler+0x6b8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d018      	beq.n	80043ac <HAL_DMA_IRQHandler+0x678>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1c      	ldr	r2, [pc, #112]	@ (80043f0 <HAL_DMA_IRQHandler+0x6bc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d013      	beq.n	80043ac <HAL_DMA_IRQHandler+0x678>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1a      	ldr	r2, [pc, #104]	@ (80043f4 <HAL_DMA_IRQHandler+0x6c0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00e      	beq.n	80043ac <HAL_DMA_IRQHandler+0x678>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a19      	ldr	r2, [pc, #100]	@ (80043f8 <HAL_DMA_IRQHandler+0x6c4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d009      	beq.n	80043ac <HAL_DMA_IRQHandler+0x678>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a17      	ldr	r2, [pc, #92]	@ (80043fc <HAL_DMA_IRQHandler+0x6c8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <HAL_DMA_IRQHandler+0x678>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a16      	ldr	r2, [pc, #88]	@ (8004400 <HAL_DMA_IRQHandler+0x6cc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d12b      	bne.n	8004404 <HAL_DMA_IRQHandler+0x6d0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	bf14      	ite	ne
 80043ba:	2301      	movne	r3, #1
 80043bc:	2300      	moveq	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	e02a      	b.n	8004418 <HAL_DMA_IRQHandler+0x6e4>
 80043c2:	bf00      	nop
 80043c4:	40020010 	.word	0x40020010
 80043c8:	40020028 	.word	0x40020028
 80043cc:	40020040 	.word	0x40020040
 80043d0:	40020058 	.word	0x40020058
 80043d4:	40020070 	.word	0x40020070
 80043d8:	40020088 	.word	0x40020088
 80043dc:	400200a0 	.word	0x400200a0
 80043e0:	400200b8 	.word	0x400200b8
 80043e4:	40020410 	.word	0x40020410
 80043e8:	40020428 	.word	0x40020428
 80043ec:	40020440 	.word	0x40020440
 80043f0:	40020458 	.word	0x40020458
 80043f4:	40020470 	.word	0x40020470
 80043f8:	40020488 	.word	0x40020488
 80043fc:	400204a0 	.word	0x400204a0
 8004400:	400204b8 	.word	0x400204b8
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	bf14      	ite	ne
 8004412:	2301      	movne	r3, #1
 8004414:	2300      	moveq	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8087 	beq.w	800452c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004422:	f003 031f 	and.w	r3, r3, #31
 8004426:	2220      	movs	r2, #32
 8004428:	409a      	lsls	r2, r3
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b04      	cmp	r3, #4
 8004438:	d139      	bne.n	80044ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0216 	bic.w	r2, r2, #22
 8004448:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695a      	ldr	r2, [r3, #20]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004458:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d103      	bne.n	800446a <HAL_DMA_IRQHandler+0x736>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004466:	2b00      	cmp	r3, #0
 8004468:	d007      	beq.n	800447a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0208 	bic.w	r2, r2, #8
 8004478:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	223f      	movs	r2, #63	@ 0x3f
 8004484:	409a      	lsls	r2, r3
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 834a 	beq.w	8004b38 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
          }
          return;
 80044ac:	e344      	b.n	8004b38 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d018      	beq.n	80044ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d108      	bne.n	80044dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d02c      	beq.n	800452c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	4798      	blx	r3
 80044da:	e027      	b.n	800452c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d023      	beq.n	800452c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	4798      	blx	r3
 80044ec:	e01e      	b.n	800452c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10f      	bne.n	800451c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0210 	bic.w	r2, r2, #16
 800450a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8306 	beq.w	8004b42 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 8088 	beq.w	8004654 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2204      	movs	r2, #4
 8004548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a7a      	ldr	r2, [pc, #488]	@ (800473c <HAL_DMA_IRQHandler+0xa08>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d04a      	beq.n	80045ec <HAL_DMA_IRQHandler+0x8b8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a79      	ldr	r2, [pc, #484]	@ (8004740 <HAL_DMA_IRQHandler+0xa0c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d045      	beq.n	80045ec <HAL_DMA_IRQHandler+0x8b8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a77      	ldr	r2, [pc, #476]	@ (8004744 <HAL_DMA_IRQHandler+0xa10>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d040      	beq.n	80045ec <HAL_DMA_IRQHandler+0x8b8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a76      	ldr	r2, [pc, #472]	@ (8004748 <HAL_DMA_IRQHandler+0xa14>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d03b      	beq.n	80045ec <HAL_DMA_IRQHandler+0x8b8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a74      	ldr	r2, [pc, #464]	@ (800474c <HAL_DMA_IRQHandler+0xa18>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d036      	beq.n	80045ec <HAL_DMA_IRQHandler+0x8b8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a73      	ldr	r2, [pc, #460]	@ (8004750 <HAL_DMA_IRQHandler+0xa1c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d031      	beq.n	80045ec <HAL_DMA_IRQHandler+0x8b8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a71      	ldr	r2, [pc, #452]	@ (8004754 <HAL_DMA_IRQHandler+0xa20>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d02c      	beq.n	80045ec <HAL_DMA_IRQHandler+0x8b8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a70      	ldr	r2, [pc, #448]	@ (8004758 <HAL_DMA_IRQHandler+0xa24>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d027      	beq.n	80045ec <HAL_DMA_IRQHandler+0x8b8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a6e      	ldr	r2, [pc, #440]	@ (800475c <HAL_DMA_IRQHandler+0xa28>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d022      	beq.n	80045ec <HAL_DMA_IRQHandler+0x8b8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a6d      	ldr	r2, [pc, #436]	@ (8004760 <HAL_DMA_IRQHandler+0xa2c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d01d      	beq.n	80045ec <HAL_DMA_IRQHandler+0x8b8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004764 <HAL_DMA_IRQHandler+0xa30>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d018      	beq.n	80045ec <HAL_DMA_IRQHandler+0x8b8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a6a      	ldr	r2, [pc, #424]	@ (8004768 <HAL_DMA_IRQHandler+0xa34>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d013      	beq.n	80045ec <HAL_DMA_IRQHandler+0x8b8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a68      	ldr	r2, [pc, #416]	@ (800476c <HAL_DMA_IRQHandler+0xa38>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00e      	beq.n	80045ec <HAL_DMA_IRQHandler+0x8b8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a67      	ldr	r2, [pc, #412]	@ (8004770 <HAL_DMA_IRQHandler+0xa3c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d009      	beq.n	80045ec <HAL_DMA_IRQHandler+0x8b8>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a65      	ldr	r2, [pc, #404]	@ (8004774 <HAL_DMA_IRQHandler+0xa40>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_DMA_IRQHandler+0x8b8>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a64      	ldr	r2, [pc, #400]	@ (8004778 <HAL_DMA_IRQHandler+0xa44>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d108      	bne.n	80045fe <HAL_DMA_IRQHandler+0x8ca>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0201 	bic.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	e007      	b.n	800460e <HAL_DMA_IRQHandler+0x8da>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0201 	bic.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3301      	adds	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004616:	429a      	cmp	r2, r3
 8004618:	d307      	bcc.n	800462a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f2      	bne.n	800460e <HAL_DMA_IRQHandler+0x8da>
 8004628:	e000      	b.n	800462c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800462a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d004      	beq.n	8004644 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2203      	movs	r2, #3
 800463e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004642:	e003      	b.n	800464c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8272 	beq.w	8004b42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	4798      	blx	r3
 8004666:	e26c      	b.n	8004b42 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a43      	ldr	r2, [pc, #268]	@ (800477c <HAL_DMA_IRQHandler+0xa48>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d022      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x984>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a42      	ldr	r2, [pc, #264]	@ (8004780 <HAL_DMA_IRQHandler+0xa4c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d01d      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x984>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a40      	ldr	r2, [pc, #256]	@ (8004784 <HAL_DMA_IRQHandler+0xa50>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d018      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x984>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a3f      	ldr	r2, [pc, #252]	@ (8004788 <HAL_DMA_IRQHandler+0xa54>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d013      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x984>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a3d      	ldr	r2, [pc, #244]	@ (800478c <HAL_DMA_IRQHandler+0xa58>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00e      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x984>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a3c      	ldr	r2, [pc, #240]	@ (8004790 <HAL_DMA_IRQHandler+0xa5c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d009      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x984>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a3a      	ldr	r2, [pc, #232]	@ (8004794 <HAL_DMA_IRQHandler+0xa60>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x984>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a39      	ldr	r2, [pc, #228]	@ (8004798 <HAL_DMA_IRQHandler+0xa64>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d101      	bne.n	80046bc <HAL_DMA_IRQHandler+0x988>
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <HAL_DMA_IRQHandler+0x98a>
 80046bc:	2300      	movs	r3, #0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 823f 	beq.w	8004b42 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	2204      	movs	r2, #4
 80046d6:	409a      	lsls	r2, r3
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	4013      	ands	r3, r2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80cd 	beq.w	800487c <HAL_DMA_IRQHandler+0xb48>
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80c7 	beq.w	800487c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f2:	f003 031f 	and.w	r3, r3, #31
 80046f6:	2204      	movs	r2, #4
 80046f8:	409a      	lsls	r2, r3
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d049      	beq.n	800479c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 8210 	beq.w	8004b3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004724:	e20a      	b.n	8004b3c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 8206 	beq.w	8004b3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004738:	e200      	b.n	8004b3c <HAL_DMA_IRQHandler+0xe08>
 800473a:	bf00      	nop
 800473c:	40020010 	.word	0x40020010
 8004740:	40020028 	.word	0x40020028
 8004744:	40020040 	.word	0x40020040
 8004748:	40020058 	.word	0x40020058
 800474c:	40020070 	.word	0x40020070
 8004750:	40020088 	.word	0x40020088
 8004754:	400200a0 	.word	0x400200a0
 8004758:	400200b8 	.word	0x400200b8
 800475c:	40020410 	.word	0x40020410
 8004760:	40020428 	.word	0x40020428
 8004764:	40020440 	.word	0x40020440
 8004768:	40020458 	.word	0x40020458
 800476c:	40020470 	.word	0x40020470
 8004770:	40020488 	.word	0x40020488
 8004774:	400204a0 	.word	0x400204a0
 8004778:	400204b8 	.word	0x400204b8
 800477c:	58025408 	.word	0x58025408
 8004780:	5802541c 	.word	0x5802541c
 8004784:	58025430 	.word	0x58025430
 8004788:	58025444 	.word	0x58025444
 800478c:	58025458 	.word	0x58025458
 8004790:	5802546c 	.word	0x5802546c
 8004794:	58025480 	.word	0x58025480
 8004798:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d160      	bne.n	8004868 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a7f      	ldr	r2, [pc, #508]	@ (80049a8 <HAL_DMA_IRQHandler+0xc74>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d04a      	beq.n	8004846 <HAL_DMA_IRQHandler+0xb12>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a7d      	ldr	r2, [pc, #500]	@ (80049ac <HAL_DMA_IRQHandler+0xc78>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d045      	beq.n	8004846 <HAL_DMA_IRQHandler+0xb12>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a7c      	ldr	r2, [pc, #496]	@ (80049b0 <HAL_DMA_IRQHandler+0xc7c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d040      	beq.n	8004846 <HAL_DMA_IRQHandler+0xb12>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a7a      	ldr	r2, [pc, #488]	@ (80049b4 <HAL_DMA_IRQHandler+0xc80>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d03b      	beq.n	8004846 <HAL_DMA_IRQHandler+0xb12>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a79      	ldr	r2, [pc, #484]	@ (80049b8 <HAL_DMA_IRQHandler+0xc84>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d036      	beq.n	8004846 <HAL_DMA_IRQHandler+0xb12>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a77      	ldr	r2, [pc, #476]	@ (80049bc <HAL_DMA_IRQHandler+0xc88>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d031      	beq.n	8004846 <HAL_DMA_IRQHandler+0xb12>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a76      	ldr	r2, [pc, #472]	@ (80049c0 <HAL_DMA_IRQHandler+0xc8c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d02c      	beq.n	8004846 <HAL_DMA_IRQHandler+0xb12>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a74      	ldr	r2, [pc, #464]	@ (80049c4 <HAL_DMA_IRQHandler+0xc90>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d027      	beq.n	8004846 <HAL_DMA_IRQHandler+0xb12>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a73      	ldr	r2, [pc, #460]	@ (80049c8 <HAL_DMA_IRQHandler+0xc94>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d022      	beq.n	8004846 <HAL_DMA_IRQHandler+0xb12>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a71      	ldr	r2, [pc, #452]	@ (80049cc <HAL_DMA_IRQHandler+0xc98>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d01d      	beq.n	8004846 <HAL_DMA_IRQHandler+0xb12>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a70      	ldr	r2, [pc, #448]	@ (80049d0 <HAL_DMA_IRQHandler+0xc9c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d018      	beq.n	8004846 <HAL_DMA_IRQHandler+0xb12>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a6e      	ldr	r2, [pc, #440]	@ (80049d4 <HAL_DMA_IRQHandler+0xca0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <HAL_DMA_IRQHandler+0xb12>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a6d      	ldr	r2, [pc, #436]	@ (80049d8 <HAL_DMA_IRQHandler+0xca4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_DMA_IRQHandler+0xb12>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a6b      	ldr	r2, [pc, #428]	@ (80049dc <HAL_DMA_IRQHandler+0xca8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_DMA_IRQHandler+0xb12>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a6a      	ldr	r2, [pc, #424]	@ (80049e0 <HAL_DMA_IRQHandler+0xcac>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d004      	beq.n	8004846 <HAL_DMA_IRQHandler+0xb12>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a68      	ldr	r2, [pc, #416]	@ (80049e4 <HAL_DMA_IRQHandler+0xcb0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d108      	bne.n	8004858 <HAL_DMA_IRQHandler+0xb24>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0208 	bic.w	r2, r2, #8
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e007      	b.n	8004868 <HAL_DMA_IRQHandler+0xb34>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0204 	bic.w	r2, r2, #4
 8004866:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8165 	beq.w	8004b3c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800487a:	e15f      	b.n	8004b3c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	2202      	movs	r2, #2
 8004886:	409a      	lsls	r2, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 80c5 	beq.w	8004a1c <HAL_DMA_IRQHandler+0xce8>
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80bf 	beq.w	8004a1c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	2202      	movs	r2, #2
 80048a8:	409a      	lsls	r2, r3
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d018      	beq.n	80048ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 813a 	beq.w	8004b40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048d4:	e134      	b.n	8004b40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 8130 	beq.w	8004b40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048e8:	e12a      	b.n	8004b40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f040 8089 	bne.w	8004a08 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a2b      	ldr	r2, [pc, #172]	@ (80049a8 <HAL_DMA_IRQHandler+0xc74>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d04a      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc62>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a29      	ldr	r2, [pc, #164]	@ (80049ac <HAL_DMA_IRQHandler+0xc78>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d045      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc62>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a28      	ldr	r2, [pc, #160]	@ (80049b0 <HAL_DMA_IRQHandler+0xc7c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d040      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc62>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a26      	ldr	r2, [pc, #152]	@ (80049b4 <HAL_DMA_IRQHandler+0xc80>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d03b      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc62>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a25      	ldr	r2, [pc, #148]	@ (80049b8 <HAL_DMA_IRQHandler+0xc84>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d036      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc62>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a23      	ldr	r2, [pc, #140]	@ (80049bc <HAL_DMA_IRQHandler+0xc88>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d031      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc62>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a22      	ldr	r2, [pc, #136]	@ (80049c0 <HAL_DMA_IRQHandler+0xc8c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d02c      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc62>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a20      	ldr	r2, [pc, #128]	@ (80049c4 <HAL_DMA_IRQHandler+0xc90>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d027      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc62>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1f      	ldr	r2, [pc, #124]	@ (80049c8 <HAL_DMA_IRQHandler+0xc94>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d022      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc62>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1d      	ldr	r2, [pc, #116]	@ (80049cc <HAL_DMA_IRQHandler+0xc98>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01d      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc62>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1c      	ldr	r2, [pc, #112]	@ (80049d0 <HAL_DMA_IRQHandler+0xc9c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d018      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc62>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1a      	ldr	r2, [pc, #104]	@ (80049d4 <HAL_DMA_IRQHandler+0xca0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc62>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a19      	ldr	r2, [pc, #100]	@ (80049d8 <HAL_DMA_IRQHandler+0xca4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00e      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc62>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a17      	ldr	r2, [pc, #92]	@ (80049dc <HAL_DMA_IRQHandler+0xca8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d009      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc62>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a16      	ldr	r2, [pc, #88]	@ (80049e0 <HAL_DMA_IRQHandler+0xcac>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_DMA_IRQHandler+0xc62>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a14      	ldr	r2, [pc, #80]	@ (80049e4 <HAL_DMA_IRQHandler+0xcb0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d128      	bne.n	80049e8 <HAL_DMA_IRQHandler+0xcb4>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0214 	bic.w	r2, r2, #20
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	e027      	b.n	80049f8 <HAL_DMA_IRQHandler+0xcc4>
 80049a8:	40020010 	.word	0x40020010
 80049ac:	40020028 	.word	0x40020028
 80049b0:	40020040 	.word	0x40020040
 80049b4:	40020058 	.word	0x40020058
 80049b8:	40020070 	.word	0x40020070
 80049bc:	40020088 	.word	0x40020088
 80049c0:	400200a0 	.word	0x400200a0
 80049c4:	400200b8 	.word	0x400200b8
 80049c8:	40020410 	.word	0x40020410
 80049cc:	40020428 	.word	0x40020428
 80049d0:	40020440 	.word	0x40020440
 80049d4:	40020458 	.word	0x40020458
 80049d8:	40020470 	.word	0x40020470
 80049dc:	40020488 	.word	0x40020488
 80049e0:	400204a0 	.word	0x400204a0
 80049e4:	400204b8 	.word	0x400204b8
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 020a 	bic.w	r2, r2, #10
 80049f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8097 	beq.w	8004b40 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a1a:	e091      	b.n	8004b40 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	2208      	movs	r2, #8
 8004a26:	409a      	lsls	r2, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8088 	beq.w	8004b42 <HAL_DMA_IRQHandler+0xe0e>
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8082 	beq.w	8004b42 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a41      	ldr	r2, [pc, #260]	@ (8004b48 <HAL_DMA_IRQHandler+0xe14>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d04a      	beq.n	8004ade <HAL_DMA_IRQHandler+0xdaa>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b4c <HAL_DMA_IRQHandler+0xe18>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d045      	beq.n	8004ade <HAL_DMA_IRQHandler+0xdaa>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a3e      	ldr	r2, [pc, #248]	@ (8004b50 <HAL_DMA_IRQHandler+0xe1c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d040      	beq.n	8004ade <HAL_DMA_IRQHandler+0xdaa>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a3c      	ldr	r2, [pc, #240]	@ (8004b54 <HAL_DMA_IRQHandler+0xe20>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d03b      	beq.n	8004ade <HAL_DMA_IRQHandler+0xdaa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a3b      	ldr	r2, [pc, #236]	@ (8004b58 <HAL_DMA_IRQHandler+0xe24>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d036      	beq.n	8004ade <HAL_DMA_IRQHandler+0xdaa>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a39      	ldr	r2, [pc, #228]	@ (8004b5c <HAL_DMA_IRQHandler+0xe28>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d031      	beq.n	8004ade <HAL_DMA_IRQHandler+0xdaa>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a38      	ldr	r2, [pc, #224]	@ (8004b60 <HAL_DMA_IRQHandler+0xe2c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d02c      	beq.n	8004ade <HAL_DMA_IRQHandler+0xdaa>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a36      	ldr	r2, [pc, #216]	@ (8004b64 <HAL_DMA_IRQHandler+0xe30>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d027      	beq.n	8004ade <HAL_DMA_IRQHandler+0xdaa>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a35      	ldr	r2, [pc, #212]	@ (8004b68 <HAL_DMA_IRQHandler+0xe34>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d022      	beq.n	8004ade <HAL_DMA_IRQHandler+0xdaa>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a33      	ldr	r2, [pc, #204]	@ (8004b6c <HAL_DMA_IRQHandler+0xe38>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01d      	beq.n	8004ade <HAL_DMA_IRQHandler+0xdaa>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a32      	ldr	r2, [pc, #200]	@ (8004b70 <HAL_DMA_IRQHandler+0xe3c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d018      	beq.n	8004ade <HAL_DMA_IRQHandler+0xdaa>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a30      	ldr	r2, [pc, #192]	@ (8004b74 <HAL_DMA_IRQHandler+0xe40>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <HAL_DMA_IRQHandler+0xdaa>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2f      	ldr	r2, [pc, #188]	@ (8004b78 <HAL_DMA_IRQHandler+0xe44>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00e      	beq.n	8004ade <HAL_DMA_IRQHandler+0xdaa>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8004b7c <HAL_DMA_IRQHandler+0xe48>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d009      	beq.n	8004ade <HAL_DMA_IRQHandler+0xdaa>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a2c      	ldr	r2, [pc, #176]	@ (8004b80 <HAL_DMA_IRQHandler+0xe4c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_DMA_IRQHandler+0xdaa>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8004b84 <HAL_DMA_IRQHandler+0xe50>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d108      	bne.n	8004af0 <HAL_DMA_IRQHandler+0xdbc>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 021c 	bic.w	r2, r2, #28
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	e007      	b.n	8004b00 <HAL_DMA_IRQHandler+0xdcc>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 020e 	bic.w	r2, r2, #14
 8004afe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	2201      	movs	r2, #1
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	4798      	blx	r3
 8004b36:	e004      	b.n	8004b42 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004b38:	bf00      	nop
 8004b3a:	e002      	b.n	8004b42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b3c:	bf00      	nop
 8004b3e:	e000      	b.n	8004b42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b40:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b42:	3728      	adds	r7, #40	@ 0x28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40020010 	.word	0x40020010
 8004b4c:	40020028 	.word	0x40020028
 8004b50:	40020040 	.word	0x40020040
 8004b54:	40020058 	.word	0x40020058
 8004b58:	40020070 	.word	0x40020070
 8004b5c:	40020088 	.word	0x40020088
 8004b60:	400200a0 	.word	0x400200a0
 8004b64:	400200b8 	.word	0x400200b8
 8004b68:	40020410 	.word	0x40020410
 8004b6c:	40020428 	.word	0x40020428
 8004b70:	40020440 	.word	0x40020440
 8004b74:	40020458 	.word	0x40020458
 8004b78:	40020470 	.word	0x40020470
 8004b7c:	40020488 	.word	0x40020488
 8004b80:	400204a0 	.word	0x400204a0
 8004b84:	400204b8 	.word	0x400204b8

08004b88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a7f      	ldr	r2, [pc, #508]	@ (8004da4 <DMA_SetConfig+0x21c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d072      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a7d      	ldr	r2, [pc, #500]	@ (8004da8 <DMA_SetConfig+0x220>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d06d      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a7c      	ldr	r2, [pc, #496]	@ (8004dac <DMA_SetConfig+0x224>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d068      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a7a      	ldr	r2, [pc, #488]	@ (8004db0 <DMA_SetConfig+0x228>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d063      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a79      	ldr	r2, [pc, #484]	@ (8004db4 <DMA_SetConfig+0x22c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d05e      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a77      	ldr	r2, [pc, #476]	@ (8004db8 <DMA_SetConfig+0x230>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d059      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a76      	ldr	r2, [pc, #472]	@ (8004dbc <DMA_SetConfig+0x234>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d054      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a74      	ldr	r2, [pc, #464]	@ (8004dc0 <DMA_SetConfig+0x238>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d04f      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a73      	ldr	r2, [pc, #460]	@ (8004dc4 <DMA_SetConfig+0x23c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d04a      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a71      	ldr	r2, [pc, #452]	@ (8004dc8 <DMA_SetConfig+0x240>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d045      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a70      	ldr	r2, [pc, #448]	@ (8004dcc <DMA_SetConfig+0x244>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d040      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a6e      	ldr	r2, [pc, #440]	@ (8004dd0 <DMA_SetConfig+0x248>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d03b      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a6d      	ldr	r2, [pc, #436]	@ (8004dd4 <DMA_SetConfig+0x24c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d036      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a6b      	ldr	r2, [pc, #428]	@ (8004dd8 <DMA_SetConfig+0x250>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d031      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a6a      	ldr	r2, [pc, #424]	@ (8004ddc <DMA_SetConfig+0x254>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d02c      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a68      	ldr	r2, [pc, #416]	@ (8004de0 <DMA_SetConfig+0x258>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d027      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a67      	ldr	r2, [pc, #412]	@ (8004de4 <DMA_SetConfig+0x25c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d022      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a65      	ldr	r2, [pc, #404]	@ (8004de8 <DMA_SetConfig+0x260>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d01d      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a64      	ldr	r2, [pc, #400]	@ (8004dec <DMA_SetConfig+0x264>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d018      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a62      	ldr	r2, [pc, #392]	@ (8004df0 <DMA_SetConfig+0x268>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d013      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a61      	ldr	r2, [pc, #388]	@ (8004df4 <DMA_SetConfig+0x26c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00e      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a5f      	ldr	r2, [pc, #380]	@ (8004df8 <DMA_SetConfig+0x270>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d009      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a5e      	ldr	r2, [pc, #376]	@ (8004dfc <DMA_SetConfig+0x274>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <DMA_SetConfig+0x10a>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a5c      	ldr	r2, [pc, #368]	@ (8004e00 <DMA_SetConfig+0x278>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d101      	bne.n	8004c96 <DMA_SetConfig+0x10e>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <DMA_SetConfig+0x110>
 8004c96:	2300      	movs	r3, #0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00d      	beq.n	8004cb8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004ca4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004cb6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a39      	ldr	r2, [pc, #228]	@ (8004da4 <DMA_SetConfig+0x21c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d04a      	beq.n	8004d58 <DMA_SetConfig+0x1d0>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a38      	ldr	r2, [pc, #224]	@ (8004da8 <DMA_SetConfig+0x220>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d045      	beq.n	8004d58 <DMA_SetConfig+0x1d0>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a36      	ldr	r2, [pc, #216]	@ (8004dac <DMA_SetConfig+0x224>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d040      	beq.n	8004d58 <DMA_SetConfig+0x1d0>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a35      	ldr	r2, [pc, #212]	@ (8004db0 <DMA_SetConfig+0x228>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d03b      	beq.n	8004d58 <DMA_SetConfig+0x1d0>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a33      	ldr	r2, [pc, #204]	@ (8004db4 <DMA_SetConfig+0x22c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d036      	beq.n	8004d58 <DMA_SetConfig+0x1d0>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a32      	ldr	r2, [pc, #200]	@ (8004db8 <DMA_SetConfig+0x230>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d031      	beq.n	8004d58 <DMA_SetConfig+0x1d0>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a30      	ldr	r2, [pc, #192]	@ (8004dbc <DMA_SetConfig+0x234>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d02c      	beq.n	8004d58 <DMA_SetConfig+0x1d0>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a2f      	ldr	r2, [pc, #188]	@ (8004dc0 <DMA_SetConfig+0x238>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d027      	beq.n	8004d58 <DMA_SetConfig+0x1d0>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc4 <DMA_SetConfig+0x23c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d022      	beq.n	8004d58 <DMA_SetConfig+0x1d0>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a2c      	ldr	r2, [pc, #176]	@ (8004dc8 <DMA_SetConfig+0x240>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d01d      	beq.n	8004d58 <DMA_SetConfig+0x1d0>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a2a      	ldr	r2, [pc, #168]	@ (8004dcc <DMA_SetConfig+0x244>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d018      	beq.n	8004d58 <DMA_SetConfig+0x1d0>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a29      	ldr	r2, [pc, #164]	@ (8004dd0 <DMA_SetConfig+0x248>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d013      	beq.n	8004d58 <DMA_SetConfig+0x1d0>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a27      	ldr	r2, [pc, #156]	@ (8004dd4 <DMA_SetConfig+0x24c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00e      	beq.n	8004d58 <DMA_SetConfig+0x1d0>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a26      	ldr	r2, [pc, #152]	@ (8004dd8 <DMA_SetConfig+0x250>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d009      	beq.n	8004d58 <DMA_SetConfig+0x1d0>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a24      	ldr	r2, [pc, #144]	@ (8004ddc <DMA_SetConfig+0x254>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <DMA_SetConfig+0x1d0>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a23      	ldr	r2, [pc, #140]	@ (8004de0 <DMA_SetConfig+0x258>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d101      	bne.n	8004d5c <DMA_SetConfig+0x1d4>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <DMA_SetConfig+0x1d6>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d059      	beq.n	8004e16 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	223f      	movs	r2, #63	@ 0x3f
 8004d6c:	409a      	lsls	r2, r3
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d80:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b40      	cmp	r3, #64	@ 0x40
 8004d90:	d138      	bne.n	8004e04 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004da2:	e086      	b.n	8004eb2 <DMA_SetConfig+0x32a>
 8004da4:	40020010 	.word	0x40020010
 8004da8:	40020028 	.word	0x40020028
 8004dac:	40020040 	.word	0x40020040
 8004db0:	40020058 	.word	0x40020058
 8004db4:	40020070 	.word	0x40020070
 8004db8:	40020088 	.word	0x40020088
 8004dbc:	400200a0 	.word	0x400200a0
 8004dc0:	400200b8 	.word	0x400200b8
 8004dc4:	40020410 	.word	0x40020410
 8004dc8:	40020428 	.word	0x40020428
 8004dcc:	40020440 	.word	0x40020440
 8004dd0:	40020458 	.word	0x40020458
 8004dd4:	40020470 	.word	0x40020470
 8004dd8:	40020488 	.word	0x40020488
 8004ddc:	400204a0 	.word	0x400204a0
 8004de0:	400204b8 	.word	0x400204b8
 8004de4:	58025408 	.word	0x58025408
 8004de8:	5802541c 	.word	0x5802541c
 8004dec:	58025430 	.word	0x58025430
 8004df0:	58025444 	.word	0x58025444
 8004df4:	58025458 	.word	0x58025458
 8004df8:	5802546c 	.word	0x5802546c
 8004dfc:	58025480 	.word	0x58025480
 8004e00:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	60da      	str	r2, [r3, #12]
}
 8004e14:	e04d      	b.n	8004eb2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a29      	ldr	r2, [pc, #164]	@ (8004ec0 <DMA_SetConfig+0x338>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d022      	beq.n	8004e66 <DMA_SetConfig+0x2de>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a27      	ldr	r2, [pc, #156]	@ (8004ec4 <DMA_SetConfig+0x33c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01d      	beq.n	8004e66 <DMA_SetConfig+0x2de>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a26      	ldr	r2, [pc, #152]	@ (8004ec8 <DMA_SetConfig+0x340>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d018      	beq.n	8004e66 <DMA_SetConfig+0x2de>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a24      	ldr	r2, [pc, #144]	@ (8004ecc <DMA_SetConfig+0x344>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <DMA_SetConfig+0x2de>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a23      	ldr	r2, [pc, #140]	@ (8004ed0 <DMA_SetConfig+0x348>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00e      	beq.n	8004e66 <DMA_SetConfig+0x2de>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a21      	ldr	r2, [pc, #132]	@ (8004ed4 <DMA_SetConfig+0x34c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d009      	beq.n	8004e66 <DMA_SetConfig+0x2de>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a20      	ldr	r2, [pc, #128]	@ (8004ed8 <DMA_SetConfig+0x350>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <DMA_SetConfig+0x2de>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1e      	ldr	r2, [pc, #120]	@ (8004edc <DMA_SetConfig+0x354>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d101      	bne.n	8004e6a <DMA_SetConfig+0x2e2>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <DMA_SetConfig+0x2e4>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d020      	beq.n	8004eb2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	2201      	movs	r2, #1
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b40      	cmp	r3, #64	@ 0x40
 8004e8e:	d108      	bne.n	8004ea2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	60da      	str	r2, [r3, #12]
}
 8004ea0:	e007      	b.n	8004eb2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	60da      	str	r2, [r3, #12]
}
 8004eb2:	bf00      	nop
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	58025408 	.word	0x58025408
 8004ec4:	5802541c 	.word	0x5802541c
 8004ec8:	58025430 	.word	0x58025430
 8004ecc:	58025444 	.word	0x58025444
 8004ed0:	58025458 	.word	0x58025458
 8004ed4:	5802546c 	.word	0x5802546c
 8004ed8:	58025480 	.word	0x58025480
 8004edc:	58025494 	.word	0x58025494

08004ee0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a42      	ldr	r2, [pc, #264]	@ (8004ff8 <DMA_CalcBaseAndBitshift+0x118>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d04a      	beq.n	8004f88 <DMA_CalcBaseAndBitshift+0xa8>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a41      	ldr	r2, [pc, #260]	@ (8004ffc <DMA_CalcBaseAndBitshift+0x11c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d045      	beq.n	8004f88 <DMA_CalcBaseAndBitshift+0xa8>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a3f      	ldr	r2, [pc, #252]	@ (8005000 <DMA_CalcBaseAndBitshift+0x120>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d040      	beq.n	8004f88 <DMA_CalcBaseAndBitshift+0xa8>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a3e      	ldr	r2, [pc, #248]	@ (8005004 <DMA_CalcBaseAndBitshift+0x124>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d03b      	beq.n	8004f88 <DMA_CalcBaseAndBitshift+0xa8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a3c      	ldr	r2, [pc, #240]	@ (8005008 <DMA_CalcBaseAndBitshift+0x128>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d036      	beq.n	8004f88 <DMA_CalcBaseAndBitshift+0xa8>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a3b      	ldr	r2, [pc, #236]	@ (800500c <DMA_CalcBaseAndBitshift+0x12c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d031      	beq.n	8004f88 <DMA_CalcBaseAndBitshift+0xa8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a39      	ldr	r2, [pc, #228]	@ (8005010 <DMA_CalcBaseAndBitshift+0x130>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d02c      	beq.n	8004f88 <DMA_CalcBaseAndBitshift+0xa8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a38      	ldr	r2, [pc, #224]	@ (8005014 <DMA_CalcBaseAndBitshift+0x134>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d027      	beq.n	8004f88 <DMA_CalcBaseAndBitshift+0xa8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a36      	ldr	r2, [pc, #216]	@ (8005018 <DMA_CalcBaseAndBitshift+0x138>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d022      	beq.n	8004f88 <DMA_CalcBaseAndBitshift+0xa8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a35      	ldr	r2, [pc, #212]	@ (800501c <DMA_CalcBaseAndBitshift+0x13c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d01d      	beq.n	8004f88 <DMA_CalcBaseAndBitshift+0xa8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a33      	ldr	r2, [pc, #204]	@ (8005020 <DMA_CalcBaseAndBitshift+0x140>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d018      	beq.n	8004f88 <DMA_CalcBaseAndBitshift+0xa8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a32      	ldr	r2, [pc, #200]	@ (8005024 <DMA_CalcBaseAndBitshift+0x144>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <DMA_CalcBaseAndBitshift+0xa8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a30      	ldr	r2, [pc, #192]	@ (8005028 <DMA_CalcBaseAndBitshift+0x148>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00e      	beq.n	8004f88 <DMA_CalcBaseAndBitshift+0xa8>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a2f      	ldr	r2, [pc, #188]	@ (800502c <DMA_CalcBaseAndBitshift+0x14c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d009      	beq.n	8004f88 <DMA_CalcBaseAndBitshift+0xa8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a2d      	ldr	r2, [pc, #180]	@ (8005030 <DMA_CalcBaseAndBitshift+0x150>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <DMA_CalcBaseAndBitshift+0xa8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2c      	ldr	r2, [pc, #176]	@ (8005034 <DMA_CalcBaseAndBitshift+0x154>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d101      	bne.n	8004f8c <DMA_CalcBaseAndBitshift+0xac>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <DMA_CalcBaseAndBitshift+0xae>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d024      	beq.n	8004fdc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	3b10      	subs	r3, #16
 8004f9a:	4a27      	ldr	r2, [pc, #156]	@ (8005038 <DMA_CalcBaseAndBitshift+0x158>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	4a24      	ldr	r2, [pc, #144]	@ (800503c <DMA_CalcBaseAndBitshift+0x15c>)
 8004fac:	5cd3      	ldrb	r3, [r2, r3]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d908      	bls.n	8004fcc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8005040 <DMA_CalcBaseAndBitshift+0x160>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	1d1a      	adds	r2, r3, #4
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fca:	e00d      	b.n	8004fe8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8005040 <DMA_CalcBaseAndBitshift+0x160>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fda:	e005      	b.n	8004fe8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40020010 	.word	0x40020010
 8004ffc:	40020028 	.word	0x40020028
 8005000:	40020040 	.word	0x40020040
 8005004:	40020058 	.word	0x40020058
 8005008:	40020070 	.word	0x40020070
 800500c:	40020088 	.word	0x40020088
 8005010:	400200a0 	.word	0x400200a0
 8005014:	400200b8 	.word	0x400200b8
 8005018:	40020410 	.word	0x40020410
 800501c:	40020428 	.word	0x40020428
 8005020:	40020440 	.word	0x40020440
 8005024:	40020458 	.word	0x40020458
 8005028:	40020470 	.word	0x40020470
 800502c:	40020488 	.word	0x40020488
 8005030:	400204a0 	.word	0x400204a0
 8005034:	400204b8 	.word	0x400204b8
 8005038:	aaaaaaab 	.word	0xaaaaaaab
 800503c:	080095e8 	.word	0x080095e8
 8005040:	fffffc00 	.word	0xfffffc00

08005044 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d120      	bne.n	800509a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505c:	2b03      	cmp	r3, #3
 800505e:	d858      	bhi.n	8005112 <DMA_CheckFifoParam+0xce>
 8005060:	a201      	add	r2, pc, #4	@ (adr r2, 8005068 <DMA_CheckFifoParam+0x24>)
 8005062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005066:	bf00      	nop
 8005068:	08005079 	.word	0x08005079
 800506c:	0800508b 	.word	0x0800508b
 8005070:	08005079 	.word	0x08005079
 8005074:	08005113 	.word	0x08005113
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d048      	beq.n	8005116 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005088:	e045      	b.n	8005116 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005092:	d142      	bne.n	800511a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005098:	e03f      	b.n	800511a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050a2:	d123      	bne.n	80050ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d838      	bhi.n	800511e <DMA_CheckFifoParam+0xda>
 80050ac:	a201      	add	r2, pc, #4	@ (adr r2, 80050b4 <DMA_CheckFifoParam+0x70>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050c5 	.word	0x080050c5
 80050b8:	080050cb 	.word	0x080050cb
 80050bc:	080050c5 	.word	0x080050c5
 80050c0:	080050dd 	.word	0x080050dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
        break;
 80050c8:	e030      	b.n	800512c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d025      	beq.n	8005122 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050da:	e022      	b.n	8005122 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050e4:	d11f      	bne.n	8005126 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050ea:	e01c      	b.n	8005126 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d902      	bls.n	80050fa <DMA_CheckFifoParam+0xb6>
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d003      	beq.n	8005100 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80050f8:	e018      	b.n	800512c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	73fb      	strb	r3, [r7, #15]
        break;
 80050fe:	e015      	b.n	800512c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00e      	beq.n	800512a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	73fb      	strb	r3, [r7, #15]
    break;
 8005110:	e00b      	b.n	800512a <DMA_CheckFifoParam+0xe6>
        break;
 8005112:	bf00      	nop
 8005114:	e00a      	b.n	800512c <DMA_CheckFifoParam+0xe8>
        break;
 8005116:	bf00      	nop
 8005118:	e008      	b.n	800512c <DMA_CheckFifoParam+0xe8>
        break;
 800511a:	bf00      	nop
 800511c:	e006      	b.n	800512c <DMA_CheckFifoParam+0xe8>
        break;
 800511e:	bf00      	nop
 8005120:	e004      	b.n	800512c <DMA_CheckFifoParam+0xe8>
        break;
 8005122:	bf00      	nop
 8005124:	e002      	b.n	800512c <DMA_CheckFifoParam+0xe8>
        break;
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <DMA_CheckFifoParam+0xe8>
    break;
 800512a:	bf00      	nop
    }
  }

  return status;
 800512c:	7bfb      	ldrb	r3, [r7, #15]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop

0800513c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a38      	ldr	r2, [pc, #224]	@ (8005230 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d022      	beq.n	800519a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a36      	ldr	r2, [pc, #216]	@ (8005234 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d01d      	beq.n	800519a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a35      	ldr	r2, [pc, #212]	@ (8005238 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d018      	beq.n	800519a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a33      	ldr	r2, [pc, #204]	@ (800523c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a32      	ldr	r2, [pc, #200]	@ (8005240 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00e      	beq.n	800519a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a30      	ldr	r2, [pc, #192]	@ (8005244 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d009      	beq.n	800519a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a2f      	ldr	r2, [pc, #188]	@ (8005248 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d004      	beq.n	800519a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a2d      	ldr	r2, [pc, #180]	@ (800524c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d101      	bne.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800519e:	2300      	movs	r3, #0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01a      	beq.n	80051da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	3b08      	subs	r3, #8
 80051ac:	4a28      	ldr	r2, [pc, #160]	@ (8005250 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	091b      	lsrs	r3, r3, #4
 80051b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4b26      	ldr	r3, [pc, #152]	@ (8005254 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	461a      	mov	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a24      	ldr	r2, [pc, #144]	@ (8005258 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051c8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f003 031f 	and.w	r3, r3, #31
 80051d0:	2201      	movs	r2, #1
 80051d2:	409a      	lsls	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80051d8:	e024      	b.n	8005224 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	3b10      	subs	r3, #16
 80051e2:	4a1e      	ldr	r2, [pc, #120]	@ (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80051e4:	fba2 2303 	umull	r2, r3, r2, r3
 80051e8:	091b      	lsrs	r3, r3, #4
 80051ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d806      	bhi.n	8005202 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d902      	bls.n	8005202 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3308      	adds	r3, #8
 8005200:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4b18      	ldr	r3, [pc, #96]	@ (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	461a      	mov	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a16      	ldr	r2, [pc, #88]	@ (800526c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005214:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f003 031f 	and.w	r3, r3, #31
 800521c:	2201      	movs	r2, #1
 800521e:	409a      	lsls	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	58025408 	.word	0x58025408
 8005234:	5802541c 	.word	0x5802541c
 8005238:	58025430 	.word	0x58025430
 800523c:	58025444 	.word	0x58025444
 8005240:	58025458 	.word	0x58025458
 8005244:	5802546c 	.word	0x5802546c
 8005248:	58025480 	.word	0x58025480
 800524c:	58025494 	.word	0x58025494
 8005250:	cccccccd 	.word	0xcccccccd
 8005254:	16009600 	.word	0x16009600
 8005258:	58025880 	.word	0x58025880
 800525c:	aaaaaaab 	.word	0xaaaaaaab
 8005260:	400204b8 	.word	0x400204b8
 8005264:	4002040f 	.word	0x4002040f
 8005268:	10008200 	.word	0x10008200
 800526c:	40020880 	.word	0x40020880

08005270 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d04a      	beq.n	800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d847      	bhi.n	800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a25      	ldr	r2, [pc, #148]	@ (8005328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d022      	beq.n	80052dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a24      	ldr	r2, [pc, #144]	@ (800532c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d01d      	beq.n	80052dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a22      	ldr	r2, [pc, #136]	@ (8005330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d018      	beq.n	80052dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a21      	ldr	r2, [pc, #132]	@ (8005334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d013      	beq.n	80052dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00e      	beq.n	80052dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1e      	ldr	r2, [pc, #120]	@ (800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d009      	beq.n	80052dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d004      	beq.n	80052dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d101      	bne.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80052e0:	2300      	movs	r3, #0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4b17      	ldr	r3, [pc, #92]	@ (8005348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	461a      	mov	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a15      	ldr	r2, [pc, #84]	@ (800534c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80052f8:	671a      	str	r2, [r3, #112]	@ 0x70
 80052fa:	e009      	b.n	8005310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4b14      	ldr	r3, [pc, #80]	@ (8005350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	461a      	mov	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a11      	ldr	r2, [pc, #68]	@ (8005354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800530e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3b01      	subs	r3, #1
 8005314:	2201      	movs	r2, #1
 8005316:	409a      	lsls	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	58025408 	.word	0x58025408
 800532c:	5802541c 	.word	0x5802541c
 8005330:	58025430 	.word	0x58025430
 8005334:	58025444 	.word	0x58025444
 8005338:	58025458 	.word	0x58025458
 800533c:	5802546c 	.word	0x5802546c
 8005340:	58025480 	.word	0x58025480
 8005344:	58025494 	.word	0x58025494
 8005348:	1600963f 	.word	0x1600963f
 800534c:	58025940 	.word	0x58025940
 8005350:	1000823f 	.word	0x1000823f
 8005354:	40020940 	.word	0x40020940

08005358 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005358:	b480      	push	{r7}
 800535a:	b089      	sub	sp, #36	@ 0x24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005362:	2300      	movs	r3, #0
 8005364:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005366:	4b86      	ldr	r3, [pc, #536]	@ (8005580 <HAL_GPIO_Init+0x228>)
 8005368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800536a:	e18c      	b.n	8005686 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	2101      	movs	r1, #1
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	fa01 f303 	lsl.w	r3, r1, r3
 8005378:	4013      	ands	r3, r2
 800537a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 817e 	beq.w	8005680 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	2b01      	cmp	r3, #1
 800538e:	d005      	beq.n	800539c <HAL_GPIO_Init+0x44>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d130      	bne.n	80053fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	2203      	movs	r2, #3
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	43db      	mvns	r3, r3
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4013      	ands	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053d2:	2201      	movs	r2, #1
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	43db      	mvns	r3, r3
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	4013      	ands	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	091b      	lsrs	r3, r3, #4
 80053e8:	f003 0201 	and.w	r2, r3, #1
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b03      	cmp	r3, #3
 8005408:	d017      	beq.n	800543a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	2203      	movs	r2, #3
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43db      	mvns	r3, r3
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4013      	ands	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	4313      	orrs	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d123      	bne.n	800548e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	08da      	lsrs	r2, r3, #3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3208      	adds	r2, #8
 800544e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	220f      	movs	r2, #15
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43db      	mvns	r3, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4313      	orrs	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	08da      	lsrs	r2, r3, #3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3208      	adds	r2, #8
 8005488:	69b9      	ldr	r1, [r7, #24]
 800548a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	2203      	movs	r2, #3
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43db      	mvns	r3, r3
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4013      	ands	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f003 0203 	and.w	r2, r3, #3
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 80d8 	beq.w	8005680 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005584 <HAL_GPIO_Init+0x22c>)
 80054d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054d6:	4a2b      	ldr	r2, [pc, #172]	@ (8005584 <HAL_GPIO_Init+0x22c>)
 80054d8:	f043 0302 	orr.w	r3, r3, #2
 80054dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80054e0:	4b28      	ldr	r3, [pc, #160]	@ (8005584 <HAL_GPIO_Init+0x22c>)
 80054e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054ee:	4a26      	ldr	r2, [pc, #152]	@ (8005588 <HAL_GPIO_Init+0x230>)
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	089b      	lsrs	r3, r3, #2
 80054f4:	3302      	adds	r3, #2
 80054f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	220f      	movs	r2, #15
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	43db      	mvns	r3, r3
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	4013      	ands	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a1d      	ldr	r2, [pc, #116]	@ (800558c <HAL_GPIO_Init+0x234>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d04a      	beq.n	80055b0 <HAL_GPIO_Init+0x258>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a1c      	ldr	r2, [pc, #112]	@ (8005590 <HAL_GPIO_Init+0x238>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d02b      	beq.n	800557a <HAL_GPIO_Init+0x222>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a1b      	ldr	r2, [pc, #108]	@ (8005594 <HAL_GPIO_Init+0x23c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d025      	beq.n	8005576 <HAL_GPIO_Init+0x21e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a1a      	ldr	r2, [pc, #104]	@ (8005598 <HAL_GPIO_Init+0x240>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d01f      	beq.n	8005572 <HAL_GPIO_Init+0x21a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a19      	ldr	r2, [pc, #100]	@ (800559c <HAL_GPIO_Init+0x244>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d019      	beq.n	800556e <HAL_GPIO_Init+0x216>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a18      	ldr	r2, [pc, #96]	@ (80055a0 <HAL_GPIO_Init+0x248>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <HAL_GPIO_Init+0x212>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a17      	ldr	r2, [pc, #92]	@ (80055a4 <HAL_GPIO_Init+0x24c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00d      	beq.n	8005566 <HAL_GPIO_Init+0x20e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a16      	ldr	r2, [pc, #88]	@ (80055a8 <HAL_GPIO_Init+0x250>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d007      	beq.n	8005562 <HAL_GPIO_Init+0x20a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a15      	ldr	r2, [pc, #84]	@ (80055ac <HAL_GPIO_Init+0x254>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d101      	bne.n	800555e <HAL_GPIO_Init+0x206>
 800555a:	2309      	movs	r3, #9
 800555c:	e029      	b.n	80055b2 <HAL_GPIO_Init+0x25a>
 800555e:	230a      	movs	r3, #10
 8005560:	e027      	b.n	80055b2 <HAL_GPIO_Init+0x25a>
 8005562:	2307      	movs	r3, #7
 8005564:	e025      	b.n	80055b2 <HAL_GPIO_Init+0x25a>
 8005566:	2306      	movs	r3, #6
 8005568:	e023      	b.n	80055b2 <HAL_GPIO_Init+0x25a>
 800556a:	2305      	movs	r3, #5
 800556c:	e021      	b.n	80055b2 <HAL_GPIO_Init+0x25a>
 800556e:	2304      	movs	r3, #4
 8005570:	e01f      	b.n	80055b2 <HAL_GPIO_Init+0x25a>
 8005572:	2303      	movs	r3, #3
 8005574:	e01d      	b.n	80055b2 <HAL_GPIO_Init+0x25a>
 8005576:	2302      	movs	r3, #2
 8005578:	e01b      	b.n	80055b2 <HAL_GPIO_Init+0x25a>
 800557a:	2301      	movs	r3, #1
 800557c:	e019      	b.n	80055b2 <HAL_GPIO_Init+0x25a>
 800557e:	bf00      	nop
 8005580:	58000080 	.word	0x58000080
 8005584:	58024400 	.word	0x58024400
 8005588:	58000400 	.word	0x58000400
 800558c:	58020000 	.word	0x58020000
 8005590:	58020400 	.word	0x58020400
 8005594:	58020800 	.word	0x58020800
 8005598:	58020c00 	.word	0x58020c00
 800559c:	58021000 	.word	0x58021000
 80055a0:	58021400 	.word	0x58021400
 80055a4:	58021800 	.word	0x58021800
 80055a8:	58021c00 	.word	0x58021c00
 80055ac:	58022400 	.word	0x58022400
 80055b0:	2300      	movs	r3, #0
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	f002 0203 	and.w	r2, r2, #3
 80055b8:	0092      	lsls	r2, r2, #2
 80055ba:	4093      	lsls	r3, r2
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055c2:	4938      	ldr	r1, [pc, #224]	@ (80056a4 <HAL_GPIO_Init+0x34c>)
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	089b      	lsrs	r3, r3, #2
 80055c8:	3302      	adds	r3, #2
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	43db      	mvns	r3, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4013      	ands	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80055f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80055fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	43db      	mvns	r3, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4013      	ands	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005624:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	43db      	mvns	r3, r3
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	4013      	ands	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	43db      	mvns	r3, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4013      	ands	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	3301      	adds	r3, #1
 8005684:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	f47f ae6b 	bne.w	800536c <HAL_GPIO_Init+0x14>
  }
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	3724      	adds	r7, #36	@ 0x24
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	58000400 	.word	0x58000400

080056a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80056b0:	4b19      	ldr	r3, [pc, #100]	@ (8005718 <HAL_PWREx_ConfigSupply+0x70>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	d00a      	beq.n	80056d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056bc:	4b16      	ldr	r3, [pc, #88]	@ (8005718 <HAL_PWREx_ConfigSupply+0x70>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d001      	beq.n	80056ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e01f      	b.n	800570e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	e01d      	b.n	800570e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80056d2:	4b11      	ldr	r3, [pc, #68]	@ (8005718 <HAL_PWREx_ConfigSupply+0x70>)
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f023 0207 	bic.w	r2, r3, #7
 80056da:	490f      	ldr	r1, [pc, #60]	@ (8005718 <HAL_PWREx_ConfigSupply+0x70>)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80056e2:	f7fb fc3b 	bl	8000f5c <HAL_GetTick>
 80056e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056e8:	e009      	b.n	80056fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056ea:	f7fb fc37 	bl	8000f5c <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056f8:	d901      	bls.n	80056fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e007      	b.n	800570e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056fe:	4b06      	ldr	r3, [pc, #24]	@ (8005718 <HAL_PWREx_ConfigSupply+0x70>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570a:	d1ee      	bne.n	80056ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	58024800 	.word	0x58024800

0800571c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08c      	sub	sp, #48	@ 0x30
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e3c8      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 8087 	beq.w	800584a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800573c:	4b88      	ldr	r3, [pc, #544]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005744:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005746:	4b86      	ldr	r3, [pc, #536]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 8005748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800574c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574e:	2b10      	cmp	r3, #16
 8005750:	d007      	beq.n	8005762 <HAL_RCC_OscConfig+0x46>
 8005752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005754:	2b18      	cmp	r3, #24
 8005756:	d110      	bne.n	800577a <HAL_RCC_OscConfig+0x5e>
 8005758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d10b      	bne.n	800577a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005762:	4b7f      	ldr	r3, [pc, #508]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d06c      	beq.n	8005848 <HAL_RCC_OscConfig+0x12c>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d168      	bne.n	8005848 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e3a2      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005782:	d106      	bne.n	8005792 <HAL_RCC_OscConfig+0x76>
 8005784:	4b76      	ldr	r3, [pc, #472]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a75      	ldr	r2, [pc, #468]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 800578a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	e02e      	b.n	80057f0 <HAL_RCC_OscConfig+0xd4>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10c      	bne.n	80057b4 <HAL_RCC_OscConfig+0x98>
 800579a:	4b71      	ldr	r3, [pc, #452]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a70      	ldr	r2, [pc, #448]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80057a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	4b6e      	ldr	r3, [pc, #440]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a6d      	ldr	r2, [pc, #436]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80057ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e01d      	b.n	80057f0 <HAL_RCC_OscConfig+0xd4>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057bc:	d10c      	bne.n	80057d8 <HAL_RCC_OscConfig+0xbc>
 80057be:	4b68      	ldr	r3, [pc, #416]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a67      	ldr	r2, [pc, #412]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80057c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	4b65      	ldr	r3, [pc, #404]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a64      	ldr	r2, [pc, #400]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80057d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e00b      	b.n	80057f0 <HAL_RCC_OscConfig+0xd4>
 80057d8:	4b61      	ldr	r3, [pc, #388]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a60      	ldr	r2, [pc, #384]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80057de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	4b5e      	ldr	r3, [pc, #376]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a5d      	ldr	r2, [pc, #372]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80057ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d013      	beq.n	8005820 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f8:	f7fb fbb0 	bl	8000f5c <HAL_GetTick>
 80057fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005800:	f7fb fbac 	bl	8000f5c <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b64      	cmp	r3, #100	@ 0x64
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e356      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005812:	4b53      	ldr	r3, [pc, #332]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0f0      	beq.n	8005800 <HAL_RCC_OscConfig+0xe4>
 800581e:	e014      	b.n	800584a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005820:	f7fb fb9c 	bl	8000f5c <HAL_GetTick>
 8005824:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005828:	f7fb fb98 	bl	8000f5c <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b64      	cmp	r3, #100	@ 0x64
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e342      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800583a:	4b49      	ldr	r3, [pc, #292]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1f0      	bne.n	8005828 <HAL_RCC_OscConfig+0x10c>
 8005846:	e000      	b.n	800584a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 808c 	beq.w	8005970 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005858:	4b41      	ldr	r3, [pc, #260]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005860:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005862:	4b3f      	ldr	r3, [pc, #252]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 8005864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005866:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <HAL_RCC_OscConfig+0x162>
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	2b18      	cmp	r3, #24
 8005872:	d137      	bne.n	80058e4 <HAL_RCC_OscConfig+0x1c8>
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d132      	bne.n	80058e4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800587e:	4b38      	ldr	r3, [pc, #224]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <HAL_RCC_OscConfig+0x17a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e314      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005896:	4b32      	ldr	r3, [pc, #200]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 0219 	bic.w	r2, r3, #25
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	492f      	ldr	r1, [pc, #188]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a8:	f7fb fb58 	bl	8000f5c <HAL_GetTick>
 80058ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058b0:	f7fb fb54 	bl	8000f5c <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e2fe      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058c2:	4b27      	ldr	r3, [pc, #156]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0f0      	beq.n	80058b0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ce:	4b24      	ldr	r3, [pc, #144]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	061b      	lsls	r3, r3, #24
 80058dc:	4920      	ldr	r1, [pc, #128]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058e2:	e045      	b.n	8005970 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d026      	beq.n	800593a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058ec:	4b1c      	ldr	r3, [pc, #112]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f023 0219 	bic.w	r2, r3, #25
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	4919      	ldr	r1, [pc, #100]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fe:	f7fb fb2d 	bl	8000f5c <HAL_GetTick>
 8005902:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005906:	f7fb fb29 	bl	8000f5c <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e2d3      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005918:	4b11      	ldr	r3, [pc, #68]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0f0      	beq.n	8005906 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005924:	4b0e      	ldr	r3, [pc, #56]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	061b      	lsls	r3, r3, #24
 8005932:	490b      	ldr	r1, [pc, #44]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 8005934:	4313      	orrs	r3, r2
 8005936:	604b      	str	r3, [r1, #4]
 8005938:	e01a      	b.n	8005970 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800593a:	4b09      	ldr	r3, [pc, #36]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a08      	ldr	r2, [pc, #32]	@ (8005960 <HAL_RCC_OscConfig+0x244>)
 8005940:	f023 0301 	bic.w	r3, r3, #1
 8005944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005946:	f7fb fb09 	bl	8000f5c <HAL_GetTick>
 800594a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800594c:	e00a      	b.n	8005964 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800594e:	f7fb fb05 	bl	8000f5c <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d903      	bls.n	8005964 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e2af      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
 8005960:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005964:	4b96      	ldr	r3, [pc, #600]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1ee      	bne.n	800594e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b00      	cmp	r3, #0
 800597a:	d06a      	beq.n	8005a52 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800597c:	4b90      	ldr	r3, [pc, #576]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005984:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005986:	4b8e      	ldr	r3, [pc, #568]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2b08      	cmp	r3, #8
 8005990:	d007      	beq.n	80059a2 <HAL_RCC_OscConfig+0x286>
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b18      	cmp	r3, #24
 8005996:	d11b      	bne.n	80059d0 <HAL_RCC_OscConfig+0x2b4>
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d116      	bne.n	80059d0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059a2:	4b87      	ldr	r3, [pc, #540]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <HAL_RCC_OscConfig+0x29e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	2b80      	cmp	r3, #128	@ 0x80
 80059b4:	d001      	beq.n	80059ba <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e282      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059ba:	4b81      	ldr	r3, [pc, #516]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	061b      	lsls	r3, r3, #24
 80059c8:	497d      	ldr	r1, [pc, #500]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059ce:	e040      	b.n	8005a52 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d023      	beq.n	8005a20 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80059d8:	4b79      	ldr	r3, [pc, #484]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a78      	ldr	r2, [pc, #480]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 80059de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e4:	f7fb faba 	bl	8000f5c <HAL_GetTick>
 80059e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80059ec:	f7fb fab6 	bl	8000f5c <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e260      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059fe:	4b70      	ldr	r3, [pc, #448]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	061b      	lsls	r3, r3, #24
 8005a18:	4969      	ldr	r1, [pc, #420]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60cb      	str	r3, [r1, #12]
 8005a1e:	e018      	b.n	8005a52 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005a20:	4b67      	ldr	r3, [pc, #412]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a66      	ldr	r2, [pc, #408]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005a26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2c:	f7fb fa96 	bl	8000f5c <HAL_GetTick>
 8005a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005a34:	f7fb fa92 	bl	8000f5c <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e23c      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a46:	4b5e      	ldr	r3, [pc, #376]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d036      	beq.n	8005acc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d019      	beq.n	8005a9a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a66:	4b56      	ldr	r3, [pc, #344]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a6a:	4a55      	ldr	r2, [pc, #340]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005a6c:	f043 0301 	orr.w	r3, r3, #1
 8005a70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a72:	f7fb fa73 	bl	8000f5c <HAL_GetTick>
 8005a76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a7a:	f7fb fa6f 	bl	8000f5c <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e219      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a8c:	4b4c      	ldr	r3, [pc, #304]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0f0      	beq.n	8005a7a <HAL_RCC_OscConfig+0x35e>
 8005a98:	e018      	b.n	8005acc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a9a:	4b49      	ldr	r3, [pc, #292]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a9e:	4a48      	ldr	r2, [pc, #288]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005aa0:	f023 0301 	bic.w	r3, r3, #1
 8005aa4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa6:	f7fb fa59 	bl	8000f5c <HAL_GetTick>
 8005aaa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aae:	f7fb fa55 	bl	8000f5c <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e1ff      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ac0:	4b3f      	ldr	r3, [pc, #252]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f0      	bne.n	8005aae <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0320 	and.w	r3, r3, #32
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d036      	beq.n	8005b46 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d019      	beq.n	8005b14 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ae0:	4b37      	ldr	r3, [pc, #220]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a36      	ldr	r2, [pc, #216]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005ae6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005aea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005aec:	f7fb fa36 	bl	8000f5c <HAL_GetTick>
 8005af0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005af4:	f7fb fa32 	bl	8000f5c <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e1dc      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b06:	4b2e      	ldr	r3, [pc, #184]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCC_OscConfig+0x3d8>
 8005b12:	e018      	b.n	8005b46 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b14:	4b2a      	ldr	r3, [pc, #168]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a29      	ldr	r2, [pc, #164]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005b1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b20:	f7fb fa1c 	bl	8000f5c <HAL_GetTick>
 8005b24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b28:	f7fb fa18 	bl	8000f5c <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e1c2      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b3a:	4b21      	ldr	r3, [pc, #132]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f0      	bne.n	8005b28 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 8086 	beq.w	8005c60 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b54:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc4 <HAL_RCC_OscConfig+0x4a8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc4 <HAL_RCC_OscConfig+0x4a8>)
 8005b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b60:	f7fb f9fc 	bl	8000f5c <HAL_GetTick>
 8005b64:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b68:	f7fb f9f8 	bl	8000f5c <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b64      	cmp	r3, #100	@ 0x64
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e1a2      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b7a:	4b12      	ldr	r3, [pc, #72]	@ (8005bc4 <HAL_RCC_OscConfig+0x4a8>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d106      	bne.n	8005b9c <HAL_RCC_OscConfig+0x480>
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b92:	4a0b      	ldr	r2, [pc, #44]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b9a:	e032      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e6>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d111      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x4ac>
 8005ba4:	4b06      	ldr	r3, [pc, #24]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba8:	4a05      	ldr	r2, [pc, #20]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005baa:	f023 0301 	bic.w	r3, r3, #1
 8005bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bb0:	4b03      	ldr	r3, [pc, #12]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb4:	4a02      	ldr	r2, [pc, #8]	@ (8005bc0 <HAL_RCC_OscConfig+0x4a4>)
 8005bb6:	f023 0304 	bic.w	r3, r3, #4
 8005bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bbc:	e021      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e6>
 8005bbe:	bf00      	nop
 8005bc0:	58024400 	.word	0x58024400
 8005bc4:	58024800 	.word	0x58024800
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2b05      	cmp	r3, #5
 8005bce:	d10c      	bne.n	8005bea <HAL_RCC_OscConfig+0x4ce>
 8005bd0:	4b83      	ldr	r3, [pc, #524]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd4:	4a82      	ldr	r2, [pc, #520]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005bd6:	f043 0304 	orr.w	r3, r3, #4
 8005bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bdc:	4b80      	ldr	r3, [pc, #512]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be0:	4a7f      	ldr	r2, [pc, #508]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005be2:	f043 0301 	orr.w	r3, r3, #1
 8005be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005be8:	e00b      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e6>
 8005bea:	4b7d      	ldr	r3, [pc, #500]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bee:	4a7c      	ldr	r2, [pc, #496]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005bf0:	f023 0301 	bic.w	r3, r3, #1
 8005bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bf6:	4b7a      	ldr	r3, [pc, #488]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bfa:	4a79      	ldr	r2, [pc, #484]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005bfc:	f023 0304 	bic.w	r3, r3, #4
 8005c00:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d015      	beq.n	8005c36 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0a:	f7fb f9a7 	bl	8000f5c <HAL_GetTick>
 8005c0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c10:	e00a      	b.n	8005c28 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c12:	f7fb f9a3 	bl	8000f5c <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e14b      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c28:	4b6d      	ldr	r3, [pc, #436]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0ee      	beq.n	8005c12 <HAL_RCC_OscConfig+0x4f6>
 8005c34:	e014      	b.n	8005c60 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c36:	f7fb f991 	bl	8000f5c <HAL_GetTick>
 8005c3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c3c:	e00a      	b.n	8005c54 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c3e:	f7fb f98d 	bl	8000f5c <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d901      	bls.n	8005c54 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e135      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c54:	4b62      	ldr	r3, [pc, #392]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1ee      	bne.n	8005c3e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 812a 	beq.w	8005ebe <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c6a:	4b5d      	ldr	r3, [pc, #372]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c72:	2b18      	cmp	r3, #24
 8005c74:	f000 80ba 	beq.w	8005dec <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	f040 8095 	bne.w	8005dac <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c82:	4b57      	ldr	r3, [pc, #348]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a56      	ldr	r2, [pc, #344]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005c88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8e:	f7fb f965 	bl	8000f5c <HAL_GetTick>
 8005c92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c94:	e008      	b.n	8005ca8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c96:	f7fb f961 	bl	8000f5c <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e10b      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1f0      	bne.n	8005c96 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cb4:	4b4a      	ldr	r3, [pc, #296]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005cb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8005de4 <HAL_RCC_OscConfig+0x6c8>)
 8005cba:	4013      	ands	r3, r2
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005cc4:	0112      	lsls	r2, r2, #4
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	4945      	ldr	r1, [pc, #276]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	628b      	str	r3, [r1, #40]	@ 0x28
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	025b      	lsls	r3, r3, #9
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	041b      	lsls	r3, r3, #16
 8005cec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	061b      	lsls	r3, r3, #24
 8005cfa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005cfe:	4938      	ldr	r1, [pc, #224]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005d04:	4b36      	ldr	r3, [pc, #216]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d08:	4a35      	ldr	r2, [pc, #212]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d10:	4b33      	ldr	r3, [pc, #204]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d14:	4b34      	ldr	r3, [pc, #208]	@ (8005de8 <HAL_RCC_OscConfig+0x6cc>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d1c:	00d2      	lsls	r2, r2, #3
 8005d1e:	4930      	ldr	r1, [pc, #192]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005d24:	4b2e      	ldr	r3, [pc, #184]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d28:	f023 020c 	bic.w	r2, r3, #12
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d30:	492b      	ldr	r1, [pc, #172]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005d36:	4b2a      	ldr	r3, [pc, #168]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3a:	f023 0202 	bic.w	r2, r3, #2
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d42:	4927      	ldr	r1, [pc, #156]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d48:	4b25      	ldr	r3, [pc, #148]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	4a24      	ldr	r2, [pc, #144]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d54:	4b22      	ldr	r3, [pc, #136]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d58:	4a21      	ldr	r2, [pc, #132]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d60:	4b1f      	ldr	r3, [pc, #124]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d64:	4a1e      	ldr	r2, [pc, #120]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d70:	4a1b      	ldr	r2, [pc, #108]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d78:	4b19      	ldr	r3, [pc, #100]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a18      	ldr	r2, [pc, #96]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005d7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d84:	f7fb f8ea 	bl	8000f5c <HAL_GetTick>
 8005d88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d8a:	e008      	b.n	8005d9e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d8c:	f7fb f8e6 	bl	8000f5c <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e090      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d9e:	4b10      	ldr	r3, [pc, #64]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0f0      	beq.n	8005d8c <HAL_RCC_OscConfig+0x670>
 8005daa:	e088      	b.n	8005ebe <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dac:	4b0c      	ldr	r3, [pc, #48]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a0b      	ldr	r2, [pc, #44]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005db2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db8:	f7fb f8d0 	bl	8000f5c <HAL_GetTick>
 8005dbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc0:	f7fb f8cc 	bl	8000f5c <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e076      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dd2:	4b03      	ldr	r3, [pc, #12]	@ (8005de0 <HAL_RCC_OscConfig+0x6c4>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1f0      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x6a4>
 8005dde:	e06e      	b.n	8005ebe <HAL_RCC_OscConfig+0x7a2>
 8005de0:	58024400 	.word	0x58024400
 8005de4:	fffffc0c 	.word	0xfffffc0c
 8005de8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005dec:	4b36      	ldr	r3, [pc, #216]	@ (8005ec8 <HAL_RCC_OscConfig+0x7ac>)
 8005dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005df2:	4b35      	ldr	r3, [pc, #212]	@ (8005ec8 <HAL_RCC_OscConfig+0x7ac>)
 8005df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d031      	beq.n	8005e64 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f003 0203 	and.w	r2, r3, #3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d12a      	bne.n	8005e64 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	091b      	lsrs	r3, r3, #4
 8005e12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d122      	bne.n	8005e64 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e28:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d11a      	bne.n	8005e64 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	0a5b      	lsrs	r3, r3, #9
 8005e32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e3a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d111      	bne.n	8005e64 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	0c1b      	lsrs	r3, r3, #16
 8005e44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d108      	bne.n	8005e64 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	0e1b      	lsrs	r3, r3, #24
 8005e56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d001      	beq.n	8005e68 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e02b      	b.n	8005ec0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005e68:	4b17      	ldr	r3, [pc, #92]	@ (8005ec8 <HAL_RCC_OscConfig+0x7ac>)
 8005e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e6c:	08db      	lsrs	r3, r3, #3
 8005e6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e72:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d01f      	beq.n	8005ebe <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005e7e:	4b12      	ldr	r3, [pc, #72]	@ (8005ec8 <HAL_RCC_OscConfig+0x7ac>)
 8005e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e82:	4a11      	ldr	r2, [pc, #68]	@ (8005ec8 <HAL_RCC_OscConfig+0x7ac>)
 8005e84:	f023 0301 	bic.w	r3, r3, #1
 8005e88:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e8a:	f7fb f867 	bl	8000f5c <HAL_GetTick>
 8005e8e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005e90:	bf00      	nop
 8005e92:	f7fb f863 	bl	8000f5c <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d0f9      	beq.n	8005e92 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec8 <HAL_RCC_OscConfig+0x7ac>)
 8005ea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ecc <HAL_RCC_OscConfig+0x7b0>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005eaa:	00d2      	lsls	r2, r2, #3
 8005eac:	4906      	ldr	r1, [pc, #24]	@ (8005ec8 <HAL_RCC_OscConfig+0x7ac>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005eb2:	4b05      	ldr	r3, [pc, #20]	@ (8005ec8 <HAL_RCC_OscConfig+0x7ac>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	4a04      	ldr	r2, [pc, #16]	@ (8005ec8 <HAL_RCC_OscConfig+0x7ac>)
 8005eb8:	f043 0301 	orr.w	r3, r3, #1
 8005ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3730      	adds	r7, #48	@ 0x30
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	58024400 	.word	0x58024400
 8005ecc:	ffff0007 	.word	0xffff0007

08005ed0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e19c      	b.n	800621e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ee4:	4b8a      	ldr	r3, [pc, #552]	@ (8006110 <HAL_RCC_ClockConfig+0x240>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d910      	bls.n	8005f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ef2:	4b87      	ldr	r3, [pc, #540]	@ (8006110 <HAL_RCC_ClockConfig+0x240>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f023 020f 	bic.w	r2, r3, #15
 8005efa:	4985      	ldr	r1, [pc, #532]	@ (8006110 <HAL_RCC_ClockConfig+0x240>)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f02:	4b83      	ldr	r3, [pc, #524]	@ (8006110 <HAL_RCC_ClockConfig+0x240>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d001      	beq.n	8005f14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e184      	b.n	800621e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d010      	beq.n	8005f42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	4b7b      	ldr	r3, [pc, #492]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d908      	bls.n	8005f42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f30:	4b78      	ldr	r3, [pc, #480]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	4975      	ldr	r1, [pc, #468]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d010      	beq.n	8005f70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	4b70      	ldr	r3, [pc, #448]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d908      	bls.n	8005f70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f5e:	4b6d      	ldr	r3, [pc, #436]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	496a      	ldr	r1, [pc, #424]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d010      	beq.n	8005f9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	699a      	ldr	r2, [r3, #24]
 8005f80:	4b64      	ldr	r3, [pc, #400]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d908      	bls.n	8005f9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f8c:	4b61      	ldr	r3, [pc, #388]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	495e      	ldr	r1, [pc, #376]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d010      	beq.n	8005fcc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69da      	ldr	r2, [r3, #28]
 8005fae:	4b59      	ldr	r3, [pc, #356]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d908      	bls.n	8005fcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005fba:	4b56      	ldr	r3, [pc, #344]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	4953      	ldr	r1, [pc, #332]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d010      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	4b4d      	ldr	r3, [pc, #308]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d908      	bls.n	8005ffa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fe8:	4b4a      	ldr	r3, [pc, #296]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	f023 020f 	bic.w	r2, r3, #15
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	4947      	ldr	r1, [pc, #284]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d055      	beq.n	80060b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006006:	4b43      	ldr	r3, [pc, #268]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	4940      	ldr	r1, [pc, #256]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8006014:	4313      	orrs	r3, r2
 8006016:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d107      	bne.n	8006030 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006020:	4b3c      	ldr	r3, [pc, #240]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d121      	bne.n	8006070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e0f6      	b.n	800621e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b03      	cmp	r3, #3
 8006036:	d107      	bne.n	8006048 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006038:	4b36      	ldr	r3, [pc, #216]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d115      	bne.n	8006070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e0ea      	b.n	800621e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d107      	bne.n	8006060 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006050:	4b30      	ldr	r3, [pc, #192]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006058:	2b00      	cmp	r3, #0
 800605a:	d109      	bne.n	8006070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e0de      	b.n	800621e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006060:	4b2c      	ldr	r3, [pc, #176]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0d6      	b.n	800621e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006070:	4b28      	ldr	r3, [pc, #160]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f023 0207 	bic.w	r2, r3, #7
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	4925      	ldr	r1, [pc, #148]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 800607e:	4313      	orrs	r3, r2
 8006080:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006082:	f7fa ff6b 	bl	8000f5c <HAL_GetTick>
 8006086:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006088:	e00a      	b.n	80060a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800608a:	f7fa ff67 	bl	8000f5c <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006098:	4293      	cmp	r3, r2
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e0be      	b.n	800621e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d1eb      	bne.n	800608a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d010      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	4b14      	ldr	r3, [pc, #80]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	f003 030f 	and.w	r3, r3, #15
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d208      	bcs.n	80060e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060ce:	4b11      	ldr	r3, [pc, #68]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	f023 020f 	bic.w	r2, r3, #15
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	490e      	ldr	r1, [pc, #56]	@ (8006114 <HAL_RCC_ClockConfig+0x244>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006110 <HAL_RCC_ClockConfig+0x240>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 030f 	and.w	r3, r3, #15
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d214      	bcs.n	8006118 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ee:	4b08      	ldr	r3, [pc, #32]	@ (8006110 <HAL_RCC_ClockConfig+0x240>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f023 020f 	bic.w	r2, r3, #15
 80060f6:	4906      	ldr	r1, [pc, #24]	@ (8006110 <HAL_RCC_ClockConfig+0x240>)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060fe:	4b04      	ldr	r3, [pc, #16]	@ (8006110 <HAL_RCC_ClockConfig+0x240>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d005      	beq.n	8006118 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e086      	b.n	800621e <HAL_RCC_ClockConfig+0x34e>
 8006110:	52002000 	.word	0x52002000
 8006114:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d010      	beq.n	8006146 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691a      	ldr	r2, [r3, #16]
 8006128:	4b3f      	ldr	r3, [pc, #252]	@ (8006228 <HAL_RCC_ClockConfig+0x358>)
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006130:	429a      	cmp	r2, r3
 8006132:	d208      	bcs.n	8006146 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006134:	4b3c      	ldr	r3, [pc, #240]	@ (8006228 <HAL_RCC_ClockConfig+0x358>)
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	4939      	ldr	r1, [pc, #228]	@ (8006228 <HAL_RCC_ClockConfig+0x358>)
 8006142:	4313      	orrs	r3, r2
 8006144:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d010      	beq.n	8006174 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695a      	ldr	r2, [r3, #20]
 8006156:	4b34      	ldr	r3, [pc, #208]	@ (8006228 <HAL_RCC_ClockConfig+0x358>)
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800615e:	429a      	cmp	r2, r3
 8006160:	d208      	bcs.n	8006174 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006162:	4b31      	ldr	r3, [pc, #196]	@ (8006228 <HAL_RCC_ClockConfig+0x358>)
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	492e      	ldr	r1, [pc, #184]	@ (8006228 <HAL_RCC_ClockConfig+0x358>)
 8006170:	4313      	orrs	r3, r2
 8006172:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0310 	and.w	r3, r3, #16
 800617c:	2b00      	cmp	r3, #0
 800617e:	d010      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	699a      	ldr	r2, [r3, #24]
 8006184:	4b28      	ldr	r3, [pc, #160]	@ (8006228 <HAL_RCC_ClockConfig+0x358>)
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800618c:	429a      	cmp	r2, r3
 800618e:	d208      	bcs.n	80061a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006190:	4b25      	ldr	r3, [pc, #148]	@ (8006228 <HAL_RCC_ClockConfig+0x358>)
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	4922      	ldr	r1, [pc, #136]	@ (8006228 <HAL_RCC_ClockConfig+0x358>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d010      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69da      	ldr	r2, [r3, #28]
 80061b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006228 <HAL_RCC_ClockConfig+0x358>)
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d208      	bcs.n	80061d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80061be:	4b1a      	ldr	r3, [pc, #104]	@ (8006228 <HAL_RCC_ClockConfig+0x358>)
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	4917      	ldr	r1, [pc, #92]	@ (8006228 <HAL_RCC_ClockConfig+0x358>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061d0:	f000 f834 	bl	800623c <HAL_RCC_GetSysClockFreq>
 80061d4:	4602      	mov	r2, r0
 80061d6:	4b14      	ldr	r3, [pc, #80]	@ (8006228 <HAL_RCC_ClockConfig+0x358>)
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	0a1b      	lsrs	r3, r3, #8
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	4912      	ldr	r1, [pc, #72]	@ (800622c <HAL_RCC_ClockConfig+0x35c>)
 80061e2:	5ccb      	ldrb	r3, [r1, r3]
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006228 <HAL_RCC_ClockConfig+0x358>)
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	4a0d      	ldr	r2, [pc, #52]	@ (800622c <HAL_RCC_ClockConfig+0x35c>)
 80061f8:	5cd3      	ldrb	r3, [r2, r3]
 80061fa:	f003 031f 	and.w	r3, r3, #31
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	fa22 f303 	lsr.w	r3, r2, r3
 8006204:	4a0a      	ldr	r2, [pc, #40]	@ (8006230 <HAL_RCC_ClockConfig+0x360>)
 8006206:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006208:	4a0a      	ldr	r2, [pc, #40]	@ (8006234 <HAL_RCC_ClockConfig+0x364>)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800620e:	4b0a      	ldr	r3, [pc, #40]	@ (8006238 <HAL_RCC_ClockConfig+0x368>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f7fa fe58 	bl	8000ec8 <HAL_InitTick>
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	58024400 	.word	0x58024400
 800622c:	080095d8 	.word	0x080095d8
 8006230:	24000008 	.word	0x24000008
 8006234:	24000004 	.word	0x24000004
 8006238:	2400000c 	.word	0x2400000c

0800623c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800623c:	b480      	push	{r7}
 800623e:	b089      	sub	sp, #36	@ 0x24
 8006240:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006242:	4bb3      	ldr	r3, [pc, #716]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800624a:	2b18      	cmp	r3, #24
 800624c:	f200 8155 	bhi.w	80064fa <HAL_RCC_GetSysClockFreq+0x2be>
 8006250:	a201      	add	r2, pc, #4	@ (adr r2, 8006258 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006256:	bf00      	nop
 8006258:	080062bd 	.word	0x080062bd
 800625c:	080064fb 	.word	0x080064fb
 8006260:	080064fb 	.word	0x080064fb
 8006264:	080064fb 	.word	0x080064fb
 8006268:	080064fb 	.word	0x080064fb
 800626c:	080064fb 	.word	0x080064fb
 8006270:	080064fb 	.word	0x080064fb
 8006274:	080064fb 	.word	0x080064fb
 8006278:	080062e3 	.word	0x080062e3
 800627c:	080064fb 	.word	0x080064fb
 8006280:	080064fb 	.word	0x080064fb
 8006284:	080064fb 	.word	0x080064fb
 8006288:	080064fb 	.word	0x080064fb
 800628c:	080064fb 	.word	0x080064fb
 8006290:	080064fb 	.word	0x080064fb
 8006294:	080064fb 	.word	0x080064fb
 8006298:	080062e9 	.word	0x080062e9
 800629c:	080064fb 	.word	0x080064fb
 80062a0:	080064fb 	.word	0x080064fb
 80062a4:	080064fb 	.word	0x080064fb
 80062a8:	080064fb 	.word	0x080064fb
 80062ac:	080064fb 	.word	0x080064fb
 80062b0:	080064fb 	.word	0x080064fb
 80062b4:	080064fb 	.word	0x080064fb
 80062b8:	080062ef 	.word	0x080062ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062bc:	4b94      	ldr	r3, [pc, #592]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d009      	beq.n	80062dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062c8:	4b91      	ldr	r3, [pc, #580]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	08db      	lsrs	r3, r3, #3
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	4a90      	ldr	r2, [pc, #576]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062d4:	fa22 f303 	lsr.w	r3, r2, r3
 80062d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80062da:	e111      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80062dc:	4b8d      	ldr	r3, [pc, #564]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062de:	61bb      	str	r3, [r7, #24]
      break;
 80062e0:	e10e      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80062e2:	4b8d      	ldr	r3, [pc, #564]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80062e4:	61bb      	str	r3, [r7, #24]
      break;
 80062e6:	e10b      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80062e8:	4b8c      	ldr	r3, [pc, #560]	@ (800651c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80062ea:	61bb      	str	r3, [r7, #24]
      break;
 80062ec:	e108      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062ee:	4b88      	ldr	r3, [pc, #544]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80062f8:	4b85      	ldr	r3, [pc, #532]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fc:	091b      	lsrs	r3, r3, #4
 80062fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006302:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006304:	4b82      	ldr	r3, [pc, #520]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800630e:	4b80      	ldr	r3, [pc, #512]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006312:	08db      	lsrs	r3, r3, #3
 8006314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	fb02 f303 	mul.w	r3, r2, r3
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006326:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 80e1 	beq.w	80064f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b02      	cmp	r3, #2
 8006336:	f000 8083 	beq.w	8006440 <HAL_RCC_GetSysClockFreq+0x204>
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b02      	cmp	r3, #2
 800633e:	f200 80a1 	bhi.w	8006484 <HAL_RCC_GetSysClockFreq+0x248>
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_RCC_GetSysClockFreq+0x114>
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d056      	beq.n	80063fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800634e:	e099      	b.n	8006484 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006350:	4b6f      	ldr	r3, [pc, #444]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0320 	and.w	r3, r3, #32
 8006358:	2b00      	cmp	r3, #0
 800635a:	d02d      	beq.n	80063b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800635c:	4b6c      	ldr	r3, [pc, #432]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	08db      	lsrs	r3, r3, #3
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	4a6b      	ldr	r2, [pc, #428]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006368:	fa22 f303 	lsr.w	r3, r2, r3
 800636c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	ee07 3a90 	vmov	s15, r3
 8006374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006386:	4b62      	ldr	r3, [pc, #392]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006396:	ed97 6a02 	vldr	s12, [r7, #8]
 800639a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006520 <HAL_RCC_GetSysClockFreq+0x2e4>
 800639e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80063b6:	e087      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	ee07 3a90 	vmov	s15, r3
 80063be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006524 <HAL_RCC_GetSysClockFreq+0x2e8>
 80063c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ca:	4b51      	ldr	r3, [pc, #324]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063da:	ed97 6a02 	vldr	s12, [r7, #8]
 80063de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006520 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063fa:	e065      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006406:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006528 <HAL_RCC_GetSysClockFreq+0x2ec>
 800640a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800640e:	4b40      	ldr	r3, [pc, #256]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800641e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006422:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006520 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800642a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800642e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800643a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800643e:	e043      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800652c <HAL_RCC_GetSysClockFreq+0x2f0>
 800644e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006452:	4b2f      	ldr	r3, [pc, #188]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800645a:	ee07 3a90 	vmov	s15, r3
 800645e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006462:	ed97 6a02 	vldr	s12, [r7, #8]
 8006466:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006520 <HAL_RCC_GetSysClockFreq+0x2e4>
 800646a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800646e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800647a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800647e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006482:	e021      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006528 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006496:	4b1e      	ldr	r3, [pc, #120]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800649a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80064aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006520 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80064c8:	4b11      	ldr	r3, [pc, #68]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064cc:	0a5b      	lsrs	r3, r3, #9
 80064ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064d2:	3301      	adds	r3, #1
 80064d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	ee07 3a90 	vmov	s15, r3
 80064dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80064e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ec:	ee17 3a90 	vmov	r3, s15
 80064f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80064f2:	e005      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61bb      	str	r3, [r7, #24]
      break;
 80064f8:	e002      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80064fa:	4b07      	ldr	r3, [pc, #28]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80064fc:	61bb      	str	r3, [r7, #24]
      break;
 80064fe:	bf00      	nop
  }

  return sysclockfreq;
 8006500:	69bb      	ldr	r3, [r7, #24]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3724      	adds	r7, #36	@ 0x24
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	58024400 	.word	0x58024400
 8006514:	03d09000 	.word	0x03d09000
 8006518:	003d0900 	.word	0x003d0900
 800651c:	017d7840 	.word	0x017d7840
 8006520:	46000000 	.word	0x46000000
 8006524:	4c742400 	.word	0x4c742400
 8006528:	4a742400 	.word	0x4a742400
 800652c:	4bbebc20 	.word	0x4bbebc20

08006530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006536:	f7ff fe81 	bl	800623c <HAL_RCC_GetSysClockFreq>
 800653a:	4602      	mov	r2, r0
 800653c:	4b10      	ldr	r3, [pc, #64]	@ (8006580 <HAL_RCC_GetHCLKFreq+0x50>)
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	0a1b      	lsrs	r3, r3, #8
 8006542:	f003 030f 	and.w	r3, r3, #15
 8006546:	490f      	ldr	r1, [pc, #60]	@ (8006584 <HAL_RCC_GetHCLKFreq+0x54>)
 8006548:	5ccb      	ldrb	r3, [r1, r3]
 800654a:	f003 031f 	and.w	r3, r3, #31
 800654e:	fa22 f303 	lsr.w	r3, r2, r3
 8006552:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006554:	4b0a      	ldr	r3, [pc, #40]	@ (8006580 <HAL_RCC_GetHCLKFreq+0x50>)
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	4a09      	ldr	r2, [pc, #36]	@ (8006584 <HAL_RCC_GetHCLKFreq+0x54>)
 800655e:	5cd3      	ldrb	r3, [r2, r3]
 8006560:	f003 031f 	and.w	r3, r3, #31
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	fa22 f303 	lsr.w	r3, r2, r3
 800656a:	4a07      	ldr	r2, [pc, #28]	@ (8006588 <HAL_RCC_GetHCLKFreq+0x58>)
 800656c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800656e:	4a07      	ldr	r2, [pc, #28]	@ (800658c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006574:	4b04      	ldr	r3, [pc, #16]	@ (8006588 <HAL_RCC_GetHCLKFreq+0x58>)
 8006576:	681b      	ldr	r3, [r3, #0]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	58024400 	.word	0x58024400
 8006584:	080095d8 	.word	0x080095d8
 8006588:	24000008 	.word	0x24000008
 800658c:	24000004 	.word	0x24000004

08006590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006594:	f7ff ffcc 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 8006598:	4602      	mov	r2, r0
 800659a:	4b06      	ldr	r3, [pc, #24]	@ (80065b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	091b      	lsrs	r3, r3, #4
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	4904      	ldr	r1, [pc, #16]	@ (80065b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80065a6:	5ccb      	ldrb	r3, [r1, r3]
 80065a8:	f003 031f 	and.w	r3, r3, #31
 80065ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	58024400 	.word	0x58024400
 80065b8:	080095d8 	.word	0x080095d8

080065bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065c0:	b0c6      	sub	sp, #280	@ 0x118
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065c8:	2300      	movs	r3, #0
 80065ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065ce:	2300      	movs	r3, #0
 80065d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80065e0:	2500      	movs	r5, #0
 80065e2:	ea54 0305 	orrs.w	r3, r4, r5
 80065e6:	d049      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065f2:	d02f      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80065f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065f8:	d828      	bhi.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80065fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065fe:	d01a      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006600:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006604:	d822      	bhi.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800660a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800660e:	d007      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006610:	e01c      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006612:	4bab      	ldr	r3, [pc, #684]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006616:	4aaa      	ldr	r2, [pc, #680]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800661c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800661e:	e01a      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006624:	3308      	adds	r3, #8
 8006626:	2102      	movs	r1, #2
 8006628:	4618      	mov	r0, r3
 800662a:	f002 fa49 	bl	8008ac0 <RCCEx_PLL2_Config>
 800662e:	4603      	mov	r3, r0
 8006630:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006634:	e00f      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663a:	3328      	adds	r3, #40	@ 0x28
 800663c:	2102      	movs	r1, #2
 800663e:	4618      	mov	r0, r3
 8006640:	f002 faf0 	bl	8008c24 <RCCEx_PLL3_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800664a:	e004      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006652:	e000      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006656:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10a      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800665e:	4b98      	ldr	r3, [pc, #608]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006662:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800666c:	4a94      	ldr	r2, [pc, #592]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800666e:	430b      	orrs	r3, r1
 8006670:	6513      	str	r3, [r2, #80]	@ 0x50
 8006672:	e003      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006678:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800667c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006688:	f04f 0900 	mov.w	r9, #0
 800668c:	ea58 0309 	orrs.w	r3, r8, r9
 8006690:	d047      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006698:	2b04      	cmp	r3, #4
 800669a:	d82a      	bhi.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800669c:	a201      	add	r2, pc, #4	@ (adr r2, 80066a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	080066b9 	.word	0x080066b9
 80066a8:	080066c7 	.word	0x080066c7
 80066ac:	080066dd 	.word	0x080066dd
 80066b0:	080066fb 	.word	0x080066fb
 80066b4:	080066fb 	.word	0x080066fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b8:	4b81      	ldr	r3, [pc, #516]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066bc:	4a80      	ldr	r2, [pc, #512]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066c4:	e01a      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ca:	3308      	adds	r3, #8
 80066cc:	2100      	movs	r1, #0
 80066ce:	4618      	mov	r0, r3
 80066d0:	f002 f9f6 	bl	8008ac0 <RCCEx_PLL2_Config>
 80066d4:	4603      	mov	r3, r0
 80066d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066da:	e00f      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e0:	3328      	adds	r3, #40	@ 0x28
 80066e2:	2100      	movs	r1, #0
 80066e4:	4618      	mov	r0, r3
 80066e6:	f002 fa9d 	bl	8008c24 <RCCEx_PLL3_Config>
 80066ea:	4603      	mov	r3, r0
 80066ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066f0:	e004      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066f8:	e000      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80066fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10a      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006704:	4b6e      	ldr	r3, [pc, #440]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006708:	f023 0107 	bic.w	r1, r3, #7
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006712:	4a6b      	ldr	r2, [pc, #428]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006714:	430b      	orrs	r3, r1
 8006716:	6513      	str	r3, [r2, #80]	@ 0x50
 8006718:	e003      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800671e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800672e:	f04f 0b00 	mov.w	fp, #0
 8006732:	ea5a 030b 	orrs.w	r3, sl, fp
 8006736:	d05b      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006740:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006744:	d03b      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006746:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800674a:	d834      	bhi.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800674c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006750:	d037      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006752:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006756:	d82e      	bhi.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006758:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800675c:	d033      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800675e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006762:	d828      	bhi.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006764:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006768:	d01a      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800676a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800676e:	d822      	bhi.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006774:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006778:	d007      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800677a:	e01c      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800677c:	4b50      	ldr	r3, [pc, #320]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800677e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006780:	4a4f      	ldr	r2, [pc, #316]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006786:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006788:	e01e      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800678e:	3308      	adds	r3, #8
 8006790:	2100      	movs	r1, #0
 8006792:	4618      	mov	r0, r3
 8006794:	f002 f994 	bl	8008ac0 <RCCEx_PLL2_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800679e:	e013      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a4:	3328      	adds	r3, #40	@ 0x28
 80067a6:	2100      	movs	r1, #0
 80067a8:	4618      	mov	r0, r3
 80067aa:	f002 fa3b 	bl	8008c24 <RCCEx_PLL3_Config>
 80067ae:	4603      	mov	r3, r0
 80067b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067b4:	e008      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067bc:	e004      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80067be:	bf00      	nop
 80067c0:	e002      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80067c2:	bf00      	nop
 80067c4:	e000      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80067c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10b      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80067d0:	4b3b      	ldr	r3, [pc, #236]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80067d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067e0:	4a37      	ldr	r2, [pc, #220]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067e2:	430b      	orrs	r3, r1
 80067e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80067e6:	e003      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80067f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80067fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006800:	2300      	movs	r3, #0
 8006802:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006806:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800680a:	460b      	mov	r3, r1
 800680c:	4313      	orrs	r3, r2
 800680e:	d05d      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006814:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006818:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800681c:	d03b      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800681e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006822:	d834      	bhi.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006824:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006828:	d037      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800682a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800682e:	d82e      	bhi.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006830:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006834:	d033      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006836:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800683a:	d828      	bhi.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800683c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006840:	d01a      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006842:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006846:	d822      	bhi.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800684c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006850:	d007      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006852:	e01c      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006854:	4b1a      	ldr	r3, [pc, #104]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006858:	4a19      	ldr	r2, [pc, #100]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800685a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800685e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006860:	e01e      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006866:	3308      	adds	r3, #8
 8006868:	2100      	movs	r1, #0
 800686a:	4618      	mov	r0, r3
 800686c:	f002 f928 	bl	8008ac0 <RCCEx_PLL2_Config>
 8006870:	4603      	mov	r3, r0
 8006872:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006876:	e013      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687c:	3328      	adds	r3, #40	@ 0x28
 800687e:	2100      	movs	r1, #0
 8006880:	4618      	mov	r0, r3
 8006882:	f002 f9cf 	bl	8008c24 <RCCEx_PLL3_Config>
 8006886:	4603      	mov	r3, r0
 8006888:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800688c:	e008      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006894:	e004      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006896:	bf00      	nop
 8006898:	e002      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800689a:	bf00      	nop
 800689c:	e000      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800689e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10d      	bne.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80068a8:	4b05      	ldr	r3, [pc, #20]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80068b8:	4a01      	ldr	r2, [pc, #4]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068ba:	430b      	orrs	r3, r1
 80068bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80068be:	e005      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80068c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80068cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80068d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80068dc:	2300      	movs	r3, #0
 80068de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80068e2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4313      	orrs	r3, r2
 80068ea:	d03a      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80068ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068f2:	2b30      	cmp	r3, #48	@ 0x30
 80068f4:	d01f      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80068f6:	2b30      	cmp	r3, #48	@ 0x30
 80068f8:	d819      	bhi.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	d00c      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80068fe:	2b20      	cmp	r3, #32
 8006900:	d815      	bhi.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d019      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006906:	2b10      	cmp	r3, #16
 8006908:	d111      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800690a:	4baa      	ldr	r3, [pc, #680]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800690c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690e:	4aa9      	ldr	r2, [pc, #676]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006914:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006916:	e011      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691c:	3308      	adds	r3, #8
 800691e:	2102      	movs	r1, #2
 8006920:	4618      	mov	r0, r3
 8006922:	f002 f8cd 	bl	8008ac0 <RCCEx_PLL2_Config>
 8006926:	4603      	mov	r3, r0
 8006928:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800692c:	e006      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006934:	e002      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006936:	bf00      	nop
 8006938:	e000      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800693a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800693c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006944:	4b9b      	ldr	r3, [pc, #620]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006948:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800694c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006952:	4a98      	ldr	r2, [pc, #608]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006954:	430b      	orrs	r3, r1
 8006956:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006958:	e003      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800695e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800696e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006972:	2300      	movs	r3, #0
 8006974:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006978:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800697c:	460b      	mov	r3, r1
 800697e:	4313      	orrs	r3, r2
 8006980:	d051      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006988:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800698c:	d035      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800698e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006992:	d82e      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006994:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006998:	d031      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x442>
 800699a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800699e:	d828      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80069a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069a4:	d01a      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x420>
 80069a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069aa:	d822      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d003      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80069b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069b4:	d007      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80069b6:	e01c      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b8:	4b7e      	ldr	r3, [pc, #504]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069bc:	4a7d      	ldr	r2, [pc, #500]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069c4:	e01c      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ca:	3308      	adds	r3, #8
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f002 f876 	bl	8008ac0 <RCCEx_PLL2_Config>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069da:	e011      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e0:	3328      	adds	r3, #40	@ 0x28
 80069e2:	2100      	movs	r1, #0
 80069e4:	4618      	mov	r0, r3
 80069e6:	f002 f91d 	bl	8008c24 <RCCEx_PLL3_Config>
 80069ea:	4603      	mov	r3, r0
 80069ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069f0:	e006      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069f8:	e002      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80069fa:	bf00      	nop
 80069fc:	e000      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80069fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10a      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a08:	4b6a      	ldr	r3, [pc, #424]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a16:	4a67      	ldr	r2, [pc, #412]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a1c:	e003      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006a32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a36:	2300      	movs	r3, #0
 8006a38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a3c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006a40:	460b      	mov	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	d053      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a50:	d033      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006a52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a56:	d82c      	bhi.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a5c:	d02f      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006a5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a62:	d826      	bhi.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a68:	d02b      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006a6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a6e:	d820      	bhi.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a74:	d012      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006a76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a7a:	d81a      	bhi.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d022      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a84:	d115      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f002 f816 	bl	8008ac0 <RCCEx_PLL2_Config>
 8006a94:	4603      	mov	r3, r0
 8006a96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a9a:	e015      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa0:	3328      	adds	r3, #40	@ 0x28
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f002 f8bd 	bl	8008c24 <RCCEx_PLL3_Config>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ab0:	e00a      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ab8:	e006      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006aba:	bf00      	nop
 8006abc:	e004      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006abe:	bf00      	nop
 8006ac0:	e002      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006ac2:	bf00      	nop
 8006ac4:	e000      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006ad0:	4b38      	ldr	r3, [pc, #224]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ade:	4a35      	ldr	r2, [pc, #212]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ae4:	e003      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006afa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006afe:	2300      	movs	r3, #0
 8006b00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b04:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	d058      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b1a:	d033      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b20:	d82c      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b26:	d02f      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b2c:	d826      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006b2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b32:	d02b      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006b34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b38:	d820      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006b3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b3e:	d012      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006b40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b44:	d81a      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d022      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006b4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b4e:	d115      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	3308      	adds	r3, #8
 8006b56:	2101      	movs	r1, #1
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f001 ffb1 	bl	8008ac0 <RCCEx_PLL2_Config>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b64:	e015      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6a:	3328      	adds	r3, #40	@ 0x28
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f002 f858 	bl	8008c24 <RCCEx_PLL3_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b7a:	e00a      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b82:	e006      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b84:	bf00      	nop
 8006b86:	e004      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b88:	bf00      	nop
 8006b8a:	e002      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b8c:	bf00      	nop
 8006b8e:	e000      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10e      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006b9a:	4b06      	ldr	r3, [pc, #24]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b9e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006baa:	4a02      	ldr	r2, [pc, #8]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bb0:	e006      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006bb2:	bf00      	nop
 8006bb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006bd6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	d037      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bea:	d00e      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006bec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bf0:	d816      	bhi.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d018      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006bf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bfa:	d111      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bfc:	4bc4      	ldr	r3, [pc, #784]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c00:	4ac3      	ldr	r2, [pc, #780]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c08:	e00f      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0e:	3308      	adds	r3, #8
 8006c10:	2101      	movs	r1, #1
 8006c12:	4618      	mov	r0, r3
 8006c14:	f001 ff54 	bl	8008ac0 <RCCEx_PLL2_Config>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c1e:	e004      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c26:	e000      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c32:	4bb7      	ldr	r3, [pc, #732]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c36:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c40:	4ab3      	ldr	r2, [pc, #716]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c42:	430b      	orrs	r3, r1
 8006c44:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c46:	e003      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006c5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c60:	2300      	movs	r3, #0
 8006c62:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	d039      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d81c      	bhi.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c80:	08006cbd 	.word	0x08006cbd
 8006c84:	08006c91 	.word	0x08006c91
 8006c88:	08006c9f 	.word	0x08006c9f
 8006c8c:	08006cbd 	.word	0x08006cbd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c90:	4b9f      	ldr	r3, [pc, #636]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c94:	4a9e      	ldr	r2, [pc, #632]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c9c:	e00f      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	2102      	movs	r1, #2
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f001 ff0a 	bl	8008ac0 <RCCEx_PLL2_Config>
 8006cac:	4603      	mov	r3, r0
 8006cae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006cb2:	e004      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cba:	e000      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10a      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006cc6:	4b92      	ldr	r3, [pc, #584]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cca:	f023 0103 	bic.w	r1, r3, #3
 8006cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cd4:	4a8e      	ldr	r2, [pc, #568]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cd6:	430b      	orrs	r3, r1
 8006cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006cda:	e003      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ce0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006cf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cfa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4313      	orrs	r3, r2
 8006d02:	f000 8099 	beq.w	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d06:	4b83      	ldr	r3, [pc, #524]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a82      	ldr	r2, [pc, #520]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d12:	f7fa f923 	bl	8000f5c <HAL_GetTick>
 8006d16:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d1a:	e00b      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d1c:	f7fa f91e 	bl	8000f5c <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b64      	cmp	r3, #100	@ 0x64
 8006d2a:	d903      	bls.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d32:	e005      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d34:	4b77      	ldr	r3, [pc, #476]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0ed      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006d40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d173      	bne.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d48:	4b71      	ldr	r3, [pc, #452]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d54:	4053      	eors	r3, r2
 8006d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d015      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d5e:	4b6c      	ldr	r3, [pc, #432]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d66:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d6a:	4b69      	ldr	r3, [pc, #420]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d6e:	4a68      	ldr	r2, [pc, #416]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d74:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d76:	4b66      	ldr	r3, [pc, #408]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d7a:	4a65      	ldr	r2, [pc, #404]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d80:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d82:	4a63      	ldr	r2, [pc, #396]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d88:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d96:	d118      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d98:	f7fa f8e0 	bl	8000f5c <HAL_GetTick>
 8006d9c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006da0:	e00d      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006da2:	f7fa f8db 	bl	8000f5c <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006dac:	1ad2      	subs	r2, r2, r3
 8006dae:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d903      	bls.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006dbc:	e005      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dbe:	4b54      	ldr	r3, [pc, #336]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0eb      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006dca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d129      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006de2:	d10e      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006de4:	4b4a      	ldr	r3, [pc, #296]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006df4:	091a      	lsrs	r2, r3, #4
 8006df6:	4b48      	ldr	r3, [pc, #288]	@ (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	4a45      	ldr	r2, [pc, #276]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dfc:	430b      	orrs	r3, r1
 8006dfe:	6113      	str	r3, [r2, #16]
 8006e00:	e005      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006e02:	4b43      	ldr	r3, [pc, #268]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	4a42      	ldr	r2, [pc, #264]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e0c:	6113      	str	r3, [r2, #16]
 8006e0e:	4b40      	ldr	r3, [pc, #256]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e10:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e1e:	4a3c      	ldr	r2, [pc, #240]	@ (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e20:	430b      	orrs	r3, r1
 8006e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e24:	e008      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006e2e:	e003      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f002 0301 	and.w	r3, r2, #1
 8006e44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e4e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006e52:	460b      	mov	r3, r1
 8006e54:	4313      	orrs	r3, r2
 8006e56:	f000 808f 	beq.w	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e60:	2b28      	cmp	r3, #40	@ 0x28
 8006e62:	d871      	bhi.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006e64:	a201      	add	r2, pc, #4	@ (adr r2, 8006e6c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6a:	bf00      	nop
 8006e6c:	08006f51 	.word	0x08006f51
 8006e70:	08006f49 	.word	0x08006f49
 8006e74:	08006f49 	.word	0x08006f49
 8006e78:	08006f49 	.word	0x08006f49
 8006e7c:	08006f49 	.word	0x08006f49
 8006e80:	08006f49 	.word	0x08006f49
 8006e84:	08006f49 	.word	0x08006f49
 8006e88:	08006f49 	.word	0x08006f49
 8006e8c:	08006f1d 	.word	0x08006f1d
 8006e90:	08006f49 	.word	0x08006f49
 8006e94:	08006f49 	.word	0x08006f49
 8006e98:	08006f49 	.word	0x08006f49
 8006e9c:	08006f49 	.word	0x08006f49
 8006ea0:	08006f49 	.word	0x08006f49
 8006ea4:	08006f49 	.word	0x08006f49
 8006ea8:	08006f49 	.word	0x08006f49
 8006eac:	08006f33 	.word	0x08006f33
 8006eb0:	08006f49 	.word	0x08006f49
 8006eb4:	08006f49 	.word	0x08006f49
 8006eb8:	08006f49 	.word	0x08006f49
 8006ebc:	08006f49 	.word	0x08006f49
 8006ec0:	08006f49 	.word	0x08006f49
 8006ec4:	08006f49 	.word	0x08006f49
 8006ec8:	08006f49 	.word	0x08006f49
 8006ecc:	08006f51 	.word	0x08006f51
 8006ed0:	08006f49 	.word	0x08006f49
 8006ed4:	08006f49 	.word	0x08006f49
 8006ed8:	08006f49 	.word	0x08006f49
 8006edc:	08006f49 	.word	0x08006f49
 8006ee0:	08006f49 	.word	0x08006f49
 8006ee4:	08006f49 	.word	0x08006f49
 8006ee8:	08006f49 	.word	0x08006f49
 8006eec:	08006f51 	.word	0x08006f51
 8006ef0:	08006f49 	.word	0x08006f49
 8006ef4:	08006f49 	.word	0x08006f49
 8006ef8:	08006f49 	.word	0x08006f49
 8006efc:	08006f49 	.word	0x08006f49
 8006f00:	08006f49 	.word	0x08006f49
 8006f04:	08006f49 	.word	0x08006f49
 8006f08:	08006f49 	.word	0x08006f49
 8006f0c:	08006f51 	.word	0x08006f51
 8006f10:	58024400 	.word	0x58024400
 8006f14:	58024800 	.word	0x58024800
 8006f18:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f20:	3308      	adds	r3, #8
 8006f22:	2101      	movs	r1, #1
 8006f24:	4618      	mov	r0, r3
 8006f26:	f001 fdcb 	bl	8008ac0 <RCCEx_PLL2_Config>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f30:	e00f      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f36:	3328      	adds	r3, #40	@ 0x28
 8006f38:	2101      	movs	r1, #1
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f001 fe72 	bl	8008c24 <RCCEx_PLL3_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f46:	e004      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f4e:	e000      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10a      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006f5a:	4bbf      	ldr	r3, [pc, #764]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f5e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f68:	4abb      	ldr	r2, [pc, #748]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f6a:	430b      	orrs	r3, r1
 8006f6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f6e:	e003      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f002 0302 	and.w	r3, r2, #2
 8006f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f8e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4313      	orrs	r3, r2
 8006f96:	d041      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f9e:	2b05      	cmp	r3, #5
 8006fa0:	d824      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006ff5 	.word	0x08006ff5
 8006fac:	08006fc1 	.word	0x08006fc1
 8006fb0:	08006fd7 	.word	0x08006fd7
 8006fb4:	08006ff5 	.word	0x08006ff5
 8006fb8:	08006ff5 	.word	0x08006ff5
 8006fbc:	08006ff5 	.word	0x08006ff5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 fd79 	bl	8008ac0 <RCCEx_PLL2_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006fd4:	e00f      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fda:	3328      	adds	r3, #40	@ 0x28
 8006fdc:	2101      	movs	r1, #1
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 fe20 	bl	8008c24 <RCCEx_PLL3_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006fea:	e004      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ff2:	e000      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ffe:	4b96      	ldr	r3, [pc, #600]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007002:	f023 0107 	bic.w	r1, r3, #7
 8007006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800700c:	4a92      	ldr	r2, [pc, #584]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800700e:	430b      	orrs	r3, r1
 8007010:	6553      	str	r3, [r2, #84]	@ 0x54
 8007012:	e003      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007014:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007018:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800701c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f002 0304 	and.w	r3, r2, #4
 8007028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800702c:	2300      	movs	r3, #0
 800702e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007032:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007036:	460b      	mov	r3, r1
 8007038:	4313      	orrs	r3, r2
 800703a:	d044      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800703c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007044:	2b05      	cmp	r3, #5
 8007046:	d825      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007048:	a201      	add	r2, pc, #4	@ (adr r2, 8007050 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800704a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704e:	bf00      	nop
 8007050:	0800709d 	.word	0x0800709d
 8007054:	08007069 	.word	0x08007069
 8007058:	0800707f 	.word	0x0800707f
 800705c:	0800709d 	.word	0x0800709d
 8007060:	0800709d 	.word	0x0800709d
 8007064:	0800709d 	.word	0x0800709d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706c:	3308      	adds	r3, #8
 800706e:	2101      	movs	r1, #1
 8007070:	4618      	mov	r0, r3
 8007072:	f001 fd25 	bl	8008ac0 <RCCEx_PLL2_Config>
 8007076:	4603      	mov	r3, r0
 8007078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800707c:	e00f      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800707e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007082:	3328      	adds	r3, #40	@ 0x28
 8007084:	2101      	movs	r1, #1
 8007086:	4618      	mov	r0, r3
 8007088:	f001 fdcc 	bl	8008c24 <RCCEx_PLL3_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007092:	e004      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800709a:	e000      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800709c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800709e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10b      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070a6:	4b6c      	ldr	r3, [pc, #432]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80070a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070aa:	f023 0107 	bic.w	r1, r3, #7
 80070ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070b6:	4a68      	ldr	r2, [pc, #416]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80070b8:	430b      	orrs	r3, r1
 80070ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80070bc:	e003      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f002 0320 	and.w	r3, r2, #32
 80070d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070d6:	2300      	movs	r3, #0
 80070d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80070dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80070e0:	460b      	mov	r3, r1
 80070e2:	4313      	orrs	r3, r2
 80070e4:	d055      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80070e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070f2:	d033      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80070f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070f8:	d82c      	bhi.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80070fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070fe:	d02f      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007104:	d826      	bhi.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007106:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800710a:	d02b      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800710c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007110:	d820      	bhi.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007112:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007116:	d012      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800711c:	d81a      	bhi.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800711e:	2b00      	cmp	r3, #0
 8007120:	d022      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007126:	d115      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712c:	3308      	adds	r3, #8
 800712e:	2100      	movs	r1, #0
 8007130:	4618      	mov	r0, r3
 8007132:	f001 fcc5 	bl	8008ac0 <RCCEx_PLL2_Config>
 8007136:	4603      	mov	r3, r0
 8007138:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800713c:	e015      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800713e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007142:	3328      	adds	r3, #40	@ 0x28
 8007144:	2102      	movs	r1, #2
 8007146:	4618      	mov	r0, r3
 8007148:	f001 fd6c 	bl	8008c24 <RCCEx_PLL3_Config>
 800714c:	4603      	mov	r3, r0
 800714e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007152:	e00a      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800715a:	e006      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800715c:	bf00      	nop
 800715e:	e004      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007160:	bf00      	nop
 8007162:	e002      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007164:	bf00      	nop
 8007166:	e000      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800716a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10b      	bne.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007172:	4b39      	ldr	r3, [pc, #228]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007176:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800717a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007182:	4a35      	ldr	r2, [pc, #212]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007184:	430b      	orrs	r3, r1
 8007186:	6553      	str	r3, [r2, #84]	@ 0x54
 8007188:	e003      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800718e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800719e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071a2:	2300      	movs	r3, #0
 80071a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071a8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80071ac:	460b      	mov	r3, r1
 80071ae:	4313      	orrs	r3, r2
 80071b0:	d058      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80071b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80071be:	d033      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80071c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80071c4:	d82c      	bhi.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80071c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ca:	d02f      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80071cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d0:	d826      	bhi.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80071d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071d6:	d02b      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80071d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071dc:	d820      	bhi.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80071de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071e2:	d012      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80071e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071e8:	d81a      	bhi.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d022      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80071ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071f2:	d115      	bne.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f8:	3308      	adds	r3, #8
 80071fa:	2100      	movs	r1, #0
 80071fc:	4618      	mov	r0, r3
 80071fe:	f001 fc5f 	bl	8008ac0 <RCCEx_PLL2_Config>
 8007202:	4603      	mov	r3, r0
 8007204:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007208:	e015      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720e:	3328      	adds	r3, #40	@ 0x28
 8007210:	2102      	movs	r1, #2
 8007212:	4618      	mov	r0, r3
 8007214:	f001 fd06 	bl	8008c24 <RCCEx_PLL3_Config>
 8007218:	4603      	mov	r3, r0
 800721a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800721e:	e00a      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007226:	e006      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007228:	bf00      	nop
 800722a:	e004      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800722c:	bf00      	nop
 800722e:	e002      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007230:	bf00      	nop
 8007232:	e000      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007236:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10e      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800723e:	4b06      	ldr	r3, [pc, #24]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007242:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800724e:	4a02      	ldr	r2, [pc, #8]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007250:	430b      	orrs	r3, r1
 8007252:	6593      	str	r3, [r2, #88]	@ 0x58
 8007254:	e006      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007256:	bf00      	nop
 8007258:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800725c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007260:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007270:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007274:	2300      	movs	r3, #0
 8007276:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800727a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800727e:	460b      	mov	r3, r1
 8007280:	4313      	orrs	r3, r2
 8007282:	d055      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007288:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800728c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007290:	d033      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007292:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007296:	d82c      	bhi.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007298:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800729c:	d02f      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800729e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072a2:	d826      	bhi.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80072a4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80072a8:	d02b      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80072aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80072ae:	d820      	bhi.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80072b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072b4:	d012      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80072b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072ba:	d81a      	bhi.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d022      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80072c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072c4:	d115      	bne.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ca:	3308      	adds	r3, #8
 80072cc:	2100      	movs	r1, #0
 80072ce:	4618      	mov	r0, r3
 80072d0:	f001 fbf6 	bl	8008ac0 <RCCEx_PLL2_Config>
 80072d4:	4603      	mov	r3, r0
 80072d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80072da:	e015      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e0:	3328      	adds	r3, #40	@ 0x28
 80072e2:	2102      	movs	r1, #2
 80072e4:	4618      	mov	r0, r3
 80072e6:	f001 fc9d 	bl	8008c24 <RCCEx_PLL3_Config>
 80072ea:	4603      	mov	r3, r0
 80072ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80072f0:	e00a      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072f8:	e006      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80072fa:	bf00      	nop
 80072fc:	e004      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80072fe:	bf00      	nop
 8007300:	e002      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007302:	bf00      	nop
 8007304:	e000      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007308:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10b      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007310:	4ba0      	ldr	r3, [pc, #640]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007314:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007320:	4a9c      	ldr	r2, [pc, #624]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007322:	430b      	orrs	r3, r1
 8007324:	6593      	str	r3, [r2, #88]	@ 0x58
 8007326:	e003      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007328:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800732c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	f002 0308 	and.w	r3, r2, #8
 800733c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007340:	2300      	movs	r3, #0
 8007342:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007346:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800734a:	460b      	mov	r3, r1
 800734c:	4313      	orrs	r3, r2
 800734e:	d01e      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800735c:	d10c      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800735e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007362:	3328      	adds	r3, #40	@ 0x28
 8007364:	2102      	movs	r1, #2
 8007366:	4618      	mov	r0, r3
 8007368:	f001 fc5c 	bl	8008c24 <RCCEx_PLL3_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007378:	4b86      	ldr	r3, [pc, #536]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800737a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800737c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007388:	4a82      	ldr	r2, [pc, #520]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800738a:	430b      	orrs	r3, r1
 800738c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800738e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f002 0310 	and.w	r3, r2, #16
 800739a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800739e:	2300      	movs	r3, #0
 80073a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073a4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80073a8:	460b      	mov	r3, r1
 80073aa:	4313      	orrs	r3, r2
 80073ac:	d01e      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80073ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ba:	d10c      	bne.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80073bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c0:	3328      	adds	r3, #40	@ 0x28
 80073c2:	2102      	movs	r1, #2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f001 fc2d 	bl	8008c24 <RCCEx_PLL3_Config>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073d6:	4b6f      	ldr	r3, [pc, #444]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80073de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073e6:	4a6b      	ldr	r2, [pc, #428]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073e8:	430b      	orrs	r3, r1
 80073ea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80073f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073fa:	2300      	movs	r3, #0
 80073fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073fe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007402:	460b      	mov	r3, r1
 8007404:	4313      	orrs	r3, r2
 8007406:	d03e      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007414:	d022      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007416:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800741a:	d81b      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007424:	d00b      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007426:	e015      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800742c:	3308      	adds	r3, #8
 800742e:	2100      	movs	r1, #0
 8007430:	4618      	mov	r0, r3
 8007432:	f001 fb45 	bl	8008ac0 <RCCEx_PLL2_Config>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800743c:	e00f      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800743e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007442:	3328      	adds	r3, #40	@ 0x28
 8007444:	2102      	movs	r1, #2
 8007446:	4618      	mov	r0, r3
 8007448:	f001 fbec 	bl	8008c24 <RCCEx_PLL3_Config>
 800744c:	4603      	mov	r3, r0
 800744e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007452:	e004      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800745a:	e000      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800745c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800745e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10b      	bne.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007466:	4b4b      	ldr	r3, [pc, #300]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800746a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007476:	4a47      	ldr	r2, [pc, #284]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007478:	430b      	orrs	r3, r1
 800747a:	6593      	str	r3, [r2, #88]	@ 0x58
 800747c:	e003      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007482:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007492:	673b      	str	r3, [r7, #112]	@ 0x70
 8007494:	2300      	movs	r3, #0
 8007496:	677b      	str	r3, [r7, #116]	@ 0x74
 8007498:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800749c:	460b      	mov	r3, r1
 800749e:	4313      	orrs	r3, r2
 80074a0:	d03b      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80074a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074ae:	d01f      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80074b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074b4:	d818      	bhi.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80074b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074ba:	d003      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80074bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074c0:	d007      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80074c2:	e011      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c4:	4b33      	ldr	r3, [pc, #204]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c8:	4a32      	ldr	r2, [pc, #200]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80074d0:	e00f      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d6:	3328      	adds	r3, #40	@ 0x28
 80074d8:	2101      	movs	r1, #1
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 fba2 	bl	8008c24 <RCCEx_PLL3_Config>
 80074e0:	4603      	mov	r3, r0
 80074e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80074e6:	e004      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074ee:	e000      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80074f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10b      	bne.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074fa:	4b26      	ldr	r3, [pc, #152]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007506:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800750a:	4a22      	ldr	r2, [pc, #136]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800750c:	430b      	orrs	r3, r1
 800750e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007510:	e003      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007512:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007516:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800751a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007522:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007526:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007528:	2300      	movs	r3, #0
 800752a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800752c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007530:	460b      	mov	r3, r1
 8007532:	4313      	orrs	r3, r2
 8007534:	d034      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800753a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007544:	d007      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007546:	e011      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007548:	4b12      	ldr	r3, [pc, #72]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800754a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754c:	4a11      	ldr	r2, [pc, #68]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800754e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007554:	e00e      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755a:	3308      	adds	r3, #8
 800755c:	2102      	movs	r1, #2
 800755e:	4618      	mov	r0, r3
 8007560:	f001 faae 	bl	8008ac0 <RCCEx_PLL2_Config>
 8007564:	4603      	mov	r3, r0
 8007566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800756a:	e003      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007574:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10d      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800757c:	4b05      	ldr	r3, [pc, #20]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800757e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007580:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800758a:	4a02      	ldr	r2, [pc, #8]	@ (8007594 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800758c:	430b      	orrs	r3, r1
 800758e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007590:	e006      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007592:	bf00      	nop
 8007594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800759c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80075ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80075ae:	2300      	movs	r3, #0
 80075b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80075b2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80075b6:	460b      	mov	r3, r1
 80075b8:	4313      	orrs	r3, r2
 80075ba:	d00c      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c0:	3328      	adds	r3, #40	@ 0x28
 80075c2:	2102      	movs	r1, #2
 80075c4:	4618      	mov	r0, r3
 80075c6:	f001 fb2d 	bl	8008c24 <RCCEx_PLL3_Config>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80075e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075e4:	2300      	movs	r3, #0
 80075e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075e8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80075ec:	460b      	mov	r3, r1
 80075ee:	4313      	orrs	r3, r2
 80075f0:	d036      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80075f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075fc:	d018      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80075fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007602:	d811      	bhi.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007608:	d014      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800760a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800760e:	d80b      	bhi.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007610:	2b00      	cmp	r3, #0
 8007612:	d011      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007618:	d106      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800761a:	4bb7      	ldr	r3, [pc, #732]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800761c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761e:	4ab6      	ldr	r2, [pc, #728]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007624:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007626:	e008      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800762e:	e004      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007630:	bf00      	nop
 8007632:	e002      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007634:	bf00      	nop
 8007636:	e000      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800763a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10a      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007642:	4bad      	ldr	r3, [pc, #692]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007646:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800764a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007650:	4aa9      	ldr	r2, [pc, #676]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007652:	430b      	orrs	r3, r1
 8007654:	6553      	str	r3, [r2, #84]	@ 0x54
 8007656:	e003      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800765c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800766c:	653b      	str	r3, [r7, #80]	@ 0x50
 800766e:	2300      	movs	r3, #0
 8007670:	657b      	str	r3, [r7, #84]	@ 0x54
 8007672:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007676:	460b      	mov	r3, r1
 8007678:	4313      	orrs	r3, r2
 800767a:	d009      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800767c:	4b9e      	ldr	r3, [pc, #632]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800767e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007680:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800768a:	4a9b      	ldr	r2, [pc, #620]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800768c:	430b      	orrs	r3, r1
 800768e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007698:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800769c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800769e:	2300      	movs	r3, #0
 80076a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076a2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80076a6:	460b      	mov	r3, r1
 80076a8:	4313      	orrs	r3, r2
 80076aa:	d009      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076ac:	4b92      	ldr	r3, [pc, #584]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076b0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076ba:	4a8f      	ldr	r2, [pc, #572]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076bc:	430b      	orrs	r3, r1
 80076be:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80076c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80076cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80076ce:	2300      	movs	r3, #0
 80076d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80076d2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80076d6:	460b      	mov	r3, r1
 80076d8:	4313      	orrs	r3, r2
 80076da:	d00e      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076dc:	4b86      	ldr	r3, [pc, #536]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	4a85      	ldr	r2, [pc, #532]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80076e6:	6113      	str	r3, [r2, #16]
 80076e8:	4b83      	ldr	r3, [pc, #524]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076ea:	6919      	ldr	r1, [r3, #16]
 80076ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076f4:	4a80      	ldr	r2, [pc, #512]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076f6:	430b      	orrs	r3, r1
 80076f8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80076fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007706:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007708:	2300      	movs	r3, #0
 800770a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800770c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007710:	460b      	mov	r3, r1
 8007712:	4313      	orrs	r3, r2
 8007714:	d009      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007716:	4b78      	ldr	r3, [pc, #480]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800771a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800771e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007724:	4a74      	ldr	r2, [pc, #464]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007726:	430b      	orrs	r3, r1
 8007728:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800772a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007736:	633b      	str	r3, [r7, #48]	@ 0x30
 8007738:	2300      	movs	r3, #0
 800773a:	637b      	str	r3, [r7, #52]	@ 0x34
 800773c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007740:	460b      	mov	r3, r1
 8007742:	4313      	orrs	r3, r2
 8007744:	d00a      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007746:	4b6c      	ldr	r3, [pc, #432]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800774a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800774e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007756:	4a68      	ldr	r2, [pc, #416]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007758:	430b      	orrs	r3, r1
 800775a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800775c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	2100      	movs	r1, #0
 8007766:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800776e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007772:	460b      	mov	r3, r1
 8007774:	4313      	orrs	r3, r2
 8007776:	d011      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800777c:	3308      	adds	r3, #8
 800777e:	2100      	movs	r1, #0
 8007780:	4618      	mov	r0, r3
 8007782:	f001 f99d 	bl	8008ac0 <RCCEx_PLL2_Config>
 8007786:	4603      	mov	r3, r0
 8007788:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800778c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007794:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007798:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800779c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	2100      	movs	r1, #0
 80077a6:	6239      	str	r1, [r7, #32]
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80077ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80077b2:	460b      	mov	r3, r1
 80077b4:	4313      	orrs	r3, r2
 80077b6:	d011      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077bc:	3308      	adds	r3, #8
 80077be:	2101      	movs	r1, #1
 80077c0:	4618      	mov	r0, r3
 80077c2:	f001 f97d 	bl	8008ac0 <RCCEx_PLL2_Config>
 80077c6:	4603      	mov	r3, r0
 80077c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80077cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80077dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	2100      	movs	r1, #0
 80077e6:	61b9      	str	r1, [r7, #24]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	61fb      	str	r3, [r7, #28]
 80077ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80077f2:	460b      	mov	r3, r1
 80077f4:	4313      	orrs	r3, r2
 80077f6:	d011      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fc:	3308      	adds	r3, #8
 80077fe:	2102      	movs	r1, #2
 8007800:	4618      	mov	r0, r3
 8007802:	f001 f95d 	bl	8008ac0 <RCCEx_PLL2_Config>
 8007806:	4603      	mov	r3, r0
 8007808:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800780c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007814:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007818:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800781c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	2100      	movs	r1, #0
 8007826:	6139      	str	r1, [r7, #16]
 8007828:	f003 0308 	and.w	r3, r3, #8
 800782c:	617b      	str	r3, [r7, #20]
 800782e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007832:	460b      	mov	r3, r1
 8007834:	4313      	orrs	r3, r2
 8007836:	d011      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800783c:	3328      	adds	r3, #40	@ 0x28
 800783e:	2100      	movs	r1, #0
 8007840:	4618      	mov	r0, r3
 8007842:	f001 f9ef 	bl	8008c24 <RCCEx_PLL3_Config>
 8007846:	4603      	mov	r3, r0
 8007848:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800784c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007854:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007858:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800785c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	2100      	movs	r1, #0
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007872:	460b      	mov	r3, r1
 8007874:	4313      	orrs	r3, r2
 8007876:	d011      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787c:	3328      	adds	r3, #40	@ 0x28
 800787e:	2101      	movs	r1, #1
 8007880:	4618      	mov	r0, r3
 8007882:	f001 f9cf 	bl	8008c24 <RCCEx_PLL3_Config>
 8007886:	4603      	mov	r3, r0
 8007888:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800788c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007894:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007898:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	2100      	movs	r1, #0
 80078a6:	6039      	str	r1, [r7, #0]
 80078a8:	f003 0320 	and.w	r3, r3, #32
 80078ac:	607b      	str	r3, [r7, #4]
 80078ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80078b2:	460b      	mov	r3, r1
 80078b4:	4313      	orrs	r3, r2
 80078b6:	d011      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078bc:	3328      	adds	r3, #40	@ 0x28
 80078be:	2102      	movs	r1, #2
 80078c0:	4618      	mov	r0, r3
 80078c2:	f001 f9af 	bl	8008c24 <RCCEx_PLL3_Config>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80078cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d003      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80078dc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	e000      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80078f0:	46bd      	mov	sp, r7
 80078f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078f6:	bf00      	nop
 80078f8:	58024400 	.word	0x58024400

080078fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b090      	sub	sp, #64	@ 0x40
 8007900:	af00      	add	r7, sp, #0
 8007902:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800790a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800790e:	430b      	orrs	r3, r1
 8007910:	f040 8094 	bne.w	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007914:	4b9b      	ldr	r3, [pc, #620]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800791e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007920:	2b04      	cmp	r3, #4
 8007922:	f200 8087 	bhi.w	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007926:	a201      	add	r2, pc, #4	@ (adr r2, 800792c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	08007941 	.word	0x08007941
 8007930:	08007969 	.word	0x08007969
 8007934:	08007991 	.word	0x08007991
 8007938:	08007a2d 	.word	0x08007a2d
 800793c:	080079b9 	.word	0x080079b9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007940:	4b90      	ldr	r3, [pc, #576]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007948:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800794c:	d108      	bne.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800794e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007952:	4618      	mov	r0, r3
 8007954:	f000 ff62 	bl	800881c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800795c:	f000 bc93 	b.w	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007960:	2300      	movs	r3, #0
 8007962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007964:	f000 bc8f 	b.w	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007968:	4b86      	ldr	r3, [pc, #536]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007970:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007974:	d108      	bne.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007976:	f107 0318 	add.w	r3, r7, #24
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fca6 	bl	80082cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007984:	f000 bc7f 	b.w	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007988:	2300      	movs	r3, #0
 800798a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800798c:	f000 bc7b 	b.w	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007990:	4b7c      	ldr	r3, [pc, #496]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007998:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800799c:	d108      	bne.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800799e:	f107 030c 	add.w	r3, r7, #12
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fde6 	bl	8008574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079ac:	f000 bc6b 	b.w	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079b4:	f000 bc67 	b.w	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079b8:	4b72      	ldr	r3, [pc, #456]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80079c0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079c2:	4b70      	ldr	r3, [pc, #448]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d10c      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80079ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d109      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079d4:	4b6b      	ldr	r3, [pc, #428]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	08db      	lsrs	r3, r3, #3
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	4a6a      	ldr	r2, [pc, #424]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80079e0:	fa22 f303 	lsr.w	r3, r2, r3
 80079e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079e6:	e01f      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079e8:	4b66      	ldr	r3, [pc, #408]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079f4:	d106      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80079f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079fc:	d102      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80079fe:	4b63      	ldr	r3, [pc, #396]	@ (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a02:	e011      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a04:	4b5f      	ldr	r3, [pc, #380]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a10:	d106      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a18:	d102      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a1e:	e003      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a24:	f000 bc2f 	b.w	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007a28:	f000 bc2d 	b.w	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a2c:	4b59      	ldr	r3, [pc, #356]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a30:	f000 bc29 	b.w	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a38:	f000 bc25 	b.w	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a40:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007a44:	430b      	orrs	r3, r1
 8007a46:	f040 80a7 	bne.w	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a4e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007a52:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a5a:	d054      	beq.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a62:	f200 808b 	bhi.w	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a68:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a6c:	f000 8083 	beq.w	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a72:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a76:	f200 8081 	bhi.w	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a80:	d02f      	beq.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a88:	d878      	bhi.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d004      	beq.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a96:	d012      	beq.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007a98:	e070      	b.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a9a:	4b3a      	ldr	r3, [pc, #232]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007aa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007aa6:	d107      	bne.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007aa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 feb5 	bl	800881c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ab6:	e3e6      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007abc:	e3e3      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007abe:	4b31      	ldr	r3, [pc, #196]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ac6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007aca:	d107      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007acc:	f107 0318 	add.w	r3, r7, #24
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fbfb 	bl	80082cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ada:	e3d4      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007adc:	2300      	movs	r3, #0
 8007ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ae0:	e3d1      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ae2:	4b28      	ldr	r3, [pc, #160]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007aea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007aee:	d107      	bne.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007af0:	f107 030c 	add.w	r3, r7, #12
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 fd3d 	bl	8008574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007afe:	e3c2      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b00:	2300      	movs	r3, #0
 8007b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b04:	e3bf      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b06:	4b1f      	ldr	r3, [pc, #124]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b10:	4b1c      	ldr	r3, [pc, #112]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d10c      	bne.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b22:	4b18      	ldr	r3, [pc, #96]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	08db      	lsrs	r3, r3, #3
 8007b28:	f003 0303 	and.w	r3, r3, #3
 8007b2c:	4a16      	ldr	r2, [pc, #88]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b34:	e01e      	b.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b36:	4b13      	ldr	r3, [pc, #76]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b42:	d106      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b4a:	d102      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b50:	e010      	b.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b52:	4b0c      	ldr	r3, [pc, #48]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b5e:	d106      	bne.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b66:	d102      	bne.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b68:	4b09      	ldr	r3, [pc, #36]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b6c:	e002      	b.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007b72:	e388      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b74:	e387      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b76:	4b07      	ldr	r3, [pc, #28]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b7a:	e384      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b80:	e381      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b82:	bf00      	nop
 8007b84:	58024400 	.word	0x58024400
 8007b88:	03d09000 	.word	0x03d09000
 8007b8c:	003d0900 	.word	0x003d0900
 8007b90:	017d7840 	.word	0x017d7840
 8007b94:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b9c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007ba0:	430b      	orrs	r3, r1
 8007ba2:	f040 809c 	bne.w	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007ba6:	4b9e      	ldr	r3, [pc, #632]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007baa:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007bae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007bb6:	d054      	beq.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007bbe:	f200 808b 	bhi.w	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007bc8:	f000 8083 	beq.w	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007bd2:	f200 8081 	bhi.w	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007bdc:	d02f      	beq.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007be4:	d878      	bhi.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d004      	beq.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007bf2:	d012      	beq.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007bf4:	e070      	b.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bf6:	4b8a      	ldr	r3, [pc, #552]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c02:	d107      	bne.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 fe07 	bl	800881c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c12:	e338      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c14:	2300      	movs	r3, #0
 8007c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c18:	e335      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c1a:	4b81      	ldr	r3, [pc, #516]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c26:	d107      	bne.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c28:	f107 0318 	add.w	r3, r7, #24
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 fb4d 	bl	80082cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c36:	e326      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c3c:	e323      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c3e:	4b78      	ldr	r3, [pc, #480]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c4a:	d107      	bne.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c4c:	f107 030c 	add.w	r3, r7, #12
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 fc8f 	bl	8008574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c5a:	e314      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c60:	e311      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c62:	4b6f      	ldr	r3, [pc, #444]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c6a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c6c:	4b6c      	ldr	r3, [pc, #432]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0304 	and.w	r3, r3, #4
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	d10c      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d109      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c7e:	4b68      	ldr	r3, [pc, #416]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	08db      	lsrs	r3, r3, #3
 8007c84:	f003 0303 	and.w	r3, r3, #3
 8007c88:	4a66      	ldr	r2, [pc, #408]	@ (8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c90:	e01e      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c92:	4b63      	ldr	r3, [pc, #396]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c9e:	d106      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ca6:	d102      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ca8:	4b5f      	ldr	r3, [pc, #380]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cac:	e010      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cae:	4b5c      	ldr	r3, [pc, #368]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cba:	d106      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8007cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cc2:	d102      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007cc4:	4b59      	ldr	r3, [pc, #356]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cc8:	e002      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007cce:	e2da      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007cd0:	e2d9      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007cd2:	4b57      	ldr	r3, [pc, #348]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cd6:	e2d6      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cdc:	e2d3      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007cde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ce2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007ce6:	430b      	orrs	r3, r1
 8007ce8:	f040 80a7 	bne.w	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007cec:	4b4c      	ldr	r3, [pc, #304]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cf0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007cf4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cfc:	d055      	beq.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d04:	f200 8096 	bhi.w	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d0e:	f000 8084 	beq.w	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8007d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d18:	f200 808c 	bhi.w	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d22:	d030      	beq.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d2a:	f200 8083 	bhi.w	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d004      	beq.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d3a:	d012      	beq.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007d3c:	e07a      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d3e:	4b38      	ldr	r3, [pc, #224]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d4a:	d107      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fd63 	bl	800881c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d5a:	e294      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d60:	e291      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d62:	4b2f      	ldr	r3, [pc, #188]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d6e:	d107      	bne.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d70:	f107 0318 	add.w	r3, r7, #24
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 faa9 	bl	80082cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d7e:	e282      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d84:	e27f      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d86:	4b26      	ldr	r3, [pc, #152]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d92:	d107      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d94:	f107 030c 	add.w	r3, r7, #12
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 fbeb 	bl	8008574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007da2:	e270      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007da8:	e26d      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007daa:	4b1d      	ldr	r3, [pc, #116]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007db2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007db4:	4b1a      	ldr	r3, [pc, #104]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d10c      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d109      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dc6:	4b16      	ldr	r3, [pc, #88]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	08db      	lsrs	r3, r3, #3
 8007dcc:	f003 0303 	and.w	r3, r3, #3
 8007dd0:	4a14      	ldr	r2, [pc, #80]	@ (8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dd8:	e01e      	b.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dda:	4b11      	ldr	r3, [pc, #68]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007de6:	d106      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dee:	d102      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007df0:	4b0d      	ldr	r3, [pc, #52]	@ (8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007df4:	e010      	b.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007df6:	4b0a      	ldr	r3, [pc, #40]	@ (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e02:	d106      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e0a:	d102      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e0c:	4b07      	ldr	r3, [pc, #28]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e10:	e002      	b.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007e16:	e236      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007e18:	e235      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e1a:	4b05      	ldr	r3, [pc, #20]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e1e:	e232      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007e20:	58024400 	.word	0x58024400
 8007e24:	03d09000 	.word	0x03d09000
 8007e28:	003d0900 	.word	0x003d0900
 8007e2c:	017d7840 	.word	0x017d7840
 8007e30:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e38:	e225      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e3e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007e42:	430b      	orrs	r3, r1
 8007e44:	f040 8085 	bne.w	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007e48:	4b9c      	ldr	r3, [pc, #624]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e4c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007e50:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e58:	d06b      	beq.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e60:	d874      	bhi.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e68:	d056      	beq.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e70:	d86c      	bhi.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e78:	d03b      	beq.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e80:	d864      	bhi.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e88:	d021      	beq.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e90:	d85c      	bhi.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d004      	beq.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e9e:	d004      	beq.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8007ea0:	e054      	b.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007ea2:	f7fe fb75 	bl	8006590 <HAL_RCC_GetPCLK1Freq>
 8007ea6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ea8:	e1ed      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007eaa:	4b84      	ldr	r3, [pc, #528]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007eb6:	d107      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eb8:	f107 0318 	add.w	r3, r7, #24
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 fa05 	bl	80082cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ec6:	e1de      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ecc:	e1db      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ece:	4b7b      	ldr	r3, [pc, #492]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ed6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eda:	d107      	bne.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007edc:	f107 030c 	add.w	r3, r7, #12
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 fb47 	bl	8008574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eea:	e1cc      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef0:	e1c9      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ef2:	4b72      	ldr	r3, [pc, #456]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d109      	bne.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007efe:	4b6f      	ldr	r3, [pc, #444]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	08db      	lsrs	r3, r3, #3
 8007f04:	f003 0303 	and.w	r3, r3, #3
 8007f08:	4a6d      	ldr	r2, [pc, #436]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f10:	e1b9      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f16:	e1b6      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007f18:	4b68      	ldr	r3, [pc, #416]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f24:	d102      	bne.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8007f26:	4b67      	ldr	r3, [pc, #412]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f2a:	e1ac      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f30:	e1a9      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f32:	4b62      	ldr	r3, [pc, #392]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f3e:	d102      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8007f40:	4b61      	ldr	r3, [pc, #388]	@ (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f44:	e19f      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f4a:	e19c      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f50:	e199      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f56:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007f5a:	430b      	orrs	r3, r1
 8007f5c:	d173      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007f5e:	4b57      	ldr	r3, [pc, #348]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007f66:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f6e:	d02f      	beq.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8007f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f76:	d863      	bhi.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8007f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d004      	beq.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f84:	d012      	beq.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8007f86:	e05b      	b.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f88:	4b4c      	ldr	r3, [pc, #304]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f94:	d107      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f96:	f107 0318 	add.w	r3, r7, #24
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 f996 	bl	80082cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fa4:	e16f      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007faa:	e16c      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fac:	4b43      	ldr	r3, [pc, #268]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fb8:	d107      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fba:	f107 030c 	add.w	r3, r7, #12
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 fad8 	bl	8008574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fc8:	e15d      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fce:	e15a      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fd0:	4b3a      	ldr	r3, [pc, #232]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fd4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007fd8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fda:	4b38      	ldr	r3, [pc, #224]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0304 	and.w	r3, r3, #4
 8007fe2:	2b04      	cmp	r3, #4
 8007fe4:	d10c      	bne.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d109      	bne.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fec:	4b33      	ldr	r3, [pc, #204]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	08db      	lsrs	r3, r3, #3
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	4a32      	ldr	r2, [pc, #200]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ffe:	e01e      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008000:	4b2e      	ldr	r3, [pc, #184]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800800c:	d106      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800800e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008010:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008014:	d102      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008016:	4b2b      	ldr	r3, [pc, #172]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800801a:	e010      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800801c:	4b27      	ldr	r3, [pc, #156]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008024:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008028:	d106      	bne.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800802a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800802c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008030:	d102      	bne.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008032:	4b25      	ldr	r3, [pc, #148]	@ (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008034:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008036:	e002      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800803c:	e123      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800803e:	e122      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008040:	2300      	movs	r3, #0
 8008042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008044:	e11f      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800804a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800804e:	430b      	orrs	r3, r1
 8008050:	d13c      	bne.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008052:	4b1a      	ldr	r3, [pc, #104]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800805a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800805c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008068:	d012      	beq.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800806a:	e023      	b.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800806c:	4b13      	ldr	r3, [pc, #76]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008074:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008078:	d107      	bne.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800807a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800807e:	4618      	mov	r0, r3
 8008080:	f000 fbcc 	bl	800881c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008088:	e0fd      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800808e:	e0fa      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008090:	4b0a      	ldr	r3, [pc, #40]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800809c:	d107      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800809e:	f107 0318 	add.w	r3, r7, #24
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f912 	bl	80082cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ac:	e0eb      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b2:	e0e8      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b8:	e0e5      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80080ba:	bf00      	nop
 80080bc:	58024400 	.word	0x58024400
 80080c0:	03d09000 	.word	0x03d09000
 80080c4:	003d0900 	.word	0x003d0900
 80080c8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80080cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080d0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80080d4:	430b      	orrs	r3, r1
 80080d6:	f040 8085 	bne.w	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80080da:	4b6d      	ldr	r3, [pc, #436]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080de:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80080e2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80080e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080ea:	d06b      	beq.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80080ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080f2:	d874      	bhi.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80080f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080fa:	d056      	beq.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80080fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008102:	d86c      	bhi.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008106:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800810a:	d03b      	beq.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800810c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008112:	d864      	bhi.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800811a:	d021      	beq.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800811c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008122:	d85c      	bhi.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008126:	2b00      	cmp	r3, #0
 8008128:	d004      	beq.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800812a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800812c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008130:	d004      	beq.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008132:	e054      	b.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008134:	f000 f8b4 	bl	80082a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008138:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800813a:	e0a4      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800813c:	4b54      	ldr	r3, [pc, #336]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008144:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008148:	d107      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800814a:	f107 0318 	add.w	r3, r7, #24
 800814e:	4618      	mov	r0, r3
 8008150:	f000 f8bc 	bl	80082cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008158:	e095      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800815a:	2300      	movs	r3, #0
 800815c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800815e:	e092      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008160:	4b4b      	ldr	r3, [pc, #300]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008168:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800816c:	d107      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800816e:	f107 030c 	add.w	r3, r7, #12
 8008172:	4618      	mov	r0, r3
 8008174:	f000 f9fe 	bl	8008574 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800817c:	e083      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008182:	e080      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008184:	4b42      	ldr	r3, [pc, #264]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b04      	cmp	r3, #4
 800818e:	d109      	bne.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008190:	4b3f      	ldr	r3, [pc, #252]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	08db      	lsrs	r3, r3, #3
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	4a3e      	ldr	r2, [pc, #248]	@ (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800819c:	fa22 f303 	lsr.w	r3, r2, r3
 80081a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081a2:	e070      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081a8:	e06d      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80081aa:	4b39      	ldr	r3, [pc, #228]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081b6:	d102      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80081b8:	4b37      	ldr	r3, [pc, #220]	@ (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80081ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081bc:	e063      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081c2:	e060      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80081c4:	4b32      	ldr	r3, [pc, #200]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081d0:	d102      	bne.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80081d2:	4b32      	ldr	r3, [pc, #200]	@ (800829c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80081d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081d6:	e056      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081dc:	e053      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081e2:	e050      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80081e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80081ec:	430b      	orrs	r3, r1
 80081ee:	d148      	bne.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80081f0:	4b27      	ldr	r3, [pc, #156]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80081f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80081f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80081fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008200:	d02a      	beq.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008208:	d838      	bhi.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800820a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820c:	2b00      	cmp	r3, #0
 800820e:	d004      	beq.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008212:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008216:	d00d      	beq.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008218:	e030      	b.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800821a:	4b1d      	ldr	r3, [pc, #116]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008222:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008226:	d102      	bne.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008228:	4b1c      	ldr	r3, [pc, #112]	@ (800829c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800822a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800822c:	e02b      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008232:	e028      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008234:	4b16      	ldr	r3, [pc, #88]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800823c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008240:	d107      	bne.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008242:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fae8 	bl	800881c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800824c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008250:	e019      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008256:	e016      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008258:	4b0d      	ldr	r3, [pc, #52]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008260:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008264:	d107      	bne.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008266:	f107 0318 	add.w	r3, r7, #24
 800826a:	4618      	mov	r0, r3
 800826c:	f000 f82e 	bl	80082cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008274:	e007      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800827a:	e004      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008280:	e001      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008288:	4618      	mov	r0, r3
 800828a:	3740      	adds	r7, #64	@ 0x40
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	58024400 	.word	0x58024400
 8008294:	03d09000 	.word	0x03d09000
 8008298:	003d0900 	.word	0x003d0900
 800829c:	017d7840 	.word	0x017d7840

080082a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80082a4:	f7fe f944 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 80082a8:	4602      	mov	r2, r0
 80082aa:	4b06      	ldr	r3, [pc, #24]	@ (80082c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	091b      	lsrs	r3, r3, #4
 80082b0:	f003 0307 	and.w	r3, r3, #7
 80082b4:	4904      	ldr	r1, [pc, #16]	@ (80082c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80082b6:	5ccb      	ldrb	r3, [r1, r3]
 80082b8:	f003 031f 	and.w	r3, r3, #31
 80082bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	58024400 	.word	0x58024400
 80082c8:	080095d8 	.word	0x080095d8

080082cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b089      	sub	sp, #36	@ 0x24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082d4:	4ba1      	ldr	r3, [pc, #644]	@ (800855c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d8:	f003 0303 	and.w	r3, r3, #3
 80082dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80082de:	4b9f      	ldr	r3, [pc, #636]	@ (800855c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e2:	0b1b      	lsrs	r3, r3, #12
 80082e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80082ea:	4b9c      	ldr	r3, [pc, #624]	@ (800855c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ee:	091b      	lsrs	r3, r3, #4
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80082f6:	4b99      	ldr	r3, [pc, #612]	@ (800855c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082fa:	08db      	lsrs	r3, r3, #3
 80082fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	fb02 f303 	mul.w	r3, r2, r3
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 8111 	beq.w	800853c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	2b02      	cmp	r3, #2
 800831e:	f000 8083 	beq.w	8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	2b02      	cmp	r3, #2
 8008326:	f200 80a1 	bhi.w	800846c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d056      	beq.n	80083e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008336:	e099      	b.n	800846c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008338:	4b88      	ldr	r3, [pc, #544]	@ (800855c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0320 	and.w	r3, r3, #32
 8008340:	2b00      	cmp	r3, #0
 8008342:	d02d      	beq.n	80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008344:	4b85      	ldr	r3, [pc, #532]	@ (800855c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	08db      	lsrs	r3, r3, #3
 800834a:	f003 0303 	and.w	r3, r3, #3
 800834e:	4a84      	ldr	r2, [pc, #528]	@ (8008560 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008350:	fa22 f303 	lsr.w	r3, r2, r3
 8008354:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	ee07 3a90 	vmov	s15, r3
 800835c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	ee07 3a90 	vmov	s15, r3
 8008366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800836a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800836e:	4b7b      	ldr	r3, [pc, #492]	@ (800855c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008382:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800838a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800838e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800839a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800839e:	e087      	b.n	80084b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	ee07 3a90 	vmov	s15, r3
 80083a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80083ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083b2:	4b6a      	ldr	r3, [pc, #424]	@ (800855c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ba:	ee07 3a90 	vmov	s15, r3
 80083be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083e2:	e065      	b.n	80084b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800856c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083f6:	4b59      	ldr	r3, [pc, #356]	@ (800855c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008406:	ed97 6a03 	vldr	s12, [r7, #12]
 800840a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800840e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800841a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800841e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008426:	e043      	b.n	80084b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	ee07 3a90 	vmov	s15, r3
 800842e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008432:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800843a:	4b48      	ldr	r3, [pc, #288]	@ (800855c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800843c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800843e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800844a:	ed97 6a03 	vldr	s12, [r7, #12]
 800844e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800845a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800845e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800846a:	e021      	b.n	80084b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	ee07 3a90 	vmov	s15, r3
 8008472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008476:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800856c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800847a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800847e:	4b37      	ldr	r3, [pc, #220]	@ (800855c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800848e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008492:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800849a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800849e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80084b0:	4b2a      	ldr	r3, [pc, #168]	@ (800855c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b4:	0a5b      	lsrs	r3, r3, #9
 80084b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80084ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084d6:	ee17 2a90 	vmov	r2, s15
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80084de:	4b1f      	ldr	r3, [pc, #124]	@ (800855c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e2:	0c1b      	lsrs	r3, r3, #16
 80084e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084e8:	ee07 3a90 	vmov	s15, r3
 80084ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80084fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008504:	ee17 2a90 	vmov	r2, s15
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800850c:	4b13      	ldr	r3, [pc, #76]	@ (800855c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800850e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008510:	0e1b      	lsrs	r3, r3, #24
 8008512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008522:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008526:	edd7 6a07 	vldr	s13, [r7, #28]
 800852a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800852e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008532:	ee17 2a90 	vmov	r2, s15
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800853a:	e008      	b.n	800854e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	609a      	str	r2, [r3, #8]
}
 800854e:	bf00      	nop
 8008550:	3724      	adds	r7, #36	@ 0x24
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	58024400 	.word	0x58024400
 8008560:	03d09000 	.word	0x03d09000
 8008564:	46000000 	.word	0x46000000
 8008568:	4c742400 	.word	0x4c742400
 800856c:	4a742400 	.word	0x4a742400
 8008570:	4bbebc20 	.word	0x4bbebc20

08008574 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008574:	b480      	push	{r7}
 8008576:	b089      	sub	sp, #36	@ 0x24
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800857c:	4ba1      	ldr	r3, [pc, #644]	@ (8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800857e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008580:	f003 0303 	and.w	r3, r3, #3
 8008584:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008586:	4b9f      	ldr	r3, [pc, #636]	@ (8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858a:	0d1b      	lsrs	r3, r3, #20
 800858c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008590:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008592:	4b9c      	ldr	r3, [pc, #624]	@ (8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008596:	0a1b      	lsrs	r3, r3, #8
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800859e:	4b99      	ldr	r3, [pc, #612]	@ (8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085a2:	08db      	lsrs	r3, r3, #3
 80085a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	fb02 f303 	mul.w	r3, r2, r3
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 8111 	beq.w	80087e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	f000 8083 	beq.w	80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	f200 80a1 	bhi.w	8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d003      	beq.n	80085e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d056      	beq.n	800868c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80085de:	e099      	b.n	8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085e0:	4b88      	ldr	r3, [pc, #544]	@ (8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0320 	and.w	r3, r3, #32
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d02d      	beq.n	8008648 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085ec:	4b85      	ldr	r3, [pc, #532]	@ (8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	08db      	lsrs	r3, r3, #3
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	4a84      	ldr	r2, [pc, #528]	@ (8008808 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80085f8:	fa22 f303 	lsr.w	r3, r2, r3
 80085fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	ee07 3a90 	vmov	s15, r3
 8008604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	ee07 3a90 	vmov	s15, r3
 800860e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008616:	4b7b      	ldr	r3, [pc, #492]	@ (8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800861a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861e:	ee07 3a90 	vmov	s15, r3
 8008622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008626:	ed97 6a03 	vldr	s12, [r7, #12]
 800862a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800880c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800862e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800863a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008642:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008646:	e087      	b.n	8008758 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	ee07 3a90 	vmov	s15, r3
 800864e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008652:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800865a:	4b6a      	ldr	r3, [pc, #424]	@ (8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800865c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800865e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008662:	ee07 3a90 	vmov	s15, r3
 8008666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800866a:	ed97 6a03 	vldr	s12, [r7, #12]
 800866e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800880c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800867a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800867e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800868a:	e065      	b.n	8008758 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	ee07 3a90 	vmov	s15, r3
 8008692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008696:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800869a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800869e:	4b59      	ldr	r3, [pc, #356]	@ (8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a6:	ee07 3a90 	vmov	s15, r3
 80086aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80086b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800880c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086ce:	e043      	b.n	8008758 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	ee07 3a90 	vmov	s15, r3
 80086d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80086de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086e2:	4b48      	ldr	r3, [pc, #288]	@ (8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800880c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800870a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800870e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008712:	e021      	b.n	8008758 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	ee07 3a90 	vmov	s15, r3
 800871a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800871e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008726:	4b37      	ldr	r3, [pc, #220]	@ (8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008736:	ed97 6a03 	vldr	s12, [r7, #12]
 800873a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800880c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800873e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008746:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800874a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800874e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008752:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008756:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008758:	4b2a      	ldr	r3, [pc, #168]	@ (8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800875a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800875c:	0a5b      	lsrs	r3, r3, #9
 800875e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008762:	ee07 3a90 	vmov	s15, r3
 8008766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800876e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008772:	edd7 6a07 	vldr	s13, [r7, #28]
 8008776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800877a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800877e:	ee17 2a90 	vmov	r2, s15
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008786:	4b1f      	ldr	r3, [pc, #124]	@ (8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878a:	0c1b      	lsrs	r3, r3, #16
 800878c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008790:	ee07 3a90 	vmov	s15, r3
 8008794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008798:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800879c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80087a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087ac:	ee17 2a90 	vmov	r2, s15
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80087b4:	4b13      	ldr	r3, [pc, #76]	@ (8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087b8:	0e1b      	lsrs	r3, r3, #24
 80087ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80087d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087da:	ee17 2a90 	vmov	r2, s15
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80087e2:	e008      	b.n	80087f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	609a      	str	r2, [r3, #8]
}
 80087f6:	bf00      	nop
 80087f8:	3724      	adds	r7, #36	@ 0x24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	58024400 	.word	0x58024400
 8008808:	03d09000 	.word	0x03d09000
 800880c:	46000000 	.word	0x46000000
 8008810:	4c742400 	.word	0x4c742400
 8008814:	4a742400 	.word	0x4a742400
 8008818:	4bbebc20 	.word	0x4bbebc20

0800881c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800881c:	b480      	push	{r7}
 800881e:	b089      	sub	sp, #36	@ 0x24
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008824:	4ba0      	ldr	r3, [pc, #640]	@ (8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008828:	f003 0303 	and.w	r3, r3, #3
 800882c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800882e:	4b9e      	ldr	r3, [pc, #632]	@ (8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008832:	091b      	lsrs	r3, r3, #4
 8008834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008838:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800883a:	4b9b      	ldr	r3, [pc, #620]	@ (8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800883c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008844:	4b98      	ldr	r3, [pc, #608]	@ (8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008848:	08db      	lsrs	r3, r3, #3
 800884a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	fb02 f303 	mul.w	r3, r2, r3
 8008854:	ee07 3a90 	vmov	s15, r3
 8008858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 8111 	beq.w	8008a8a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	2b02      	cmp	r3, #2
 800886c:	f000 8083 	beq.w	8008976 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	2b02      	cmp	r3, #2
 8008874:	f200 80a1 	bhi.w	80089ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d056      	beq.n	8008932 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008884:	e099      	b.n	80089ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008886:	4b88      	ldr	r3, [pc, #544]	@ (8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0320 	and.w	r3, r3, #32
 800888e:	2b00      	cmp	r3, #0
 8008890:	d02d      	beq.n	80088ee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008892:	4b85      	ldr	r3, [pc, #532]	@ (8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	08db      	lsrs	r3, r3, #3
 8008898:	f003 0303 	and.w	r3, r3, #3
 800889c:	4a83      	ldr	r2, [pc, #524]	@ (8008aac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800889e:	fa22 f303 	lsr.w	r3, r2, r3
 80088a2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	ee07 3a90 	vmov	s15, r3
 80088aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	ee07 3a90 	vmov	s15, r3
 80088b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088bc:	4b7a      	ldr	r3, [pc, #488]	@ (8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c4:	ee07 3a90 	vmov	s15, r3
 80088c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80088d0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088ec:	e087      	b.n	80089fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	ee07 3a90 	vmov	s15, r3
 80088f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80088fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008900:	4b69      	ldr	r3, [pc, #420]	@ (8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008908:	ee07 3a90 	vmov	s15, r3
 800890c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008910:	ed97 6a03 	vldr	s12, [r7, #12]
 8008914:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800891c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008920:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800892c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008930:	e065      	b.n	80089fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	ee07 3a90 	vmov	s15, r3
 8008938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008944:	4b58      	ldr	r3, [pc, #352]	@ (8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800894c:	ee07 3a90 	vmov	s15, r3
 8008950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008954:	ed97 6a03 	vldr	s12, [r7, #12]
 8008958:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800895c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008964:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800896c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008970:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008974:	e043      	b.n	80089fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	ee07 3a90 	vmov	s15, r3
 800897c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008980:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008988:	4b47      	ldr	r3, [pc, #284]	@ (8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800898a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800898c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008990:	ee07 3a90 	vmov	s15, r3
 8008994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008998:	ed97 6a03 	vldr	s12, [r7, #12]
 800899c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089b8:	e021      	b.n	80089fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	ee07 3a90 	vmov	s15, r3
 80089c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80089c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089cc:	4b36      	ldr	r3, [pc, #216]	@ (8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d4:	ee07 3a90 	vmov	s15, r3
 80089d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80089e0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089fc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80089fe:	4b2a      	ldr	r3, [pc, #168]	@ (8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a02:	0a5b      	lsrs	r3, r3, #9
 8008a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a08:	ee07 3a90 	vmov	s15, r3
 8008a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a18:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a24:	ee17 2a90 	vmov	r2, s15
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a30:	0c1b      	lsrs	r3, r3, #16
 8008a32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a36:	ee07 3a90 	vmov	s15, r3
 8008a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a52:	ee17 2a90 	vmov	r2, s15
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008a5a:	4b13      	ldr	r3, [pc, #76]	@ (8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a5e:	0e1b      	lsrs	r3, r3, #24
 8008a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a64:	ee07 3a90 	vmov	s15, r3
 8008a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a74:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a80:	ee17 2a90 	vmov	r2, s15
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a88:	e008      	b.n	8008a9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	609a      	str	r2, [r3, #8]
}
 8008a9c:	bf00      	nop
 8008a9e:	3724      	adds	r7, #36	@ 0x24
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	58024400 	.word	0x58024400
 8008aac:	03d09000 	.word	0x03d09000
 8008ab0:	46000000 	.word	0x46000000
 8008ab4:	4c742400 	.word	0x4c742400
 8008ab8:	4a742400 	.word	0x4a742400
 8008abc:	4bbebc20 	.word	0x4bbebc20

08008ac0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ace:	4b53      	ldr	r3, [pc, #332]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad2:	f003 0303 	and.w	r3, r3, #3
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d101      	bne.n	8008ade <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e099      	b.n	8008c12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ade:	4b4f      	ldr	r3, [pc, #316]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a4e      	ldr	r2, [pc, #312]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008ae4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aea:	f7f8 fa37 	bl	8000f5c <HAL_GetTick>
 8008aee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008af0:	e008      	b.n	8008b04 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008af2:	f7f8 fa33 	bl	8000f5c <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d901      	bls.n	8008b04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e086      	b.n	8008c12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b04:	4b45      	ldr	r3, [pc, #276]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1f0      	bne.n	8008af2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b10:	4b42      	ldr	r3, [pc, #264]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b14:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	031b      	lsls	r3, r3, #12
 8008b1e:	493f      	ldr	r1, [pc, #252]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	025b      	lsls	r3, r3, #9
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	041b      	lsls	r3, r3, #16
 8008b42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b46:	431a      	orrs	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	061b      	lsls	r3, r3, #24
 8008b50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b54:	4931      	ldr	r1, [pc, #196]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b5a:	4b30      	ldr	r3, [pc, #192]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	492d      	ldr	r1, [pc, #180]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b70:	f023 0220 	bic.w	r2, r3, #32
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	4928      	ldr	r1, [pc, #160]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b7e:	4b27      	ldr	r3, [pc, #156]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b82:	4a26      	ldr	r2, [pc, #152]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008b84:	f023 0310 	bic.w	r3, r3, #16
 8008b88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b8a:	4b24      	ldr	r3, [pc, #144]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008b8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b8e:	4b24      	ldr	r3, [pc, #144]	@ (8008c20 <RCCEx_PLL2_Config+0x160>)
 8008b90:	4013      	ands	r3, r2
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	69d2      	ldr	r2, [r2, #28]
 8008b96:	00d2      	lsls	r2, r2, #3
 8008b98:	4920      	ldr	r1, [pc, #128]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008ba4:	f043 0310 	orr.w	r3, r3, #16
 8008ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d106      	bne.n	8008bbe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb4:	4a19      	ldr	r2, [pc, #100]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008bb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008bba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008bbc:	e00f      	b.n	8008bde <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d106      	bne.n	8008bd2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008bc4:	4b15      	ldr	r3, [pc, #84]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc8:	4a14      	ldr	r2, [pc, #80]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008bca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008bd0:	e005      	b.n	8008bde <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008bd2:	4b12      	ldr	r3, [pc, #72]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd6:	4a11      	ldr	r2, [pc, #68]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008bd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008bde:	4b0f      	ldr	r3, [pc, #60]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a0e      	ldr	r2, [pc, #56]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008be4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bea:	f7f8 f9b7 	bl	8000f5c <HAL_GetTick>
 8008bee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bf0:	e008      	b.n	8008c04 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008bf2:	f7f8 f9b3 	bl	8000f5c <HAL_GetTick>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d901      	bls.n	8008c04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e006      	b.n	8008c12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c04:	4b05      	ldr	r3, [pc, #20]	@ (8008c1c <RCCEx_PLL2_Config+0x15c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d0f0      	beq.n	8008bf2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	58024400 	.word	0x58024400
 8008c20:	ffff0007 	.word	0xffff0007

08008c24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c32:	4b53      	ldr	r3, [pc, #332]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c36:	f003 0303 	and.w	r3, r3, #3
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d101      	bne.n	8008c42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e099      	b.n	8008d76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c42:	4b4f      	ldr	r3, [pc, #316]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a4e      	ldr	r2, [pc, #312]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008c48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c4e:	f7f8 f985 	bl	8000f5c <HAL_GetTick>
 8008c52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c54:	e008      	b.n	8008c68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c56:	f7f8 f981 	bl	8000f5c <HAL_GetTick>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d901      	bls.n	8008c68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e086      	b.n	8008d76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c68:	4b45      	ldr	r3, [pc, #276]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1f0      	bne.n	8008c56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c74:	4b42      	ldr	r3, [pc, #264]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c78:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	051b      	lsls	r3, r3, #20
 8008c82:	493f      	ldr	r1, [pc, #252]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008c84:	4313      	orrs	r3, r2
 8008c86:	628b      	str	r3, [r1, #40]	@ 0x28
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	025b      	lsls	r3, r3, #9
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	431a      	orrs	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	041b      	lsls	r3, r3, #16
 8008ca6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008caa:	431a      	orrs	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	061b      	lsls	r3, r3, #24
 8008cb4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008cb8:	4931      	ldr	r1, [pc, #196]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008cbe:	4b30      	ldr	r3, [pc, #192]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	492d      	ldr	r1, [pc, #180]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	4928      	ldr	r1, [pc, #160]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008ce2:	4b27      	ldr	r3, [pc, #156]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce6:	4a26      	ldr	r2, [pc, #152]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008cee:	4b24      	ldr	r3, [pc, #144]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008cf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cf2:	4b24      	ldr	r3, [pc, #144]	@ (8008d84 <RCCEx_PLL3_Config+0x160>)
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	69d2      	ldr	r2, [r2, #28]
 8008cfa:	00d2      	lsls	r2, r2, #3
 8008cfc:	4920      	ldr	r1, [pc, #128]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d02:	4b1f      	ldr	r3, [pc, #124]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d06:	4a1e      	ldr	r2, [pc, #120]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d106      	bne.n	8008d22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d14:	4b1a      	ldr	r3, [pc, #104]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d18:	4a19      	ldr	r2, [pc, #100]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008d1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d20:	e00f      	b.n	8008d42 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d106      	bne.n	8008d36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d28:	4b15      	ldr	r3, [pc, #84]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2c:	4a14      	ldr	r2, [pc, #80]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008d2e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008d32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d34:	e005      	b.n	8008d42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d36:	4b12      	ldr	r3, [pc, #72]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3a:	4a11      	ldr	r2, [pc, #68]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008d3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d42:	4b0f      	ldr	r3, [pc, #60]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a0e      	ldr	r2, [pc, #56]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d4e:	f7f8 f905 	bl	8000f5c <HAL_GetTick>
 8008d52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d54:	e008      	b.n	8008d68 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d56:	f7f8 f901 	bl	8000f5c <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d901      	bls.n	8008d68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e006      	b.n	8008d76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d68:	4b05      	ldr	r3, [pc, #20]	@ (8008d80 <RCCEx_PLL3_Config+0x15c>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d0f0      	beq.n	8008d56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	58024400 	.word	0x58024400
 8008d84:	ffff0007 	.word	0xffff0007

08008d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e049      	b.n	8008e2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d106      	bne.n	8008db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7f7 ff46 	bl	8000c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2202      	movs	r2, #2
 8008db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f000 f8b4 	bl	8008f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
	...

08008e38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d001      	beq.n	8008e50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e056      	b.n	8008efe <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2202      	movs	r2, #2
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8008f0c <HAL_TIM_Base_Start+0xd4>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d02c      	beq.n	8008ebc <HAL_TIM_Base_Start+0x84>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e6a:	d027      	beq.n	8008ebc <HAL_TIM_Base_Start+0x84>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a27      	ldr	r2, [pc, #156]	@ (8008f10 <HAL_TIM_Base_Start+0xd8>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d022      	beq.n	8008ebc <HAL_TIM_Base_Start+0x84>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a26      	ldr	r2, [pc, #152]	@ (8008f14 <HAL_TIM_Base_Start+0xdc>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d01d      	beq.n	8008ebc <HAL_TIM_Base_Start+0x84>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a24      	ldr	r2, [pc, #144]	@ (8008f18 <HAL_TIM_Base_Start+0xe0>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d018      	beq.n	8008ebc <HAL_TIM_Base_Start+0x84>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a23      	ldr	r2, [pc, #140]	@ (8008f1c <HAL_TIM_Base_Start+0xe4>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d013      	beq.n	8008ebc <HAL_TIM_Base_Start+0x84>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a21      	ldr	r2, [pc, #132]	@ (8008f20 <HAL_TIM_Base_Start+0xe8>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d00e      	beq.n	8008ebc <HAL_TIM_Base_Start+0x84>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a20      	ldr	r2, [pc, #128]	@ (8008f24 <HAL_TIM_Base_Start+0xec>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d009      	beq.n	8008ebc <HAL_TIM_Base_Start+0x84>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a1e      	ldr	r2, [pc, #120]	@ (8008f28 <HAL_TIM_Base_Start+0xf0>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d004      	beq.n	8008ebc <HAL_TIM_Base_Start+0x84>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a1d      	ldr	r2, [pc, #116]	@ (8008f2c <HAL_TIM_Base_Start+0xf4>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d115      	bne.n	8008ee8 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689a      	ldr	r2, [r3, #8]
 8008ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8008f30 <HAL_TIM_Base_Start+0xf8>)
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2b06      	cmp	r3, #6
 8008ecc:	d015      	beq.n	8008efa <HAL_TIM_Base_Start+0xc2>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ed4:	d011      	beq.n	8008efa <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f042 0201 	orr.w	r2, r2, #1
 8008ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ee6:	e008      	b.n	8008efa <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f042 0201 	orr.w	r2, r2, #1
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	e000      	b.n	8008efc <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008efa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	40010000 	.word	0x40010000
 8008f10:	40000400 	.word	0x40000400
 8008f14:	40000800 	.word	0x40000800
 8008f18:	40000c00 	.word	0x40000c00
 8008f1c:	40010400 	.word	0x40010400
 8008f20:	40001800 	.word	0x40001800
 8008f24:	40014000 	.word	0x40014000
 8008f28:	4000e000 	.word	0x4000e000
 8008f2c:	4000e400 	.word	0x4000e400
 8008f30:	00010007 	.word	0x00010007

08008f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a4a      	ldr	r2, [pc, #296]	@ (8009070 <TIM_Base_SetConfig+0x13c>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d013      	beq.n	8008f74 <TIM_Base_SetConfig+0x40>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f52:	d00f      	beq.n	8008f74 <TIM_Base_SetConfig+0x40>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a47      	ldr	r2, [pc, #284]	@ (8009074 <TIM_Base_SetConfig+0x140>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d00b      	beq.n	8008f74 <TIM_Base_SetConfig+0x40>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a46      	ldr	r2, [pc, #280]	@ (8009078 <TIM_Base_SetConfig+0x144>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d007      	beq.n	8008f74 <TIM_Base_SetConfig+0x40>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a45      	ldr	r2, [pc, #276]	@ (800907c <TIM_Base_SetConfig+0x148>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d003      	beq.n	8008f74 <TIM_Base_SetConfig+0x40>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a44      	ldr	r2, [pc, #272]	@ (8009080 <TIM_Base_SetConfig+0x14c>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d108      	bne.n	8008f86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a39      	ldr	r2, [pc, #228]	@ (8009070 <TIM_Base_SetConfig+0x13c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d027      	beq.n	8008fde <TIM_Base_SetConfig+0xaa>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f94:	d023      	beq.n	8008fde <TIM_Base_SetConfig+0xaa>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a36      	ldr	r2, [pc, #216]	@ (8009074 <TIM_Base_SetConfig+0x140>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d01f      	beq.n	8008fde <TIM_Base_SetConfig+0xaa>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a35      	ldr	r2, [pc, #212]	@ (8009078 <TIM_Base_SetConfig+0x144>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d01b      	beq.n	8008fde <TIM_Base_SetConfig+0xaa>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a34      	ldr	r2, [pc, #208]	@ (800907c <TIM_Base_SetConfig+0x148>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d017      	beq.n	8008fde <TIM_Base_SetConfig+0xaa>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a33      	ldr	r2, [pc, #204]	@ (8009080 <TIM_Base_SetConfig+0x14c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d013      	beq.n	8008fde <TIM_Base_SetConfig+0xaa>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a32      	ldr	r2, [pc, #200]	@ (8009084 <TIM_Base_SetConfig+0x150>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d00f      	beq.n	8008fde <TIM_Base_SetConfig+0xaa>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a31      	ldr	r2, [pc, #196]	@ (8009088 <TIM_Base_SetConfig+0x154>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d00b      	beq.n	8008fde <TIM_Base_SetConfig+0xaa>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a30      	ldr	r2, [pc, #192]	@ (800908c <TIM_Base_SetConfig+0x158>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d007      	beq.n	8008fde <TIM_Base_SetConfig+0xaa>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a2f      	ldr	r2, [pc, #188]	@ (8009090 <TIM_Base_SetConfig+0x15c>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d003      	beq.n	8008fde <TIM_Base_SetConfig+0xaa>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8009094 <TIM_Base_SetConfig+0x160>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d108      	bne.n	8008ff0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	689a      	ldr	r2, [r3, #8]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a16      	ldr	r2, [pc, #88]	@ (8009070 <TIM_Base_SetConfig+0x13c>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d00f      	beq.n	800903c <TIM_Base_SetConfig+0x108>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a18      	ldr	r2, [pc, #96]	@ (8009080 <TIM_Base_SetConfig+0x14c>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d00b      	beq.n	800903c <TIM_Base_SetConfig+0x108>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a17      	ldr	r2, [pc, #92]	@ (8009084 <TIM_Base_SetConfig+0x150>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d007      	beq.n	800903c <TIM_Base_SetConfig+0x108>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a16      	ldr	r2, [pc, #88]	@ (8009088 <TIM_Base_SetConfig+0x154>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d003      	beq.n	800903c <TIM_Base_SetConfig+0x108>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a15      	ldr	r2, [pc, #84]	@ (800908c <TIM_Base_SetConfig+0x158>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d103      	bne.n	8009044 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	691a      	ldr	r2, [r3, #16]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	2b01      	cmp	r3, #1
 8009054:	d105      	bne.n	8009062 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	f023 0201 	bic.w	r2, r3, #1
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	611a      	str	r2, [r3, #16]
  }
}
 8009062:	bf00      	nop
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	40010000 	.word	0x40010000
 8009074:	40000400 	.word	0x40000400
 8009078:	40000800 	.word	0x40000800
 800907c:	40000c00 	.word	0x40000c00
 8009080:	40010400 	.word	0x40010400
 8009084:	40014000 	.word	0x40014000
 8009088:	40014400 	.word	0x40014400
 800908c:	40014800 	.word	0x40014800
 8009090:	4000e000 	.word	0x4000e000
 8009094:	4000e400 	.word	0x4000e400

08009098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d101      	bne.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090ac:	2302      	movs	r3, #2
 80090ae:	e077      	b.n	80091a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a35      	ldr	r2, [pc, #212]	@ (80091ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d004      	beq.n	80090e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a34      	ldr	r2, [pc, #208]	@ (80091b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d108      	bne.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80090ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	4313      	orrs	r3, r2
 8009106:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a25      	ldr	r2, [pc, #148]	@ (80091ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d02c      	beq.n	8009174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009122:	d027      	beq.n	8009174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a22      	ldr	r2, [pc, #136]	@ (80091b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d022      	beq.n	8009174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a21      	ldr	r2, [pc, #132]	@ (80091b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d01d      	beq.n	8009174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a1f      	ldr	r2, [pc, #124]	@ (80091bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d018      	beq.n	8009174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a1a      	ldr	r2, [pc, #104]	@ (80091b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d013      	beq.n	8009174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a1b      	ldr	r2, [pc, #108]	@ (80091c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d00e      	beq.n	8009174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a1a      	ldr	r2, [pc, #104]	@ (80091c4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d009      	beq.n	8009174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a18      	ldr	r2, [pc, #96]	@ (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d004      	beq.n	8009174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a17      	ldr	r2, [pc, #92]	@ (80091cc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d10c      	bne.n	800918e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800917a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	4313      	orrs	r3, r2
 8009184:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3714      	adds	r7, #20
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr
 80091ac:	40010000 	.word	0x40010000
 80091b0:	40010400 	.word	0x40010400
 80091b4:	40000400 	.word	0x40000400
 80091b8:	40000800 	.word	0x40000800
 80091bc:	40000c00 	.word	0x40000c00
 80091c0:	40001800 	.word	0x40001800
 80091c4:	40014000 	.word	0x40014000
 80091c8:	4000e000 	.word	0x4000e000
 80091cc:	4000e400 	.word	0x4000e400

080091d0 <checkint>:
 80091d0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80091d4:	2b7e      	cmp	r3, #126	@ 0x7e
 80091d6:	d910      	bls.n	80091fa <checkint+0x2a>
 80091d8:	2b96      	cmp	r3, #150	@ 0x96
 80091da:	d80c      	bhi.n	80091f6 <checkint+0x26>
 80091dc:	2201      	movs	r2, #1
 80091de:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80091e2:	fa02 f303 	lsl.w	r3, r2, r3
 80091e6:	1e5a      	subs	r2, r3, #1
 80091e8:	4202      	tst	r2, r0
 80091ea:	d106      	bne.n	80091fa <checkint+0x2a>
 80091ec:	4203      	tst	r3, r0
 80091ee:	bf0c      	ite	eq
 80091f0:	2002      	moveq	r0, #2
 80091f2:	2001      	movne	r0, #1
 80091f4:	4770      	bx	lr
 80091f6:	2002      	movs	r0, #2
 80091f8:	4770      	bx	lr
 80091fa:	2000      	movs	r0, #0
 80091fc:	4770      	bx	lr
	...

08009200 <powf>:
 8009200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009202:	ee10 1a10 	vmov	r1, s0
 8009206:	ee10 4a90 	vmov	r4, s1
 800920a:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 800920e:	0063      	lsls	r3, r4, #1
 8009210:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8009214:	eef0 7a40 	vmov.f32	s15, s0
 8009218:	eeb0 7a60 	vmov.f32	s14, s1
 800921c:	f103 30ff 	add.w	r0, r3, #4294967295
 8009220:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 8009224:	d252      	bcs.n	80092cc <powf+0xcc>
 8009226:	4290      	cmp	r0, r2
 8009228:	d258      	bcs.n	80092dc <powf+0xdc>
 800922a:	2000      	movs	r0, #0
 800922c:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 8009230:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 8009234:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8009238:	0ddb      	lsrs	r3, r3, #23
 800923a:	4a9d      	ldr	r2, [pc, #628]	@ (80094b0 <powf+0x2b0>)
 800923c:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 8009240:	05db      	lsls	r3, r3, #23
 8009242:	1ac9      	subs	r1, r1, r3
 8009244:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8009248:	ee07 1a90 	vmov	s15, r1
 800924c:	ed94 5b02 	vldr	d5, [r4, #8]
 8009250:	ed94 4b00 	vldr	d4, [r4]
 8009254:	15db      	asrs	r3, r3, #23
 8009256:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800925a:	ee07 3a90 	vmov	s15, r3
 800925e:	eea4 2b06 	vfma.f64	d2, d4, d6
 8009262:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 8009266:	ee22 4b02 	vmul.f64	d4, d2, d2
 800926a:	ee24 0b04 	vmul.f64	d0, d4, d4
 800926e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8009272:	ee36 6b05 	vadd.f64	d6, d6, d5
 8009276:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 800927a:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 800927e:	eea2 1b05 	vfma.f64	d1, d2, d5
 8009282:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 8009286:	eea2 5b03 	vfma.f64	d5, d2, d3
 800928a:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 800928e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8009292:	eea2 6b03 	vfma.f64	d6, d2, d3
 8009296:	eea4 6b05 	vfma.f64	d6, d4, d5
 800929a:	eea1 6b00 	vfma.f64	d6, d1, d0
 800929e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80092a2:	ee17 3a90 	vmov	r3, s15
 80092a6:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 80092aa:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 80092ae:	429a      	cmp	r2, r3
 80092b0:	f0c0 80b8 	bcc.w	8009424 <powf+0x224>
 80092b4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8009490 <powf+0x290>
 80092b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80092bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c0:	dd79      	ble.n	80093b6 <powf+0x1b6>
 80092c2:	b003      	add	sp, #12
 80092c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092c8:	f000 b920 	b.w	800950c <__math_oflowf>
 80092cc:	4290      	cmp	r0, r2
 80092ce:	d330      	bcc.n	8009332 <powf+0x132>
 80092d0:	b12b      	cbz	r3, 80092de <powf+0xde>
 80092d2:	0049      	lsls	r1, r1, #1
 80092d4:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 80092d8:	d808      	bhi.n	80092ec <powf+0xec>
 80092da:	e015      	b.n	8009308 <powf+0x108>
 80092dc:	b953      	cbnz	r3, 80092f4 <powf+0xf4>
 80092de:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 80092e2:	0049      	lsls	r1, r1, #1
 80092e4:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 80092e8:	f240 80ca 	bls.w	8009480 <powf+0x280>
 80092ec:	ee37 0a87 	vadd.f32	s0, s15, s14
 80092f0:	b003      	add	sp, #12
 80092f2:	bd30      	pop	{r4, r5, pc}
 80092f4:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 80092f8:	d105      	bne.n	8009306 <powf+0x106>
 80092fa:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80092fe:	0064      	lsls	r4, r4, #1
 8009300:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009304:	e7f0      	b.n	80092e8 <powf+0xe8>
 8009306:	0049      	lsls	r1, r1, #1
 8009308:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 800930c:	d1ee      	bne.n	80092ec <powf+0xec>
 800930e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8009312:	f000 80b5 	beq.w	8009480 <powf+0x280>
 8009316:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800931a:	ea6f 0404 	mvn.w	r4, r4
 800931e:	bf34      	ite	cc
 8009320:	2100      	movcc	r1, #0
 8009322:	2101      	movcs	r1, #1
 8009324:	0fe4      	lsrs	r4, r4, #31
 8009326:	42a1      	cmp	r1, r4
 8009328:	f040 80ad 	bne.w	8009486 <powf+0x286>
 800932c:	ee27 0a07 	vmul.f32	s0, s14, s14
 8009330:	e7de      	b.n	80092f0 <powf+0xf0>
 8009332:	004d      	lsls	r5, r1, #1
 8009334:	1e6b      	subs	r3, r5, #1
 8009336:	4293      	cmp	r3, r2
 8009338:	d31b      	bcc.n	8009372 <powf+0x172>
 800933a:	2900      	cmp	r1, #0
 800933c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009340:	da0e      	bge.n	8009360 <powf+0x160>
 8009342:	4620      	mov	r0, r4
 8009344:	f7ff ff44 	bl	80091d0 <checkint>
 8009348:	2801      	cmp	r0, #1
 800934a:	d109      	bne.n	8009360 <powf+0x160>
 800934c:	eeb1 0a40 	vneg.f32	s0, s0
 8009350:	b945      	cbnz	r5, 8009364 <powf+0x164>
 8009352:	2c00      	cmp	r4, #0
 8009354:	dacc      	bge.n	80092f0 <powf+0xf0>
 8009356:	b003      	add	sp, #12
 8009358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800935c:	f000 b8dc 	b.w	8009518 <__math_divzerof>
 8009360:	2000      	movs	r0, #0
 8009362:	e7f5      	b.n	8009350 <powf+0x150>
 8009364:	2c00      	cmp	r4, #0
 8009366:	dac3      	bge.n	80092f0 <powf+0xf0>
 8009368:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800936c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009370:	e7be      	b.n	80092f0 <powf+0xf0>
 8009372:	2900      	cmp	r1, #0
 8009374:	da1d      	bge.n	80093b2 <powf+0x1b2>
 8009376:	4620      	mov	r0, r4
 8009378:	f7ff ff2a 	bl	80091d0 <checkint>
 800937c:	b920      	cbnz	r0, 8009388 <powf+0x188>
 800937e:	b003      	add	sp, #12
 8009380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009384:	f000 b8da 	b.w	800953c <__math_invalidf>
 8009388:	1e43      	subs	r3, r0, #1
 800938a:	4258      	negs	r0, r3
 800938c:	4158      	adcs	r0, r3
 800938e:	0400      	lsls	r0, r0, #16
 8009390:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8009394:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8009398:	f4bf af48 	bcs.w	800922c <powf+0x2c>
 800939c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80094b4 <powf+0x2b4>
 80093a0:	ee27 0aa6 	vmul.f32	s0, s15, s13
 80093a4:	ee10 3a10 	vmov	r3, s0
 80093a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80093ac:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 80093b0:	e73c      	b.n	800922c <powf+0x2c>
 80093b2:	2000      	movs	r0, #0
 80093b4:	e7ee      	b.n	8009394 <powf+0x194>
 80093b6:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8009498 <powf+0x298>
 80093ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80093be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093c2:	dd0f      	ble.n	80093e4 <powf+0x1e4>
 80093c4:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 80093c8:	b1c0      	cbz	r0, 80093fc <powf+0x1fc>
 80093ca:	9301      	str	r3, [sp, #4]
 80093cc:	eddd 6a01 	vldr	s13, [sp, #4]
 80093d0:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 80093d4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80093d8:	eef4 6a46 	vcmp.f32	s13, s12
 80093dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e0:	f47f af6f 	bne.w	80092c2 <powf+0xc2>
 80093e4:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 80094a0 <powf+0x2a0>
 80093e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80093ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f0:	d80c      	bhi.n	800940c <powf+0x20c>
 80093f2:	b003      	add	sp, #12
 80093f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093f8:	f000 b87c 	b.w	80094f4 <__math_uflowf>
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	eddd 6a00 	vldr	s13, [sp]
 8009402:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8009406:	ee76 6a86 	vadd.f32	s13, s13, s12
 800940a:	e7e5      	b.n	80093d8 <powf+0x1d8>
 800940c:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 80094a8 <powf+0x2a8>
 8009410:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009418:	d504      	bpl.n	8009424 <powf+0x224>
 800941a:	b003      	add	sp, #12
 800941c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009420:	f000 b86e 	b.w	8009500 <__math_may_uflowf>
 8009424:	4b24      	ldr	r3, [pc, #144]	@ (80094b8 <powf+0x2b8>)
 8009426:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800942a:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 800942e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009432:	ee16 2a10 	vmov	r2, s12
 8009436:	ee36 6b45 	vsub.f64	d6, d6, d5
 800943a:	f002 011f 	and.w	r1, r2, #31
 800943e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009442:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 8009446:	ee27 4b07 	vmul.f64	d4, d7, d7
 800944a:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 800944e:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8009452:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8009456:	eea7 6b05 	vfma.f64	d6, d7, d5
 800945a:	686d      	ldr	r5, [r5, #4]
 800945c:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 8009460:	1880      	adds	r0, r0, r2
 8009462:	2100      	movs	r1, #0
 8009464:	190a      	adds	r2, r1, r4
 8009466:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800946a:	eea7 0b05 	vfma.f64	d0, d7, d5
 800946e:	ec43 2b17 	vmov	d7, r2, r3
 8009472:	eea6 0b04 	vfma.f64	d0, d6, d4
 8009476:	ee20 0b07 	vmul.f64	d0, d0, d7
 800947a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800947e:	e737      	b.n	80092f0 <powf+0xf0>
 8009480:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009484:	e734      	b.n	80092f0 <powf+0xf0>
 8009486:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80094bc <powf+0x2bc>
 800948a:	e731      	b.n	80092f0 <powf+0xf0>
 800948c:	f3af 8000 	nop.w
 8009490:	ffd1d571 	.word	0xffd1d571
 8009494:	405fffff 	.word	0x405fffff
 8009498:	ffa3aae2 	.word	0xffa3aae2
 800949c:	405fffff 	.word	0x405fffff
 80094a0:	00000000 	.word	0x00000000
 80094a4:	c062c000 	.word	0xc062c000
 80094a8:	00000000 	.word	0x00000000
 80094ac:	c062a000 	.word	0xc062a000
 80094b0:	08009738 	.word	0x08009738
 80094b4:	4b000000 	.word	0x4b000000
 80094b8:	080095f0 	.word	0x080095f0
 80094bc:	00000000 	.word	0x00000000

080094c0 <with_errnof>:
 80094c0:	b510      	push	{r4, lr}
 80094c2:	ed2d 8b02 	vpush	{d8}
 80094c6:	eeb0 8a40 	vmov.f32	s16, s0
 80094ca:	4604      	mov	r4, r0
 80094cc:	f000 f84e 	bl	800956c <__errno>
 80094d0:	eeb0 0a48 	vmov.f32	s0, s16
 80094d4:	ecbd 8b02 	vpop	{d8}
 80094d8:	6004      	str	r4, [r0, #0]
 80094da:	bd10      	pop	{r4, pc}

080094dc <xflowf>:
 80094dc:	b130      	cbz	r0, 80094ec <xflowf+0x10>
 80094de:	eef1 7a40 	vneg.f32	s15, s0
 80094e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80094e6:	2022      	movs	r0, #34	@ 0x22
 80094e8:	f7ff bfea 	b.w	80094c0 <with_errnof>
 80094ec:	eef0 7a40 	vmov.f32	s15, s0
 80094f0:	e7f7      	b.n	80094e2 <xflowf+0x6>
	...

080094f4 <__math_uflowf>:
 80094f4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80094fc <__math_uflowf+0x8>
 80094f8:	f7ff bff0 	b.w	80094dc <xflowf>
 80094fc:	10000000 	.word	0x10000000

08009500 <__math_may_uflowf>:
 8009500:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009508 <__math_may_uflowf+0x8>
 8009504:	f7ff bfea 	b.w	80094dc <xflowf>
 8009508:	1a200000 	.word	0x1a200000

0800950c <__math_oflowf>:
 800950c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009514 <__math_oflowf+0x8>
 8009510:	f7ff bfe4 	b.w	80094dc <xflowf>
 8009514:	70000000 	.word	0x70000000

08009518 <__math_divzerof>:
 8009518:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8009538 <__math_divzerof+0x20>
 800951c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009520:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009524:	2800      	cmp	r0, #0
 8009526:	f04f 0022 	mov.w	r0, #34	@ 0x22
 800952a:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800952e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009532:	f7ff bfc5 	b.w	80094c0 <with_errnof>
 8009536:	bf00      	nop
 8009538:	00000000 	.word	0x00000000

0800953c <__math_invalidf>:
 800953c:	eef0 7a40 	vmov.f32	s15, s0
 8009540:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009544:	eef4 7a67 	vcmp.f32	s15, s15
 8009548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800954c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8009550:	d602      	bvs.n	8009558 <__math_invalidf+0x1c>
 8009552:	2021      	movs	r0, #33	@ 0x21
 8009554:	f7ff bfb4 	b.w	80094c0 <with_errnof>
 8009558:	4770      	bx	lr

0800955a <memset>:
 800955a:	4402      	add	r2, r0
 800955c:	4603      	mov	r3, r0
 800955e:	4293      	cmp	r3, r2
 8009560:	d100      	bne.n	8009564 <memset+0xa>
 8009562:	4770      	bx	lr
 8009564:	f803 1b01 	strb.w	r1, [r3], #1
 8009568:	e7f9      	b.n	800955e <memset+0x4>
	...

0800956c <__errno>:
 800956c:	4b01      	ldr	r3, [pc, #4]	@ (8009574 <__errno+0x8>)
 800956e:	6818      	ldr	r0, [r3, #0]
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	24000014 	.word	0x24000014

08009578 <__libc_init_array>:
 8009578:	b570      	push	{r4, r5, r6, lr}
 800957a:	4d0d      	ldr	r5, [pc, #52]	@ (80095b0 <__libc_init_array+0x38>)
 800957c:	4c0d      	ldr	r4, [pc, #52]	@ (80095b4 <__libc_init_array+0x3c>)
 800957e:	1b64      	subs	r4, r4, r5
 8009580:	10a4      	asrs	r4, r4, #2
 8009582:	2600      	movs	r6, #0
 8009584:	42a6      	cmp	r6, r4
 8009586:	d109      	bne.n	800959c <__libc_init_array+0x24>
 8009588:	4d0b      	ldr	r5, [pc, #44]	@ (80095b8 <__libc_init_array+0x40>)
 800958a:	4c0c      	ldr	r4, [pc, #48]	@ (80095bc <__libc_init_array+0x44>)
 800958c:	f000 f818 	bl	80095c0 <_init>
 8009590:	1b64      	subs	r4, r4, r5
 8009592:	10a4      	asrs	r4, r4, #2
 8009594:	2600      	movs	r6, #0
 8009596:	42a6      	cmp	r6, r4
 8009598:	d105      	bne.n	80095a6 <__libc_init_array+0x2e>
 800959a:	bd70      	pop	{r4, r5, r6, pc}
 800959c:	f855 3b04 	ldr.w	r3, [r5], #4
 80095a0:	4798      	blx	r3
 80095a2:	3601      	adds	r6, #1
 80095a4:	e7ee      	b.n	8009584 <__libc_init_array+0xc>
 80095a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80095aa:	4798      	blx	r3
 80095ac:	3601      	adds	r6, #1
 80095ae:	e7f2      	b.n	8009596 <__libc_init_array+0x1e>
 80095b0:	08009860 	.word	0x08009860
 80095b4:	08009860 	.word	0x08009860
 80095b8:	08009860 	.word	0x08009860
 80095bc:	08009864 	.word	0x08009864

080095c0 <_init>:
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c2:	bf00      	nop
 80095c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095c6:	bc08      	pop	{r3}
 80095c8:	469e      	mov	lr, r3
 80095ca:	4770      	bx	lr

080095cc <_fini>:
 80095cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ce:	bf00      	nop
 80095d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d2:	bc08      	pop	{r3}
 80095d4:	469e      	mov	lr, r3
 80095d6:	4770      	bx	lr
