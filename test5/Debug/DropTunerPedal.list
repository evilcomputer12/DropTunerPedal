
DropTunerPedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7f0  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800aac0  0800aac0  0000bac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ae88  0800ae88  0000be88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800ae8c  0800ae8c  0000be8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000068  24000000  0800ae90  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000b034  24000068  0800aef8  0000c068  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400b09c  0800aef8  0000c09c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
  9 .debug_info   000169f3  00000000  00000000  0000c096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002c75  00000000  00000000  00022a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001400  00000000  00000000  00025700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000f6e  00000000  00000000  00026b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034fe1  00000000  00000000  00027a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001915e  00000000  00000000  0005ca4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015faf1  00000000  00000000  00075bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001d569e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005958  00000000  00000000  001d56e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000071  00000000  00000000  001db03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000068 	.word	0x24000068
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800aaa8 	.word	0x0800aaa8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400006c 	.word	0x2400006c
 800030c:	0800aaa8 	.word	0x0800aaa8

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	@ 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <ControlLEDs>:
static void MX_FMAC_Init(void);
/* USER CODE BEGIN PFP */

// Function to control LEDs based on semitone value
void ControlLEDs(uint16_t semitone)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
    // Turn off all LEDs before setting new ones
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15 | GPIO_PIN_14, GPIO_PIN_RESET); // LED8 and LED7
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000698:	4852      	ldr	r0, [pc, #328]	@ (80007e4 <ControlLEDs+0x15c>)
 800069a:	f005 fec9 	bl	8006430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET); // LED6-LED1
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 517c 	mov.w	r1, #16128	@ 0x3f00
 80006a4:	4850      	ldr	r0, [pc, #320]	@ (80007e8 <ControlLEDs+0x160>)
 80006a6:	f005 fec3 	bl	8006430 <HAL_GPIO_WritePin>

    switch (semitone)
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	2b0c      	cmp	r3, #12
 80006ae:	f200 8091 	bhi.w	80007d4 <ControlLEDs+0x14c>
 80006b2:	a201      	add	r2, pc, #4	@ (adr r2, 80006b8 <ControlLEDs+0x30>)
 80006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b8:	0800074f 	.word	0x0800074f
 80006bc:	08000741 	.word	0x08000741
 80006c0:	08000733 	.word	0x08000733
 80006c4:	08000725 	.word	0x08000725
 80006c8:	08000717 	.word	0x08000717
 80006cc:	08000709 	.word	0x08000709
 80006d0:	080006fb 	.word	0x080006fb
 80006d4:	080006ed 	.word	0x080006ed
 80006d8:	0800075d 	.word	0x0800075d
 80006dc:	0800075d 	.word	0x0800075d
 80006e0:	0800075d 	.word	0x0800075d
 80006e4:	0800075d 	.word	0x0800075d
 80006e8:	0800075d 	.word	0x0800075d
    {
        case 7:
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // Light up LED1 (semitone 0)
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f2:	483d      	ldr	r0, [pc, #244]	@ (80007e8 <ControlLEDs+0x160>)
 80006f4:	f005 fe9c 	bl	8006430 <HAL_GPIO_WritePin>
            break;
 80006f8:	e06f      	b.n	80007da <ControlLEDs+0x152>
        case 6:
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Light up LED2 (semitone 1)
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000700:	4839      	ldr	r0, [pc, #228]	@ (80007e8 <ControlLEDs+0x160>)
 8000702:	f005 fe95 	bl	8006430 <HAL_GPIO_WritePin>
            break;
 8000706:	e068      	b.n	80007da <ControlLEDs+0x152>
        case 5:
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET); // Light up LED3 (semitone 2)
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800070e:	4836      	ldr	r0, [pc, #216]	@ (80007e8 <ControlLEDs+0x160>)
 8000710:	f005 fe8e 	bl	8006430 <HAL_GPIO_WritePin>
            break;
 8000714:	e061      	b.n	80007da <ControlLEDs+0x152>
        case 4:
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET); // Light up LED4 (semitone 3)
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800071c:	4832      	ldr	r0, [pc, #200]	@ (80007e8 <ControlLEDs+0x160>)
 800071e:	f005 fe87 	bl	8006430 <HAL_GPIO_WritePin>
            break;
 8000722:	e05a      	b.n	80007da <ControlLEDs+0x152>
        case 3:
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);  // Light up LED5 (semitone 4)
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800072a:	482f      	ldr	r0, [pc, #188]	@ (80007e8 <ControlLEDs+0x160>)
 800072c:	f005 fe80 	bl	8006430 <HAL_GPIO_WritePin>
            break;
 8000730:	e053      	b.n	80007da <ControlLEDs+0x152>
        case 2:
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);  // Light up LED6 (semitone 5)
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000738:	482b      	ldr	r0, [pc, #172]	@ (80007e8 <ControlLEDs+0x160>)
 800073a:	f005 fe79 	bl	8006430 <HAL_GPIO_WritePin>
            break;
 800073e:	e04c      	b.n	80007da <ControlLEDs+0x152>
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Light up LED7 (semitone 6)
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000746:	4827      	ldr	r0, [pc, #156]	@ (80007e4 <ControlLEDs+0x15c>)
 8000748:	f005 fe72 	bl	8006430 <HAL_GPIO_WritePin>
            break;
 800074c:	e045      	b.n	80007da <ControlLEDs+0x152>
        case 0:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // Light up LED8 (semitone 7)
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000754:	4823      	ldr	r0, [pc, #140]	@ (80007e4 <ControlLEDs+0x15c>)
 8000756:	f005 fe6b 	bl	8006430 <HAL_GPIO_WritePin>
            break;
 800075a:	e03e      	b.n	80007da <ControlLEDs+0x152>
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);   // Light up LED6 (for semitones 8-12)
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000762:	4821      	ldr	r0, [pc, #132]	@ (80007e8 <ControlLEDs+0x160>)
 8000764:	f005 fe64 	bl	8006430 <HAL_GPIO_WritePin>
            // Light up corresponding LED for semitone
            switch (semitone)
 8000768:	88fb      	ldrh	r3, [r7, #6]
 800076a:	3b08      	subs	r3, #8
 800076c:	2b04      	cmp	r3, #4
 800076e:	d833      	bhi.n	80007d8 <ControlLEDs+0x150>
 8000770:	a201      	add	r2, pc, #4	@ (adr r2, 8000778 <ControlLEDs+0xf0>)
 8000772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000776:	bf00      	nop
 8000778:	0800078d 	.word	0x0800078d
 800077c:	0800079b 	.word	0x0800079b
 8000780:	080007a9 	.word	0x080007a9
 8000784:	080007b7 	.word	0x080007b7
 8000788:	080007c5 	.word	0x080007c5
            {
                case 8:
                	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // Light up LED1 (semitone 8)
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000792:	4814      	ldr	r0, [pc, #80]	@ (80007e4 <ControlLEDs+0x15c>)
 8000794:	f005 fe4c 	bl	8006430 <HAL_GPIO_WritePin>
                    break;
 8000798:	e01b      	b.n	80007d2 <ControlLEDs+0x14a>
                case 9:
                	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Light up LED2 (semitone 9)
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007a0:	4810      	ldr	r0, [pc, #64]	@ (80007e4 <ControlLEDs+0x15c>)
 80007a2:	f005 fe45 	bl	8006430 <HAL_GPIO_WritePin>
                    break;
 80007a6:	e014      	b.n	80007d2 <ControlLEDs+0x14a>
                case 10:
                	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET); // Light up LED3 (semitone 10)
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ae:	480e      	ldr	r0, [pc, #56]	@ (80007e8 <ControlLEDs+0x160>)
 80007b0:	f005 fe3e 	bl	8006430 <HAL_GPIO_WritePin>
                    break;
 80007b4:	e00d      	b.n	80007d2 <ControlLEDs+0x14a>
                case 11:
                	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET); // Light up LED4 (semitone 11)
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007bc:	480a      	ldr	r0, [pc, #40]	@ (80007e8 <ControlLEDs+0x160>)
 80007be:	f005 fe37 	bl	8006430 <HAL_GPIO_WritePin>
                    break;
 80007c2:	e006      	b.n	80007d2 <ControlLEDs+0x14a>
                case 12:
                	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);  // Light up LED5 (semitone 12)
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007ca:	4807      	ldr	r0, [pc, #28]	@ (80007e8 <ControlLEDs+0x160>)
 80007cc:	f005 fe30 	bl	8006430 <HAL_GPIO_WritePin>
                    break;
 80007d0:	bf00      	nop
            }
            break;
 80007d2:	e001      	b.n	80007d8 <ControlLEDs+0x150>
        default:
            // No action needed for invalid semitone values
            break;
 80007d4:	bf00      	nop
 80007d6:	e000      	b.n	80007da <ControlLEDs+0x152>
            break;
 80007d8:	bf00      	nop
    }
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	58020400 	.word	0x58020400
 80007e8:	58020c00 	.word	0x58020c00

080007ec <HAL_TIM_IC_CaptureCallback>:
int16_t count = 0;   // Use signed 16-bit int to handle possible negative values
uint16_t position = 0;
int speed = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
    counter = __HAL_TIM_GET_COUNTER(htim);  // Get the raw counter value
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007fa:	4a13      	ldr	r2, [pc, #76]	@ (8000848 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80007fc:	6013      	str	r3, [r2, #0]

    count = (int16_t)counter;  // Cast to signed int to handle negative values
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	b21a      	sxth	r2, r3
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <HAL_TIM_IC_CaptureCallback+0x60>)
 8000806:	801a      	strh	r2, [r3, #0]

    // If count is negative, set it to zero
    if (count < 0)
 8000808:	4b10      	ldr	r3, [pc, #64]	@ (800084c <HAL_TIM_IC_CaptureCallback+0x60>)
 800080a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800080e:	2b00      	cmp	r3, #0
 8000810:	da02      	bge.n	8000818 <HAL_TIM_IC_CaptureCallback+0x2c>
    {
        count = 0;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <HAL_TIM_IC_CaptureCallback+0x60>)
 8000814:	2200      	movs	r2, #0
 8000816:	801a      	strh	r2, [r3, #0]
    }

    // Scale down count to position, divide by 4 to adjust for sensitivity
    position = count / 4;
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <HAL_TIM_IC_CaptureCallback+0x60>)
 800081a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800081e:	2b00      	cmp	r3, #0
 8000820:	da00      	bge.n	8000824 <HAL_TIM_IC_CaptureCallback+0x38>
 8000822:	3303      	adds	r3, #3
 8000824:	109b      	asrs	r3, r3, #2
 8000826:	b21b      	sxth	r3, r3
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <HAL_TIM_IC_CaptureCallback+0x64>)
 800082c:	801a      	strh	r2, [r3, #0]

    // Clamp the position to be within 0 to 12
    if (position > 12)
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	2b0c      	cmp	r3, #12
 8000834:	d902      	bls.n	800083c <HAL_TIM_IC_CaptureCallback+0x50>
    {
        position = 12;  // Ensure position does not exceed 12
 8000836:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000838:	220c      	movs	r2, #12
 800083a:	801a      	strh	r2, [r3, #0]
    }
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	2400af48 	.word	0x2400af48
 800084c:	2400af4c 	.word	0x2400af4c
 8000850:	2400af4e 	.word	0x2400af4e

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	@ 0x28
 8000858:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800085a:	4b5b      	ldr	r3, [pc, #364]	@ (80009c8 <main+0x174>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000862:	2b00      	cmp	r3, #0
 8000864:	d11b      	bne.n	800089e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000866:	f3bf 8f4f 	dsb	sy
}
 800086a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800086c:	f3bf 8f6f 	isb	sy
}
 8000870:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000872:	4b55      	ldr	r3, [pc, #340]	@ (80009c8 <main+0x174>)
 8000874:	2200      	movs	r2, #0
 8000876:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800087a:	f3bf 8f4f 	dsb	sy
}
 800087e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000880:	f3bf 8f6f 	isb	sy
}
 8000884:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000886:	4b50      	ldr	r3, [pc, #320]	@ (80009c8 <main+0x174>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a4f      	ldr	r2, [pc, #316]	@ (80009c8 <main+0x174>)
 800088c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000890:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000892:	f3bf 8f4f 	dsb	sy
}
 8000896:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000898:	f3bf 8f6f 	isb	sy
}
 800089c:	e000      	b.n	80008a0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800089e:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a0:	f001 f8bc 	bl	8001a1c <HAL_Init>

  /* USER CODE BEGIN Init */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]

  // Enable clocks for GPIO ports B, D, and A
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b4:	4b45      	ldr	r3, [pc, #276]	@ (80009cc <main+0x178>)
 80008b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ba:	4a44      	ldr	r2, [pc, #272]	@ (80009cc <main+0x178>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c4:	4b41      	ldr	r3, [pc, #260]	@ (80009cc <main+0x178>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	4b3e      	ldr	r3, [pc, #248]	@ (80009cc <main+0x178>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d8:	4a3c      	ldr	r2, [pc, #240]	@ (80009cc <main+0x178>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e2:	4b3a      	ldr	r3, [pc, #232]	@ (80009cc <main+0x178>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e8:	f003 0308 	and.w	r3, r3, #8
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b36      	ldr	r3, [pc, #216]	@ (80009cc <main+0x178>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f6:	4a35      	ldr	r2, [pc, #212]	@ (80009cc <main+0x178>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000900:	4b32      	ldr	r3, [pc, #200]	@ (80009cc <main+0x178>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  // Configure GPIO pin outputs for LED8 (PB15) and LED7 (PB14)
  GPIO_InitStruct.Pin = GPIO_PIN_15 | GPIO_PIN_14;
 800090e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;   // Push-pull output
 8000914:	2301      	movs	r3, #1
 8000916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;           // No pull-up or pull-down resistors
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;  // Set low frequency for LEDs
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);       // Initialize GPIOB
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4619      	mov	r1, r3
 8000926:	482a      	ldr	r0, [pc, #168]	@ (80009d0 <main+0x17c>)
 8000928:	f005 fbda 	bl	80060e0 <HAL_GPIO_Init>

  // Configure GPIO pin outputs for LED6 (PD8), LED5 (PD9), LED4 (PD10), LED3 (PD11), LED2 (PD12) , LED2 (PD13)
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13;
 800092c:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8000930:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	4619      	mov	r1, r3
 8000938:	4826      	ldr	r0, [pc, #152]	@ (80009d4 <main+0x180>)
 800093a:	f005 fbd1 	bl	80060e0 <HAL_GPIO_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093e:	f000 f863 	bl	8000a08 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  WtrP = 0;
 8000942:	4b25      	ldr	r3, [pc, #148]	@ (80009d8 <main+0x184>)
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
  Rd_P = 0.0f;
 8000948:	4b24      	ldr	r3, [pc, #144]	@ (80009dc <main+0x188>)
 800094a:	f04f 0200 	mov.w	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
  Shift = 0.0f;  // Pitch shift amount (adjust as needed)
 8000950:	4b23      	ldr	r3, [pc, #140]	@ (80009e0 <main+0x18c>)
 8000952:	f04f 0200 	mov.w	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
  CrossFade = 1.0f;
 8000958:	4b22      	ldr	r3, [pc, #136]	@ (80009e4 <main+0x190>)
 800095a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800095e:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f000 fa44 	bl	8000dec <MX_GPIO_Init>
  MX_DMA_Init();
 8000964:	f000 fa1a 	bl	8000d9c <MX_DMA_Init>
  MX_ADC3_Init();
 8000968:	f000 f8be 	bl	8000ae8 <MX_ADC3_Init>
  MX_DAC1_Init();
 800096c:	f000 f944 	bl	8000bf8 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000970:	f000 f9de 	bl	8000d30 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000974:	f000 f986 	bl	8000c84 <MX_TIM3_Init>
  MX_CORDIC_Init();
 8000978:	f000 f92a 	bl	8000bd0 <MX_CORDIC_Init>
  MX_FMAC_Init();
 800097c:	f000 f96e 	bl	8000c5c <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc3, adc_buffer, N);
 8000980:	f640 625b 	movw	r2, #3675	@ 0xe5b
 8000984:	4918      	ldr	r1, [pc, #96]	@ (80009e8 <main+0x194>)
 8000986:	4819      	ldr	r0, [pc, #100]	@ (80009ec <main+0x198>)
 8000988:	f001 fdfa 	bl	8002580 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, dac_buffer, N, DAC_ALIGN_12B_R);
 800098c:	2300      	movs	r3, #0
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	f640 635b 	movw	r3, #3675	@ 0xe5b
 8000994:	4a16      	ldr	r2, [pc, #88]	@ (80009f0 <main+0x19c>)
 8000996:	2110      	movs	r1, #16
 8000998:	4816      	ldr	r0, [pc, #88]	@ (80009f4 <main+0x1a0>)
 800099a:	f002 ff77 	bl	800388c <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 800099e:	4816      	ldr	r0, [pc, #88]	@ (80009f8 <main+0x1a4>)
 80009a0:	f009 f928 	bl	8009bf4 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80009a4:	213c      	movs	r1, #60	@ 0x3c
 80009a6:	4815      	ldr	r0, [pc, #84]	@ (80009fc <main+0x1a8>)
 80009a8:	f009 fa48 	bl	8009e3c <HAL_TIM_Encoder_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  semitoneShift = position;
 80009ac:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <main+0x1ac>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <main+0x1b0>)
 80009b4:	601a      	str	r2, [r3, #0]
	  ControlLEDs(semitoneShift);
 80009b6:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <main+0x1b0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fe63 	bl	8000688 <ControlLEDs>
	  semitoneShift = position;
 80009c2:	bf00      	nop
 80009c4:	e7f2      	b.n	80009ac <main+0x158>
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00
 80009cc:	58024400 	.word	0x58024400
 80009d0:	58020400 	.word	0x58020400
 80009d4:	58020c00 	.word	0x58020c00
 80009d8:	240039f0 	.word	0x240039f0
 80009dc:	240039f4 	.word	0x240039f4
 80009e0:	240039f8 	.word	0x240039f8
 80009e4:	240039fc 	.word	0x240039fc
 80009e8:	24003c70 	.word	0x24003c70
 80009ec:	24003a04 	.word	0x24003a04
 80009f0:	240075dc 	.word	0x240075dc
 80009f4:	24003b14 	.word	0x24003b14
 80009f8:	24003c24 	.word	0x24003c24
 80009fc:	24003bd8 	.word	0x24003bd8
 8000a00:	2400af4e 	.word	0x2400af4e
 8000a04:	24003a00 	.word	0x24003a00

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b09c      	sub	sp, #112	@ 0x70
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a12:	224c      	movs	r2, #76	@ 0x4c
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f00a f813 	bl	800aa42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2220      	movs	r2, #32
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f00a f80d 	bl	800aa42 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f005 fd1b 	bl	8006464 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae4 <SystemClock_Config+0xdc>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4a2b      	ldr	r2, [pc, #172]	@ (8000ae4 <SystemClock_Config+0xdc>)
 8000a38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a3c:	6193      	str	r3, [r2, #24]
 8000a3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <SystemClock_Config+0xdc>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a4a:	bf00      	nop
 8000a4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ae4 <SystemClock_Config+0xdc>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a58:	d1f8      	bne.n	8000a4c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000a62:	2340      	movs	r3, #64	@ 0x40
 8000a64:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a66:	2302      	movs	r3, #2
 8000a68:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8000a72:	2322      	movs	r3, #34	@ 0x22
 8000a74:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a82:	230c      	movs	r3, #12
 8000a84:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000a8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a94:	4618      	mov	r0, r3
 8000a96:	f005 fd1f 	bl	80064d8 <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000aa0:	f000 fc9a 	bl	80013d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa4:	233f      	movs	r3, #63	@ 0x3f
 8000aa6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ab4:	2340      	movs	r3, #64	@ 0x40
 8000ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ab8:	2340      	movs	r3, #64	@ 0x40
 8000aba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000abc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ac2:	2340      	movs	r3, #64	@ 0x40
 8000ac4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2103      	movs	r1, #3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f006 f8de 	bl	8006c8c <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ad6:	f000 fc7f 	bl	80013d8 <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3770      	adds	r7, #112	@ 0x70
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	58024800 	.word	0x58024800

08000ae8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	@ 0x28
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2224      	movs	r2, #36	@ 0x24
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f009 ffa4 	bl	800aa42 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000afa:	4b32      	ldr	r3, [pc, #200]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000afc:	4a32      	ldr	r2, [pc, #200]	@ (8000bc8 <MX_ADC3_Init+0xe0>)
 8000afe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b00:	4b30      	ldr	r3, [pc, #192]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b02:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b06:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b08:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b14:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b20:	4b28      	ldr	r3, [pc, #160]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b26:	4b27      	ldr	r3, [pc, #156]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000b2c:	4b25      	ldr	r3, [pc, #148]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b32:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000b3a:	4b22      	ldr	r3, [pc, #136]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b3c:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000b40:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b42:	4b20      	ldr	r3, [pc, #128]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b64:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000b6a:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8000b72:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b78:	4812      	ldr	r0, [pc, #72]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b7a:	f001 faf9 	bl	8002170 <HAL_ADC_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 8000b84:	f000 fc28 	bl	80013d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b88:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <MX_ADC3_Init+0xe4>)
 8000b8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b8c:	2306      	movs	r3, #6
 8000b8e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b94:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b98:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4806      	ldr	r0, [pc, #24]	@ (8000bc4 <MX_ADC3_Init+0xdc>)
 8000bac:	f001 fdce 	bl	800274c <HAL_ADC_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000bb6:	f000 fc0f 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	@ 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	24003a04 	.word	0x24003a04
 8000bc8:	58026000 	.word	0x58026000
 8000bcc:	2e300800 	.word	0x2e300800

08000bd0 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <MX_CORDIC_Init+0x20>)
 8000bd6:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <MX_CORDIC_Init+0x24>)
 8000bd8:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <MX_CORDIC_Init+0x20>)
 8000bdc:	f002 fcf2 	bl	80035c4 <HAL_CORDIC_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000be6:	f000 fbf7 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	24003aec 	.word	0x24003aec
 8000bf4:	48024400 	.word	0x48024400

08000bf8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	@ 0x28
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2224      	movs	r2, #36	@ 0x24
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f009 ff1c 	bl	800aa42 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c0a:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <MX_DAC1_Init+0x5c>)
 8000c0c:	4a12      	ldr	r2, [pc, #72]	@ (8000c58 <MX_DAC1_Init+0x60>)
 8000c0e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c10:	4810      	ldr	r0, [pc, #64]	@ (8000c54 <MX_DAC1_Init+0x5c>)
 8000c12:	f002 fe18 	bl	8003846 <HAL_DAC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c1c:	f000 fbdc 	bl	80013d8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000c24:	2316      	movs	r3, #22
 8000c26:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2210      	movs	r2, #16
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4806      	ldr	r0, [pc, #24]	@ (8000c54 <MX_DAC1_Init+0x5c>)
 8000c3c:	f002 ff04 	bl	8003a48 <HAL_DAC_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000c46:	f000 fbc7 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	@ 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	24003b14 	.word	0x24003b14
 8000c58:	40007400 	.word	0x40007400

08000c5c <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_FMAC_Init+0x20>)
 8000c62:	4a07      	ldr	r2, [pc, #28]	@ (8000c80 <MX_FMAC_Init+0x24>)
 8000c64:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_FMAC_Init+0x20>)
 8000c68:	f005 f98e 	bl	8005f88 <HAL_FMAC_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8000c72:	f000 fbb1 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	24003ba0 	.word	0x24003ba0
 8000c80:	48024000 	.word	0x48024000

08000c84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	@ 0x30
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2224      	movs	r2, #36	@ 0x24
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f009 fed5 	bl	800aa42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	@ (8000d28 <MX_TIM3_Init+0xa4>)
 8000ca4:	4a21      	ldr	r2, [pc, #132]	@ (8000d2c <MX_TIM3_Init+0xa8>)
 8000ca6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <MX_TIM3_Init+0xa4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <MX_TIM3_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <MX_TIM3_Init+0xa4>)
 8000cb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <MX_TIM3_Init+0xa4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <MX_TIM3_Init+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480d      	ldr	r0, [pc, #52]	@ (8000d28 <MX_TIM3_Init+0xa4>)
 8000cf4:	f008 fffc 	bl	8009cf0 <HAL_TIM_Encoder_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000cfe:	f000 fb6b 	bl	80013d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <MX_TIM3_Init+0xa4>)
 8000d10:	f009 fb4a 	bl	800a3a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d1a:	f000 fb5d 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	@ 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	24003bd8 	.word	0x24003bd8
 8000d2c:	40000400 	.word	0x40000400

08000d30 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d40:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <MX_TIM6_Init+0x64>)
 8000d42:	4a15      	ldr	r2, [pc, #84]	@ (8000d98 <MX_TIM6_Init+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <MX_TIM6_Init+0x64>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <MX_TIM6_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6237;
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <MX_TIM6_Init+0x64>)
 8000d54:	f641 025d 	movw	r2, #6237	@ 0x185d
 8000d58:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <MX_TIM6_Init+0x64>)
 8000d5c:	2280      	movs	r2, #128	@ 0x80
 8000d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <MX_TIM6_Init+0x64>)
 8000d62:	f008 feef 	bl	8009b44 <HAL_TIM_Base_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d6c:	f000 fb34 	bl	80013d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d70:	2320      	movs	r3, #32
 8000d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_TIM6_Init+0x64>)
 8000d7e:	f009 fb13 	bl	800a3a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d88:	f000 fb26 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	24003c24 	.word	0x24003c24
 8000d98:	40001000 	.word	0x40001000

08000d9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <MX_DMA_Init+0x4c>)
 8000da4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000da8:	4a0f      	ldr	r2, [pc, #60]	@ (8000de8 <MX_DMA_Init+0x4c>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <MX_DMA_Init+0x4c>)
 8000db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	200b      	movs	r0, #11
 8000dc6:	f002 fd0a 	bl	80037de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000dca:	200b      	movs	r0, #11
 8000dcc:	f002 fd21 	bl	8003812 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	200c      	movs	r0, #12
 8000dd6:	f002 fd02 	bl	80037de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000dda:	200c      	movs	r0, #12
 8000ddc:	f002 fd19 	bl	8003812 <HAL_NVIC_EnableIRQ>

}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	58024400 	.word	0x58024400

08000dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <MX_GPIO_Init+0x50>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	4a10      	ldr	r2, [pc, #64]	@ (8000e3c <MX_GPIO_Init+0x50>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <MX_GPIO_Init+0x50>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <MX_GPIO_Init+0x50>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	4a09      	ldr	r2, [pc, #36]	@ (8000e3c <MX_GPIO_Init+0x50>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <MX_GPIO_Init+0x50>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	58024400 	.word	0x58024400

08000e40 <cubicInterpolate>:
/* USER CODE BEGIN 4 */
// Pitch shifting function (downward only)


// Cubic interpolation function
float cubicInterpolate(float y0, float y1, float y2, float y3, float mu) {
 8000e40:	b480      	push	{r7}
 8000e42:	b08d      	sub	sp, #52	@ 0x34
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	ed87 0a05 	vstr	s0, [r7, #20]
 8000e4a:	edc7 0a04 	vstr	s1, [r7, #16]
 8000e4e:	ed87 1a03 	vstr	s2, [r7, #12]
 8000e52:	edc7 1a02 	vstr	s3, [r7, #8]
 8000e56:	ed87 2a01 	vstr	s4, [r7, #4]
    float a0, a1, a2, a3, mu2;

    mu2 = mu * mu;
 8000e5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e62:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    a0 = y3 - y2 - y0 + y1;
 8000e66:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e82:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    a1 = y0 - y1 - a0;
 8000e86:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e92:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    a2 = y2 - y0;
 8000e9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ea2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eaa:	edc7 7a08 	vstr	s15, [r7, #32]
    a3 = y1;
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	61fb      	str	r3, [r7, #28]

    return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);
 8000eb2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000eb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ebe:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000ec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ec6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000eca:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ed2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ed6:	edd7 6a08 	vldr	s13, [r7, #32]
 8000eda:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ede:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ee2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ee6:	edd7 7a07 	vldr	s15, [r7, #28]
 8000eea:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000eee:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef2:	3734      	adds	r7, #52	@ 0x34
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	0000      	movs	r0, r0
	...

08000f00 <sineCrossfade>:

// Sine-based smooth crossfade function
float sineCrossfade(float x) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	ed87 0a01 	vstr	s0, [r7, #4]
    return 0.5f * (1.0f - cosf(x * M_PI));  // Smoother transition using cosine
 8000f0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f12:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8000f48 <sineCrossfade+0x48>
 8000f16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f22:	f009 fca1 	bl	800a868 <cosf>
 8000f26:	eef0 7a40 	vmov.f32	s15, s0
 8000f2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f32:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f36:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	f3af 8000 	nop.w
 8000f48:	54442d18 	.word	0x54442d18
 8000f4c:	400921fb 	.word	0x400921fb

08000f50 <Do_PitchShift>:
float b0 = 0.2f;  // Feedforward coefficient

// Previous output sample for the IIR filter (initially set to 0)
float previousOutput = 0.0f;

uint32_t Do_PitchShift(uint32_t sample) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b092      	sub	sp, #72	@ 0x48
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    // Write the original sample to the ring buffer
    Buf[WtrP] = sample;
 8000f58:	4bc4      	ldr	r3, [pc, #784]	@ (800126c <Do_PitchShift+0x31c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	49c4      	ldr	r1, [pc, #784]	@ (8001270 <Do_PitchShift+0x320>)
 8000f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // Ensure semitoneShift is within the valid range
    if (semitoneShift > MAX_DOWN_SHIFT) {
 8000f64:	4bc3      	ldr	r3, [pc, #780]	@ (8001274 <Do_PitchShift+0x324>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b0c      	cmp	r3, #12
 8000f6a:	d902      	bls.n	8000f72 <Do_PitchShift+0x22>
        semitoneShift = MAX_DOWN_SHIFT;
 8000f6c:	4bc1      	ldr	r3, [pc, #772]	@ (8001274 <Do_PitchShift+0x324>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    }

    // Calculate the pitch shift ratio (downward shift only)
    float pitchShiftRatio = powf(2.0f, -(float)semitoneShift / 12.0f);
 8000f72:	4bc0      	ldr	r3, [pc, #768]	@ (8001274 <Do_PitchShift+0x324>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f7e:	eef1 7a67 	vneg.f32	s15, s15
 8000f82:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8000f86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8a:	eef0 0a47 	vmov.f32	s1, s14
 8000f8e:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000f92:	f009 fadd 	bl	800a550 <powf>
 8000f96:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44

    // Update the read pointer based on the pitch shift ratio
    Rd_P += pitchShiftRatio;
 8000f9a:	4bb7      	ldr	r3, [pc, #732]	@ (8001278 <Do_PitchShift+0x328>)
 8000f9c:	ed93 7a00 	vldr	s14, [r3]
 8000fa0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fa8:	4bb3      	ldr	r3, [pc, #716]	@ (8001278 <Do_PitchShift+0x328>)
 8000faa:	edc3 7a00 	vstr	s15, [r3]

    // Clamp the read pointer to prevent overflow
    if (Rd_P >= BufSize) Rd_P -= BufSize;
 8000fae:	4bb2      	ldr	r3, [pc, #712]	@ (8001278 <Do_PitchShift+0x328>)
 8000fb0:	edd3 7a00 	vldr	s15, [r3]
 8000fb4:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800127c <Do_PitchShift+0x32c>
 8000fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	db09      	blt.n	8000fd6 <Do_PitchShift+0x86>
 8000fc2:	4bad      	ldr	r3, [pc, #692]	@ (8001278 <Do_PitchShift+0x328>)
 8000fc4:	edd3 7a00 	vldr	s15, [r3]
 8000fc8:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 800127c <Do_PitchShift+0x32c>
 8000fcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fd0:	4ba9      	ldr	r3, [pc, #676]	@ (8001278 <Do_PitchShift+0x328>)
 8000fd2:	edc3 7a00 	vstr	s15, [r3]

    // Compute integer read pointers (main phase and 180° phase)
    int RdPtr_Int = (int)Rd_P % BufSize;               // Main read pointer
 8000fd6:	4ba8      	ldr	r3, [pc, #672]	@ (8001278 <Do_PitchShift+0x328>)
 8000fd8:	edd3 7a00 	vldr	s15, [r3]
 8000fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe0:	ee17 3a90 	vmov	r3, s15
 8000fe4:	4aa6      	ldr	r2, [pc, #664]	@ (8001280 <Do_PitchShift+0x330>)
 8000fe6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fea:	1251      	asrs	r1, r2, #9
 8000fec:	17da      	asrs	r2, r3, #31
 8000fee:	1a8a      	subs	r2, r1, r2
 8000ff0:	f640 615b 	movw	r1, #3675	@ 0xe5b
 8000ff4:	fb01 f202 	mul.w	r2, r1, r2
 8000ff8:	1a9b      	subs	r3, r3, r2
 8000ffa:	643b      	str	r3, [r7, #64]	@ 0x40
    int RdPtr_Int2 = (RdPtr_Int + (BufSize / 2)) % BufSize;  // 180° phase pointer
 8000ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ffe:	f203 732d 	addw	r3, r3, #1837	@ 0x72d
 8001002:	4a9f      	ldr	r2, [pc, #636]	@ (8001280 <Do_PitchShift+0x330>)
 8001004:	fb82 1203 	smull	r1, r2, r2, r3
 8001008:	1251      	asrs	r1, r2, #9
 800100a:	17da      	asrs	r2, r3, #31
 800100c:	1a8a      	subs	r2, r1, r2
 800100e:	f640 615b 	movw	r1, #3675	@ 0xe5b
 8001012:	fb01 f202 	mul.w	r2, r1, r2
 8001016:	1a9b      	subs	r3, r3, r2
 8001018:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Extract the fractional part of the read pointer for interpolation
    float frac = Rd_P - (float)RdPtr_Int;
 800101a:	4b97      	ldr	r3, [pc, #604]	@ (8001278 <Do_PitchShift+0x328>)
 800101c:	ed93 7a00 	vldr	s14, [r3]
 8001020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800102e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // Get the four samples needed for cubic interpolation
    int RdPtr_Int_M1 = (RdPtr_Int - 1 + BufSize) % BufSize;  // Previous sample (wrap around buffer)
 8001032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001034:	f603 635a 	addw	r3, r3, #3674	@ 0xe5a
 8001038:	4a91      	ldr	r2, [pc, #580]	@ (8001280 <Do_PitchShift+0x330>)
 800103a:	fb82 1203 	smull	r1, r2, r2, r3
 800103e:	1251      	asrs	r1, r2, #9
 8001040:	17da      	asrs	r2, r3, #31
 8001042:	1a8a      	subs	r2, r1, r2
 8001044:	f640 615b 	movw	r1, #3675	@ 0xe5b
 8001048:	fb01 f202 	mul.w	r2, r1, r2
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	637b      	str	r3, [r7, #52]	@ 0x34
    int RdPtr_Int_P1 = (RdPtr_Int + 1) % BufSize;            // Next sample
 8001050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001052:	3301      	adds	r3, #1
 8001054:	4a8a      	ldr	r2, [pc, #552]	@ (8001280 <Do_PitchShift+0x330>)
 8001056:	fb82 1203 	smull	r1, r2, r2, r3
 800105a:	1251      	asrs	r1, r2, #9
 800105c:	17da      	asrs	r2, r3, #31
 800105e:	1a8a      	subs	r2, r1, r2
 8001060:	f640 615b 	movw	r1, #3675	@ 0xe5b
 8001064:	fb01 f202 	mul.w	r2, r1, r2
 8001068:	1a9b      	subs	r3, r3, r2
 800106a:	633b      	str	r3, [r7, #48]	@ 0x30
    int RdPtr_Int_P2 = (RdPtr_Int + 2) % BufSize;            // Next next sample
 800106c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800106e:	3302      	adds	r3, #2
 8001070:	4a83      	ldr	r2, [pc, #524]	@ (8001280 <Do_PitchShift+0x330>)
 8001072:	fb82 1203 	smull	r1, r2, r2, r3
 8001076:	1251      	asrs	r1, r2, #9
 8001078:	17da      	asrs	r2, r3, #31
 800107a:	1a8a      	subs	r2, r1, r2
 800107c:	f640 615b 	movw	r1, #3675	@ 0xe5b
 8001080:	fb01 f202 	mul.w	r2, r1, r2
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Cubic interpolation for the main phase
    float Rd0 = cubicInterpolate(
        (float)Buf[RdPtr_Int_M1],
 8001088:	4a79      	ldr	r2, [pc, #484]	@ (8001270 <Do_PitchShift+0x320>)
 800108a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    float Rd0 = cubicInterpolate(
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        (float)Buf[RdPtr_Int],
 8001098:	4a75      	ldr	r2, [pc, #468]	@ (8001270 <Do_PitchShift+0x320>)
 800109a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800109c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    float Rd0 = cubicInterpolate(
 80010a0:	ee07 3a10 	vmov	s14, r3
 80010a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        (float)Buf[RdPtr_Int_P1],
 80010a8:	4a71      	ldr	r2, [pc, #452]	@ (8001270 <Do_PitchShift+0x320>)
 80010aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    float Rd0 = cubicInterpolate(
 80010b0:	ee06 3a90 	vmov	s13, r3
 80010b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        (float)Buf[RdPtr_Int_P2],
 80010b8:	4a6d      	ldr	r2, [pc, #436]	@ (8001270 <Do_PitchShift+0x320>)
 80010ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    float Rd0 = cubicInterpolate(
 80010c0:	ee06 3a10 	vmov	s12, r3
 80010c4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80010c8:	ed97 2a0e 	vldr	s4, [r7, #56]	@ 0x38
 80010cc:	eef0 1a46 	vmov.f32	s3, s12
 80010d0:	eeb0 1a66 	vmov.f32	s2, s13
 80010d4:	eef0 0a47 	vmov.f32	s1, s14
 80010d8:	eeb0 0a67 	vmov.f32	s0, s15
 80010dc:	f7ff feb0 	bl	8000e40 <cubicInterpolate>
 80010e0:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
        frac
    );

    // Repeat the same for the 180° phase shift (cross-phase)
    int RdPtr_Int2_M1 = (RdPtr_Int2 - 1 + BufSize) % BufSize;
 80010e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010e6:	f603 635a 	addw	r3, r3, #3674	@ 0xe5a
 80010ea:	4a65      	ldr	r2, [pc, #404]	@ (8001280 <Do_PitchShift+0x330>)
 80010ec:	fb82 1203 	smull	r1, r2, r2, r3
 80010f0:	1251      	asrs	r1, r2, #9
 80010f2:	17da      	asrs	r2, r3, #31
 80010f4:	1a8a      	subs	r2, r1, r2
 80010f6:	f640 615b 	movw	r1, #3675	@ 0xe5b
 80010fa:	fb01 f202 	mul.w	r2, r1, r2
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
    int RdPtr_Int2_P1 = (RdPtr_Int2 + 1) % BufSize;
 8001102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001104:	3301      	adds	r3, #1
 8001106:	4a5e      	ldr	r2, [pc, #376]	@ (8001280 <Do_PitchShift+0x330>)
 8001108:	fb82 1203 	smull	r1, r2, r2, r3
 800110c:	1251      	asrs	r1, r2, #9
 800110e:	17da      	asrs	r2, r3, #31
 8001110:	1a8a      	subs	r2, r1, r2
 8001112:	f640 615b 	movw	r1, #3675	@ 0xe5b
 8001116:	fb01 f202 	mul.w	r2, r1, r2
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	623b      	str	r3, [r7, #32]
    int RdPtr_Int2_P2 = (RdPtr_Int2 + 2) % BufSize;
 800111e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001120:	3302      	adds	r3, #2
 8001122:	4a57      	ldr	r2, [pc, #348]	@ (8001280 <Do_PitchShift+0x330>)
 8001124:	fb82 1203 	smull	r1, r2, r2, r3
 8001128:	1251      	asrs	r1, r2, #9
 800112a:	17da      	asrs	r2, r3, #31
 800112c:	1a8a      	subs	r2, r1, r2
 800112e:	f640 615b 	movw	r1, #3675	@ 0xe5b
 8001132:	fb01 f202 	mul.w	r2, r1, r2
 8001136:	1a9b      	subs	r3, r3, r2
 8001138:	61fb      	str	r3, [r7, #28]

    float Rd1 = cubicInterpolate(
        (float)Buf[RdPtr_Int2_M1],
 800113a:	4a4d      	ldr	r2, [pc, #308]	@ (8001270 <Do_PitchShift+0x320>)
 800113c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    float Rd1 = cubicInterpolate(
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        (float)Buf[RdPtr_Int2],
 800114a:	4a49      	ldr	r2, [pc, #292]	@ (8001270 <Do_PitchShift+0x320>)
 800114c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    float Rd1 = cubicInterpolate(
 8001152:	ee07 3a10 	vmov	s14, r3
 8001156:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        (float)Buf[RdPtr_Int2_P1],
 800115a:	4a45      	ldr	r2, [pc, #276]	@ (8001270 <Do_PitchShift+0x320>)
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    float Rd1 = cubicInterpolate(
 8001162:	ee06 3a90 	vmov	s13, r3
 8001166:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        (float)Buf[RdPtr_Int2_P2],
 800116a:	4a41      	ldr	r2, [pc, #260]	@ (8001270 <Do_PitchShift+0x320>)
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    float Rd1 = cubicInterpolate(
 8001172:	ee06 3a10 	vmov	s12, r3
 8001176:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800117a:	ed97 2a0e 	vldr	s4, [r7, #56]	@ 0x38
 800117e:	eef0 1a46 	vmov.f32	s3, s12
 8001182:	eeb0 1a66 	vmov.f32	s2, s13
 8001186:	eef0 0a47 	vmov.f32	s1, s14
 800118a:	eeb0 0a67 	vmov.f32	s0, s15
 800118e:	f7ff fe57 	bl	8000e40 <cubicInterpolate>
 8001192:	ed87 0a06 	vstr	s0, [r7, #24]
        frac
    );

    // Crossfade logic using overlap and sine-based crossfade
    if (Overlap >= (WtrP - RdPtr_Int) && (WtrP - RdPtr_Int) >= 0 && Shift != 1.0f) {
 8001196:	4b35      	ldr	r3, [pc, #212]	@ (800126c <Do_PitchShift+0x31c>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011a2:	dc27      	bgt.n	80011f4 <Do_PitchShift+0x2a4>
 80011a4:	4b31      	ldr	r3, [pc, #196]	@ (800126c <Do_PitchShift+0x31c>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db21      	blt.n	80011f4 <Do_PitchShift+0x2a4>
 80011b0:	4b34      	ldr	r3, [pc, #208]	@ (8001284 <Do_PitchShift+0x334>)
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011ba:	eef4 7a47 	vcmp.f32	s15, s14
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	d017      	beq.n	80011f4 <Do_PitchShift+0x2a4>
        int rel = WtrP - RdPtr_Int;
 80011c4:	4b29      	ldr	r3, [pc, #164]	@ (800126c <Do_PitchShift+0x31c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	617b      	str	r3, [r7, #20]
        CrossFade = sineCrossfade((float)rel / (float)Overlap);
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d8:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001288 <Do_PitchShift+0x338>
 80011dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011e0:	eeb0 0a47 	vmov.f32	s0, s14
 80011e4:	f7ff fe8c 	bl	8000f00 <sineCrossfade>
 80011e8:	eef0 7a40 	vmov.f32	s15, s0
 80011ec:	4b27      	ldr	r3, [pc, #156]	@ (800128c <Do_PitchShift+0x33c>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
    if (Overlap >= (WtrP - RdPtr_Int) && (WtrP - RdPtr_Int) >= 0 && Shift != 1.0f) {
 80011f2:	e008      	b.n	8001206 <Do_PitchShift+0x2b6>
    } else if (WtrP - RdPtr_Int == 0) {
 80011f4:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <Do_PitchShift+0x31c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d103      	bne.n	8001206 <Do_PitchShift+0x2b6>
        CrossFade = 0.0f;
 80011fe:	4b23      	ldr	r3, [pc, #140]	@ (800128c <Do_PitchShift+0x33c>)
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
    }

    if (Overlap >= (WtrP - RdPtr_Int2) && (WtrP - RdPtr_Int2) >= 0 && Shift != 1.0f) {
 8001206:	4b19      	ldr	r3, [pc, #100]	@ (800126c <Do_PitchShift+0x31c>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001212:	dc3d      	bgt.n	8001290 <Do_PitchShift+0x340>
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <Do_PitchShift+0x31c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	db37      	blt.n	8001290 <Do_PitchShift+0x340>
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <Do_PitchShift+0x334>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800122a:	eef4 7a47 	vcmp.f32	s15, s14
 800122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001232:	d02d      	beq.n	8001290 <Do_PitchShift+0x340>
        int rel = WtrP - RdPtr_Int2;
 8001234:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <Do_PitchShift+0x31c>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	613b      	str	r3, [r7, #16]
        CrossFade = 1.0f - sineCrossfade((float)rel / (float)Overlap);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001248:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001288 <Do_PitchShift+0x338>
 800124c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001250:	eeb0 0a47 	vmov.f32	s0, s14
 8001254:	f7ff fe54 	bl	8000f00 <sineCrossfade>
 8001258:	eef0 7a40 	vmov.f32	s15, s0
 800125c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <Do_PitchShift+0x33c>)
 8001266:	edc3 7a00 	vstr	s15, [r3]
    if (Overlap >= (WtrP - RdPtr_Int2) && (WtrP - RdPtr_Int2) >= 0 && Shift != 1.0f) {
 800126a:	e01a      	b.n	80012a2 <Do_PitchShift+0x352>
 800126c:	240039f0 	.word	0x240039f0
 8001270:	24000084 	.word	0x24000084
 8001274:	24003a00 	.word	0x24003a00
 8001278:	240039f4 	.word	0x240039f4
 800127c:	4565b000 	.word	0x4565b000
 8001280:	23aa752b 	.word	0x23aa752b
 8001284:	240039f8 	.word	0x240039f8
 8001288:	45000000 	.word	0x45000000
 800128c:	240039fc 	.word	0x240039fc
    } else if (WtrP - RdPtr_Int2 == 0) {
 8001290:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <Do_PitchShift+0x3e0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001296:	429a      	cmp	r2, r3
 8001298:	d103      	bne.n	80012a2 <Do_PitchShift+0x352>
        CrossFade = 1.0f;
 800129a:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <Do_PitchShift+0x3e4>)
 800129c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80012a0:	601a      	str	r2, [r3, #0]
    }

    // Perform cross-fading and combine the two phase-shifted samples
    float combinedSample = Rd0 * CrossFade + Rd1 * (1.0f - CrossFade);
 80012a2:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <Do_PitchShift+0x3e4>)
 80012a4:	ed93 7a00 	vldr	s14, [r3]
 80012a8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80012ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b0:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <Do_PitchShift+0x3e4>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80012ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012be:	edd7 7a06 	vldr	s15, [r7, #24]
 80012c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ca:	edc7 7a03 	vstr	s15, [r7, #12]

    // Apply IIR filter to smooth the output
    float filteredSample = b0 * combinedSample + a1 * previousOutput;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <Do_PitchShift+0x3e8>)
 80012d0:	ed93 7a00 	vldr	s14, [r3]
 80012d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012dc:	4b17      	ldr	r3, [pc, #92]	@ (800133c <Do_PitchShift+0x3ec>)
 80012de:	edd3 6a00 	vldr	s13, [r3]
 80012e2:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <Do_PitchShift+0x3f0>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f0:	edc7 7a02 	vstr	s15, [r7, #8]
    previousOutput = filteredSample;  // Store the filtered output for the next iteration
 80012f4:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <Do_PitchShift+0x3f0>)
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	6013      	str	r3, [r2, #0]

    // Convert the filtered sample back to integer for output
    sample = (uint32_t)filteredSample;
 80012fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80012fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001302:	ee17 3a90 	vmov	r3, s15
 8001306:	607b      	str	r3, [r7, #4]

    // Increment the write pointer and handle wrap-around
    WtrP++;
 8001308:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <Do_PitchShift+0x3e0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	4a08      	ldr	r2, [pc, #32]	@ (8001330 <Do_PitchShift+0x3e0>)
 8001310:	6013      	str	r3, [r2, #0]
    if (WtrP == BufSize) WtrP = 0;
 8001312:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <Do_PitchShift+0x3e0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f640 625b 	movw	r2, #3675	@ 0xe5b
 800131a:	4293      	cmp	r3, r2
 800131c:	d102      	bne.n	8001324 <Do_PitchShift+0x3d4>
 800131e:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <Do_PitchShift+0x3e0>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]

    return sample;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3748      	adds	r7, #72	@ 0x48
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	240039f0 	.word	0x240039f0
 8001334:	240039fc 	.word	0x240039fc
 8001338:	24000004 	.word	0x24000004
 800133c:	24000000 	.word	0x24000000
 8001340:	2400af54 	.word	0x2400af54

08001344 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	for(int n = 0; n < halfN; n++)
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	e00e      	b.n	8001370 <HAL_ADC_ConvHalfCpltCallback+0x2c>
	{
		dac_buffer[n] = Do_PitchShift(adc_buffer[n]);
 8001352:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fdf8 	bl	8000f50 <Do_PitchShift>
 8001360:	4602      	mov	r2, r0
 8001362:	4909      	ldr	r1, [pc, #36]	@ (8001388 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int n = 0; n < halfN; n++)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3301      	adds	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f240 722c 	movw	r2, #1836	@ 0x72c
 8001376:	4293      	cmp	r3, r2
 8001378:	ddeb      	ble.n	8001352 <HAL_ADC_ConvHalfCpltCallback+0xe>
	}
}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	24003c70 	.word	0x24003c70
 8001388:	240075dc 	.word	0x240075dc

0800138c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	for(int n = halfN; n < N; n++)
 8001394:	f240 732d 	movw	r3, #1837	@ 0x72d
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	e00e      	b.n	80013ba <HAL_ADC_ConvCpltCallback+0x2e>
	{
		dac_buffer[n] =  Do_PitchShift(adc_buffer[n]);
 800139c:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <HAL_ADC_ConvCpltCallback+0x44>)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fdd3 	bl	8000f50 <Do_PitchShift>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4909      	ldr	r1, [pc, #36]	@ (80013d4 <HAL_ADC_ConvCpltCallback+0x48>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int n = halfN; n < N; n++)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3301      	adds	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f640 625a 	movw	r2, #3674	@ 0xe5a
 80013c0:	4293      	cmp	r3, r2
 80013c2:	ddeb      	ble.n	800139c <HAL_ADC_ConvCpltCallback+0x10>
	}
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	24003c70 	.word	0x24003c70
 80013d4:	240075dc 	.word	0x240075dc

080013d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013dc:	b672      	cpsid	i
}
 80013de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <Error_Handler+0x8>

080013e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <HAL_MspInit+0x5c>)
 80013ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013f0:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <HAL_MspInit+0x5c>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_MspInit+0x5c>)
 80013fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001408:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <HAL_MspInit+0x5c>)
 800140a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800140e:	4a0c      	ldr	r2, [pc, #48]	@ (8001440 <HAL_MspInit+0x5c>)
 8001410:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001414:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001418:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <HAL_MspInit+0x5c>)
 800141a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800141e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8001426:	2000      	movs	r0, #0
 8001428:	f000 fb8a 	bl	8001b40 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 800142c:	f000 fbb0 	bl	8001b90 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001430:	2000      	movs	r0, #0
 8001432:	f000 fb99 	bl	8001b68 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	58024400 	.word	0x58024400

08001444 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b0b8      	sub	sp, #224	@ 0xe0
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	22b8      	movs	r2, #184	@ 0xb8
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f009 faec 	bl	800aa42 <memset>
  if(hadc->Instance==ADC3)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a44      	ldr	r2, [pc, #272]	@ (8001580 <HAL_ADC_MspInit+0x13c>)
 8001470:	4293      	cmp	r3, r2
 8001472:	f040 8081 	bne.w	8001578 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001476:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001482:	2304      	movs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001486:	230c      	movs	r3, #12
 8001488:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 800148a:	2304      	movs	r3, #4
 800148c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800148e:	2302      	movs	r3, #2
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001492:	2302      	movs	r3, #2
 8001494:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001496:	23c0      	movs	r3, #192	@ 0xc0
 8001498:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800149a:	2300      	movs	r3, #0
 800149c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4618      	mov	r0, r3
 80014ae:	f005 ff63 	bl	8007378 <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80014b8:	f7ff ff8e 	bl	80013d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80014bc:	4b31      	ldr	r3, [pc, #196]	@ (8001584 <HAL_ADC_MspInit+0x140>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c2:	4a30      	ldr	r2, [pc, #192]	@ (8001584 <HAL_ADC_MspInit+0x140>)
 80014c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <HAL_ADC_MspInit+0x140>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <HAL_ADC_MspInit+0x140>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e0:	4a28      	ldr	r2, [pc, #160]	@ (8001584 <HAL_ADC_MspInit+0x140>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ea:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <HAL_ADC_MspInit+0x140>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC1     ------> ADC3_INP11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014f8:	2302      	movs	r3, #2
 80014fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fe:	2303      	movs	r3, #3
 8001500:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800150e:	4619      	mov	r1, r3
 8001510:	481d      	ldr	r0, [pc, #116]	@ (8001588 <HAL_ADC_MspInit+0x144>)
 8001512:	f004 fde5 	bl	80060e0 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8001516:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <HAL_ADC_MspInit+0x148>)
 8001518:	4a1d      	ldr	r2, [pc, #116]	@ (8001590 <HAL_ADC_MspInit+0x14c>)
 800151a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <HAL_ADC_MspInit+0x148>)
 800151e:	2273      	movs	r2, #115	@ 0x73
 8001520:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <HAL_ADC_MspInit+0x148>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001528:	4b18      	ldr	r3, [pc, #96]	@ (800158c <HAL_ADC_MspInit+0x148>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800152e:	4b17      	ldr	r3, [pc, #92]	@ (800158c <HAL_ADC_MspInit+0x148>)
 8001530:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001534:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <HAL_ADC_MspInit+0x148>)
 8001538:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800153c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800153e:	4b13      	ldr	r3, [pc, #76]	@ (800158c <HAL_ADC_MspInit+0x148>)
 8001540:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001544:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <HAL_ADC_MspInit+0x148>)
 8001548:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800154c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800154e:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <HAL_ADC_MspInit+0x148>)
 8001550:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001554:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001556:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <HAL_ADC_MspInit+0x148>)
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800155c:	480b      	ldr	r0, [pc, #44]	@ (800158c <HAL_ADC_MspInit+0x148>)
 800155e:	f002 fc3f 	bl	8003de0 <HAL_DMA_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8001568:	f7ff ff36 	bl	80013d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a07      	ldr	r2, [pc, #28]	@ (800158c <HAL_ADC_MspInit+0x148>)
 8001570:	659a      	str	r2, [r3, #88]	@ 0x58
 8001572:	4a06      	ldr	r2, [pc, #24]	@ (800158c <HAL_ADC_MspInit+0x148>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001578:	bf00      	nop
 800157a:	37e0      	adds	r7, #224	@ 0xe0
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	58026000 	.word	0x58026000
 8001584:	58024400 	.word	0x58024400
 8001588:	58020800 	.word	0x58020800
 800158c:	24003a74 	.word	0x24003a74
 8001590:	40020010 	.word	0x40020010

08001594 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0b      	ldr	r2, [pc, #44]	@ (80015d0 <HAL_CORDIC_MspInit+0x3c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d10e      	bne.n	80015c4 <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80015a6:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <HAL_CORDIC_MspInit+0x40>)
 80015a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80015ac:	4a09      	ldr	r2, [pc, #36]	@ (80015d4 <HAL_CORDIC_MspInit+0x40>)
 80015ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <HAL_CORDIC_MspInit+0x40>)
 80015b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80015bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	48024400 	.word	0x48024400
 80015d4:	58024400 	.word	0x58024400

080015d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a30      	ldr	r2, [pc, #192]	@ (80016b8 <HAL_DAC_MspInit+0xe0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d15a      	bne.n	80016b0 <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80015fa:	4b30      	ldr	r3, [pc, #192]	@ (80016bc <HAL_DAC_MspInit+0xe4>)
 80015fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001600:	4a2e      	ldr	r2, [pc, #184]	@ (80016bc <HAL_DAC_MspInit+0xe4>)
 8001602:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001606:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800160a:	4b2c      	ldr	r3, [pc, #176]	@ (80016bc <HAL_DAC_MspInit+0xe4>)
 800160c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001610:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	4b28      	ldr	r3, [pc, #160]	@ (80016bc <HAL_DAC_MspInit+0xe4>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161e:	4a27      	ldr	r2, [pc, #156]	@ (80016bc <HAL_DAC_MspInit+0xe4>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001628:	4b24      	ldr	r3, [pc, #144]	@ (80016bc <HAL_DAC_MspInit+0xe4>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001636:	2320      	movs	r3, #32
 8001638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163a:	2303      	movs	r3, #3
 800163c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	481d      	ldr	r0, [pc, #116]	@ (80016c0 <HAL_DAC_MspInit+0xe8>)
 800164a:	f004 fd49 	bl	80060e0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 800164e:	4b1d      	ldr	r3, [pc, #116]	@ (80016c4 <HAL_DAC_MspInit+0xec>)
 8001650:	4a1d      	ldr	r2, [pc, #116]	@ (80016c8 <HAL_DAC_MspInit+0xf0>)
 8001652:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001654:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <HAL_DAC_MspInit+0xec>)
 8001656:	2244      	movs	r2, #68	@ 0x44
 8001658:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800165a:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <HAL_DAC_MspInit+0xec>)
 800165c:	2240      	movs	r2, #64	@ 0x40
 800165e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001660:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <HAL_DAC_MspInit+0xec>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <HAL_DAC_MspInit+0xec>)
 8001668:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800166c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800166e:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <HAL_DAC_MspInit+0xec>)
 8001670:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001674:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001676:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <HAL_DAC_MspInit+0xec>)
 8001678:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800167c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <HAL_DAC_MspInit+0xec>)
 8001680:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001684:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001686:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <HAL_DAC_MspInit+0xec>)
 8001688:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800168c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800168e:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <HAL_DAC_MspInit+0xec>)
 8001690:	2200      	movs	r2, #0
 8001692:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001694:	480b      	ldr	r0, [pc, #44]	@ (80016c4 <HAL_DAC_MspInit+0xec>)
 8001696:	f002 fba3 	bl	8003de0 <HAL_DMA_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 80016a0:	f7ff fe9a 	bl	80013d8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <HAL_DAC_MspInit+0xec>)
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	4a06      	ldr	r2, [pc, #24]	@ (80016c4 <HAL_DAC_MspInit+0xec>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	@ 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40007400 	.word	0x40007400
 80016bc:	58024400 	.word	0x58024400
 80016c0:	58020000 	.word	0x58020000
 80016c4:	24003b28 	.word	0x24003b28
 80016c8:	40020028 	.word	0x40020028

080016cc <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001708 <HAL_FMAC_MspInit+0x3c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d10e      	bne.n	80016fc <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <HAL_FMAC_MspInit+0x40>)
 80016e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80016e4:	4a09      	ldr	r2, [pc, #36]	@ (800170c <HAL_FMAC_MspInit+0x40>)
 80016e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ea:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80016ee:	4b07      	ldr	r3, [pc, #28]	@ (800170c <HAL_FMAC_MspInit+0x40>)
 80016f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80016f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END FMAC_MspInit 1 */

  }

}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	48024000 	.word	0x48024000
 800170c:	58024400 	.word	0x58024400

08001710 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	@ 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1e      	ldr	r2, [pc, #120]	@ (80017a8 <HAL_TIM_Encoder_MspInit+0x98>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d135      	bne.n	800179e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001732:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <HAL_TIM_Encoder_MspInit+0x9c>)
 8001734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001738:	4a1c      	ldr	r2, [pc, #112]	@ (80017ac <HAL_TIM_Encoder_MspInit+0x9c>)
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001742:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <HAL_TIM_Encoder_MspInit+0x9c>)
 8001744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001750:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <HAL_TIM_Encoder_MspInit+0x9c>)
 8001752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001756:	4a15      	ldr	r2, [pc, #84]	@ (80017ac <HAL_TIM_Encoder_MspInit+0x9c>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <HAL_TIM_Encoder_MspInit+0x9c>)
 8001762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800176e:	23c0      	movs	r3, #192	@ 0xc0
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800177e:	2302      	movs	r3, #2
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4809      	ldr	r0, [pc, #36]	@ (80017b0 <HAL_TIM_Encoder_MspInit+0xa0>)
 800178a:	f004 fca9 	bl	80060e0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	201d      	movs	r0, #29
 8001794:	f002 f823 	bl	80037de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001798:	201d      	movs	r0, #29
 800179a:	f002 f83a 	bl	8003812 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	@ 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40000400 	.word	0x40000400
 80017ac:	58024400 	.word	0x58024400
 80017b0:	58020000 	.word	0x58020000

080017b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0b      	ldr	r2, [pc, #44]	@ (80017f0 <HAL_TIM_Base_MspInit+0x3c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d10e      	bne.n	80017e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017c6:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_TIM_Base_MspInit+0x40>)
 80017c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017cc:	4a09      	ldr	r2, [pc, #36]	@ (80017f4 <HAL_TIM_Base_MspInit+0x40>)
 80017ce:	f043 0310 	orr.w	r3, r3, #16
 80017d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017d6:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <HAL_TIM_Base_MspInit+0x40>)
 80017d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40001000 	.word	0x40001000
 80017f4:	58024400 	.word	0x58024400

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <NMI_Handler+0x4>

08001800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <MemManage_Handler+0x4>

08001810 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <UsageFault_Handler+0x4>

08001820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 8001850:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <SysTick_Handler+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3301      	adds	r3, #1
 8001856:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <SysTick_Handler+0x40>)
 8001858:	6013      	str	r3, [r2, #0]

	if (indx == 1000)
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <SysTick_Handler+0x40>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001862:	d10f      	bne.n	8001884 <SysTick_Handler+0x38>
	{
		speed = ((position - oldpos)*2);  // speed in clicks/sec
 8001864:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <SysTick_Handler+0x44>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <SysTick_Handler+0x48>)
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4a09      	ldr	r2, [pc, #36]	@ (8001898 <SysTick_Handler+0x4c>)
 8001874:	6013      	str	r3, [r2, #0]
		oldpos = position;
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <SysTick_Handler+0x44>)
 8001878:	881a      	ldrh	r2, [r3, #0]
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <SysTick_Handler+0x48>)
 800187c:	801a      	strh	r2, [r3, #0]
		indx = 0;
 800187e:	4b03      	ldr	r3, [pc, #12]	@ (800188c <SysTick_Handler+0x40>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001884:	f000 f93c 	bl	8001b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2400af5c 	.word	0x2400af5c
 8001890:	2400af4e 	.word	0x2400af4e
 8001894:	2400af58 	.word	0x2400af58
 8001898:	2400af50 	.word	0x2400af50

0800189c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80018a0:	4802      	ldr	r0, [pc, #8]	@ (80018ac <DMA1_Stream0_IRQHandler+0x10>)
 80018a2:	f003 f85f 	bl	8004964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	24003a74 	.word	0x24003a74

080018b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80018b4:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <DMA1_Stream1_IRQHandler+0x10>)
 80018b6:	f003 f855 	bl	8004964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	24003b28 	.word	0x24003b28

080018c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018c8:	4802      	ldr	r0, [pc, #8]	@ (80018d4 <TIM3_IRQHandler+0x10>)
 80018ca:	f008 fb65 	bl	8009f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	24003bd8 	.word	0x24003bd8

080018d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018dc:	4b32      	ldr	r3, [pc, #200]	@ (80019a8 <SystemInit+0xd0>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e2:	4a31      	ldr	r2, [pc, #196]	@ (80019a8 <SystemInit+0xd0>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018ec:	4b2f      	ldr	r3, [pc, #188]	@ (80019ac <SystemInit+0xd4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 030f 	and.w	r3, r3, #15
 80018f4:	2b06      	cmp	r3, #6
 80018f6:	d807      	bhi.n	8001908 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018f8:	4b2c      	ldr	r3, [pc, #176]	@ (80019ac <SystemInit+0xd4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 030f 	bic.w	r3, r3, #15
 8001900:	4a2a      	ldr	r2, [pc, #168]	@ (80019ac <SystemInit+0xd4>)
 8001902:	f043 0307 	orr.w	r3, r3, #7
 8001906:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001908:	4b29      	ldr	r3, [pc, #164]	@ (80019b0 <SystemInit+0xd8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a28      	ldr	r2, [pc, #160]	@ (80019b0 <SystemInit+0xd8>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001914:	4b26      	ldr	r3, [pc, #152]	@ (80019b0 <SystemInit+0xd8>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800191a:	4b25      	ldr	r3, [pc, #148]	@ (80019b0 <SystemInit+0xd8>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4924      	ldr	r1, [pc, #144]	@ (80019b0 <SystemInit+0xd8>)
 8001920:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <SystemInit+0xdc>)
 8001922:	4013      	ands	r3, r2
 8001924:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001926:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <SystemInit+0xd4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001932:	4b1e      	ldr	r3, [pc, #120]	@ (80019ac <SystemInit+0xd4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 030f 	bic.w	r3, r3, #15
 800193a:	4a1c      	ldr	r2, [pc, #112]	@ (80019ac <SystemInit+0xd4>)
 800193c:	f043 0307 	orr.w	r3, r3, #7
 8001940:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001942:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <SystemInit+0xd8>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001948:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <SystemInit+0xd8>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800194e:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <SystemInit+0xd8>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001954:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <SystemInit+0xd8>)
 8001956:	4a18      	ldr	r2, [pc, #96]	@ (80019b8 <SystemInit+0xe0>)
 8001958:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <SystemInit+0xd8>)
 800195c:	4a17      	ldr	r2, [pc, #92]	@ (80019bc <SystemInit+0xe4>)
 800195e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001960:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <SystemInit+0xd8>)
 8001962:	4a17      	ldr	r2, [pc, #92]	@ (80019c0 <SystemInit+0xe8>)
 8001964:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001966:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <SystemInit+0xd8>)
 8001968:	2200      	movs	r2, #0
 800196a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800196c:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <SystemInit+0xd8>)
 800196e:	4a14      	ldr	r2, [pc, #80]	@ (80019c0 <SystemInit+0xe8>)
 8001970:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001972:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <SystemInit+0xd8>)
 8001974:	2200      	movs	r2, #0
 8001976:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001978:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <SystemInit+0xd8>)
 800197a:	4a11      	ldr	r2, [pc, #68]	@ (80019c0 <SystemInit+0xe8>)
 800197c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800197e:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <SystemInit+0xd8>)
 8001980:	2200      	movs	r2, #0
 8001982:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001984:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <SystemInit+0xd8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a09      	ldr	r2, [pc, #36]	@ (80019b0 <SystemInit+0xd8>)
 800198a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800198e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001990:	4b07      	ldr	r3, [pc, #28]	@ (80019b0 <SystemInit+0xd8>)
 8001992:	2200      	movs	r2, #0
 8001994:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001996:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <SystemInit+0xec>)
 8001998:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800199c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00
 80019ac:	52002000 	.word	0x52002000
 80019b0:	58024400 	.word	0x58024400
 80019b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80019b8:	02020200 	.word	0x02020200
 80019bc:	01ff0000 	.word	0x01ff0000
 80019c0:	01010280 	.word	0x01010280
 80019c4:	52004000 	.word	0x52004000

080019c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019cc:	f7ff ff84 	bl	80018d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d0:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019d2:	490d      	ldr	r1, [pc, #52]	@ (8001a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019f6:	f009 f833 	bl	800aa60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fa:	f7fe ff2b 	bl	8000854 <main>
  bx  lr
 80019fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a00:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001a04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a08:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8001a0c:	0800ae90 	.word	0x0800ae90
  ldr r2, =_sbss
 8001a10:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8001a14:	2400b09c 	.word	0x2400b09c

08001a18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC3_IRQHandler>
	...

08001a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a22:	2003      	movs	r0, #3
 8001a24:	f001 fed0 	bl	80037c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a28:	f005 fae6 	bl	8006ff8 <HAL_RCC_GetSysClockFreq>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <HAL_Init+0x68>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	0a1b      	lsrs	r3, r3, #8
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	4913      	ldr	r1, [pc, #76]	@ (8001a88 <HAL_Init+0x6c>)
 8001a3a:	5ccb      	ldrb	r3, [r1, r3]
 8001a3c:	f003 031f 	and.w	r3, r3, #31
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
 8001a44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a46:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <HAL_Init+0x68>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a88 <HAL_Init+0x6c>)
 8001a50:	5cd3      	ldrb	r3, [r2, r3]
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a8c <HAL_Init+0x70>)
 8001a5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a60:	4a0b      	ldr	r2, [pc, #44]	@ (8001a90 <HAL_Init+0x74>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a66:	200f      	movs	r0, #15
 8001a68:	f000 f814 	bl	8001a94 <HAL_InitTick>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e002      	b.n	8001a7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a76:	f7ff fcb5 	bl	80013e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	58024400 	.word	0x58024400
 8001a88:	0800aac0 	.word	0x0800aac0
 8001a8c:	2400000c 	.word	0x2400000c
 8001a90:	24000008 	.word	0x24000008

08001a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a9c:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <HAL_InitTick+0x60>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e021      	b.n	8001aec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <HAL_InitTick+0x64>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_InitTick+0x60>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f001 feb5 	bl	800382e <HAL_SYSTICK_Config>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00e      	b.n	8001aec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b0f      	cmp	r3, #15
 8001ad2:	d80a      	bhi.n	8001aea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	f001 fe7f 	bl	80037de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae0:	4a06      	ldr	r2, [pc, #24]	@ (8001afc <HAL_InitTick+0x68>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e000      	b.n	8001aec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	24000014 	.word	0x24000014
 8001af8:	24000008 	.word	0x24000008
 8001afc:	24000010 	.word	0x24000010

08001b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_IncTick+0x20>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <HAL_IncTick+0x24>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <HAL_IncTick+0x24>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	24000014 	.word	0x24000014
 8001b24:	2400af60 	.word	0x2400af60

08001b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	@ (8001b3c <HAL_GetTick+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	2400af60 	.word	0x2400af60

08001b40 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b50:	4904      	ldr	r1, [pc, #16]	@ (8001b64 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	58003c00 	.word	0x58003c00

08001b68 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001b70:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 0202 	bic.w	r2, r3, #2
 8001b78:	4904      	ldr	r1, [pc, #16]	@ (8001b8c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	58003c00 	.word	0x58003c00

08001b90 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001b96:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001ba2:	f7ff ffc1 	bl	8001b28 <HAL_GetTick>
 8001ba6:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001ba8:	e008      	b.n	8001bbc <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001baa:	f7ff ffbd 	bl	8001b28 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b0a      	cmp	r3, #10
 8001bb6:	d901      	bls.n	8001bbc <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e006      	b.n	8001bca <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001bbc:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	58003c00 	.word	0x58003c00

08001bd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3360      	adds	r3, #96	@ 0x60
 8001c52:	461a      	mov	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ca0 <LL_ADC_SetOffset+0x60>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d10b      	bne.n	8001c7c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001c7a:	e00b      	b.n	8001c94 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	601a      	str	r2, [r3, #0]
}
 8001c94:	bf00      	nop
 8001c96:	371c      	adds	r7, #28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	58026000 	.word	0x58026000

08001ca4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3360      	adds	r3, #96	@ 0x60
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4a0c      	ldr	r2, [pc, #48]	@ (8001d44 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00e      	beq.n	8001d36 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3360      	adds	r3, #96	@ 0x60
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	601a      	str	r2, [r3, #0]
  }
}
 8001d36:	bf00      	nop
 8001d38:	371c      	adds	r7, #28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	58026000 	.word	0x58026000

08001d48 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a0c      	ldr	r2, [pc, #48]	@ (8001d88 <LL_ADC_SetOffsetSaturation+0x40>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d10e      	bne.n	8001d7a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3360      	adds	r3, #96	@ 0x60
 8001d60:	461a      	mov	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	58026000 	.word	0x58026000

08001d8c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001dcc <LL_ADC_SetOffsetSign+0x40>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d10e      	bne.n	8001dbe <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3360      	adds	r3, #96	@ 0x60
 8001da4:	461a      	mov	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	58026000 	.word	0x58026000

08001dd0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3360      	adds	r3, #96	@ 0x60
 8001de0:	461a      	mov	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4a0c      	ldr	r2, [pc, #48]	@ (8001e20 <LL_ADC_SetOffsetState+0x50>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d108      	bne.n	8001e04 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001e02:	e007      	b.n	8001e14 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	601a      	str	r2, [r3, #0]
}
 8001e14:	bf00      	nop
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	58026000 	.word	0x58026000

08001e24 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b087      	sub	sp, #28
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3330      	adds	r3, #48	@ 0x30
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	4413      	add	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	211f      	movs	r1, #31
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	0e9b      	lsrs	r3, r3, #26
 8001e82:	f003 011f 	and.w	r1, r3, #31
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	431a      	orrs	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f023 0203 	bic.w	r2, r3, #3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	60da      	str	r2, [r3, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	60da      	str	r2, [r3, #12]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a08      	ldr	r2, [pc, #32]	@ (8001f18 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d107      	bne.n	8001f0a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f023 0203 	bic.w	r2, r3, #3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	60da      	str	r2, [r3, #12]
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	58026000 	.word	0x58026000

08001f1c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3314      	adds	r3, #20
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	0e5b      	lsrs	r3, r3, #25
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	4413      	add	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	0d1b      	lsrs	r3, r3, #20
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	2107      	movs	r1, #7
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	401a      	ands	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	0d1b      	lsrs	r3, r3, #20
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	431a      	orrs	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f66:	bf00      	nop
 8001f68:	371c      	adds	r7, #28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a1a      	ldr	r2, [pc, #104]	@ (8001fec <LL_ADC_SetChannelSingleDiff+0x78>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d115      	bne.n	8001fb4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f94:	43db      	mvns	r3, r3
 8001f96:	401a      	ands	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0318 	and.w	r3, r3, #24
 8001f9e:	4914      	ldr	r1, [pc, #80]	@ (8001ff0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001fa0:	40d9      	lsrs	r1, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	400b      	ands	r3, r1
 8001fa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001faa:	431a      	orrs	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001fb2:	e014      	b.n	8001fde <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 0318 	and.w	r3, r3, #24
 8001fca:	4909      	ldr	r1, [pc, #36]	@ (8001ff0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001fcc:	40d9      	lsrs	r1, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	400b      	ands	r3, r1
 8001fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	58026000 	.word	0x58026000
 8001ff0:	000fffff 	.word	0x000fffff

08001ff4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 031f 	and.w	r3, r3, #31
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <LL_ADC_DisableDeepPowerDown+0x20>)
 800201e:	4013      	ands	r3, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6093      	str	r3, [r2, #8]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	5fffffc0 	.word	0x5fffffc0

08002034 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002048:	d101      	bne.n	800204e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <LL_ADC_EnableInternalRegulator+0x24>)
 800206a:	4013      	ands	r3, r2
 800206c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	6fffffc0 	.word	0x6fffffc0

08002084 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002094:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002098:	d101      	bne.n	800209e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <LL_ADC_Enable+0x24>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	7fffffc0 	.word	0x7fffffc0

080020d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <LL_ADC_IsEnabled+0x18>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <LL_ADC_IsEnabled+0x1a>
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <LL_ADC_REG_StartConversion+0x24>)
 800210a:	4013      	ands	r3, r2
 800210c:	f043 0204 	orr.w	r2, r3, #4
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	7fffffc0 	.word	0x7fffffc0

08002124 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b04      	cmp	r3, #4
 8002136:	d101      	bne.n	800213c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b08      	cmp	r3, #8
 800215c:	d101      	bne.n	8002162 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b089      	sub	sp, #36	@ 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800217c:	2300      	movs	r3, #0
 800217e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e1ee      	b.n	8002568 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff f953 	bl	8001444 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff3f 	bl	8002034 <LL_ADC_IsDeepPowerDownEnabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d004      	beq.n	80021c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff25 	bl	8002010 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ff5a 	bl	8002084 <LL_ADC_IsInternalRegulatorEnabled>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d114      	bne.n	8002200 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff3e 	bl	800205c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021e0:	4b8e      	ldr	r3, [pc, #568]	@ (800241c <HAL_ADC_Init+0x2ac>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	099b      	lsrs	r3, r3, #6
 80021e6:	4a8e      	ldr	r2, [pc, #568]	@ (8002420 <HAL_ADC_Init+0x2b0>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	099b      	lsrs	r3, r3, #6
 80021ee:	3301      	adds	r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021f2:	e002      	b.n	80021fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f9      	bne.n	80021f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff3d 	bl	8002084 <LL_ADC_IsInternalRegulatorEnabled>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10d      	bne.n	800222c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002214:	f043 0210 	orr.w	r2, r3, #16
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002220:	f043 0201 	orr.w	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff77 	bl	8002124 <LL_ADC_REG_IsConversionOngoing>
 8002236:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	f040 8188 	bne.w	8002556 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f040 8184 	bne.w	8002556 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002252:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002256:	f043 0202 	orr.w	r2, r3, #2
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff36 	bl	80020d4 <LL_ADC_IsEnabled>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d136      	bne.n	80022dc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6c      	ldr	r2, [pc, #432]	@ (8002424 <HAL_ADC_Init+0x2b4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d004      	beq.n	8002282 <HAL_ADC_Init+0x112>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a6a      	ldr	r2, [pc, #424]	@ (8002428 <HAL_ADC_Init+0x2b8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10e      	bne.n	80022a0 <HAL_ADC_Init+0x130>
 8002282:	4868      	ldr	r0, [pc, #416]	@ (8002424 <HAL_ADC_Init+0x2b4>)
 8002284:	f7ff ff26 	bl	80020d4 <LL_ADC_IsEnabled>
 8002288:	4604      	mov	r4, r0
 800228a:	4867      	ldr	r0, [pc, #412]	@ (8002428 <HAL_ADC_Init+0x2b8>)
 800228c:	f7ff ff22 	bl	80020d4 <LL_ADC_IsEnabled>
 8002290:	4603      	mov	r3, r0
 8002292:	4323      	orrs	r3, r4
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e008      	b.n	80022b2 <HAL_ADC_Init+0x142>
 80022a0:	4862      	ldr	r0, [pc, #392]	@ (800242c <HAL_ADC_Init+0x2bc>)
 80022a2:	f7ff ff17 	bl	80020d4 <LL_ADC_IsEnabled>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d012      	beq.n	80022dc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a5a      	ldr	r2, [pc, #360]	@ (8002424 <HAL_ADC_Init+0x2b4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d004      	beq.n	80022ca <HAL_ADC_Init+0x15a>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a58      	ldr	r2, [pc, #352]	@ (8002428 <HAL_ADC_Init+0x2b8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_Init+0x15e>
 80022ca:	4a59      	ldr	r2, [pc, #356]	@ (8002430 <HAL_ADC_Init+0x2c0>)
 80022cc:	e000      	b.n	80022d0 <HAL_ADC_Init+0x160>
 80022ce:	4a59      	ldr	r2, [pc, #356]	@ (8002434 <HAL_ADC_Init+0x2c4>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4619      	mov	r1, r3
 80022d6:	4610      	mov	r0, r2
 80022d8:	f7ff fc7e 	bl	8001bd8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a52      	ldr	r2, [pc, #328]	@ (800242c <HAL_ADC_Init+0x2bc>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d129      	bne.n	800233a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7e5b      	ldrb	r3, [r3, #25]
 80022ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80022f0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80022f6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d013      	beq.n	8002328 <HAL_ADC_Init+0x1b8>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b0c      	cmp	r3, #12
 8002306:	d00d      	beq.n	8002324 <HAL_ADC_Init+0x1b4>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b1c      	cmp	r3, #28
 800230e:	d007      	beq.n	8002320 <HAL_ADC_Init+0x1b0>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b18      	cmp	r3, #24
 8002316:	d101      	bne.n	800231c <HAL_ADC_Init+0x1ac>
 8002318:	2318      	movs	r3, #24
 800231a:	e006      	b.n	800232a <HAL_ADC_Init+0x1ba>
 800231c:	2300      	movs	r3, #0
 800231e:	e004      	b.n	800232a <HAL_ADC_Init+0x1ba>
 8002320:	2310      	movs	r3, #16
 8002322:	e002      	b.n	800232a <HAL_ADC_Init+0x1ba>
 8002324:	2308      	movs	r3, #8
 8002326:	e000      	b.n	800232a <HAL_ADC_Init+0x1ba>
 8002328:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800232a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002332:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	e00e      	b.n	8002358 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7e5b      	ldrb	r3, [r3, #25]
 800233e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002344:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800234a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002352:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d106      	bne.n	8002370 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	3b01      	subs	r3, #1
 8002368:	045b      	lsls	r3, r3, #17
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a26      	ldr	r2, [pc, #152]	@ (800242c <HAL_ADC_Init+0x2bc>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d115      	bne.n	80023c2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	4b26      	ldr	r3, [pc, #152]	@ (8002438 <HAL_ADC_Init+0x2c8>)
 800239e:	4013      	ands	r3, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	69b9      	ldr	r1, [r7, #24]
 80023a6:	430b      	orrs	r3, r1
 80023a8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	611a      	str	r2, [r3, #16]
 80023c0:	e009      	b.n	80023d6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	4b1c      	ldr	r3, [pc, #112]	@ (800243c <HAL_ADC_Init+0x2cc>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	69b9      	ldr	r1, [r7, #24]
 80023d2:	430b      	orrs	r3, r1
 80023d4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fea2 	bl	8002124 <LL_ADC_REG_IsConversionOngoing>
 80023e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff feaf 	bl	800214a <LL_ADC_INJ_IsConversionOngoing>
 80023ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 808e 	bne.w	8002512 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f040 808a 	bne.w	8002512 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a0a      	ldr	r2, [pc, #40]	@ (800242c <HAL_ADC_Init+0x2bc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d11b      	bne.n	8002440 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7e1b      	ldrb	r3, [r3, #24]
 800240c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002414:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	e018      	b.n	800244e <HAL_ADC_Init+0x2de>
 800241c:	24000008 	.word	0x24000008
 8002420:	053e2d63 	.word	0x053e2d63
 8002424:	40022000 	.word	0x40022000
 8002428:	40022100 	.word	0x40022100
 800242c:	58026000 	.word	0x58026000
 8002430:	40022300 	.word	0x40022300
 8002434:	58026300 	.word	0x58026300
 8002438:	fff04007 	.word	0xfff04007
 800243c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7e1b      	ldrb	r3, [r3, #24]
 8002444:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	4b46      	ldr	r3, [pc, #280]	@ (8002570 <HAL_ADC_Init+0x400>)
 8002456:	4013      	ands	r3, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	69b9      	ldr	r1, [r7, #24]
 800245e:	430b      	orrs	r3, r1
 8002460:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002468:	2b01      	cmp	r3, #1
 800246a:	d137      	bne.n	80024dc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a3f      	ldr	r2, [pc, #252]	@ (8002574 <HAL_ADC_Init+0x404>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d116      	bne.n	80024aa <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	4b3d      	ldr	r3, [pc, #244]	@ (8002578 <HAL_ADC_Init+0x408>)
 8002484:	4013      	ands	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800248e:	4311      	orrs	r1, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002494:	4311      	orrs	r1, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800249a:	430a      	orrs	r2, r1
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	611a      	str	r2, [r3, #16]
 80024a8:	e020      	b.n	80024ec <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	4b32      	ldr	r3, [pc, #200]	@ (800257c <HAL_ADC_Init+0x40c>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024b8:	3a01      	subs	r2, #1
 80024ba:	0411      	lsls	r1, r2, #16
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024c0:	4311      	orrs	r1, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80024cc:	430a      	orrs	r2, r1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	611a      	str	r2, [r3, #16]
 80024da:	e007      	b.n	80024ec <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1b      	ldr	r2, [pc, #108]	@ (8002574 <HAL_ADC_Init+0x404>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d002      	beq.n	8002512 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 ff6b 	bl	80033e8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d10c      	bne.n	8002534 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	f023 010f 	bic.w	r1, r3, #15
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	1e5a      	subs	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	631a      	str	r2, [r3, #48]	@ 0x30
 8002532:	e007      	b.n	8002544 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 020f 	bic.w	r2, r2, #15
 8002542:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002548:	f023 0303 	bic.w	r3, r3, #3
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	661a      	str	r2, [r3, #96]	@ 0x60
 8002554:	e007      	b.n	8002566 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255a:	f043 0210 	orr.w	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002566:	7ffb      	ldrb	r3, [r7, #31]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3724      	adds	r7, #36	@ 0x24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	ffffbffc 	.word	0xffffbffc
 8002574:	58026000 	.word	0x58026000
 8002578:	fc00f81f 	.word	0xfc00f81f
 800257c:	fc00f81e 	.word	0xfc00f81e

08002580 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a60      	ldr	r2, [pc, #384]	@ (8002714 <HAL_ADC_Start_DMA+0x194>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d004      	beq.n	80025a0 <HAL_ADC_Start_DMA+0x20>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a5f      	ldr	r2, [pc, #380]	@ (8002718 <HAL_ADC_Start_DMA+0x198>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_Start_DMA+0x24>
 80025a0:	4b5e      	ldr	r3, [pc, #376]	@ (800271c <HAL_ADC_Start_DMA+0x19c>)
 80025a2:	e000      	b.n	80025a6 <HAL_ADC_Start_DMA+0x26>
 80025a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002720 <HAL_ADC_Start_DMA+0x1a0>)
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fd24 	bl	8001ff4 <LL_ADC_GetMultimode>
 80025ac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fdb6 	bl	8002124 <LL_ADC_REG_IsConversionOngoing>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f040 80a2 	bne.w	8002704 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_Start_DMA+0x4e>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e09d      	b.n	800270a <HAL_ADC_Start_DMA+0x18a>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d003      	beq.n	80025ea <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b09      	cmp	r3, #9
 80025e6:	f040 8086 	bne.w	80026f6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fdde 	bl	80031ac <ADC_Enable>
 80025f0:	4603      	mov	r3, r0
 80025f2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d178      	bne.n	80026ec <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025fe:	4b49      	ldr	r3, [pc, #292]	@ (8002724 <HAL_ADC_Start_DMA+0x1a4>)
 8002600:	4013      	ands	r3, r2
 8002602:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a42      	ldr	r2, [pc, #264]	@ (8002718 <HAL_ADC_Start_DMA+0x198>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d002      	beq.n	800261a <HAL_ADC_Start_DMA+0x9a>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	e000      	b.n	800261c <HAL_ADC_Start_DMA+0x9c>
 800261a:	4b3e      	ldr	r3, [pc, #248]	@ (8002714 <HAL_ADC_Start_DMA+0x194>)
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	4293      	cmp	r3, r2
 8002622:	d002      	beq.n	800262a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d105      	bne.n	8002636 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800262e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d006      	beq.n	8002650 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002646:	f023 0206 	bic.w	r2, r3, #6
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	665a      	str	r2, [r3, #100]	@ 0x64
 800264e:	e002      	b.n	8002656 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265a:	4a33      	ldr	r2, [pc, #204]	@ (8002728 <HAL_ADC_Start_DMA+0x1a8>)
 800265c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002662:	4a32      	ldr	r2, [pc, #200]	@ (800272c <HAL_ADC_Start_DMA+0x1ac>)
 8002664:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266a:	4a31      	ldr	r2, [pc, #196]	@ (8002730 <HAL_ADC_Start_DMA+0x1b0>)
 800266c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	221c      	movs	r2, #28
 8002674:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0210 	orr.w	r2, r2, #16
 800268c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a28      	ldr	r2, [pc, #160]	@ (8002734 <HAL_ADC_Start_DMA+0x1b4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d10f      	bne.n	80026b8 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4619      	mov	r1, r3
 80026a6:	4610      	mov	r0, r2
 80026a8:	f7ff fc1e 	bl	8001ee8 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fc09 	bl	8001ec8 <LL_ADC_EnableDMAReq>
 80026b6:	e007      	b.n	80026c8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c0:	4619      	mov	r1, r3
 80026c2:	4610      	mov	r0, r2
 80026c4:	f7ff fbed 	bl	8001ea2 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3340      	adds	r3, #64	@ 0x40
 80026d2:	4619      	mov	r1, r3
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f001 feda 	bl	8004490 <HAL_DMA_Start_IT>
 80026dc:	4603      	mov	r3, r0
 80026de:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fd09 	bl	80020fc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80026ea:	e00d      	b.n	8002708 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80026f4:	e008      	b.n	8002708 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8002702:	e001      	b.n	8002708 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002704:	2302      	movs	r3, #2
 8002706:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002708:	7dfb      	ldrb	r3, [r7, #23]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40022000 	.word	0x40022000
 8002718:	40022100 	.word	0x40022100
 800271c:	40022300 	.word	0x40022300
 8002720:	58026300 	.word	0x58026300
 8002724:	fffff0fe 	.word	0xfffff0fe
 8002728:	080032c1 	.word	0x080032c1
 800272c:	08003399 	.word	0x08003399
 8002730:	080033b5 	.word	0x080033b5
 8002734:	58026000 	.word	0x58026000

08002738 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b0b9      	sub	sp, #228	@ 0xe4
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002766:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4aab      	ldr	r2, [pc, #684]	@ (8002a1c <HAL_ADC_ConfigChannel+0x2d0>)
 800276e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002776:	2b01      	cmp	r3, #1
 8002778:	d102      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x34>
 800277a:	2302      	movs	r3, #2
 800277c:	f000 bcfe 	b.w	800317c <HAL_ADC_ConfigChannel+0xa30>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fcc9 	bl	8002124 <LL_ADC_REG_IsConversionOngoing>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	f040 84e2 	bne.w	800315e <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db38      	blt.n	8002814 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a9e      	ldr	r2, [pc, #632]	@ (8002a20 <HAL_ADC_ConfigChannel+0x2d4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d033      	beq.n	8002814 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d108      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x7e>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0e9b      	lsrs	r3, r3, #26
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	2201      	movs	r2, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	e01d      	b.n	8002806 <HAL_ADC_ConfigChannel+0xba>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80027ee:	2320      	movs	r3, #32
 80027f0:	e004      	b.n	80027fc <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80027f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2201      	movs	r2, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	69d1      	ldr	r1, [r2, #28]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	430b      	orrs	r3, r1
 8002812:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	f7ff fb12 	bl	8001e4a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fc7a 	bl	8002124 <LL_ADC_REG_IsConversionOngoing>
 8002830:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fc86 	bl	800214a <LL_ADC_INJ_IsConversionOngoing>
 800283e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002846:	2b00      	cmp	r3, #0
 8002848:	f040 8270 	bne.w	8002d2c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800284c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002850:	2b00      	cmp	r3, #0
 8002852:	f040 826b 	bne.w	8002d2c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6819      	ldr	r1, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	461a      	mov	r2, r3
 8002864:	f7ff fb5a 	bl	8001f1c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a6c      	ldr	r2, [pc, #432]	@ (8002a20 <HAL_ADC_ConfigChannel+0x2d4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10d      	bne.n	800288e <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	08db      	lsrs	r3, r3, #3
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800288c:	e032      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800288e:	4b65      	ldr	r3, [pc, #404]	@ (8002a24 <HAL_ADC_ConfigChannel+0x2d8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800289a:	d10b      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x168>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	e01d      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x1a4>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10b      	bne.n	80028da <HAL_ADC_ConfigChannel+0x18e>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	e00a      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x1a4>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d048      	beq.n	800298e <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6919      	ldr	r1, [r3, #16]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800290c:	f7ff f998 	bl	8001c40 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a42      	ldr	r2, [pc, #264]	@ (8002a20 <HAL_ADC_ConfigChannel+0x2d4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d119      	bne.n	800294e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6919      	ldr	r1, [r3, #16]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	461a      	mov	r2, r3
 8002928:	f7ff fa30 	bl	8001d8c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	6919      	ldr	r1, [r3, #16]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d102      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x1f8>
 800293e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002942:	e000      	b.n	8002946 <HAL_ADC_ConfigChannel+0x1fa>
 8002944:	2300      	movs	r3, #0
 8002946:	461a      	mov	r2, r3
 8002948:	f7ff f9fe 	bl	8001d48 <LL_ADC_SetOffsetSaturation>
 800294c:	e1ee      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6919      	ldr	r1, [r3, #16]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800295c:	2b01      	cmp	r3, #1
 800295e:	d102      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x21a>
 8002960:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002964:	e000      	b.n	8002968 <HAL_ADC_ConfigChannel+0x21c>
 8002966:	2300      	movs	r3, #0
 8002968:	461a      	mov	r2, r3
 800296a:	f7ff f9cb 	bl	8001d04 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6919      	ldr	r1, [r3, #16]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	7e1b      	ldrb	r3, [r3, #24]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d102      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x238>
 800297e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002982:	e000      	b.n	8002986 <HAL_ADC_ConfigChannel+0x23a>
 8002984:	2300      	movs	r3, #0
 8002986:	461a      	mov	r2, r3
 8002988:	f7ff f9a2 	bl	8001cd0 <LL_ADC_SetDataRightShift>
 800298c:	e1ce      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a23      	ldr	r2, [pc, #140]	@ (8002a20 <HAL_ADC_ConfigChannel+0x2d4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	f040 8181 	bne.w	8002c9c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff f97f 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10a      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x27a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff f974 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 80029bc:	4603      	mov	r3, r0
 80029be:	0e9b      	lsrs	r3, r3, #26
 80029c0:	f003 021f 	and.w	r2, r3, #31
 80029c4:	e01e      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x2b8>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff f969 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80029e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80029ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80029f4:	2320      	movs	r3, #32
 80029f6:	e004      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80029f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10b      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x2dc>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	0e9b      	lsrs	r3, r3, #26
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	e01e      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x30e>
 8002a1c:	47ff0000 	.word	0x47ff0000
 8002a20:	58026000 	.word	0x58026000
 8002a24:	5c001000 	.word	0x5c001000
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002a3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002a44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	e004      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002a50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a54:	fab3 f383 	clz	r3, r3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d106      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff f9b2 	bl	8001dd0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2101      	movs	r1, #1
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff f916 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10a      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x34c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2101      	movs	r1, #1
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff f90b 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	0e9b      	lsrs	r3, r3, #26
 8002a92:	f003 021f 	and.w	r2, r3, #31
 8002a96:	e01e      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x38a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff f900 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002ab6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002aba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002abe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	e004      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8002aca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x3a2>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	0e9b      	lsrs	r3, r3, #26
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	e018      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x3d4>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002afa:	fa93 f3a3 	rbit	r3, r3
 8002afe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002b0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002b12:	2320      	movs	r3, #32
 8002b14:	e004      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8002b16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d106      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff f94f 	bl	8001dd0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2102      	movs	r1, #2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff f8b3 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10a      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x412>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff f8a8 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002b54:	4603      	mov	r3, r0
 8002b56:	0e9b      	lsrs	r3, r3, #26
 8002b58:	f003 021f 	and.w	r2, r3, #31
 8002b5c:	e01e      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x450>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2102      	movs	r1, #2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff f89d 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	e004      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d105      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x468>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0e9b      	lsrs	r3, r3, #26
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	e014      	b.n	8002bde <HAL_ADC_ConfigChannel+0x492>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002bc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002bc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	e004      	b.n	8002bde <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002bd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d106      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	2102      	movs	r1, #2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff f8f0 	bl	8001dd0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2103      	movs	r1, #3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f854 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10a      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x4d0>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2103      	movs	r1, #3
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff f849 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002c12:	4603      	mov	r3, r0
 8002c14:	0e9b      	lsrs	r3, r3, #26
 8002c16:	f003 021f 	and.w	r2, r3, #31
 8002c1a:	e017      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x500>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2103      	movs	r1, #3
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff f83e 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002c34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c36:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002c38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8002c3e:	2320      	movs	r3, #32
 8002c40:	e003      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8002c42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x518>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	e011      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x53c>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002c72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c74:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002c76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	e003      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002c80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d14f      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2200      	movs	r2, #0
 8002c92:	2103      	movs	r1, #3
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff f89b 	bl	8001dd0 <LL_ADC_SetOffsetState>
 8002c9a:	e047      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	069b      	lsls	r3, r3, #26
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d107      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002cbe:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cc6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	069b      	lsls	r3, r3, #26
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d107      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ce2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	069b      	lsls	r3, r3, #26
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d107      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d06:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	069b      	lsls	r3, r3, #26
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d107      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d2a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff f9cf 	bl	80020d4 <LL_ADC_IsEnabled>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f040 8219 	bne.w	8003170 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6819      	ldr	r1, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f7ff f912 	bl	8001f74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4aa1      	ldr	r2, [pc, #644]	@ (8002fdc <HAL_ADC_ConfigChannel+0x890>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	f040 812e 	bne.w	8002fb8 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10b      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x638>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	0e9b      	lsrs	r3, r3, #26
 8002d72:	3301      	adds	r3, #1
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	2b09      	cmp	r3, #9
 8002d7a:	bf94      	ite	ls
 8002d7c:	2301      	movls	r3, #1
 8002d7e:	2300      	movhi	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	e019      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x66c>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	e003      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002da0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	2b09      	cmp	r3, #9
 8002db0:	bf94      	ite	ls
 8002db2:	2301      	movls	r3, #1
 8002db4:	2300      	movhi	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d079      	beq.n	8002eb0 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d107      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x68c>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0e9b      	lsrs	r3, r3, #26
 8002dce:	3301      	adds	r3, #1
 8002dd0:	069b      	lsls	r3, r3, #26
 8002dd2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dd6:	e015      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x6b8>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002de0:	fa93 f3a3 	rbit	r3, r3
 8002de4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002de8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002dea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002df0:	2320      	movs	r3, #32
 8002df2:	e003      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8002df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	069b      	lsls	r3, r3, #26
 8002e00:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d109      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x6d8>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0e9b      	lsrs	r3, r3, #26
 8002e16:	3301      	adds	r3, #1
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	e017      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x708>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e34:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002e36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8002e3c:	2320      	movs	r3, #32
 8002e3e:	e003      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8002e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	3301      	adds	r3, #1
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	2101      	movs	r1, #1
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	ea42 0103 	orr.w	r1, r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x72e>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	051b      	lsls	r3, r3, #20
 8002e78:	e018      	b.n	8002eac <HAL_ADC_ConfigChannel+0x760>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8002e92:	2320      	movs	r3, #32
 8002e94:	e003      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8002e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eac:	430b      	orrs	r3, r1
 8002eae:	e07e      	b.n	8002fae <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d107      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x780>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	0e9b      	lsrs	r3, r3, #26
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	069b      	lsls	r3, r3, #26
 8002ec6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002eca:	e015      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x7ac>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	e003      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8002ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	069b      	lsls	r3, r3, #26
 8002ef4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x7cc>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	0e9b      	lsrs	r3, r3, #26
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	2101      	movs	r1, #1
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	e017      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x7fc>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	61bb      	str	r3, [r7, #24]
  return result;
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8002f30:	2320      	movs	r3, #32
 8002f32:	e003      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2101      	movs	r1, #1
 8002f44:	fa01 f303 	lsl.w	r3, r1, r3
 8002f48:	ea42 0103 	orr.w	r1, r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10d      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x828>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	3b1e      	subs	r3, #30
 8002f6c:	051b      	lsls	r3, r3, #20
 8002f6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f72:	e01b      	b.n	8002fac <HAL_ADC_ConfigChannel+0x860>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	60fb      	str	r3, [r7, #12]
  return result;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	e003      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	f003 021f 	and.w	r2, r3, #31
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3b1e      	subs	r3, #30
 8002fa6:	051b      	lsls	r3, r3, #20
 8002fa8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fac:	430b      	orrs	r3, r1
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	6892      	ldr	r2, [r2, #8]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f7fe ffb2 	bl	8001f1c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f280 80d7 	bge.w	8003170 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a06      	ldr	r2, [pc, #24]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x894>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d004      	beq.n	8002fd6 <HAL_ADC_ConfigChannel+0x88a>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a04      	ldr	r2, [pc, #16]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x898>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d10a      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x8a0>
 8002fd6:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x89c>)
 8002fd8:	e009      	b.n	8002fee <HAL_ADC_ConfigChannel+0x8a2>
 8002fda:	bf00      	nop
 8002fdc:	47ff0000 	.word	0x47ff0000
 8002fe0:	40022000 	.word	0x40022000
 8002fe4:	40022100 	.word	0x40022100
 8002fe8:	40022300 	.word	0x40022300
 8002fec:	4b65      	ldr	r3, [pc, #404]	@ (8003184 <HAL_ADC_ConfigChannel+0xa38>)
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fe18 	bl	8001c24 <LL_ADC_GetCommonPathInternalCh>
 8002ff4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a62      	ldr	r2, [pc, #392]	@ (8003188 <HAL_ADC_ConfigChannel+0xa3c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d004      	beq.n	800300c <HAL_ADC_ConfigChannel+0x8c0>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a61      	ldr	r2, [pc, #388]	@ (800318c <HAL_ADC_ConfigChannel+0xa40>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d10e      	bne.n	800302a <HAL_ADC_ConfigChannel+0x8de>
 800300c:	485e      	ldr	r0, [pc, #376]	@ (8003188 <HAL_ADC_ConfigChannel+0xa3c>)
 800300e:	f7ff f861 	bl	80020d4 <LL_ADC_IsEnabled>
 8003012:	4604      	mov	r4, r0
 8003014:	485d      	ldr	r0, [pc, #372]	@ (800318c <HAL_ADC_ConfigChannel+0xa40>)
 8003016:	f7ff f85d 	bl	80020d4 <LL_ADC_IsEnabled>
 800301a:	4603      	mov	r3, r0
 800301c:	4323      	orrs	r3, r4
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	e008      	b.n	800303c <HAL_ADC_ConfigChannel+0x8f0>
 800302a:	4859      	ldr	r0, [pc, #356]	@ (8003190 <HAL_ADC_ConfigChannel+0xa44>)
 800302c:	f7ff f852 	bl	80020d4 <LL_ADC_IsEnabled>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf0c      	ite	eq
 8003036:	2301      	moveq	r3, #1
 8003038:	2300      	movne	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8084 	beq.w	800314a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a53      	ldr	r2, [pc, #332]	@ (8003194 <HAL_ADC_ConfigChannel+0xa48>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d132      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x966>
 800304c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003050:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d12c      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a4c      	ldr	r2, [pc, #304]	@ (8003190 <HAL_ADC_ConfigChannel+0xa44>)
 800305e:	4293      	cmp	r3, r2
 8003060:	f040 8086 	bne.w	8003170 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a47      	ldr	r2, [pc, #284]	@ (8003188 <HAL_ADC_ConfigChannel+0xa3c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d004      	beq.n	8003078 <HAL_ADC_ConfigChannel+0x92c>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a46      	ldr	r2, [pc, #280]	@ (800318c <HAL_ADC_ConfigChannel+0xa40>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x930>
 8003078:	4a47      	ldr	r2, [pc, #284]	@ (8003198 <HAL_ADC_ConfigChannel+0xa4c>)
 800307a:	e000      	b.n	800307e <HAL_ADC_ConfigChannel+0x932>
 800307c:	4a41      	ldr	r2, [pc, #260]	@ (8003184 <HAL_ADC_ConfigChannel+0xa38>)
 800307e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003082:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003086:	4619      	mov	r1, r3
 8003088:	4610      	mov	r0, r2
 800308a:	f7fe fdb8 	bl	8001bfe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800308e:	4b43      	ldr	r3, [pc, #268]	@ (800319c <HAL_ADC_ConfigChannel+0xa50>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	099b      	lsrs	r3, r3, #6
 8003094:	4a42      	ldr	r2, [pc, #264]	@ (80031a0 <HAL_ADC_ConfigChannel+0xa54>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	099b      	lsrs	r3, r3, #6
 800309c:	3301      	adds	r3, #1
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80030a2:	e002      	b.n	80030aa <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f9      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030b0:	e05e      	b.n	8003170 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a3b      	ldr	r2, [pc, #236]	@ (80031a4 <HAL_ADC_ConfigChannel+0xa58>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d120      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x9b2>
 80030bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d11a      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a30      	ldr	r2, [pc, #192]	@ (8003190 <HAL_ADC_ConfigChannel+0xa44>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d14e      	bne.n	8003170 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003188 <HAL_ADC_ConfigChannel+0xa3c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_ADC_ConfigChannel+0x99a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a2a      	ldr	r2, [pc, #168]	@ (800318c <HAL_ADC_ConfigChannel+0xa40>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x99e>
 80030e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003198 <HAL_ADC_ConfigChannel+0xa4c>)
 80030e8:	e000      	b.n	80030ec <HAL_ADC_ConfigChannel+0x9a0>
 80030ea:	4a26      	ldr	r2, [pc, #152]	@ (8003184 <HAL_ADC_ConfigChannel+0xa38>)
 80030ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030f4:	4619      	mov	r1, r3
 80030f6:	4610      	mov	r0, r2
 80030f8:	f7fe fd81 	bl	8001bfe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030fc:	e038      	b.n	8003170 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a29      	ldr	r2, [pc, #164]	@ (80031a8 <HAL_ADC_ConfigChannel+0xa5c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d133      	bne.n	8003170 <HAL_ADC_ConfigChannel+0xa24>
 8003108:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800310c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d12d      	bne.n	8003170 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a1d      	ldr	r2, [pc, #116]	@ (8003190 <HAL_ADC_ConfigChannel+0xa44>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d128      	bne.n	8003170 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a19      	ldr	r2, [pc, #100]	@ (8003188 <HAL_ADC_ConfigChannel+0xa3c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d004      	beq.n	8003132 <HAL_ADC_ConfigChannel+0x9e6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a17      	ldr	r2, [pc, #92]	@ (800318c <HAL_ADC_ConfigChannel+0xa40>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d101      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x9ea>
 8003132:	4a19      	ldr	r2, [pc, #100]	@ (8003198 <HAL_ADC_ConfigChannel+0xa4c>)
 8003134:	e000      	b.n	8003138 <HAL_ADC_ConfigChannel+0x9ec>
 8003136:	4a13      	ldr	r2, [pc, #76]	@ (8003184 <HAL_ADC_ConfigChannel+0xa38>)
 8003138:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800313c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003140:	4619      	mov	r1, r3
 8003142:	4610      	mov	r0, r2
 8003144:	f7fe fd5b 	bl	8001bfe <LL_ADC_SetCommonPathInternalCh>
 8003148:	e012      	b.n	8003170 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800315c:	e008      	b.n	8003170 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003162:	f043 0220 	orr.w	r2, r3, #32
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003178:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 800317c:	4618      	mov	r0, r3
 800317e:	37e4      	adds	r7, #228	@ 0xe4
 8003180:	46bd      	mov	sp, r7
 8003182:	bd90      	pop	{r4, r7, pc}
 8003184:	58026300 	.word	0x58026300
 8003188:	40022000 	.word	0x40022000
 800318c:	40022100 	.word	0x40022100
 8003190:	58026000 	.word	0x58026000
 8003194:	c7520000 	.word	0xc7520000
 8003198:	40022300 	.word	0x40022300
 800319c:	24000008 	.word	0x24000008
 80031a0:	053e2d63 	.word	0x053e2d63
 80031a4:	c3210000 	.word	0xc3210000
 80031a8:	cb840000 	.word	0xcb840000

080031ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe ff8b 	bl	80020d4 <LL_ADC_IsEnabled>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d16e      	bne.n	80032a2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	4b38      	ldr	r3, [pc, #224]	@ (80032ac <ADC_Enable+0x100>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00d      	beq.n	80031ee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d6:	f043 0210 	orr.w	r2, r3, #16
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031e2:	f043 0201 	orr.w	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e05a      	b.n	80032a4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe ff5a 	bl	80020ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031f8:	f7fe fc96 	bl	8001b28 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a2b      	ldr	r2, [pc, #172]	@ (80032b0 <ADC_Enable+0x104>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <ADC_Enable+0x66>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a29      	ldr	r2, [pc, #164]	@ (80032b4 <ADC_Enable+0x108>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <ADC_Enable+0x6a>
 8003212:	4b29      	ldr	r3, [pc, #164]	@ (80032b8 <ADC_Enable+0x10c>)
 8003214:	e000      	b.n	8003218 <ADC_Enable+0x6c>
 8003216:	4b29      	ldr	r3, [pc, #164]	@ (80032bc <ADC_Enable+0x110>)
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe feeb 	bl	8001ff4 <LL_ADC_GetMultimode>
 800321e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a23      	ldr	r2, [pc, #140]	@ (80032b4 <ADC_Enable+0x108>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d002      	beq.n	8003230 <ADC_Enable+0x84>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	e000      	b.n	8003232 <ADC_Enable+0x86>
 8003230:	4b1f      	ldr	r3, [pc, #124]	@ (80032b0 <ADC_Enable+0x104>)
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	4293      	cmp	r3, r2
 8003238:	d02c      	beq.n	8003294 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d130      	bne.n	80032a2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003240:	e028      	b.n	8003294 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe ff44 	bl	80020d4 <LL_ADC_IsEnabled>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe ff28 	bl	80020ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800325c:	f7fe fc64 	bl	8001b28 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d914      	bls.n	8003294 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d00d      	beq.n	8003294 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327c:	f043 0210 	orr.w	r2, r3, #16
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e007      	b.n	80032a4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d1cf      	bne.n	8003242 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	8000003f 	.word	0x8000003f
 80032b0:	40022000 	.word	0x40022000
 80032b4:	40022100 	.word	0x40022100
 80032b8:	40022300 	.word	0x40022300
 80032bc:	58026300 	.word	0x58026300

080032c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d14b      	bne.n	8003372 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032de:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d021      	beq.n	8003338 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe fd93 	bl	8001e24 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d032      	beq.n	800336a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d12b      	bne.n	800336a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003322:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d11f      	bne.n	800336a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800332e:	f043 0201 	orr.w	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	661a      	str	r2, [r3, #96]	@ 0x60
 8003336:	e018      	b.n	800336a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d111      	bne.n	800336a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003356:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003362:	f043 0201 	orr.w	r2, r3, #1
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f7fe f80e 	bl	800138c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003370:	e00e      	b.n	8003390 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7ff f9da 	bl	8002738 <HAL_ADC_ErrorCallback>
}
 8003384:	e004      	b.n	8003390 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4798      	blx	r3
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f7fd ffcc 	bl	8001344 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033d2:	f043 0204 	orr.w	r2, r3, #4
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7ff f9ac 	bl	8002738 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a6c      	ldr	r2, [pc, #432]	@ (80035a8 <ADC_ConfigureBoostMode+0x1c0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d004      	beq.n	8003404 <ADC_ConfigureBoostMode+0x1c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6b      	ldr	r2, [pc, #428]	@ (80035ac <ADC_ConfigureBoostMode+0x1c4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d109      	bne.n	8003418 <ADC_ConfigureBoostMode+0x30>
 8003404:	4b6a      	ldr	r3, [pc, #424]	@ (80035b0 <ADC_ConfigureBoostMode+0x1c8>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf14      	ite	ne
 8003410:	2301      	movne	r3, #1
 8003412:	2300      	moveq	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	e008      	b.n	800342a <ADC_ConfigureBoostMode+0x42>
 8003418:	4b66      	ldr	r3, [pc, #408]	@ (80035b4 <ADC_ConfigureBoostMode+0x1cc>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01c      	beq.n	8003468 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800342e:	f003 ff5d 	bl	80072ec <HAL_RCC_GetHCLKFreq>
 8003432:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800343c:	d010      	beq.n	8003460 <ADC_ConfigureBoostMode+0x78>
 800343e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003442:	d873      	bhi.n	800352c <ADC_ConfigureBoostMode+0x144>
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003448:	d002      	beq.n	8003450 <ADC_ConfigureBoostMode+0x68>
 800344a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800344e:	d16d      	bne.n	800352c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	0c1b      	lsrs	r3, r3, #16
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	fbb2 f3f3 	udiv	r3, r2, r3
 800345c:	60fb      	str	r3, [r7, #12]
        break;
 800345e:	e068      	b.n	8003532 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	089b      	lsrs	r3, r3, #2
 8003464:	60fb      	str	r3, [r7, #12]
        break;
 8003466:	e064      	b.n	8003532 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003468:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800346c:	f04f 0100 	mov.w	r1, #0
 8003470:	f005 f922 	bl	80086b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003474:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800347e:	d051      	beq.n	8003524 <ADC_ConfigureBoostMode+0x13c>
 8003480:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003484:	d854      	bhi.n	8003530 <ADC_ConfigureBoostMode+0x148>
 8003486:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800348a:	d047      	beq.n	800351c <ADC_ConfigureBoostMode+0x134>
 800348c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003490:	d84e      	bhi.n	8003530 <ADC_ConfigureBoostMode+0x148>
 8003492:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003496:	d03d      	beq.n	8003514 <ADC_ConfigureBoostMode+0x12c>
 8003498:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800349c:	d848      	bhi.n	8003530 <ADC_ConfigureBoostMode+0x148>
 800349e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034a2:	d033      	beq.n	800350c <ADC_ConfigureBoostMode+0x124>
 80034a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034a8:	d842      	bhi.n	8003530 <ADC_ConfigureBoostMode+0x148>
 80034aa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80034ae:	d029      	beq.n	8003504 <ADC_ConfigureBoostMode+0x11c>
 80034b0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80034b4:	d83c      	bhi.n	8003530 <ADC_ConfigureBoostMode+0x148>
 80034b6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80034ba:	d01a      	beq.n	80034f2 <ADC_ConfigureBoostMode+0x10a>
 80034bc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80034c0:	d836      	bhi.n	8003530 <ADC_ConfigureBoostMode+0x148>
 80034c2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80034c6:	d014      	beq.n	80034f2 <ADC_ConfigureBoostMode+0x10a>
 80034c8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80034cc:	d830      	bhi.n	8003530 <ADC_ConfigureBoostMode+0x148>
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034d2:	d00e      	beq.n	80034f2 <ADC_ConfigureBoostMode+0x10a>
 80034d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034d8:	d82a      	bhi.n	8003530 <ADC_ConfigureBoostMode+0x148>
 80034da:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034de:	d008      	beq.n	80034f2 <ADC_ConfigureBoostMode+0x10a>
 80034e0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034e4:	d824      	bhi.n	8003530 <ADC_ConfigureBoostMode+0x148>
 80034e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034ea:	d002      	beq.n	80034f2 <ADC_ConfigureBoostMode+0x10a>
 80034ec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034f0:	d11e      	bne.n	8003530 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	0c9b      	lsrs	r3, r3, #18
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003500:	60fb      	str	r3, [r7, #12]
        break;
 8003502:	e016      	b.n	8003532 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	60fb      	str	r3, [r7, #12]
        break;
 800350a:	e012      	b.n	8003532 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	60fb      	str	r3, [r7, #12]
        break;
 8003512:	e00e      	b.n	8003532 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	099b      	lsrs	r3, r3, #6
 8003518:	60fb      	str	r3, [r7, #12]
        break;
 800351a:	e00a      	b.n	8003532 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	09db      	lsrs	r3, r3, #7
 8003520:	60fb      	str	r3, [r7, #12]
        break;
 8003522:	e006      	b.n	8003532 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	0a1b      	lsrs	r3, r3, #8
 8003528:	60fb      	str	r3, [r7, #12]
        break;
 800352a:	e002      	b.n	8003532 <ADC_ConfigureBoostMode+0x14a>
        break;
 800352c:	bf00      	nop
 800352e:	e000      	b.n	8003532 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003530:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a1f      	ldr	r2, [pc, #124]	@ (80035b8 <ADC_ConfigureBoostMode+0x1d0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d808      	bhi.n	8003552 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800354e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003550:	e025      	b.n	800359e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a19      	ldr	r2, [pc, #100]	@ (80035bc <ADC_ConfigureBoostMode+0x1d4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d80a      	bhi.n	8003570 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800356c:	609a      	str	r2, [r3, #8]
}
 800356e:	e016      	b.n	800359e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4a13      	ldr	r2, [pc, #76]	@ (80035c0 <ADC_ConfigureBoostMode+0x1d8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d80a      	bhi.n	800358e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800358a:	609a      	str	r2, [r3, #8]
}
 800358c:	e007      	b.n	800359e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800359c:	609a      	str	r2, [r3, #8]
}
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40022000 	.word	0x40022000
 80035ac:	40022100 	.word	0x40022100
 80035b0:	40022300 	.word	0x40022300
 80035b4:	58026300 	.word	0x58026300
 80035b8:	005f5e10 	.word	0x005f5e10
 80035bc:	00bebc20 	.word	0x00bebc20
 80035c0:	017d7840 	.word	0x017d7840

080035c4 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e023      	b.n	800361e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd ffd2 	bl	8001594 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <__NVIC_SetPriorityGrouping>:
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003638:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <__NVIC_SetPriorityGrouping+0x40>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003644:	4013      	ands	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003650:	4b06      	ldr	r3, [pc, #24]	@ (800366c <__NVIC_SetPriorityGrouping+0x44>)
 8003652:	4313      	orrs	r3, r2
 8003654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003656:	4a04      	ldr	r2, [pc, #16]	@ (8003668 <__NVIC_SetPriorityGrouping+0x40>)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	60d3      	str	r3, [r2, #12]
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000ed00 	.word	0xe000ed00
 800366c:	05fa0000 	.word	0x05fa0000

08003670 <__NVIC_GetPriorityGrouping>:
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003674:	4b04      	ldr	r3, [pc, #16]	@ (8003688 <__NVIC_GetPriorityGrouping+0x18>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	0a1b      	lsrs	r3, r3, #8
 800367a:	f003 0307 	and.w	r3, r3, #7
}
 800367e:	4618      	mov	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	e000ed00 	.word	0xe000ed00

0800368c <__NVIC_EnableIRQ>:
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800369a:	2b00      	cmp	r3, #0
 800369c:	db0b      	blt.n	80036b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	f003 021f 	and.w	r2, r3, #31
 80036a4:	4907      	ldr	r1, [pc, #28]	@ (80036c4 <__NVIC_EnableIRQ+0x38>)
 80036a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	2001      	movs	r0, #1
 80036ae:	fa00 f202 	lsl.w	r2, r0, r2
 80036b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	e000e100 	.word	0xe000e100

080036c8 <__NVIC_SetPriority>:
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	6039      	str	r1, [r7, #0]
 80036d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	db0a      	blt.n	80036f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	490c      	ldr	r1, [pc, #48]	@ (8003714 <__NVIC_SetPriority+0x4c>)
 80036e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036e6:	0112      	lsls	r2, r2, #4
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	440b      	add	r3, r1
 80036ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80036f0:	e00a      	b.n	8003708 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	4908      	ldr	r1, [pc, #32]	@ (8003718 <__NVIC_SetPriority+0x50>)
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	3b04      	subs	r3, #4
 8003700:	0112      	lsls	r2, r2, #4
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	440b      	add	r3, r1
 8003706:	761a      	strb	r2, [r3, #24]
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000e100 	.word	0xe000e100
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <NVIC_EncodePriority>:
{
 800371c:	b480      	push	{r7}
 800371e:	b089      	sub	sp, #36	@ 0x24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f1c3 0307 	rsb	r3, r3, #7
 8003736:	2b04      	cmp	r3, #4
 8003738:	bf28      	it	cs
 800373a:	2304      	movcs	r3, #4
 800373c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3304      	adds	r3, #4
 8003742:	2b06      	cmp	r3, #6
 8003744:	d902      	bls.n	800374c <NVIC_EncodePriority+0x30>
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3b03      	subs	r3, #3
 800374a:	e000      	b.n	800374e <NVIC_EncodePriority+0x32>
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003750:	f04f 32ff 	mov.w	r2, #4294967295
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43da      	mvns	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	401a      	ands	r2, r3
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003764:	f04f 31ff 	mov.w	r1, #4294967295
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	fa01 f303 	lsl.w	r3, r1, r3
 800376e:	43d9      	mvns	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003774:	4313      	orrs	r3, r2
}
 8003776:	4618      	mov	r0, r3
 8003778:	3724      	adds	r7, #36	@ 0x24
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3b01      	subs	r3, #1
 8003790:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003794:	d301      	bcc.n	800379a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003796:	2301      	movs	r3, #1
 8003798:	e00f      	b.n	80037ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800379a:	4a0a      	ldr	r2, [pc, #40]	@ (80037c4 <SysTick_Config+0x40>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3b01      	subs	r3, #1
 80037a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037a2:	210f      	movs	r1, #15
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	f7ff ff8e 	bl	80036c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037ac:	4b05      	ldr	r3, [pc, #20]	@ (80037c4 <SysTick_Config+0x40>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037b2:	4b04      	ldr	r3, [pc, #16]	@ (80037c4 <SysTick_Config+0x40>)
 80037b4:	2207      	movs	r2, #7
 80037b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	e000e010 	.word	0xe000e010

080037c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ff29 	bl	8003628 <__NVIC_SetPriorityGrouping>
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	4603      	mov	r3, r0
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037ec:	f7ff ff40 	bl	8003670 <__NVIC_GetPriorityGrouping>
 80037f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	6978      	ldr	r0, [r7, #20]
 80037f8:	f7ff ff90 	bl	800371c <NVIC_EncodePriority>
 80037fc:	4602      	mov	r2, r0
 80037fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff ff5f 	bl	80036c8 <__NVIC_SetPriority>
}
 800380a:	bf00      	nop
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	4603      	mov	r3, r0
 800381a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800381c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff ff33 	bl	800368c <__NVIC_EnableIRQ>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff ffa4 	bl	8003784 <SysTick_Config>
 800383c:	4603      	mov	r3, r0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e014      	b.n	8003882 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	791b      	ldrb	r3, [r3, #4]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d105      	bne.n	800386e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7fd feb5 	bl	80015d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0a2      	b.n	80039ea <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	795b      	ldrb	r3, [r3, #5]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_DAC_Start_DMA+0x24>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e09c      	b.n	80039ea <HAL_DAC_Start_DMA+0x15e>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2201      	movs	r2, #1
 80038b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2202      	movs	r2, #2
 80038ba:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d129      	bne.n	8003916 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	4a4b      	ldr	r2, [pc, #300]	@ (80039f4 <HAL_DAC_Start_DMA+0x168>)
 80038c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	4a4a      	ldr	r2, [pc, #296]	@ (80039f8 <HAL_DAC_Start_DMA+0x16c>)
 80038d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	4a49      	ldr	r2, [pc, #292]	@ (80039fc <HAL_DAC_Start_DMA+0x170>)
 80038d8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038e8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_DAC_Start_DMA+0x6c>
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d005      	beq.n	8003902 <HAL_DAC_Start_DMA+0x76>
 80038f6:	e009      	b.n	800390c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3308      	adds	r3, #8
 80038fe:	613b      	str	r3, [r7, #16]
        break;
 8003900:	e033      	b.n	800396a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	330c      	adds	r3, #12
 8003908:	613b      	str	r3, [r7, #16]
        break;
 800390a:	e02e      	b.n	800396a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3310      	adds	r3, #16
 8003912:	613b      	str	r3, [r7, #16]
        break;
 8003914:	e029      	b.n	800396a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	4a39      	ldr	r2, [pc, #228]	@ (8003a00 <HAL_DAC_Start_DMA+0x174>)
 800391c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	4a38      	ldr	r2, [pc, #224]	@ (8003a04 <HAL_DAC_Start_DMA+0x178>)
 8003924:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	4a37      	ldr	r2, [pc, #220]	@ (8003a08 <HAL_DAC_Start_DMA+0x17c>)
 800392c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800393c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_DAC_Start_DMA+0xc0>
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	2b04      	cmp	r3, #4
 8003948:	d005      	beq.n	8003956 <HAL_DAC_Start_DMA+0xca>
 800394a:	e009      	b.n	8003960 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3314      	adds	r3, #20
 8003952:	613b      	str	r3, [r7, #16]
        break;
 8003954:	e009      	b.n	800396a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3318      	adds	r3, #24
 800395c:	613b      	str	r3, [r7, #16]
        break;
 800395e:	e004      	b.n	800396a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	331c      	adds	r3, #28
 8003966:	613b      	str	r3, [r7, #16]
        break;
 8003968:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d111      	bne.n	8003994 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800397e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6898      	ldr	r0, [r3, #8]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	f000 fd81 	bl	8004490 <HAL_DMA_Start_IT>
 800398e:	4603      	mov	r3, r0
 8003990:	75fb      	strb	r3, [r7, #23]
 8003992:	e010      	b.n	80039b6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80039a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68d8      	ldr	r0, [r3, #12]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	f000 fd6f 	bl	8004490 <HAL_DMA_Start_IT>
 80039b2:	4603      	mov	r3, r0
 80039b4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10c      	bne.n	80039dc <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6819      	ldr	r1, [r3, #0]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2201      	movs	r2, #1
 80039d0:	409a      	lsls	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e005      	b.n	80039e8 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f043 0204 	orr.w	r2, r3, #4
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	08003ccd 	.word	0x08003ccd
 80039f8:	08003cef 	.word	0x08003cef
 80039fc:	08003d0b 	.word	0x08003d0b
 8003a00:	08003d75 	.word	0x08003d75
 8003a04:	08003d97 	.word	0x08003d97
 8003a08:	08003db3 	.word	0x08003db3

08003a0c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	@ 0x28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_DAC_ConfigChannel+0x1e>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e12a      	b.n	8003cc0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	795b      	ldrb	r3, [r3, #5]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_DAC_ConfigChannel+0x2e>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e124      	b.n	8003cc0 <HAL_DAC_ConfigChannel+0x278>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d17a      	bne.n	8003b80 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003a8a:	f7fe f84d 	bl	8001b28 <HAL_GetTick>
 8003a8e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d13d      	bne.n	8003b12 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a96:	e018      	b.n	8003aca <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a98:	f7fe f846 	bl	8001b28 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d911      	bls.n	8003aca <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aac:	4b86      	ldr	r3, [pc, #536]	@ (8003cc8 <HAL_DAC_ConfigChannel+0x280>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f043 0208 	orr.w	r2, r3, #8
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e0fa      	b.n	8003cc0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ad0:	4b7d      	ldr	r3, [pc, #500]	@ (8003cc8 <HAL_DAC_ConfigChannel+0x280>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1df      	bne.n	8003a98 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	6992      	ldr	r2, [r2, #24]
 8003ae0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ae2:	e020      	b.n	8003b26 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ae4:	f7fe f820 	bl	8001b28 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d90f      	bls.n	8003b12 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	da0a      	bge.n	8003b12 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f043 0208 	orr.w	r2, r3, #8
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e0d6      	b.n	8003cc0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	dbe3      	blt.n	8003ae4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	6992      	ldr	r2, [r2, #24]
 8003b24:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003b36:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	ea02 0103 	and.w	r1, r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	21ff      	movs	r1, #255	@ 0xff
 8003b62:	fa01 f303 	lsl.w	r3, r1, r3
 8003b66:	43db      	mvns	r3, r3
 8003b68:	ea02 0103 	and.w	r1, r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	6a1a      	ldr	r2, [r3, #32]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	409a      	lsls	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d11d      	bne.n	8003bc4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	221f      	movs	r2, #31
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bca:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	2207      	movs	r2, #7
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d102      	bne.n	8003bee <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bec:	e00f      	b.n	8003c0e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d102      	bne.n	8003bfc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bfa:	e008      	b.n	8003c0e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d102      	bne.n	8003c0a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003c04:	2301      	movs	r3, #1
 8003c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c08:	e001      	b.n	8003c0e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6819      	ldr	r1, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43da      	mvns	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	400a      	ands	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4013      	ands	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6819      	ldr	r1, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	22c0      	movs	r2, #192	@ 0xc0
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	400a      	ands	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3728      	adds	r7, #40	@ 0x28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20008000 	.word	0x20008000

08003ccc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f7ff fe96 	bl	8003a0c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	711a      	strb	r2, [r3, #4]
}
 8003ce6:	bf00      	nop
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7ff fe8f 	bl	8003a20 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f043 0204 	orr.w	r2, r3, #4
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f7ff fe85 	bl	8003a34 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	711a      	strb	r2, [r3, #4]
}
 8003d30:	bf00      	nop
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d80:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f7ff ffd8 	bl	8003d38 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	711a      	strb	r2, [r3, #4]
}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7ff ffd1 	bl	8003d4c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f043 0204 	orr.w	r2, r3, #4
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff ffc7 	bl	8003d60 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	711a      	strb	r2, [r3, #4]
}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003de8:	f7fd fe9e 	bl	8001b28 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e312      	b.n	800441e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a66      	ldr	r2, [pc, #408]	@ (8003f98 <HAL_DMA_Init+0x1b8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d04a      	beq.n	8003e98 <HAL_DMA_Init+0xb8>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a65      	ldr	r2, [pc, #404]	@ (8003f9c <HAL_DMA_Init+0x1bc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d045      	beq.n	8003e98 <HAL_DMA_Init+0xb8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a63      	ldr	r2, [pc, #396]	@ (8003fa0 <HAL_DMA_Init+0x1c0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d040      	beq.n	8003e98 <HAL_DMA_Init+0xb8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a62      	ldr	r2, [pc, #392]	@ (8003fa4 <HAL_DMA_Init+0x1c4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d03b      	beq.n	8003e98 <HAL_DMA_Init+0xb8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a60      	ldr	r2, [pc, #384]	@ (8003fa8 <HAL_DMA_Init+0x1c8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d036      	beq.n	8003e98 <HAL_DMA_Init+0xb8>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a5f      	ldr	r2, [pc, #380]	@ (8003fac <HAL_DMA_Init+0x1cc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d031      	beq.n	8003e98 <HAL_DMA_Init+0xb8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a5d      	ldr	r2, [pc, #372]	@ (8003fb0 <HAL_DMA_Init+0x1d0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d02c      	beq.n	8003e98 <HAL_DMA_Init+0xb8>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a5c      	ldr	r2, [pc, #368]	@ (8003fb4 <HAL_DMA_Init+0x1d4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d027      	beq.n	8003e98 <HAL_DMA_Init+0xb8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a5a      	ldr	r2, [pc, #360]	@ (8003fb8 <HAL_DMA_Init+0x1d8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d022      	beq.n	8003e98 <HAL_DMA_Init+0xb8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a59      	ldr	r2, [pc, #356]	@ (8003fbc <HAL_DMA_Init+0x1dc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d01d      	beq.n	8003e98 <HAL_DMA_Init+0xb8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a57      	ldr	r2, [pc, #348]	@ (8003fc0 <HAL_DMA_Init+0x1e0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d018      	beq.n	8003e98 <HAL_DMA_Init+0xb8>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a56      	ldr	r2, [pc, #344]	@ (8003fc4 <HAL_DMA_Init+0x1e4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d013      	beq.n	8003e98 <HAL_DMA_Init+0xb8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a54      	ldr	r2, [pc, #336]	@ (8003fc8 <HAL_DMA_Init+0x1e8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00e      	beq.n	8003e98 <HAL_DMA_Init+0xb8>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a53      	ldr	r2, [pc, #332]	@ (8003fcc <HAL_DMA_Init+0x1ec>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d009      	beq.n	8003e98 <HAL_DMA_Init+0xb8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a51      	ldr	r2, [pc, #324]	@ (8003fd0 <HAL_DMA_Init+0x1f0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_DMA_Init+0xb8>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a50      	ldr	r2, [pc, #320]	@ (8003fd4 <HAL_DMA_Init+0x1f4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d101      	bne.n	8003e9c <HAL_DMA_Init+0xbc>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <HAL_DMA_Init+0xbe>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 813c 	beq.w	800411c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a37      	ldr	r2, [pc, #220]	@ (8003f98 <HAL_DMA_Init+0x1b8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d04a      	beq.n	8003f54 <HAL_DMA_Init+0x174>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a36      	ldr	r2, [pc, #216]	@ (8003f9c <HAL_DMA_Init+0x1bc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d045      	beq.n	8003f54 <HAL_DMA_Init+0x174>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a34      	ldr	r2, [pc, #208]	@ (8003fa0 <HAL_DMA_Init+0x1c0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d040      	beq.n	8003f54 <HAL_DMA_Init+0x174>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a33      	ldr	r2, [pc, #204]	@ (8003fa4 <HAL_DMA_Init+0x1c4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d03b      	beq.n	8003f54 <HAL_DMA_Init+0x174>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a31      	ldr	r2, [pc, #196]	@ (8003fa8 <HAL_DMA_Init+0x1c8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d036      	beq.n	8003f54 <HAL_DMA_Init+0x174>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a30      	ldr	r2, [pc, #192]	@ (8003fac <HAL_DMA_Init+0x1cc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d031      	beq.n	8003f54 <HAL_DMA_Init+0x174>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8003fb0 <HAL_DMA_Init+0x1d0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d02c      	beq.n	8003f54 <HAL_DMA_Init+0x174>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb4 <HAL_DMA_Init+0x1d4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d027      	beq.n	8003f54 <HAL_DMA_Init+0x174>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2b      	ldr	r2, [pc, #172]	@ (8003fb8 <HAL_DMA_Init+0x1d8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d022      	beq.n	8003f54 <HAL_DMA_Init+0x174>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a2a      	ldr	r2, [pc, #168]	@ (8003fbc <HAL_DMA_Init+0x1dc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d01d      	beq.n	8003f54 <HAL_DMA_Init+0x174>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a28      	ldr	r2, [pc, #160]	@ (8003fc0 <HAL_DMA_Init+0x1e0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d018      	beq.n	8003f54 <HAL_DMA_Init+0x174>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a27      	ldr	r2, [pc, #156]	@ (8003fc4 <HAL_DMA_Init+0x1e4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d013      	beq.n	8003f54 <HAL_DMA_Init+0x174>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a25      	ldr	r2, [pc, #148]	@ (8003fc8 <HAL_DMA_Init+0x1e8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00e      	beq.n	8003f54 <HAL_DMA_Init+0x174>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a24      	ldr	r2, [pc, #144]	@ (8003fcc <HAL_DMA_Init+0x1ec>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d009      	beq.n	8003f54 <HAL_DMA_Init+0x174>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a22      	ldr	r2, [pc, #136]	@ (8003fd0 <HAL_DMA_Init+0x1f0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d004      	beq.n	8003f54 <HAL_DMA_Init+0x174>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a21      	ldr	r2, [pc, #132]	@ (8003fd4 <HAL_DMA_Init+0x1f4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d108      	bne.n	8003f66 <HAL_DMA_Init+0x186>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	e007      	b.n	8003f76 <HAL_DMA_Init+0x196>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f76:	e02f      	b.n	8003fd8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f78:	f7fd fdd6 	bl	8001b28 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b05      	cmp	r3, #5
 8003f84:	d928      	bls.n	8003fd8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2203      	movs	r2, #3
 8003f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e242      	b.n	800441e <HAL_DMA_Init+0x63e>
 8003f98:	40020010 	.word	0x40020010
 8003f9c:	40020028 	.word	0x40020028
 8003fa0:	40020040 	.word	0x40020040
 8003fa4:	40020058 	.word	0x40020058
 8003fa8:	40020070 	.word	0x40020070
 8003fac:	40020088 	.word	0x40020088
 8003fb0:	400200a0 	.word	0x400200a0
 8003fb4:	400200b8 	.word	0x400200b8
 8003fb8:	40020410 	.word	0x40020410
 8003fbc:	40020428 	.word	0x40020428
 8003fc0:	40020440 	.word	0x40020440
 8003fc4:	40020458 	.word	0x40020458
 8003fc8:	40020470 	.word	0x40020470
 8003fcc:	40020488 	.word	0x40020488
 8003fd0:	400204a0 	.word	0x400204a0
 8003fd4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1c8      	bne.n	8003f78 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4b83      	ldr	r3, [pc, #524]	@ (8004200 <HAL_DMA_Init+0x420>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003ffe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800400a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004016:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	2b04      	cmp	r3, #4
 800402a:	d107      	bne.n	800403c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004034:	4313      	orrs	r3, r2
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b28      	cmp	r3, #40	@ 0x28
 8004042:	d903      	bls.n	800404c <HAL_DMA_Init+0x26c>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b2e      	cmp	r3, #46	@ 0x2e
 800404a:	d91f      	bls.n	800408c <HAL_DMA_Init+0x2ac>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b3e      	cmp	r3, #62	@ 0x3e
 8004052:	d903      	bls.n	800405c <HAL_DMA_Init+0x27c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b42      	cmp	r3, #66	@ 0x42
 800405a:	d917      	bls.n	800408c <HAL_DMA_Init+0x2ac>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b46      	cmp	r3, #70	@ 0x46
 8004062:	d903      	bls.n	800406c <HAL_DMA_Init+0x28c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b48      	cmp	r3, #72	@ 0x48
 800406a:	d90f      	bls.n	800408c <HAL_DMA_Init+0x2ac>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b4e      	cmp	r3, #78	@ 0x4e
 8004072:	d903      	bls.n	800407c <HAL_DMA_Init+0x29c>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b52      	cmp	r3, #82	@ 0x52
 800407a:	d907      	bls.n	800408c <HAL_DMA_Init+0x2ac>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b73      	cmp	r3, #115	@ 0x73
 8004082:	d905      	bls.n	8004090 <HAL_DMA_Init+0x2b0>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b77      	cmp	r3, #119	@ 0x77
 800408a:	d801      	bhi.n	8004090 <HAL_DMA_Init+0x2b0>
 800408c:	2301      	movs	r3, #1
 800408e:	e000      	b.n	8004092 <HAL_DMA_Init+0x2b2>
 8004090:	2300      	movs	r3, #0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800409c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f023 0307 	bic.w	r3, r3, #7
 80040b4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d117      	bne.n	80040f8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00e      	beq.n	80040f8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f001 fdca 	bl	8005c74 <DMA_CheckFifoParam>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2240      	movs	r2, #64	@ 0x40
 80040ea:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e192      	b.n	800441e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f001 fd05 	bl	8005b10 <DMA_CalcBaseAndBitshift>
 8004106:	4603      	mov	r3, r0
 8004108:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410e:	f003 031f 	and.w	r3, r3, #31
 8004112:	223f      	movs	r2, #63	@ 0x3f
 8004114:	409a      	lsls	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	609a      	str	r2, [r3, #8]
 800411a:	e0c8      	b.n	80042ae <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a38      	ldr	r2, [pc, #224]	@ (8004204 <HAL_DMA_Init+0x424>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d022      	beq.n	800416c <HAL_DMA_Init+0x38c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a37      	ldr	r2, [pc, #220]	@ (8004208 <HAL_DMA_Init+0x428>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d01d      	beq.n	800416c <HAL_DMA_Init+0x38c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a35      	ldr	r2, [pc, #212]	@ (800420c <HAL_DMA_Init+0x42c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d018      	beq.n	800416c <HAL_DMA_Init+0x38c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a34      	ldr	r2, [pc, #208]	@ (8004210 <HAL_DMA_Init+0x430>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d013      	beq.n	800416c <HAL_DMA_Init+0x38c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a32      	ldr	r2, [pc, #200]	@ (8004214 <HAL_DMA_Init+0x434>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00e      	beq.n	800416c <HAL_DMA_Init+0x38c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a31      	ldr	r2, [pc, #196]	@ (8004218 <HAL_DMA_Init+0x438>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d009      	beq.n	800416c <HAL_DMA_Init+0x38c>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a2f      	ldr	r2, [pc, #188]	@ (800421c <HAL_DMA_Init+0x43c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d004      	beq.n	800416c <HAL_DMA_Init+0x38c>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a2e      	ldr	r2, [pc, #184]	@ (8004220 <HAL_DMA_Init+0x440>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d101      	bne.n	8004170 <HAL_DMA_Init+0x390>
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <HAL_DMA_Init+0x392>
 8004170:	2300      	movs	r3, #0
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8092 	beq.w	800429c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a21      	ldr	r2, [pc, #132]	@ (8004204 <HAL_DMA_Init+0x424>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d021      	beq.n	80041c6 <HAL_DMA_Init+0x3e6>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a20      	ldr	r2, [pc, #128]	@ (8004208 <HAL_DMA_Init+0x428>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d01c      	beq.n	80041c6 <HAL_DMA_Init+0x3e6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1e      	ldr	r2, [pc, #120]	@ (800420c <HAL_DMA_Init+0x42c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d017      	beq.n	80041c6 <HAL_DMA_Init+0x3e6>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1d      	ldr	r2, [pc, #116]	@ (8004210 <HAL_DMA_Init+0x430>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d012      	beq.n	80041c6 <HAL_DMA_Init+0x3e6>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004214 <HAL_DMA_Init+0x434>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00d      	beq.n	80041c6 <HAL_DMA_Init+0x3e6>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004218 <HAL_DMA_Init+0x438>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d008      	beq.n	80041c6 <HAL_DMA_Init+0x3e6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a18      	ldr	r2, [pc, #96]	@ (800421c <HAL_DMA_Init+0x43c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <HAL_DMA_Init+0x3e6>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a17      	ldr	r2, [pc, #92]	@ (8004220 <HAL_DMA_Init+0x440>)
 80041c4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4b10      	ldr	r3, [pc, #64]	@ (8004224 <HAL_DMA_Init+0x444>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b40      	cmp	r3, #64	@ 0x40
 80041ec:	d01c      	beq.n	8004228 <HAL_DMA_Init+0x448>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b80      	cmp	r3, #128	@ 0x80
 80041f4:	d102      	bne.n	80041fc <HAL_DMA_Init+0x41c>
 80041f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041fa:	e016      	b.n	800422a <HAL_DMA_Init+0x44a>
 80041fc:	2300      	movs	r3, #0
 80041fe:	e014      	b.n	800422a <HAL_DMA_Init+0x44a>
 8004200:	fe10803f 	.word	0xfe10803f
 8004204:	58025408 	.word	0x58025408
 8004208:	5802541c 	.word	0x5802541c
 800420c:	58025430 	.word	0x58025430
 8004210:	58025444 	.word	0x58025444
 8004214:	58025458 	.word	0x58025458
 8004218:	5802546c 	.word	0x5802546c
 800421c:	58025480 	.word	0x58025480
 8004220:	58025494 	.word	0x58025494
 8004224:	fffe000f 	.word	0xfffe000f
 8004228:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68d2      	ldr	r2, [r2, #12]
 800422e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004230:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004238:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004240:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004248:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004250:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004258:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	4b6e      	ldr	r3, [pc, #440]	@ (8004428 <HAL_DMA_Init+0x648>)
 8004270:	4413      	add	r3, r2
 8004272:	4a6e      	ldr	r2, [pc, #440]	@ (800442c <HAL_DMA_Init+0x64c>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	009a      	lsls	r2, r3, #2
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f001 fc45 	bl	8005b10 <DMA_CalcBaseAndBitshift>
 8004286:	4603      	mov	r3, r0
 8004288:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428e:	f003 031f 	and.w	r3, r3, #31
 8004292:	2201      	movs	r2, #1
 8004294:	409a      	lsls	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	e008      	b.n	80042ae <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2240      	movs	r2, #64	@ 0x40
 80042a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2203      	movs	r2, #3
 80042a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e0b7      	b.n	800441e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a5f      	ldr	r2, [pc, #380]	@ (8004430 <HAL_DMA_Init+0x650>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d072      	beq.n	800439e <HAL_DMA_Init+0x5be>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a5d      	ldr	r2, [pc, #372]	@ (8004434 <HAL_DMA_Init+0x654>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d06d      	beq.n	800439e <HAL_DMA_Init+0x5be>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a5c      	ldr	r2, [pc, #368]	@ (8004438 <HAL_DMA_Init+0x658>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d068      	beq.n	800439e <HAL_DMA_Init+0x5be>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a5a      	ldr	r2, [pc, #360]	@ (800443c <HAL_DMA_Init+0x65c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d063      	beq.n	800439e <HAL_DMA_Init+0x5be>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a59      	ldr	r2, [pc, #356]	@ (8004440 <HAL_DMA_Init+0x660>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d05e      	beq.n	800439e <HAL_DMA_Init+0x5be>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a57      	ldr	r2, [pc, #348]	@ (8004444 <HAL_DMA_Init+0x664>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d059      	beq.n	800439e <HAL_DMA_Init+0x5be>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a56      	ldr	r2, [pc, #344]	@ (8004448 <HAL_DMA_Init+0x668>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d054      	beq.n	800439e <HAL_DMA_Init+0x5be>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a54      	ldr	r2, [pc, #336]	@ (800444c <HAL_DMA_Init+0x66c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d04f      	beq.n	800439e <HAL_DMA_Init+0x5be>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a53      	ldr	r2, [pc, #332]	@ (8004450 <HAL_DMA_Init+0x670>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d04a      	beq.n	800439e <HAL_DMA_Init+0x5be>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a51      	ldr	r2, [pc, #324]	@ (8004454 <HAL_DMA_Init+0x674>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d045      	beq.n	800439e <HAL_DMA_Init+0x5be>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a50      	ldr	r2, [pc, #320]	@ (8004458 <HAL_DMA_Init+0x678>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d040      	beq.n	800439e <HAL_DMA_Init+0x5be>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a4e      	ldr	r2, [pc, #312]	@ (800445c <HAL_DMA_Init+0x67c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d03b      	beq.n	800439e <HAL_DMA_Init+0x5be>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a4d      	ldr	r2, [pc, #308]	@ (8004460 <HAL_DMA_Init+0x680>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d036      	beq.n	800439e <HAL_DMA_Init+0x5be>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a4b      	ldr	r2, [pc, #300]	@ (8004464 <HAL_DMA_Init+0x684>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d031      	beq.n	800439e <HAL_DMA_Init+0x5be>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a4a      	ldr	r2, [pc, #296]	@ (8004468 <HAL_DMA_Init+0x688>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d02c      	beq.n	800439e <HAL_DMA_Init+0x5be>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a48      	ldr	r2, [pc, #288]	@ (800446c <HAL_DMA_Init+0x68c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d027      	beq.n	800439e <HAL_DMA_Init+0x5be>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a47      	ldr	r2, [pc, #284]	@ (8004470 <HAL_DMA_Init+0x690>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d022      	beq.n	800439e <HAL_DMA_Init+0x5be>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a45      	ldr	r2, [pc, #276]	@ (8004474 <HAL_DMA_Init+0x694>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d01d      	beq.n	800439e <HAL_DMA_Init+0x5be>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a44      	ldr	r2, [pc, #272]	@ (8004478 <HAL_DMA_Init+0x698>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d018      	beq.n	800439e <HAL_DMA_Init+0x5be>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a42      	ldr	r2, [pc, #264]	@ (800447c <HAL_DMA_Init+0x69c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d013      	beq.n	800439e <HAL_DMA_Init+0x5be>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a41      	ldr	r2, [pc, #260]	@ (8004480 <HAL_DMA_Init+0x6a0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00e      	beq.n	800439e <HAL_DMA_Init+0x5be>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a3f      	ldr	r2, [pc, #252]	@ (8004484 <HAL_DMA_Init+0x6a4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d009      	beq.n	800439e <HAL_DMA_Init+0x5be>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a3e      	ldr	r2, [pc, #248]	@ (8004488 <HAL_DMA_Init+0x6a8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d004      	beq.n	800439e <HAL_DMA_Init+0x5be>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a3c      	ldr	r2, [pc, #240]	@ (800448c <HAL_DMA_Init+0x6ac>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d101      	bne.n	80043a2 <HAL_DMA_Init+0x5c2>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <HAL_DMA_Init+0x5c4>
 80043a2:	2300      	movs	r3, #0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d032      	beq.n	800440e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f001 fcdf 	bl	8005d6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b80      	cmp	r3, #128	@ 0x80
 80043b4:	d102      	bne.n	80043bc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80043d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d010      	beq.n	80043fc <HAL_DMA_Init+0x61c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d80c      	bhi.n	80043fc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f001 fd5c 	bl	8005ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	e008      	b.n	800440e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	a7fdabf8 	.word	0xa7fdabf8
 800442c:	cccccccd 	.word	0xcccccccd
 8004430:	40020010 	.word	0x40020010
 8004434:	40020028 	.word	0x40020028
 8004438:	40020040 	.word	0x40020040
 800443c:	40020058 	.word	0x40020058
 8004440:	40020070 	.word	0x40020070
 8004444:	40020088 	.word	0x40020088
 8004448:	400200a0 	.word	0x400200a0
 800444c:	400200b8 	.word	0x400200b8
 8004450:	40020410 	.word	0x40020410
 8004454:	40020428 	.word	0x40020428
 8004458:	40020440 	.word	0x40020440
 800445c:	40020458 	.word	0x40020458
 8004460:	40020470 	.word	0x40020470
 8004464:	40020488 	.word	0x40020488
 8004468:	400204a0 	.word	0x400204a0
 800446c:	400204b8 	.word	0x400204b8
 8004470:	58025408 	.word	0x58025408
 8004474:	5802541c 	.word	0x5802541c
 8004478:	58025430 	.word	0x58025430
 800447c:	58025444 	.word	0x58025444
 8004480:	58025458 	.word	0x58025458
 8004484:	5802546c 	.word	0x5802546c
 8004488:	58025480 	.word	0x58025480
 800448c:	58025494 	.word	0x58025494

08004490 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e226      	b.n	80048fa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_DMA_Start_IT+0x2a>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e21f      	b.n	80048fa <HAL_DMA_Start_IT+0x46a>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	f040 820a 	bne.w	80048e4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a68      	ldr	r2, [pc, #416]	@ (8004684 <HAL_DMA_Start_IT+0x1f4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d04a      	beq.n	800457e <HAL_DMA_Start_IT+0xee>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a66      	ldr	r2, [pc, #408]	@ (8004688 <HAL_DMA_Start_IT+0x1f8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d045      	beq.n	800457e <HAL_DMA_Start_IT+0xee>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a65      	ldr	r2, [pc, #404]	@ (800468c <HAL_DMA_Start_IT+0x1fc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d040      	beq.n	800457e <HAL_DMA_Start_IT+0xee>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a63      	ldr	r2, [pc, #396]	@ (8004690 <HAL_DMA_Start_IT+0x200>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d03b      	beq.n	800457e <HAL_DMA_Start_IT+0xee>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a62      	ldr	r2, [pc, #392]	@ (8004694 <HAL_DMA_Start_IT+0x204>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d036      	beq.n	800457e <HAL_DMA_Start_IT+0xee>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a60      	ldr	r2, [pc, #384]	@ (8004698 <HAL_DMA_Start_IT+0x208>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d031      	beq.n	800457e <HAL_DMA_Start_IT+0xee>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a5f      	ldr	r2, [pc, #380]	@ (800469c <HAL_DMA_Start_IT+0x20c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d02c      	beq.n	800457e <HAL_DMA_Start_IT+0xee>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a5d      	ldr	r2, [pc, #372]	@ (80046a0 <HAL_DMA_Start_IT+0x210>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d027      	beq.n	800457e <HAL_DMA_Start_IT+0xee>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a5c      	ldr	r2, [pc, #368]	@ (80046a4 <HAL_DMA_Start_IT+0x214>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d022      	beq.n	800457e <HAL_DMA_Start_IT+0xee>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a5a      	ldr	r2, [pc, #360]	@ (80046a8 <HAL_DMA_Start_IT+0x218>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01d      	beq.n	800457e <HAL_DMA_Start_IT+0xee>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a59      	ldr	r2, [pc, #356]	@ (80046ac <HAL_DMA_Start_IT+0x21c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d018      	beq.n	800457e <HAL_DMA_Start_IT+0xee>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a57      	ldr	r2, [pc, #348]	@ (80046b0 <HAL_DMA_Start_IT+0x220>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_DMA_Start_IT+0xee>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a56      	ldr	r2, [pc, #344]	@ (80046b4 <HAL_DMA_Start_IT+0x224>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00e      	beq.n	800457e <HAL_DMA_Start_IT+0xee>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a54      	ldr	r2, [pc, #336]	@ (80046b8 <HAL_DMA_Start_IT+0x228>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d009      	beq.n	800457e <HAL_DMA_Start_IT+0xee>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a53      	ldr	r2, [pc, #332]	@ (80046bc <HAL_DMA_Start_IT+0x22c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_DMA_Start_IT+0xee>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a51      	ldr	r2, [pc, #324]	@ (80046c0 <HAL_DMA_Start_IT+0x230>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d108      	bne.n	8004590 <HAL_DMA_Start_IT+0x100>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0201 	bic.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e007      	b.n	80045a0 <HAL_DMA_Start_IT+0x110>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f001 f906 	bl	80057b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a34      	ldr	r2, [pc, #208]	@ (8004684 <HAL_DMA_Start_IT+0x1f4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d04a      	beq.n	800464c <HAL_DMA_Start_IT+0x1bc>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a33      	ldr	r2, [pc, #204]	@ (8004688 <HAL_DMA_Start_IT+0x1f8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d045      	beq.n	800464c <HAL_DMA_Start_IT+0x1bc>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a31      	ldr	r2, [pc, #196]	@ (800468c <HAL_DMA_Start_IT+0x1fc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d040      	beq.n	800464c <HAL_DMA_Start_IT+0x1bc>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a30      	ldr	r2, [pc, #192]	@ (8004690 <HAL_DMA_Start_IT+0x200>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d03b      	beq.n	800464c <HAL_DMA_Start_IT+0x1bc>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004694 <HAL_DMA_Start_IT+0x204>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d036      	beq.n	800464c <HAL_DMA_Start_IT+0x1bc>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004698 <HAL_DMA_Start_IT+0x208>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d031      	beq.n	800464c <HAL_DMA_Start_IT+0x1bc>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a2b      	ldr	r2, [pc, #172]	@ (800469c <HAL_DMA_Start_IT+0x20c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d02c      	beq.n	800464c <HAL_DMA_Start_IT+0x1bc>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a2a      	ldr	r2, [pc, #168]	@ (80046a0 <HAL_DMA_Start_IT+0x210>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d027      	beq.n	800464c <HAL_DMA_Start_IT+0x1bc>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a28      	ldr	r2, [pc, #160]	@ (80046a4 <HAL_DMA_Start_IT+0x214>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d022      	beq.n	800464c <HAL_DMA_Start_IT+0x1bc>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a27      	ldr	r2, [pc, #156]	@ (80046a8 <HAL_DMA_Start_IT+0x218>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d01d      	beq.n	800464c <HAL_DMA_Start_IT+0x1bc>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a25      	ldr	r2, [pc, #148]	@ (80046ac <HAL_DMA_Start_IT+0x21c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d018      	beq.n	800464c <HAL_DMA_Start_IT+0x1bc>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a24      	ldr	r2, [pc, #144]	@ (80046b0 <HAL_DMA_Start_IT+0x220>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d013      	beq.n	800464c <HAL_DMA_Start_IT+0x1bc>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a22      	ldr	r2, [pc, #136]	@ (80046b4 <HAL_DMA_Start_IT+0x224>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00e      	beq.n	800464c <HAL_DMA_Start_IT+0x1bc>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a21      	ldr	r2, [pc, #132]	@ (80046b8 <HAL_DMA_Start_IT+0x228>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d009      	beq.n	800464c <HAL_DMA_Start_IT+0x1bc>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1f      	ldr	r2, [pc, #124]	@ (80046bc <HAL_DMA_Start_IT+0x22c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <HAL_DMA_Start_IT+0x1bc>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1e      	ldr	r2, [pc, #120]	@ (80046c0 <HAL_DMA_Start_IT+0x230>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d101      	bne.n	8004650 <HAL_DMA_Start_IT+0x1c0>
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <HAL_DMA_Start_IT+0x1c2>
 8004650:	2300      	movs	r3, #0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d036      	beq.n	80046c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f023 021e 	bic.w	r2, r3, #30
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0216 	orr.w	r2, r2, #22
 8004668:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d03e      	beq.n	80046f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0208 	orr.w	r2, r2, #8
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	e035      	b.n	80046f0 <HAL_DMA_Start_IT+0x260>
 8004684:	40020010 	.word	0x40020010
 8004688:	40020028 	.word	0x40020028
 800468c:	40020040 	.word	0x40020040
 8004690:	40020058 	.word	0x40020058
 8004694:	40020070 	.word	0x40020070
 8004698:	40020088 	.word	0x40020088
 800469c:	400200a0 	.word	0x400200a0
 80046a0:	400200b8 	.word	0x400200b8
 80046a4:	40020410 	.word	0x40020410
 80046a8:	40020428 	.word	0x40020428
 80046ac:	40020440 	.word	0x40020440
 80046b0:	40020458 	.word	0x40020458
 80046b4:	40020470 	.word	0x40020470
 80046b8:	40020488 	.word	0x40020488
 80046bc:	400204a0 	.word	0x400204a0
 80046c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 020e 	bic.w	r2, r3, #14
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 020a 	orr.w	r2, r2, #10
 80046d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d007      	beq.n	80046f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0204 	orr.w	r2, r2, #4
 80046ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a83      	ldr	r2, [pc, #524]	@ (8004904 <HAL_DMA_Start_IT+0x474>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d072      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a82      	ldr	r2, [pc, #520]	@ (8004908 <HAL_DMA_Start_IT+0x478>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d06d      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a80      	ldr	r2, [pc, #512]	@ (800490c <HAL_DMA_Start_IT+0x47c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d068      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a7f      	ldr	r2, [pc, #508]	@ (8004910 <HAL_DMA_Start_IT+0x480>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d063      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a7d      	ldr	r2, [pc, #500]	@ (8004914 <HAL_DMA_Start_IT+0x484>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d05e      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a7c      	ldr	r2, [pc, #496]	@ (8004918 <HAL_DMA_Start_IT+0x488>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d059      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a7a      	ldr	r2, [pc, #488]	@ (800491c <HAL_DMA_Start_IT+0x48c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d054      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a79      	ldr	r2, [pc, #484]	@ (8004920 <HAL_DMA_Start_IT+0x490>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d04f      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a77      	ldr	r2, [pc, #476]	@ (8004924 <HAL_DMA_Start_IT+0x494>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d04a      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a76      	ldr	r2, [pc, #472]	@ (8004928 <HAL_DMA_Start_IT+0x498>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d045      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a74      	ldr	r2, [pc, #464]	@ (800492c <HAL_DMA_Start_IT+0x49c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d040      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a73      	ldr	r2, [pc, #460]	@ (8004930 <HAL_DMA_Start_IT+0x4a0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d03b      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a71      	ldr	r2, [pc, #452]	@ (8004934 <HAL_DMA_Start_IT+0x4a4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d036      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a70      	ldr	r2, [pc, #448]	@ (8004938 <HAL_DMA_Start_IT+0x4a8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d031      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a6e      	ldr	r2, [pc, #440]	@ (800493c <HAL_DMA_Start_IT+0x4ac>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d02c      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a6d      	ldr	r2, [pc, #436]	@ (8004940 <HAL_DMA_Start_IT+0x4b0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d027      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a6b      	ldr	r2, [pc, #428]	@ (8004944 <HAL_DMA_Start_IT+0x4b4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d022      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a6a      	ldr	r2, [pc, #424]	@ (8004948 <HAL_DMA_Start_IT+0x4b8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d01d      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a68      	ldr	r2, [pc, #416]	@ (800494c <HAL_DMA_Start_IT+0x4bc>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d018      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a67      	ldr	r2, [pc, #412]	@ (8004950 <HAL_DMA_Start_IT+0x4c0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d013      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a65      	ldr	r2, [pc, #404]	@ (8004954 <HAL_DMA_Start_IT+0x4c4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00e      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a64      	ldr	r2, [pc, #400]	@ (8004958 <HAL_DMA_Start_IT+0x4c8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d009      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a62      	ldr	r2, [pc, #392]	@ (800495c <HAL_DMA_Start_IT+0x4cc>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <HAL_DMA_Start_IT+0x350>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a61      	ldr	r2, [pc, #388]	@ (8004960 <HAL_DMA_Start_IT+0x4d0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d101      	bne.n	80047e4 <HAL_DMA_Start_IT+0x354>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_DMA_Start_IT+0x356>
 80047e4:	2300      	movs	r3, #0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01a      	beq.n	8004820 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004802:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004806:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800481a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800481e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a37      	ldr	r2, [pc, #220]	@ (8004904 <HAL_DMA_Start_IT+0x474>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d04a      	beq.n	80048c0 <HAL_DMA_Start_IT+0x430>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a36      	ldr	r2, [pc, #216]	@ (8004908 <HAL_DMA_Start_IT+0x478>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d045      	beq.n	80048c0 <HAL_DMA_Start_IT+0x430>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a34      	ldr	r2, [pc, #208]	@ (800490c <HAL_DMA_Start_IT+0x47c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d040      	beq.n	80048c0 <HAL_DMA_Start_IT+0x430>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a33      	ldr	r2, [pc, #204]	@ (8004910 <HAL_DMA_Start_IT+0x480>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d03b      	beq.n	80048c0 <HAL_DMA_Start_IT+0x430>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a31      	ldr	r2, [pc, #196]	@ (8004914 <HAL_DMA_Start_IT+0x484>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d036      	beq.n	80048c0 <HAL_DMA_Start_IT+0x430>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a30      	ldr	r2, [pc, #192]	@ (8004918 <HAL_DMA_Start_IT+0x488>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d031      	beq.n	80048c0 <HAL_DMA_Start_IT+0x430>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a2e      	ldr	r2, [pc, #184]	@ (800491c <HAL_DMA_Start_IT+0x48c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d02c      	beq.n	80048c0 <HAL_DMA_Start_IT+0x430>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a2d      	ldr	r2, [pc, #180]	@ (8004920 <HAL_DMA_Start_IT+0x490>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d027      	beq.n	80048c0 <HAL_DMA_Start_IT+0x430>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a2b      	ldr	r2, [pc, #172]	@ (8004924 <HAL_DMA_Start_IT+0x494>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d022      	beq.n	80048c0 <HAL_DMA_Start_IT+0x430>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2a      	ldr	r2, [pc, #168]	@ (8004928 <HAL_DMA_Start_IT+0x498>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d01d      	beq.n	80048c0 <HAL_DMA_Start_IT+0x430>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a28      	ldr	r2, [pc, #160]	@ (800492c <HAL_DMA_Start_IT+0x49c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d018      	beq.n	80048c0 <HAL_DMA_Start_IT+0x430>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a27      	ldr	r2, [pc, #156]	@ (8004930 <HAL_DMA_Start_IT+0x4a0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d013      	beq.n	80048c0 <HAL_DMA_Start_IT+0x430>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a25      	ldr	r2, [pc, #148]	@ (8004934 <HAL_DMA_Start_IT+0x4a4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00e      	beq.n	80048c0 <HAL_DMA_Start_IT+0x430>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a24      	ldr	r2, [pc, #144]	@ (8004938 <HAL_DMA_Start_IT+0x4a8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d009      	beq.n	80048c0 <HAL_DMA_Start_IT+0x430>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a22      	ldr	r2, [pc, #136]	@ (800493c <HAL_DMA_Start_IT+0x4ac>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d004      	beq.n	80048c0 <HAL_DMA_Start_IT+0x430>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a21      	ldr	r2, [pc, #132]	@ (8004940 <HAL_DMA_Start_IT+0x4b0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d108      	bne.n	80048d2 <HAL_DMA_Start_IT+0x442>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	e012      	b.n	80048f8 <HAL_DMA_Start_IT+0x468>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0201 	orr.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	e009      	b.n	80048f8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40020010 	.word	0x40020010
 8004908:	40020028 	.word	0x40020028
 800490c:	40020040 	.word	0x40020040
 8004910:	40020058 	.word	0x40020058
 8004914:	40020070 	.word	0x40020070
 8004918:	40020088 	.word	0x40020088
 800491c:	400200a0 	.word	0x400200a0
 8004920:	400200b8 	.word	0x400200b8
 8004924:	40020410 	.word	0x40020410
 8004928:	40020428 	.word	0x40020428
 800492c:	40020440 	.word	0x40020440
 8004930:	40020458 	.word	0x40020458
 8004934:	40020470 	.word	0x40020470
 8004938:	40020488 	.word	0x40020488
 800493c:	400204a0 	.word	0x400204a0
 8004940:	400204b8 	.word	0x400204b8
 8004944:	58025408 	.word	0x58025408
 8004948:	5802541c 	.word	0x5802541c
 800494c:	58025430 	.word	0x58025430
 8004950:	58025444 	.word	0x58025444
 8004954:	58025458 	.word	0x58025458
 8004958:	5802546c 	.word	0x5802546c
 800495c:	58025480 	.word	0x58025480
 8004960:	58025494 	.word	0x58025494

08004964 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08a      	sub	sp, #40	@ 0x28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004970:	4b67      	ldr	r3, [pc, #412]	@ (8004b10 <HAL_DMA_IRQHandler+0x1ac>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a67      	ldr	r2, [pc, #412]	@ (8004b14 <HAL_DMA_IRQHandler+0x1b0>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	0a9b      	lsrs	r3, r3, #10
 800497c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004982:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004988:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a5f      	ldr	r2, [pc, #380]	@ (8004b18 <HAL_DMA_IRQHandler+0x1b4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d04a      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a5d      	ldr	r2, [pc, #372]	@ (8004b1c <HAL_DMA_IRQHandler+0x1b8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d045      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a5c      	ldr	r2, [pc, #368]	@ (8004b20 <HAL_DMA_IRQHandler+0x1bc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d040      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004b24 <HAL_DMA_IRQHandler+0x1c0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d03b      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a59      	ldr	r2, [pc, #356]	@ (8004b28 <HAL_DMA_IRQHandler+0x1c4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d036      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a57      	ldr	r2, [pc, #348]	@ (8004b2c <HAL_DMA_IRQHandler+0x1c8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d031      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a56      	ldr	r2, [pc, #344]	@ (8004b30 <HAL_DMA_IRQHandler+0x1cc>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d02c      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a54      	ldr	r2, [pc, #336]	@ (8004b34 <HAL_DMA_IRQHandler+0x1d0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d027      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a53      	ldr	r2, [pc, #332]	@ (8004b38 <HAL_DMA_IRQHandler+0x1d4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d022      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a51      	ldr	r2, [pc, #324]	@ (8004b3c <HAL_DMA_IRQHandler+0x1d8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01d      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a50      	ldr	r2, [pc, #320]	@ (8004b40 <HAL_DMA_IRQHandler+0x1dc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d018      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a4e      	ldr	r2, [pc, #312]	@ (8004b44 <HAL_DMA_IRQHandler+0x1e0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a4d      	ldr	r2, [pc, #308]	@ (8004b48 <HAL_DMA_IRQHandler+0x1e4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a4b      	ldr	r2, [pc, #300]	@ (8004b4c <HAL_DMA_IRQHandler+0x1e8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a4a      	ldr	r2, [pc, #296]	@ (8004b50 <HAL_DMA_IRQHandler+0x1ec>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xd2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a48      	ldr	r2, [pc, #288]	@ (8004b54 <HAL_DMA_IRQHandler+0x1f0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <HAL_DMA_IRQHandler+0xd6>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_DMA_IRQHandler+0xd8>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 842b 	beq.w	8005298 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 80a2 	beq.w	8004b9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b18 <HAL_DMA_IRQHandler+0x1b4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d04a      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a2d      	ldr	r2, [pc, #180]	@ (8004b1c <HAL_DMA_IRQHandler+0x1b8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d045      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a2b      	ldr	r2, [pc, #172]	@ (8004b20 <HAL_DMA_IRQHandler+0x1bc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d040      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a2a      	ldr	r2, [pc, #168]	@ (8004b24 <HAL_DMA_IRQHandler+0x1c0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d03b      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a28      	ldr	r2, [pc, #160]	@ (8004b28 <HAL_DMA_IRQHandler+0x1c4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d036      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a27      	ldr	r2, [pc, #156]	@ (8004b2c <HAL_DMA_IRQHandler+0x1c8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d031      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a25      	ldr	r2, [pc, #148]	@ (8004b30 <HAL_DMA_IRQHandler+0x1cc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d02c      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a24      	ldr	r2, [pc, #144]	@ (8004b34 <HAL_DMA_IRQHandler+0x1d0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d027      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a22      	ldr	r2, [pc, #136]	@ (8004b38 <HAL_DMA_IRQHandler+0x1d4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d022      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a21      	ldr	r2, [pc, #132]	@ (8004b3c <HAL_DMA_IRQHandler+0x1d8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d01d      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b40 <HAL_DMA_IRQHandler+0x1dc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d018      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1e      	ldr	r2, [pc, #120]	@ (8004b44 <HAL_DMA_IRQHandler+0x1e0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b48 <HAL_DMA_IRQHandler+0x1e4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00e      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1b      	ldr	r2, [pc, #108]	@ (8004b4c <HAL_DMA_IRQHandler+0x1e8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d009      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a19      	ldr	r2, [pc, #100]	@ (8004b50 <HAL_DMA_IRQHandler+0x1ec>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x194>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a18      	ldr	r2, [pc, #96]	@ (8004b54 <HAL_DMA_IRQHandler+0x1f0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d12f      	bne.n	8004b58 <HAL_DMA_IRQHandler+0x1f4>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bf14      	ite	ne
 8004b06:	2301      	movne	r3, #1
 8004b08:	2300      	moveq	r3, #0
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	e02e      	b.n	8004b6c <HAL_DMA_IRQHandler+0x208>
 8004b0e:	bf00      	nop
 8004b10:	24000008 	.word	0x24000008
 8004b14:	1b4e81b5 	.word	0x1b4e81b5
 8004b18:	40020010 	.word	0x40020010
 8004b1c:	40020028 	.word	0x40020028
 8004b20:	40020040 	.word	0x40020040
 8004b24:	40020058 	.word	0x40020058
 8004b28:	40020070 	.word	0x40020070
 8004b2c:	40020088 	.word	0x40020088
 8004b30:	400200a0 	.word	0x400200a0
 8004b34:	400200b8 	.word	0x400200b8
 8004b38:	40020410 	.word	0x40020410
 8004b3c:	40020428 	.word	0x40020428
 8004b40:	40020440 	.word	0x40020440
 8004b44:	40020458 	.word	0x40020458
 8004b48:	40020470 	.word	0x40020470
 8004b4c:	40020488 	.word	0x40020488
 8004b50:	400204a0 	.word	0x400204a0
 8004b54:	400204b8 	.word	0x400204b8
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bf14      	ite	ne
 8004b66:	2301      	movne	r3, #1
 8004b68:	2300      	moveq	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0204 	bic.w	r2, r2, #4
 8004b7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b84:	f003 031f 	and.w	r3, r3, #31
 8004b88:	2208      	movs	r2, #8
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b94:	f043 0201 	orr.w	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d06e      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a69      	ldr	r2, [pc, #420]	@ (8004d5c <HAL_DMA_IRQHandler+0x3f8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d04a      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a67      	ldr	r2, [pc, #412]	@ (8004d60 <HAL_DMA_IRQHandler+0x3fc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d045      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a66      	ldr	r2, [pc, #408]	@ (8004d64 <HAL_DMA_IRQHandler+0x400>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d040      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a64      	ldr	r2, [pc, #400]	@ (8004d68 <HAL_DMA_IRQHandler+0x404>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d03b      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a63      	ldr	r2, [pc, #396]	@ (8004d6c <HAL_DMA_IRQHandler+0x408>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d036      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a61      	ldr	r2, [pc, #388]	@ (8004d70 <HAL_DMA_IRQHandler+0x40c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d031      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a60      	ldr	r2, [pc, #384]	@ (8004d74 <HAL_DMA_IRQHandler+0x410>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d02c      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a5e      	ldr	r2, [pc, #376]	@ (8004d78 <HAL_DMA_IRQHandler+0x414>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d027      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a5d      	ldr	r2, [pc, #372]	@ (8004d7c <HAL_DMA_IRQHandler+0x418>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d022      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a5b      	ldr	r2, [pc, #364]	@ (8004d80 <HAL_DMA_IRQHandler+0x41c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01d      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a5a      	ldr	r2, [pc, #360]	@ (8004d84 <HAL_DMA_IRQHandler+0x420>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d018      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a58      	ldr	r2, [pc, #352]	@ (8004d88 <HAL_DMA_IRQHandler+0x424>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a57      	ldr	r2, [pc, #348]	@ (8004d8c <HAL_DMA_IRQHandler+0x428>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a55      	ldr	r2, [pc, #340]	@ (8004d90 <HAL_DMA_IRQHandler+0x42c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a54      	ldr	r2, [pc, #336]	@ (8004d94 <HAL_DMA_IRQHandler+0x430>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x2ee>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a52      	ldr	r2, [pc, #328]	@ (8004d98 <HAL_DMA_IRQHandler+0x434>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d10a      	bne.n	8004c68 <HAL_DMA_IRQHandler+0x304>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e003      	b.n	8004c70 <HAL_DMA_IRQHandler+0x30c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00d      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c88:	f043 0202 	orr.w	r2, r3, #2
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c94:	f003 031f 	and.w	r3, r3, #31
 8004c98:	2204      	movs	r2, #4
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 808f 	beq.w	8004dc4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2c      	ldr	r2, [pc, #176]	@ (8004d5c <HAL_DMA_IRQHandler+0x3f8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d04a      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a2a      	ldr	r2, [pc, #168]	@ (8004d60 <HAL_DMA_IRQHandler+0x3fc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d045      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a29      	ldr	r2, [pc, #164]	@ (8004d64 <HAL_DMA_IRQHandler+0x400>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d040      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a27      	ldr	r2, [pc, #156]	@ (8004d68 <HAL_DMA_IRQHandler+0x404>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d03b      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a26      	ldr	r2, [pc, #152]	@ (8004d6c <HAL_DMA_IRQHandler+0x408>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d036      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a24      	ldr	r2, [pc, #144]	@ (8004d70 <HAL_DMA_IRQHandler+0x40c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d031      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a23      	ldr	r2, [pc, #140]	@ (8004d74 <HAL_DMA_IRQHandler+0x410>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d02c      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a21      	ldr	r2, [pc, #132]	@ (8004d78 <HAL_DMA_IRQHandler+0x414>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d027      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a20      	ldr	r2, [pc, #128]	@ (8004d7c <HAL_DMA_IRQHandler+0x418>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d022      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1e      	ldr	r2, [pc, #120]	@ (8004d80 <HAL_DMA_IRQHandler+0x41c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d01d      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8004d84 <HAL_DMA_IRQHandler+0x420>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d018      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1b      	ldr	r2, [pc, #108]	@ (8004d88 <HAL_DMA_IRQHandler+0x424>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1a      	ldr	r2, [pc, #104]	@ (8004d8c <HAL_DMA_IRQHandler+0x428>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00e      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a18      	ldr	r2, [pc, #96]	@ (8004d90 <HAL_DMA_IRQHandler+0x42c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d009      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a17      	ldr	r2, [pc, #92]	@ (8004d94 <HAL_DMA_IRQHandler+0x430>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d004      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x3e2>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a15      	ldr	r2, [pc, #84]	@ (8004d98 <HAL_DMA_IRQHandler+0x434>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d12a      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x438>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e023      	b.n	8004da4 <HAL_DMA_IRQHandler+0x440>
 8004d5c:	40020010 	.word	0x40020010
 8004d60:	40020028 	.word	0x40020028
 8004d64:	40020040 	.word	0x40020040
 8004d68:	40020058 	.word	0x40020058
 8004d6c:	40020070 	.word	0x40020070
 8004d70:	40020088 	.word	0x40020088
 8004d74:	400200a0 	.word	0x400200a0
 8004d78:	400200b8 	.word	0x400200b8
 8004d7c:	40020410 	.word	0x40020410
 8004d80:	40020428 	.word	0x40020428
 8004d84:	40020440 	.word	0x40020440
 8004d88:	40020458 	.word	0x40020458
 8004d8c:	40020470 	.word	0x40020470
 8004d90:	40020488 	.word	0x40020488
 8004d94:	400204a0 	.word	0x400204a0
 8004d98:	400204b8 	.word	0x400204b8
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2300      	movs	r3, #0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00d      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	2204      	movs	r2, #4
 8004db2:	409a      	lsls	r2, r3
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dbc:	f043 0204 	orr.w	r2, r3, #4
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc8:	f003 031f 	and.w	r3, r3, #31
 8004dcc:	2210      	movs	r2, #16
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 80a6 	beq.w	8004f26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a85      	ldr	r2, [pc, #532]	@ (8004ff4 <HAL_DMA_IRQHandler+0x690>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d04a      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a83      	ldr	r2, [pc, #524]	@ (8004ff8 <HAL_DMA_IRQHandler+0x694>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d045      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a82      	ldr	r2, [pc, #520]	@ (8004ffc <HAL_DMA_IRQHandler+0x698>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d040      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a80      	ldr	r2, [pc, #512]	@ (8005000 <HAL_DMA_IRQHandler+0x69c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d03b      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a7f      	ldr	r2, [pc, #508]	@ (8005004 <HAL_DMA_IRQHandler+0x6a0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d036      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a7d      	ldr	r2, [pc, #500]	@ (8005008 <HAL_DMA_IRQHandler+0x6a4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d031      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a7c      	ldr	r2, [pc, #496]	@ (800500c <HAL_DMA_IRQHandler+0x6a8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d02c      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a7a      	ldr	r2, [pc, #488]	@ (8005010 <HAL_DMA_IRQHandler+0x6ac>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d027      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a79      	ldr	r2, [pc, #484]	@ (8005014 <HAL_DMA_IRQHandler+0x6b0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d022      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a77      	ldr	r2, [pc, #476]	@ (8005018 <HAL_DMA_IRQHandler+0x6b4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d01d      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a76      	ldr	r2, [pc, #472]	@ (800501c <HAL_DMA_IRQHandler+0x6b8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d018      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a74      	ldr	r2, [pc, #464]	@ (8005020 <HAL_DMA_IRQHandler+0x6bc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a73      	ldr	r2, [pc, #460]	@ (8005024 <HAL_DMA_IRQHandler+0x6c0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00e      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a71      	ldr	r2, [pc, #452]	@ (8005028 <HAL_DMA_IRQHandler+0x6c4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d009      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a70      	ldr	r2, [pc, #448]	@ (800502c <HAL_DMA_IRQHandler+0x6c8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x516>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a6e      	ldr	r2, [pc, #440]	@ (8005030 <HAL_DMA_IRQHandler+0x6cc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d10a      	bne.n	8004e90 <HAL_DMA_IRQHandler+0x52c>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	e009      	b.n	8004ea4 <HAL_DMA_IRQHandler+0x540>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bf14      	ite	ne
 8004e9e:	2301      	movne	r3, #1
 8004ea0:	2300      	moveq	r3, #0
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d03e      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2210      	movs	r2, #16
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d018      	beq.n	8004ef8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d108      	bne.n	8004ee6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d024      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	4798      	blx	r3
 8004ee4:	e01f      	b.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01b      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	4798      	blx	r3
 8004ef6:	e016      	b.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d107      	bne.n	8004f16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0208 	bic.w	r2, r2, #8
 8004f14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2220      	movs	r2, #32
 8004f30:	409a      	lsls	r2, r3
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8110 	beq.w	800515c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2c      	ldr	r2, [pc, #176]	@ (8004ff4 <HAL_DMA_IRQHandler+0x690>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d04a      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ff8 <HAL_DMA_IRQHandler+0x694>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d045      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a29      	ldr	r2, [pc, #164]	@ (8004ffc <HAL_DMA_IRQHandler+0x698>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d040      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a28      	ldr	r2, [pc, #160]	@ (8005000 <HAL_DMA_IRQHandler+0x69c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d03b      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a26      	ldr	r2, [pc, #152]	@ (8005004 <HAL_DMA_IRQHandler+0x6a0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d036      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a25      	ldr	r2, [pc, #148]	@ (8005008 <HAL_DMA_IRQHandler+0x6a4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d031      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a23      	ldr	r2, [pc, #140]	@ (800500c <HAL_DMA_IRQHandler+0x6a8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d02c      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a22      	ldr	r2, [pc, #136]	@ (8005010 <HAL_DMA_IRQHandler+0x6ac>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d027      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a20      	ldr	r2, [pc, #128]	@ (8005014 <HAL_DMA_IRQHandler+0x6b0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d022      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1f      	ldr	r2, [pc, #124]	@ (8005018 <HAL_DMA_IRQHandler+0x6b4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d01d      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800501c <HAL_DMA_IRQHandler+0x6b8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d018      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	@ (8005020 <HAL_DMA_IRQHandler+0x6bc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d013      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8005024 <HAL_DMA_IRQHandler+0x6c0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00e      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a19      	ldr	r2, [pc, #100]	@ (8005028 <HAL_DMA_IRQHandler+0x6c4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d009      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a17      	ldr	r2, [pc, #92]	@ (800502c <HAL_DMA_IRQHandler+0x6c8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x678>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a16      	ldr	r2, [pc, #88]	@ (8005030 <HAL_DMA_IRQHandler+0x6cc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d12b      	bne.n	8005034 <HAL_DMA_IRQHandler+0x6d0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bf14      	ite	ne
 8004fea:	2301      	movne	r3, #1
 8004fec:	2300      	moveq	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	e02a      	b.n	8005048 <HAL_DMA_IRQHandler+0x6e4>
 8004ff2:	bf00      	nop
 8004ff4:	40020010 	.word	0x40020010
 8004ff8:	40020028 	.word	0x40020028
 8004ffc:	40020040 	.word	0x40020040
 8005000:	40020058 	.word	0x40020058
 8005004:	40020070 	.word	0x40020070
 8005008:	40020088 	.word	0x40020088
 800500c:	400200a0 	.word	0x400200a0
 8005010:	400200b8 	.word	0x400200b8
 8005014:	40020410 	.word	0x40020410
 8005018:	40020428 	.word	0x40020428
 800501c:	40020440 	.word	0x40020440
 8005020:	40020458 	.word	0x40020458
 8005024:	40020470 	.word	0x40020470
 8005028:	40020488 	.word	0x40020488
 800502c:	400204a0 	.word	0x400204a0
 8005030:	400204b8 	.word	0x400204b8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	bf14      	ite	ne
 8005042:	2301      	movne	r3, #1
 8005044:	2300      	moveq	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8087 	beq.w	800515c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2220      	movs	r2, #32
 8005058:	409a      	lsls	r2, r3
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b04      	cmp	r3, #4
 8005068:	d139      	bne.n	80050de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0216 	bic.w	r2, r2, #22
 8005078:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005088:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <HAL_DMA_IRQHandler+0x736>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0208 	bic.w	r2, r2, #8
 80050a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	223f      	movs	r2, #63	@ 0x3f
 80050b4:	409a      	lsls	r2, r3
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 834a 	beq.w	8005768 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4798      	blx	r3
          }
          return;
 80050dc:	e344      	b.n	8005768 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d018      	beq.n	800511e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d108      	bne.n	800510c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d02c      	beq.n	800515c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	4798      	blx	r3
 800510a:	e027      	b.n	800515c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005110:	2b00      	cmp	r3, #0
 8005112:	d023      	beq.n	800515c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	4798      	blx	r3
 800511c:	e01e      	b.n	800515c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10f      	bne.n	800514c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0210 	bic.w	r2, r2, #16
 800513a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8306 	beq.w	8005772 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8088 	beq.w	8005284 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2204      	movs	r2, #4
 8005178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a7a      	ldr	r2, [pc, #488]	@ (800536c <HAL_DMA_IRQHandler+0xa08>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d04a      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a79      	ldr	r2, [pc, #484]	@ (8005370 <HAL_DMA_IRQHandler+0xa0c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d045      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a77      	ldr	r2, [pc, #476]	@ (8005374 <HAL_DMA_IRQHandler+0xa10>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d040      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a76      	ldr	r2, [pc, #472]	@ (8005378 <HAL_DMA_IRQHandler+0xa14>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d03b      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a74      	ldr	r2, [pc, #464]	@ (800537c <HAL_DMA_IRQHandler+0xa18>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d036      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a73      	ldr	r2, [pc, #460]	@ (8005380 <HAL_DMA_IRQHandler+0xa1c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d031      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a71      	ldr	r2, [pc, #452]	@ (8005384 <HAL_DMA_IRQHandler+0xa20>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d02c      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a70      	ldr	r2, [pc, #448]	@ (8005388 <HAL_DMA_IRQHandler+0xa24>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d027      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a6e      	ldr	r2, [pc, #440]	@ (800538c <HAL_DMA_IRQHandler+0xa28>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d022      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a6d      	ldr	r2, [pc, #436]	@ (8005390 <HAL_DMA_IRQHandler+0xa2c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d01d      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a6b      	ldr	r2, [pc, #428]	@ (8005394 <HAL_DMA_IRQHandler+0xa30>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d018      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a6a      	ldr	r2, [pc, #424]	@ (8005398 <HAL_DMA_IRQHandler+0xa34>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a68      	ldr	r2, [pc, #416]	@ (800539c <HAL_DMA_IRQHandler+0xa38>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00e      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a67      	ldr	r2, [pc, #412]	@ (80053a0 <HAL_DMA_IRQHandler+0xa3c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d009      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a65      	ldr	r2, [pc, #404]	@ (80053a4 <HAL_DMA_IRQHandler+0xa40>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_DMA_IRQHandler+0x8b8>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a64      	ldr	r2, [pc, #400]	@ (80053a8 <HAL_DMA_IRQHandler+0xa44>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d108      	bne.n	800522e <HAL_DMA_IRQHandler+0x8ca>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	e007      	b.n	800523e <HAL_DMA_IRQHandler+0x8da>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005246:	429a      	cmp	r2, r3
 8005248:	d307      	bcc.n	800525a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f2      	bne.n	800523e <HAL_DMA_IRQHandler+0x8da>
 8005258:	e000      	b.n	800525c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800525a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d004      	beq.n	8005274 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2203      	movs	r2, #3
 800526e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005272:	e003      	b.n	800527c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 8272 	beq.w	8005772 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	4798      	blx	r3
 8005296:	e26c      	b.n	8005772 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a43      	ldr	r2, [pc, #268]	@ (80053ac <HAL_DMA_IRQHandler+0xa48>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d022      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x984>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a42      	ldr	r2, [pc, #264]	@ (80053b0 <HAL_DMA_IRQHandler+0xa4c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d01d      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x984>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a40      	ldr	r2, [pc, #256]	@ (80053b4 <HAL_DMA_IRQHandler+0xa50>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d018      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x984>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a3f      	ldr	r2, [pc, #252]	@ (80053b8 <HAL_DMA_IRQHandler+0xa54>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d013      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x984>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a3d      	ldr	r2, [pc, #244]	@ (80053bc <HAL_DMA_IRQHandler+0xa58>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00e      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x984>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a3c      	ldr	r2, [pc, #240]	@ (80053c0 <HAL_DMA_IRQHandler+0xa5c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d009      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x984>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a3a      	ldr	r2, [pc, #232]	@ (80053c4 <HAL_DMA_IRQHandler+0xa60>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x984>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a39      	ldr	r2, [pc, #228]	@ (80053c8 <HAL_DMA_IRQHandler+0xa64>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d101      	bne.n	80052ec <HAL_DMA_IRQHandler+0x988>
 80052e8:	2301      	movs	r3, #1
 80052ea:	e000      	b.n	80052ee <HAL_DMA_IRQHandler+0x98a>
 80052ec:	2300      	movs	r3, #0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 823f 	beq.w	8005772 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	2204      	movs	r2, #4
 8005306:	409a      	lsls	r2, r3
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	4013      	ands	r3, r2
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80cd 	beq.w	80054ac <HAL_DMA_IRQHandler+0xb48>
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80c7 	beq.w	80054ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	2204      	movs	r2, #4
 8005328:	409a      	lsls	r2, r3
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d049      	beq.n	80053cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d109      	bne.n	8005356 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 8210 	beq.w	800576c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005354:	e20a      	b.n	800576c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 8206 	beq.w	800576c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005368:	e200      	b.n	800576c <HAL_DMA_IRQHandler+0xe08>
 800536a:	bf00      	nop
 800536c:	40020010 	.word	0x40020010
 8005370:	40020028 	.word	0x40020028
 8005374:	40020040 	.word	0x40020040
 8005378:	40020058 	.word	0x40020058
 800537c:	40020070 	.word	0x40020070
 8005380:	40020088 	.word	0x40020088
 8005384:	400200a0 	.word	0x400200a0
 8005388:	400200b8 	.word	0x400200b8
 800538c:	40020410 	.word	0x40020410
 8005390:	40020428 	.word	0x40020428
 8005394:	40020440 	.word	0x40020440
 8005398:	40020458 	.word	0x40020458
 800539c:	40020470 	.word	0x40020470
 80053a0:	40020488 	.word	0x40020488
 80053a4:	400204a0 	.word	0x400204a0
 80053a8:	400204b8 	.word	0x400204b8
 80053ac:	58025408 	.word	0x58025408
 80053b0:	5802541c 	.word	0x5802541c
 80053b4:	58025430 	.word	0x58025430
 80053b8:	58025444 	.word	0x58025444
 80053bc:	58025458 	.word	0x58025458
 80053c0:	5802546c 	.word	0x5802546c
 80053c4:	58025480 	.word	0x58025480
 80053c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d160      	bne.n	8005498 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a7f      	ldr	r2, [pc, #508]	@ (80055d8 <HAL_DMA_IRQHandler+0xc74>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d04a      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a7d      	ldr	r2, [pc, #500]	@ (80055dc <HAL_DMA_IRQHandler+0xc78>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d045      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a7c      	ldr	r2, [pc, #496]	@ (80055e0 <HAL_DMA_IRQHandler+0xc7c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d040      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a7a      	ldr	r2, [pc, #488]	@ (80055e4 <HAL_DMA_IRQHandler+0xc80>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d03b      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a79      	ldr	r2, [pc, #484]	@ (80055e8 <HAL_DMA_IRQHandler+0xc84>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d036      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a77      	ldr	r2, [pc, #476]	@ (80055ec <HAL_DMA_IRQHandler+0xc88>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d031      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a76      	ldr	r2, [pc, #472]	@ (80055f0 <HAL_DMA_IRQHandler+0xc8c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d02c      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a74      	ldr	r2, [pc, #464]	@ (80055f4 <HAL_DMA_IRQHandler+0xc90>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d027      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a73      	ldr	r2, [pc, #460]	@ (80055f8 <HAL_DMA_IRQHandler+0xc94>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d022      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a71      	ldr	r2, [pc, #452]	@ (80055fc <HAL_DMA_IRQHandler+0xc98>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01d      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a70      	ldr	r2, [pc, #448]	@ (8005600 <HAL_DMA_IRQHandler+0xc9c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d018      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a6e      	ldr	r2, [pc, #440]	@ (8005604 <HAL_DMA_IRQHandler+0xca0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d013      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a6d      	ldr	r2, [pc, #436]	@ (8005608 <HAL_DMA_IRQHandler+0xca4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00e      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a6b      	ldr	r2, [pc, #428]	@ (800560c <HAL_DMA_IRQHandler+0xca8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d009      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a6a      	ldr	r2, [pc, #424]	@ (8005610 <HAL_DMA_IRQHandler+0xcac>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <HAL_DMA_IRQHandler+0xb12>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a68      	ldr	r2, [pc, #416]	@ (8005614 <HAL_DMA_IRQHandler+0xcb0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d108      	bne.n	8005488 <HAL_DMA_IRQHandler+0xb24>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0208 	bic.w	r2, r2, #8
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e007      	b.n	8005498 <HAL_DMA_IRQHandler+0xb34>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0204 	bic.w	r2, r2, #4
 8005496:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 8165 	beq.w	800576c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054aa:	e15f      	b.n	800576c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	2202      	movs	r2, #2
 80054b6:	409a      	lsls	r2, r3
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 80c5 	beq.w	800564c <HAL_DMA_IRQHandler+0xce8>
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 80bf 	beq.w	800564c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	2202      	movs	r2, #2
 80054d8:	409a      	lsls	r2, r3
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d018      	beq.n	800551a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 813a 	beq.w	8005770 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005504:	e134      	b.n	8005770 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 8130 	beq.w	8005770 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005518:	e12a      	b.n	8005770 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	f040 8089 	bne.w	8005638 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a2b      	ldr	r2, [pc, #172]	@ (80055d8 <HAL_DMA_IRQHandler+0xc74>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d04a      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a29      	ldr	r2, [pc, #164]	@ (80055dc <HAL_DMA_IRQHandler+0xc78>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d045      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a28      	ldr	r2, [pc, #160]	@ (80055e0 <HAL_DMA_IRQHandler+0xc7c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d040      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a26      	ldr	r2, [pc, #152]	@ (80055e4 <HAL_DMA_IRQHandler+0xc80>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d03b      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a25      	ldr	r2, [pc, #148]	@ (80055e8 <HAL_DMA_IRQHandler+0xc84>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d036      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a23      	ldr	r2, [pc, #140]	@ (80055ec <HAL_DMA_IRQHandler+0xc88>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d031      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a22      	ldr	r2, [pc, #136]	@ (80055f0 <HAL_DMA_IRQHandler+0xc8c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d02c      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a20      	ldr	r2, [pc, #128]	@ (80055f4 <HAL_DMA_IRQHandler+0xc90>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d027      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1f      	ldr	r2, [pc, #124]	@ (80055f8 <HAL_DMA_IRQHandler+0xc94>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d022      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1d      	ldr	r2, [pc, #116]	@ (80055fc <HAL_DMA_IRQHandler+0xc98>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01d      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1c      	ldr	r2, [pc, #112]	@ (8005600 <HAL_DMA_IRQHandler+0xc9c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d018      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1a      	ldr	r2, [pc, #104]	@ (8005604 <HAL_DMA_IRQHandler+0xca0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a19      	ldr	r2, [pc, #100]	@ (8005608 <HAL_DMA_IRQHandler+0xca4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00e      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a17      	ldr	r2, [pc, #92]	@ (800560c <HAL_DMA_IRQHandler+0xca8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d009      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a16      	ldr	r2, [pc, #88]	@ (8005610 <HAL_DMA_IRQHandler+0xcac>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d004      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xc62>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a14      	ldr	r2, [pc, #80]	@ (8005614 <HAL_DMA_IRQHandler+0xcb0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d128      	bne.n	8005618 <HAL_DMA_IRQHandler+0xcb4>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0214 	bic.w	r2, r2, #20
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	e027      	b.n	8005628 <HAL_DMA_IRQHandler+0xcc4>
 80055d8:	40020010 	.word	0x40020010
 80055dc:	40020028 	.word	0x40020028
 80055e0:	40020040 	.word	0x40020040
 80055e4:	40020058 	.word	0x40020058
 80055e8:	40020070 	.word	0x40020070
 80055ec:	40020088 	.word	0x40020088
 80055f0:	400200a0 	.word	0x400200a0
 80055f4:	400200b8 	.word	0x400200b8
 80055f8:	40020410 	.word	0x40020410
 80055fc:	40020428 	.word	0x40020428
 8005600:	40020440 	.word	0x40020440
 8005604:	40020458 	.word	0x40020458
 8005608:	40020470 	.word	0x40020470
 800560c:	40020488 	.word	0x40020488
 8005610:	400204a0 	.word	0x400204a0
 8005614:	400204b8 	.word	0x400204b8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 020a 	bic.w	r2, r2, #10
 8005626:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8097 	beq.w	8005770 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800564a:	e091      	b.n	8005770 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	2208      	movs	r2, #8
 8005656:	409a      	lsls	r2, r3
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	4013      	ands	r3, r2
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 8088 	beq.w	8005772 <HAL_DMA_IRQHandler+0xe0e>
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8082 	beq.w	8005772 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a41      	ldr	r2, [pc, #260]	@ (8005778 <HAL_DMA_IRQHandler+0xe14>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d04a      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a3f      	ldr	r2, [pc, #252]	@ (800577c <HAL_DMA_IRQHandler+0xe18>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d045      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a3e      	ldr	r2, [pc, #248]	@ (8005780 <HAL_DMA_IRQHandler+0xe1c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d040      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a3c      	ldr	r2, [pc, #240]	@ (8005784 <HAL_DMA_IRQHandler+0xe20>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d03b      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a3b      	ldr	r2, [pc, #236]	@ (8005788 <HAL_DMA_IRQHandler+0xe24>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d036      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a39      	ldr	r2, [pc, #228]	@ (800578c <HAL_DMA_IRQHandler+0xe28>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d031      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a38      	ldr	r2, [pc, #224]	@ (8005790 <HAL_DMA_IRQHandler+0xe2c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d02c      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a36      	ldr	r2, [pc, #216]	@ (8005794 <HAL_DMA_IRQHandler+0xe30>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d027      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a35      	ldr	r2, [pc, #212]	@ (8005798 <HAL_DMA_IRQHandler+0xe34>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d022      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a33      	ldr	r2, [pc, #204]	@ (800579c <HAL_DMA_IRQHandler+0xe38>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d01d      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a32      	ldr	r2, [pc, #200]	@ (80057a0 <HAL_DMA_IRQHandler+0xe3c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d018      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a30      	ldr	r2, [pc, #192]	@ (80057a4 <HAL_DMA_IRQHandler+0xe40>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a2f      	ldr	r2, [pc, #188]	@ (80057a8 <HAL_DMA_IRQHandler+0xe44>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00e      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a2d      	ldr	r2, [pc, #180]	@ (80057ac <HAL_DMA_IRQHandler+0xe48>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d009      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a2c      	ldr	r2, [pc, #176]	@ (80057b0 <HAL_DMA_IRQHandler+0xe4c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d004      	beq.n	800570e <HAL_DMA_IRQHandler+0xdaa>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a2a      	ldr	r2, [pc, #168]	@ (80057b4 <HAL_DMA_IRQHandler+0xe50>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d108      	bne.n	8005720 <HAL_DMA_IRQHandler+0xdbc>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 021c 	bic.w	r2, r2, #28
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e007      	b.n	8005730 <HAL_DMA_IRQHandler+0xdcc>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 020e 	bic.w	r2, r2, #14
 800572e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005734:	f003 031f 	and.w	r3, r3, #31
 8005738:	2201      	movs	r2, #1
 800573a:	409a      	lsls	r2, r3
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d009      	beq.n	8005772 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	4798      	blx	r3
 8005766:	e004      	b.n	8005772 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005768:	bf00      	nop
 800576a:	e002      	b.n	8005772 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800576c:	bf00      	nop
 800576e:	e000      	b.n	8005772 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005770:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005772:	3728      	adds	r7, #40	@ 0x28
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40020010 	.word	0x40020010
 800577c:	40020028 	.word	0x40020028
 8005780:	40020040 	.word	0x40020040
 8005784:	40020058 	.word	0x40020058
 8005788:	40020070 	.word	0x40020070
 800578c:	40020088 	.word	0x40020088
 8005790:	400200a0 	.word	0x400200a0
 8005794:	400200b8 	.word	0x400200b8
 8005798:	40020410 	.word	0x40020410
 800579c:	40020428 	.word	0x40020428
 80057a0:	40020440 	.word	0x40020440
 80057a4:	40020458 	.word	0x40020458
 80057a8:	40020470 	.word	0x40020470
 80057ac:	40020488 	.word	0x40020488
 80057b0:	400204a0 	.word	0x400204a0
 80057b4:	400204b8 	.word	0x400204b8

080057b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a7f      	ldr	r2, [pc, #508]	@ (80059d4 <DMA_SetConfig+0x21c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d072      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a7d      	ldr	r2, [pc, #500]	@ (80059d8 <DMA_SetConfig+0x220>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d06d      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a7c      	ldr	r2, [pc, #496]	@ (80059dc <DMA_SetConfig+0x224>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d068      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a7a      	ldr	r2, [pc, #488]	@ (80059e0 <DMA_SetConfig+0x228>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d063      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a79      	ldr	r2, [pc, #484]	@ (80059e4 <DMA_SetConfig+0x22c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d05e      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a77      	ldr	r2, [pc, #476]	@ (80059e8 <DMA_SetConfig+0x230>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d059      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a76      	ldr	r2, [pc, #472]	@ (80059ec <DMA_SetConfig+0x234>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d054      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a74      	ldr	r2, [pc, #464]	@ (80059f0 <DMA_SetConfig+0x238>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d04f      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a73      	ldr	r2, [pc, #460]	@ (80059f4 <DMA_SetConfig+0x23c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d04a      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a71      	ldr	r2, [pc, #452]	@ (80059f8 <DMA_SetConfig+0x240>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d045      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a70      	ldr	r2, [pc, #448]	@ (80059fc <DMA_SetConfig+0x244>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d040      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a6e      	ldr	r2, [pc, #440]	@ (8005a00 <DMA_SetConfig+0x248>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d03b      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a6d      	ldr	r2, [pc, #436]	@ (8005a04 <DMA_SetConfig+0x24c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d036      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a6b      	ldr	r2, [pc, #428]	@ (8005a08 <DMA_SetConfig+0x250>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d031      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a6a      	ldr	r2, [pc, #424]	@ (8005a0c <DMA_SetConfig+0x254>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d02c      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a68      	ldr	r2, [pc, #416]	@ (8005a10 <DMA_SetConfig+0x258>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d027      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a67      	ldr	r2, [pc, #412]	@ (8005a14 <DMA_SetConfig+0x25c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d022      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a65      	ldr	r2, [pc, #404]	@ (8005a18 <DMA_SetConfig+0x260>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d01d      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a64      	ldr	r2, [pc, #400]	@ (8005a1c <DMA_SetConfig+0x264>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d018      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a62      	ldr	r2, [pc, #392]	@ (8005a20 <DMA_SetConfig+0x268>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d013      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a61      	ldr	r2, [pc, #388]	@ (8005a24 <DMA_SetConfig+0x26c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00e      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a5f      	ldr	r2, [pc, #380]	@ (8005a28 <DMA_SetConfig+0x270>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d009      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a5e      	ldr	r2, [pc, #376]	@ (8005a2c <DMA_SetConfig+0x274>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d004      	beq.n	80058c2 <DMA_SetConfig+0x10a>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a5c      	ldr	r2, [pc, #368]	@ (8005a30 <DMA_SetConfig+0x278>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d101      	bne.n	80058c6 <DMA_SetConfig+0x10e>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <DMA_SetConfig+0x110>
 80058c6:	2300      	movs	r3, #0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00d      	beq.n	80058e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80058d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80058e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a39      	ldr	r2, [pc, #228]	@ (80059d4 <DMA_SetConfig+0x21c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d04a      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a38      	ldr	r2, [pc, #224]	@ (80059d8 <DMA_SetConfig+0x220>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d045      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a36      	ldr	r2, [pc, #216]	@ (80059dc <DMA_SetConfig+0x224>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d040      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a35      	ldr	r2, [pc, #212]	@ (80059e0 <DMA_SetConfig+0x228>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d03b      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a33      	ldr	r2, [pc, #204]	@ (80059e4 <DMA_SetConfig+0x22c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d036      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a32      	ldr	r2, [pc, #200]	@ (80059e8 <DMA_SetConfig+0x230>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d031      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a30      	ldr	r2, [pc, #192]	@ (80059ec <DMA_SetConfig+0x234>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d02c      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a2f      	ldr	r2, [pc, #188]	@ (80059f0 <DMA_SetConfig+0x238>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d027      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a2d      	ldr	r2, [pc, #180]	@ (80059f4 <DMA_SetConfig+0x23c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d022      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a2c      	ldr	r2, [pc, #176]	@ (80059f8 <DMA_SetConfig+0x240>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d01d      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a2a      	ldr	r2, [pc, #168]	@ (80059fc <DMA_SetConfig+0x244>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d018      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a29      	ldr	r2, [pc, #164]	@ (8005a00 <DMA_SetConfig+0x248>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d013      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a27      	ldr	r2, [pc, #156]	@ (8005a04 <DMA_SetConfig+0x24c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00e      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a26      	ldr	r2, [pc, #152]	@ (8005a08 <DMA_SetConfig+0x250>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d009      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a24      	ldr	r2, [pc, #144]	@ (8005a0c <DMA_SetConfig+0x254>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d004      	beq.n	8005988 <DMA_SetConfig+0x1d0>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a23      	ldr	r2, [pc, #140]	@ (8005a10 <DMA_SetConfig+0x258>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d101      	bne.n	800598c <DMA_SetConfig+0x1d4>
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <DMA_SetConfig+0x1d6>
 800598c:	2300      	movs	r3, #0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d059      	beq.n	8005a46 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	223f      	movs	r2, #63	@ 0x3f
 800599c:	409a      	lsls	r2, r3
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80059b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b40      	cmp	r3, #64	@ 0x40
 80059c0:	d138      	bne.n	8005a34 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80059d2:	e086      	b.n	8005ae2 <DMA_SetConfig+0x32a>
 80059d4:	40020010 	.word	0x40020010
 80059d8:	40020028 	.word	0x40020028
 80059dc:	40020040 	.word	0x40020040
 80059e0:	40020058 	.word	0x40020058
 80059e4:	40020070 	.word	0x40020070
 80059e8:	40020088 	.word	0x40020088
 80059ec:	400200a0 	.word	0x400200a0
 80059f0:	400200b8 	.word	0x400200b8
 80059f4:	40020410 	.word	0x40020410
 80059f8:	40020428 	.word	0x40020428
 80059fc:	40020440 	.word	0x40020440
 8005a00:	40020458 	.word	0x40020458
 8005a04:	40020470 	.word	0x40020470
 8005a08:	40020488 	.word	0x40020488
 8005a0c:	400204a0 	.word	0x400204a0
 8005a10:	400204b8 	.word	0x400204b8
 8005a14:	58025408 	.word	0x58025408
 8005a18:	5802541c 	.word	0x5802541c
 8005a1c:	58025430 	.word	0x58025430
 8005a20:	58025444 	.word	0x58025444
 8005a24:	58025458 	.word	0x58025458
 8005a28:	5802546c 	.word	0x5802546c
 8005a2c:	58025480 	.word	0x58025480
 8005a30:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	60da      	str	r2, [r3, #12]
}
 8005a44:	e04d      	b.n	8005ae2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a29      	ldr	r2, [pc, #164]	@ (8005af0 <DMA_SetConfig+0x338>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d022      	beq.n	8005a96 <DMA_SetConfig+0x2de>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a27      	ldr	r2, [pc, #156]	@ (8005af4 <DMA_SetConfig+0x33c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d01d      	beq.n	8005a96 <DMA_SetConfig+0x2de>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a26      	ldr	r2, [pc, #152]	@ (8005af8 <DMA_SetConfig+0x340>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d018      	beq.n	8005a96 <DMA_SetConfig+0x2de>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a24      	ldr	r2, [pc, #144]	@ (8005afc <DMA_SetConfig+0x344>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d013      	beq.n	8005a96 <DMA_SetConfig+0x2de>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a23      	ldr	r2, [pc, #140]	@ (8005b00 <DMA_SetConfig+0x348>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00e      	beq.n	8005a96 <DMA_SetConfig+0x2de>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a21      	ldr	r2, [pc, #132]	@ (8005b04 <DMA_SetConfig+0x34c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d009      	beq.n	8005a96 <DMA_SetConfig+0x2de>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a20      	ldr	r2, [pc, #128]	@ (8005b08 <DMA_SetConfig+0x350>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d004      	beq.n	8005a96 <DMA_SetConfig+0x2de>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1e      	ldr	r2, [pc, #120]	@ (8005b0c <DMA_SetConfig+0x354>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d101      	bne.n	8005a9a <DMA_SetConfig+0x2e2>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <DMA_SetConfig+0x2e4>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d020      	beq.n	8005ae2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aa4:	f003 031f 	and.w	r3, r3, #31
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	409a      	lsls	r2, r3
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2b40      	cmp	r3, #64	@ 0x40
 8005abe:	d108      	bne.n	8005ad2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	60da      	str	r2, [r3, #12]
}
 8005ad0:	e007      	b.n	8005ae2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	60da      	str	r2, [r3, #12]
}
 8005ae2:	bf00      	nop
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	58025408 	.word	0x58025408
 8005af4:	5802541c 	.word	0x5802541c
 8005af8:	58025430 	.word	0x58025430
 8005afc:	58025444 	.word	0x58025444
 8005b00:	58025458 	.word	0x58025458
 8005b04:	5802546c 	.word	0x5802546c
 8005b08:	58025480 	.word	0x58025480
 8005b0c:	58025494 	.word	0x58025494

08005b10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a42      	ldr	r2, [pc, #264]	@ (8005c28 <DMA_CalcBaseAndBitshift+0x118>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d04a      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a41      	ldr	r2, [pc, #260]	@ (8005c2c <DMA_CalcBaseAndBitshift+0x11c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d045      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a3f      	ldr	r2, [pc, #252]	@ (8005c30 <DMA_CalcBaseAndBitshift+0x120>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d040      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a3e      	ldr	r2, [pc, #248]	@ (8005c34 <DMA_CalcBaseAndBitshift+0x124>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d03b      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a3c      	ldr	r2, [pc, #240]	@ (8005c38 <DMA_CalcBaseAndBitshift+0x128>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d036      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a3b      	ldr	r2, [pc, #236]	@ (8005c3c <DMA_CalcBaseAndBitshift+0x12c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d031      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a39      	ldr	r2, [pc, #228]	@ (8005c40 <DMA_CalcBaseAndBitshift+0x130>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d02c      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a38      	ldr	r2, [pc, #224]	@ (8005c44 <DMA_CalcBaseAndBitshift+0x134>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d027      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a36      	ldr	r2, [pc, #216]	@ (8005c48 <DMA_CalcBaseAndBitshift+0x138>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d022      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a35      	ldr	r2, [pc, #212]	@ (8005c4c <DMA_CalcBaseAndBitshift+0x13c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d01d      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a33      	ldr	r2, [pc, #204]	@ (8005c50 <DMA_CalcBaseAndBitshift+0x140>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d018      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a32      	ldr	r2, [pc, #200]	@ (8005c54 <DMA_CalcBaseAndBitshift+0x144>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a30      	ldr	r2, [pc, #192]	@ (8005c58 <DMA_CalcBaseAndBitshift+0x148>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00e      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a2f      	ldr	r2, [pc, #188]	@ (8005c5c <DMA_CalcBaseAndBitshift+0x14c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d009      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8005c60 <DMA_CalcBaseAndBitshift+0x150>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <DMA_CalcBaseAndBitshift+0xa8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8005c64 <DMA_CalcBaseAndBitshift+0x154>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d101      	bne.n	8005bbc <DMA_CalcBaseAndBitshift+0xac>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e000      	b.n	8005bbe <DMA_CalcBaseAndBitshift+0xae>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d024      	beq.n	8005c0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	3b10      	subs	r3, #16
 8005bca:	4a27      	ldr	r2, [pc, #156]	@ (8005c68 <DMA_CalcBaseAndBitshift+0x158>)
 8005bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd0:	091b      	lsrs	r3, r3, #4
 8005bd2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	4a24      	ldr	r2, [pc, #144]	@ (8005c6c <DMA_CalcBaseAndBitshift+0x15c>)
 8005bdc:	5cd3      	ldrb	r3, [r2, r3]
 8005bde:	461a      	mov	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d908      	bls.n	8005bfc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c70 <DMA_CalcBaseAndBitshift+0x160>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	1d1a      	adds	r2, r3, #4
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	659a      	str	r2, [r3, #88]	@ 0x58
 8005bfa:	e00d      	b.n	8005c18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	4b1b      	ldr	r3, [pc, #108]	@ (8005c70 <DMA_CalcBaseAndBitshift+0x160>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c0a:	e005      	b.n	8005c18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	40020010 	.word	0x40020010
 8005c2c:	40020028 	.word	0x40020028
 8005c30:	40020040 	.word	0x40020040
 8005c34:	40020058 	.word	0x40020058
 8005c38:	40020070 	.word	0x40020070
 8005c3c:	40020088 	.word	0x40020088
 8005c40:	400200a0 	.word	0x400200a0
 8005c44:	400200b8 	.word	0x400200b8
 8005c48:	40020410 	.word	0x40020410
 8005c4c:	40020428 	.word	0x40020428
 8005c50:	40020440 	.word	0x40020440
 8005c54:	40020458 	.word	0x40020458
 8005c58:	40020470 	.word	0x40020470
 8005c5c:	40020488 	.word	0x40020488
 8005c60:	400204a0 	.word	0x400204a0
 8005c64:	400204b8 	.word	0x400204b8
 8005c68:	aaaaaaab 	.word	0xaaaaaaab
 8005c6c:	0800aad0 	.word	0x0800aad0
 8005c70:	fffffc00 	.word	0xfffffc00

08005c74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d120      	bne.n	8005cca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d858      	bhi.n	8005d42 <DMA_CheckFifoParam+0xce>
 8005c90:	a201      	add	r2, pc, #4	@ (adr r2, 8005c98 <DMA_CheckFifoParam+0x24>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005ca9 	.word	0x08005ca9
 8005c9c:	08005cbb 	.word	0x08005cbb
 8005ca0:	08005ca9 	.word	0x08005ca9
 8005ca4:	08005d43 	.word	0x08005d43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d048      	beq.n	8005d46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cb8:	e045      	b.n	8005d46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005cc2:	d142      	bne.n	8005d4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cc8:	e03f      	b.n	8005d4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cd2:	d123      	bne.n	8005d1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d838      	bhi.n	8005d4e <DMA_CheckFifoParam+0xda>
 8005cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce4 <DMA_CheckFifoParam+0x70>)
 8005cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce2:	bf00      	nop
 8005ce4:	08005cf5 	.word	0x08005cf5
 8005ce8:	08005cfb 	.word	0x08005cfb
 8005cec:	08005cf5 	.word	0x08005cf5
 8005cf0:	08005d0d 	.word	0x08005d0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
        break;
 8005cf8:	e030      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d025      	beq.n	8005d52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d0a:	e022      	b.n	8005d52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005d14:	d11f      	bne.n	8005d56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d1a:	e01c      	b.n	8005d56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d902      	bls.n	8005d2a <DMA_CheckFifoParam+0xb6>
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d003      	beq.n	8005d30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005d28:	e018      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	73fb      	strb	r3, [r7, #15]
        break;
 8005d2e:	e015      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00e      	beq.n	8005d5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8005d40:	e00b      	b.n	8005d5a <DMA_CheckFifoParam+0xe6>
        break;
 8005d42:	bf00      	nop
 8005d44:	e00a      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
        break;
 8005d46:	bf00      	nop
 8005d48:	e008      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
        break;
 8005d4a:	bf00      	nop
 8005d4c:	e006      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
        break;
 8005d4e:	bf00      	nop
 8005d50:	e004      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
        break;
 8005d52:	bf00      	nop
 8005d54:	e002      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
        break;
 8005d56:	bf00      	nop
 8005d58:	e000      	b.n	8005d5c <DMA_CheckFifoParam+0xe8>
    break;
 8005d5a:	bf00      	nop
    }
  }

  return status;
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop

08005d6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a38      	ldr	r2, [pc, #224]	@ (8005e60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d022      	beq.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a36      	ldr	r2, [pc, #216]	@ (8005e64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d01d      	beq.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a35      	ldr	r2, [pc, #212]	@ (8005e68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d018      	beq.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a33      	ldr	r2, [pc, #204]	@ (8005e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d013      	beq.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a32      	ldr	r2, [pc, #200]	@ (8005e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00e      	beq.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a30      	ldr	r2, [pc, #192]	@ (8005e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d009      	beq.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a2f      	ldr	r2, [pc, #188]	@ (8005e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d004      	beq.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a2d      	ldr	r2, [pc, #180]	@ (8005e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d101      	bne.n	8005dce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01a      	beq.n	8005e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	3b08      	subs	r3, #8
 8005ddc:	4a28      	ldr	r2, [pc, #160]	@ (8005e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005dde:	fba2 2303 	umull	r2, r3, r2, r3
 8005de2:	091b      	lsrs	r3, r3, #4
 8005de4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4b26      	ldr	r3, [pc, #152]	@ (8005e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	461a      	mov	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a24      	ldr	r2, [pc, #144]	@ (8005e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005df8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f003 031f 	and.w	r3, r3, #31
 8005e00:	2201      	movs	r2, #1
 8005e02:	409a      	lsls	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005e08:	e024      	b.n	8005e54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	3b10      	subs	r3, #16
 8005e12:	4a1e      	ldr	r2, [pc, #120]	@ (8005e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005e14:	fba2 2303 	umull	r2, r3, r2, r3
 8005e18:	091b      	lsrs	r3, r3, #4
 8005e1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8005e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d806      	bhi.n	8005e32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4a1b      	ldr	r2, [pc, #108]	@ (8005e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d902      	bls.n	8005e32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4b18      	ldr	r3, [pc, #96]	@ (8005e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a16      	ldr	r2, [pc, #88]	@ (8005e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005e44:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e54:	bf00      	nop
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	58025408 	.word	0x58025408
 8005e64:	5802541c 	.word	0x5802541c
 8005e68:	58025430 	.word	0x58025430
 8005e6c:	58025444 	.word	0x58025444
 8005e70:	58025458 	.word	0x58025458
 8005e74:	5802546c 	.word	0x5802546c
 8005e78:	58025480 	.word	0x58025480
 8005e7c:	58025494 	.word	0x58025494
 8005e80:	cccccccd 	.word	0xcccccccd
 8005e84:	16009600 	.word	0x16009600
 8005e88:	58025880 	.word	0x58025880
 8005e8c:	aaaaaaab 	.word	0xaaaaaaab
 8005e90:	400204b8 	.word	0x400204b8
 8005e94:	4002040f 	.word	0x4002040f
 8005e98:	10008200 	.word	0x10008200
 8005e9c:	40020880 	.word	0x40020880

08005ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d04a      	beq.n	8005f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d847      	bhi.n	8005f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a25      	ldr	r2, [pc, #148]	@ (8005f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d022      	beq.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a24      	ldr	r2, [pc, #144]	@ (8005f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d01d      	beq.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a22      	ldr	r2, [pc, #136]	@ (8005f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d018      	beq.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a21      	ldr	r2, [pc, #132]	@ (8005f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d013      	beq.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8005f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d00e      	beq.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8005f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d009      	beq.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a1c      	ldr	r2, [pc, #112]	@ (8005f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d004      	beq.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1b      	ldr	r2, [pc, #108]	@ (8005f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d101      	bne.n	8005f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005f10:	2300      	movs	r3, #0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4b17      	ldr	r3, [pc, #92]	@ (8005f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	461a      	mov	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a15      	ldr	r2, [pc, #84]	@ (8005f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005f28:	671a      	str	r2, [r3, #112]	@ 0x70
 8005f2a:	e009      	b.n	8005f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4b14      	ldr	r3, [pc, #80]	@ (8005f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	461a      	mov	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a11      	ldr	r2, [pc, #68]	@ (8005f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005f3e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	2201      	movs	r2, #1
 8005f46:	409a      	lsls	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005f4c:	bf00      	nop
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	58025408 	.word	0x58025408
 8005f5c:	5802541c 	.word	0x5802541c
 8005f60:	58025430 	.word	0x58025430
 8005f64:	58025444 	.word	0x58025444
 8005f68:	58025458 	.word	0x58025458
 8005f6c:	5802546c 	.word	0x5802546c
 8005f70:	58025480 	.word	0x58025480
 8005f74:	58025494 	.word	0x58025494
 8005f78:	1600963f 	.word	0x1600963f
 8005f7c:	58025940 	.word	0x58025940
 8005f80:	1000823f 	.word	0x1000823f
 8005f84:	40020940 	.word	0x40020940

08005f88 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e033      	b.n	8006002 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fb fb8c 	bl	80016cc <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f854 	bl	8006068 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f822 	bl	800600a <FMAC_Reset>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d10c      	bne.n	8005fe6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd0:	f043 0210 	orr.w	r2, r3, #16
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	22a0      	movs	r2, #160	@ 0xa0
 8005fdc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	73fb      	strb	r3, [r7, #15]
 8005fe4:	e008      	b.n	8005ff8 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8006000:	7bfb      	ldrb	r3, [r7, #15]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b084      	sub	sp, #16
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006012:	f7fb fd89 	bl	8001b28 <HAL_GetTick>
 8006016:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006026:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8006028:	e00f      	b.n	800604a <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800602a:	f7fb fd7d 	bl	8001b28 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006038:	d907      	bls.n	800604a <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800603e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e00a      	b.n	8006060 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e8      	bne.n	800602a <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f807 	bl	8006084 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f81b 	bl	80060b2 <FMAC_ResetOutputStateAndDataPointers>
}
 800607c:	bf00      	nop
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b089      	sub	sp, #36	@ 0x24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80060ee:	4b86      	ldr	r3, [pc, #536]	@ (8006308 <HAL_GPIO_Init+0x228>)
 80060f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060f2:	e18c      	b.n	800640e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	2101      	movs	r1, #1
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006100:	4013      	ands	r3, r2
 8006102:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 817e 	beq.w	8006408 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	2b01      	cmp	r3, #1
 8006116:	d005      	beq.n	8006124 <HAL_GPIO_Init+0x44>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f003 0303 	and.w	r3, r3, #3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d130      	bne.n	8006186 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	2203      	movs	r2, #3
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	43db      	mvns	r3, r3
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	4013      	ands	r3, r2
 800613a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4313      	orrs	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800615a:	2201      	movs	r2, #1
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	43db      	mvns	r3, r3
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	4013      	ands	r3, r2
 8006168:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	091b      	lsrs	r3, r3, #4
 8006170:	f003 0201 	and.w	r2, r3, #1
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	4313      	orrs	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	2b03      	cmp	r3, #3
 8006190:	d017      	beq.n	80061c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	2203      	movs	r2, #3
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	43db      	mvns	r3, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4013      	ands	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d123      	bne.n	8006216 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	08da      	lsrs	r2, r3, #3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3208      	adds	r2, #8
 80061d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	220f      	movs	r2, #15
 80061e6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ea:	43db      	mvns	r3, r3
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	4013      	ands	r3, r2
 80061f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	691a      	ldr	r2, [r3, #16]
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	4313      	orrs	r3, r2
 8006206:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	08da      	lsrs	r2, r3, #3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3208      	adds	r2, #8
 8006210:	69b9      	ldr	r1, [r7, #24]
 8006212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	2203      	movs	r2, #3
 8006222:	fa02 f303 	lsl.w	r3, r2, r3
 8006226:	43db      	mvns	r3, r3
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	4013      	ands	r3, r2
 800622c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f003 0203 	and.w	r2, r3, #3
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	fa02 f303 	lsl.w	r3, r2, r3
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	4313      	orrs	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 80d8 	beq.w	8006408 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006258:	4b2c      	ldr	r3, [pc, #176]	@ (800630c <HAL_GPIO_Init+0x22c>)
 800625a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800625e:	4a2b      	ldr	r2, [pc, #172]	@ (800630c <HAL_GPIO_Init+0x22c>)
 8006260:	f043 0302 	orr.w	r3, r3, #2
 8006264:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006268:	4b28      	ldr	r3, [pc, #160]	@ (800630c <HAL_GPIO_Init+0x22c>)
 800626a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006276:	4a26      	ldr	r2, [pc, #152]	@ (8006310 <HAL_GPIO_Init+0x230>)
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	089b      	lsrs	r3, r3, #2
 800627c:	3302      	adds	r3, #2
 800627e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	220f      	movs	r2, #15
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	43db      	mvns	r3, r3
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	4013      	ands	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a1d      	ldr	r2, [pc, #116]	@ (8006314 <HAL_GPIO_Init+0x234>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d04a      	beq.n	8006338 <HAL_GPIO_Init+0x258>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006318 <HAL_GPIO_Init+0x238>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d02b      	beq.n	8006302 <HAL_GPIO_Init+0x222>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a1b      	ldr	r2, [pc, #108]	@ (800631c <HAL_GPIO_Init+0x23c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d025      	beq.n	80062fe <HAL_GPIO_Init+0x21e>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006320 <HAL_GPIO_Init+0x240>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d01f      	beq.n	80062fa <HAL_GPIO_Init+0x21a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a19      	ldr	r2, [pc, #100]	@ (8006324 <HAL_GPIO_Init+0x244>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d019      	beq.n	80062f6 <HAL_GPIO_Init+0x216>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a18      	ldr	r2, [pc, #96]	@ (8006328 <HAL_GPIO_Init+0x248>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d013      	beq.n	80062f2 <HAL_GPIO_Init+0x212>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a17      	ldr	r2, [pc, #92]	@ (800632c <HAL_GPIO_Init+0x24c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00d      	beq.n	80062ee <HAL_GPIO_Init+0x20e>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a16      	ldr	r2, [pc, #88]	@ (8006330 <HAL_GPIO_Init+0x250>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d007      	beq.n	80062ea <HAL_GPIO_Init+0x20a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a15      	ldr	r2, [pc, #84]	@ (8006334 <HAL_GPIO_Init+0x254>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d101      	bne.n	80062e6 <HAL_GPIO_Init+0x206>
 80062e2:	2309      	movs	r3, #9
 80062e4:	e029      	b.n	800633a <HAL_GPIO_Init+0x25a>
 80062e6:	230a      	movs	r3, #10
 80062e8:	e027      	b.n	800633a <HAL_GPIO_Init+0x25a>
 80062ea:	2307      	movs	r3, #7
 80062ec:	e025      	b.n	800633a <HAL_GPIO_Init+0x25a>
 80062ee:	2306      	movs	r3, #6
 80062f0:	e023      	b.n	800633a <HAL_GPIO_Init+0x25a>
 80062f2:	2305      	movs	r3, #5
 80062f4:	e021      	b.n	800633a <HAL_GPIO_Init+0x25a>
 80062f6:	2304      	movs	r3, #4
 80062f8:	e01f      	b.n	800633a <HAL_GPIO_Init+0x25a>
 80062fa:	2303      	movs	r3, #3
 80062fc:	e01d      	b.n	800633a <HAL_GPIO_Init+0x25a>
 80062fe:	2302      	movs	r3, #2
 8006300:	e01b      	b.n	800633a <HAL_GPIO_Init+0x25a>
 8006302:	2301      	movs	r3, #1
 8006304:	e019      	b.n	800633a <HAL_GPIO_Init+0x25a>
 8006306:	bf00      	nop
 8006308:	58000080 	.word	0x58000080
 800630c:	58024400 	.word	0x58024400
 8006310:	58000400 	.word	0x58000400
 8006314:	58020000 	.word	0x58020000
 8006318:	58020400 	.word	0x58020400
 800631c:	58020800 	.word	0x58020800
 8006320:	58020c00 	.word	0x58020c00
 8006324:	58021000 	.word	0x58021000
 8006328:	58021400 	.word	0x58021400
 800632c:	58021800 	.word	0x58021800
 8006330:	58021c00 	.word	0x58021c00
 8006334:	58022400 	.word	0x58022400
 8006338:	2300      	movs	r3, #0
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	f002 0203 	and.w	r2, r2, #3
 8006340:	0092      	lsls	r2, r2, #2
 8006342:	4093      	lsls	r3, r2
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	4313      	orrs	r3, r2
 8006348:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800634a:	4938      	ldr	r1, [pc, #224]	@ (800642c <HAL_GPIO_Init+0x34c>)
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	089b      	lsrs	r3, r3, #2
 8006350:	3302      	adds	r3, #2
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	43db      	mvns	r3, r3
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	4013      	ands	r3, r2
 8006368:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800637e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	43db      	mvns	r3, r3
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4013      	ands	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80063ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	43db      	mvns	r3, r3
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4013      	ands	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	43db      	mvns	r3, r3
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	4013      	ands	r3, r2
 80063ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	3301      	adds	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	fa22 f303 	lsr.w	r3, r2, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	f47f ae6b 	bne.w	80060f4 <HAL_GPIO_Init+0x14>
  }
}
 800641e:	bf00      	nop
 8006420:	bf00      	nop
 8006422:	3724      	adds	r7, #36	@ 0x24
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	58000400 	.word	0x58000400

08006430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	807b      	strh	r3, [r7, #2]
 800643c:	4613      	mov	r3, r2
 800643e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006440:	787b      	ldrb	r3, [r7, #1]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006446:	887a      	ldrh	r2, [r7, #2]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800644c:	e003      	b.n	8006456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800644e:	887b      	ldrh	r3, [r7, #2]
 8006450:	041a      	lsls	r2, r3, #16
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	619a      	str	r2, [r3, #24]
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800646c:	4b19      	ldr	r3, [pc, #100]	@ (80064d4 <HAL_PWREx_ConfigSupply+0x70>)
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b04      	cmp	r3, #4
 8006476:	d00a      	beq.n	800648e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006478:	4b16      	ldr	r3, [pc, #88]	@ (80064d4 <HAL_PWREx_ConfigSupply+0x70>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	429a      	cmp	r2, r3
 8006484:	d001      	beq.n	800648a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e01f      	b.n	80064ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	e01d      	b.n	80064ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800648e:	4b11      	ldr	r3, [pc, #68]	@ (80064d4 <HAL_PWREx_ConfigSupply+0x70>)
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f023 0207 	bic.w	r2, r3, #7
 8006496:	490f      	ldr	r1, [pc, #60]	@ (80064d4 <HAL_PWREx_ConfigSupply+0x70>)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4313      	orrs	r3, r2
 800649c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800649e:	f7fb fb43 	bl	8001b28 <HAL_GetTick>
 80064a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064a4:	e009      	b.n	80064ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064a6:	f7fb fb3f 	bl	8001b28 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064b4:	d901      	bls.n	80064ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e007      	b.n	80064ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064ba:	4b06      	ldr	r3, [pc, #24]	@ (80064d4 <HAL_PWREx_ConfigSupply+0x70>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064c6:	d1ee      	bne.n	80064a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	58024800 	.word	0x58024800

080064d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b08c      	sub	sp, #48	@ 0x30
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e3c8      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 8087 	beq.w	8006606 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064f8:	4b88      	ldr	r3, [pc, #544]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006500:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006502:	4b86      	ldr	r3, [pc, #536]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 8006504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006506:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800650a:	2b10      	cmp	r3, #16
 800650c:	d007      	beq.n	800651e <HAL_RCC_OscConfig+0x46>
 800650e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006510:	2b18      	cmp	r3, #24
 8006512:	d110      	bne.n	8006536 <HAL_RCC_OscConfig+0x5e>
 8006514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d10b      	bne.n	8006536 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800651e:	4b7f      	ldr	r3, [pc, #508]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d06c      	beq.n	8006604 <HAL_RCC_OscConfig+0x12c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d168      	bne.n	8006604 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e3a2      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800653e:	d106      	bne.n	800654e <HAL_RCC_OscConfig+0x76>
 8006540:	4b76      	ldr	r3, [pc, #472]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a75      	ldr	r2, [pc, #468]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 8006546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	e02e      	b.n	80065ac <HAL_RCC_OscConfig+0xd4>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10c      	bne.n	8006570 <HAL_RCC_OscConfig+0x98>
 8006556:	4b71      	ldr	r3, [pc, #452]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a70      	ldr	r2, [pc, #448]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 800655c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	4b6e      	ldr	r3, [pc, #440]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a6d      	ldr	r2, [pc, #436]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 8006568:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	e01d      	b.n	80065ac <HAL_RCC_OscConfig+0xd4>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006578:	d10c      	bne.n	8006594 <HAL_RCC_OscConfig+0xbc>
 800657a:	4b68      	ldr	r3, [pc, #416]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a67      	ldr	r2, [pc, #412]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 8006580:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	4b65      	ldr	r3, [pc, #404]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a64      	ldr	r2, [pc, #400]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 800658c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	e00b      	b.n	80065ac <HAL_RCC_OscConfig+0xd4>
 8006594:	4b61      	ldr	r3, [pc, #388]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a60      	ldr	r2, [pc, #384]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 800659a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	4b5e      	ldr	r3, [pc, #376]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a5d      	ldr	r2, [pc, #372]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 80065a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d013      	beq.n	80065dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b4:	f7fb fab8 	bl	8001b28 <HAL_GetTick>
 80065b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065ba:	e008      	b.n	80065ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065bc:	f7fb fab4 	bl	8001b28 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b64      	cmp	r3, #100	@ 0x64
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e356      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065ce:	4b53      	ldr	r3, [pc, #332]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d0f0      	beq.n	80065bc <HAL_RCC_OscConfig+0xe4>
 80065da:	e014      	b.n	8006606 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065dc:	f7fb faa4 	bl	8001b28 <HAL_GetTick>
 80065e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065e4:	f7fb faa0 	bl	8001b28 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b64      	cmp	r3, #100	@ 0x64
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e342      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065f6:	4b49      	ldr	r3, [pc, #292]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f0      	bne.n	80065e4 <HAL_RCC_OscConfig+0x10c>
 8006602:	e000      	b.n	8006606 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 808c 	beq.w	800672c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006614:	4b41      	ldr	r3, [pc, #260]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800661c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800661e:	4b3f      	ldr	r3, [pc, #252]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 8006620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006622:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d007      	beq.n	800663a <HAL_RCC_OscConfig+0x162>
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	2b18      	cmp	r3, #24
 800662e:	d137      	bne.n	80066a0 <HAL_RCC_OscConfig+0x1c8>
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d132      	bne.n	80066a0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800663a:	4b38      	ldr	r3, [pc, #224]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	2b00      	cmp	r3, #0
 8006644:	d005      	beq.n	8006652 <HAL_RCC_OscConfig+0x17a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e314      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006652:	4b32      	ldr	r3, [pc, #200]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f023 0219 	bic.w	r2, r3, #25
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	492f      	ldr	r1, [pc, #188]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 8006660:	4313      	orrs	r3, r2
 8006662:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006664:	f7fb fa60 	bl	8001b28 <HAL_GetTick>
 8006668:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800666c:	f7fb fa5c 	bl	8001b28 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e2fe      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800667e:	4b27      	ldr	r3, [pc, #156]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0f0      	beq.n	800666c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800668a:	4b24      	ldr	r3, [pc, #144]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	061b      	lsls	r3, r3, #24
 8006698:	4920      	ldr	r1, [pc, #128]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 800669a:	4313      	orrs	r3, r2
 800669c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800669e:	e045      	b.n	800672c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d026      	beq.n	80066f6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066a8:	4b1c      	ldr	r3, [pc, #112]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f023 0219 	bic.w	r2, r3, #25
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	4919      	ldr	r1, [pc, #100]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ba:	f7fb fa35 	bl	8001b28 <HAL_GetTick>
 80066be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066c0:	e008      	b.n	80066d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066c2:	f7fb fa31 	bl	8001b28 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e2d3      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066d4:	4b11      	ldr	r3, [pc, #68]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d0f0      	beq.n	80066c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e0:	4b0e      	ldr	r3, [pc, #56]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	061b      	lsls	r3, r3, #24
 80066ee:	490b      	ldr	r1, [pc, #44]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	604b      	str	r3, [r1, #4]
 80066f4:	e01a      	b.n	800672c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066f6:	4b09      	ldr	r3, [pc, #36]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a08      	ldr	r2, [pc, #32]	@ (800671c <HAL_RCC_OscConfig+0x244>)
 80066fc:	f023 0301 	bic.w	r3, r3, #1
 8006700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006702:	f7fb fa11 	bl	8001b28 <HAL_GetTick>
 8006706:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006708:	e00a      	b.n	8006720 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800670a:	f7fb fa0d 	bl	8001b28 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d903      	bls.n	8006720 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e2af      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
 800671c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006720:	4b96      	ldr	r3, [pc, #600]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1ee      	bne.n	800670a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0310 	and.w	r3, r3, #16
 8006734:	2b00      	cmp	r3, #0
 8006736:	d06a      	beq.n	800680e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006738:	4b90      	ldr	r3, [pc, #576]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006740:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006742:	4b8e      	ldr	r3, [pc, #568]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 8006744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006746:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	2b08      	cmp	r3, #8
 800674c:	d007      	beq.n	800675e <HAL_RCC_OscConfig+0x286>
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2b18      	cmp	r3, #24
 8006752:	d11b      	bne.n	800678c <HAL_RCC_OscConfig+0x2b4>
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	2b01      	cmp	r3, #1
 800675c:	d116      	bne.n	800678c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800675e:	4b87      	ldr	r3, [pc, #540]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_RCC_OscConfig+0x29e>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	2b80      	cmp	r3, #128	@ 0x80
 8006770:	d001      	beq.n	8006776 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e282      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006776:	4b81      	ldr	r3, [pc, #516]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	061b      	lsls	r3, r3, #24
 8006784:	497d      	ldr	r1, [pc, #500]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 8006786:	4313      	orrs	r3, r2
 8006788:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800678a:	e040      	b.n	800680e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d023      	beq.n	80067dc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006794:	4b79      	ldr	r3, [pc, #484]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a78      	ldr	r2, [pc, #480]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 800679a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800679e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a0:	f7fb f9c2 	bl	8001b28 <HAL_GetTick>
 80067a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067a6:	e008      	b.n	80067ba <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80067a8:	f7fb f9be 	bl	8001b28 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e260      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067ba:	4b70      	ldr	r3, [pc, #448]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0f0      	beq.n	80067a8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067c6:	4b6d      	ldr	r3, [pc, #436]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	061b      	lsls	r3, r3, #24
 80067d4:	4969      	ldr	r1, [pc, #420]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60cb      	str	r3, [r1, #12]
 80067da:	e018      	b.n	800680e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80067dc:	4b67      	ldr	r3, [pc, #412]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a66      	ldr	r2, [pc, #408]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 80067e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e8:	f7fb f99e 	bl	8001b28 <HAL_GetTick>
 80067ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80067f0:	f7fb f99a 	bl	8001b28 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e23c      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006802:	4b5e      	ldr	r3, [pc, #376]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f0      	bne.n	80067f0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0308 	and.w	r3, r3, #8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d036      	beq.n	8006888 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d019      	beq.n	8006856 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006822:	4b56      	ldr	r3, [pc, #344]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 8006824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006826:	4a55      	ldr	r2, [pc, #340]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 8006828:	f043 0301 	orr.w	r3, r3, #1
 800682c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682e:	f7fb f97b 	bl	8001b28 <HAL_GetTick>
 8006832:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006834:	e008      	b.n	8006848 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006836:	f7fb f977 	bl	8001b28 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d901      	bls.n	8006848 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e219      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006848:	4b4c      	ldr	r3, [pc, #304]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 800684a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0f0      	beq.n	8006836 <HAL_RCC_OscConfig+0x35e>
 8006854:	e018      	b.n	8006888 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006856:	4b49      	ldr	r3, [pc, #292]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 8006858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800685a:	4a48      	ldr	r2, [pc, #288]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 800685c:	f023 0301 	bic.w	r3, r3, #1
 8006860:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006862:	f7fb f961 	bl	8001b28 <HAL_GetTick>
 8006866:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006868:	e008      	b.n	800687c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800686a:	f7fb f95d 	bl	8001b28 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e1ff      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800687c:	4b3f      	ldr	r3, [pc, #252]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 800687e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1f0      	bne.n	800686a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b00      	cmp	r3, #0
 8006892:	d036      	beq.n	8006902 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d019      	beq.n	80068d0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800689c:	4b37      	ldr	r3, [pc, #220]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a36      	ldr	r2, [pc, #216]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 80068a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068a8:	f7fb f93e 	bl	8001b28 <HAL_GetTick>
 80068ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068b0:	f7fb f93a 	bl	8001b28 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e1dc      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068c2:	4b2e      	ldr	r3, [pc, #184]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0f0      	beq.n	80068b0 <HAL_RCC_OscConfig+0x3d8>
 80068ce:	e018      	b.n	8006902 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068d0:	4b2a      	ldr	r3, [pc, #168]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a29      	ldr	r2, [pc, #164]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 80068d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068dc:	f7fb f924 	bl	8001b28 <HAL_GetTick>
 80068e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068e4:	f7fb f920 	bl	8001b28 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e1c2      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068f6:	4b21      	ldr	r3, [pc, #132]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1f0      	bne.n	80068e4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0304 	and.w	r3, r3, #4
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 8086 	beq.w	8006a1c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006910:	4b1b      	ldr	r3, [pc, #108]	@ (8006980 <HAL_RCC_OscConfig+0x4a8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a1a      	ldr	r2, [pc, #104]	@ (8006980 <HAL_RCC_OscConfig+0x4a8>)
 8006916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800691a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800691c:	f7fb f904 	bl	8001b28 <HAL_GetTick>
 8006920:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006924:	f7fb f900 	bl	8001b28 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b64      	cmp	r3, #100	@ 0x64
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e1a2      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006936:	4b12      	ldr	r3, [pc, #72]	@ (8006980 <HAL_RCC_OscConfig+0x4a8>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0f0      	beq.n	8006924 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d106      	bne.n	8006958 <HAL_RCC_OscConfig+0x480>
 800694a:	4b0c      	ldr	r3, [pc, #48]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 800694c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694e:	4a0b      	ldr	r2, [pc, #44]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 8006950:	f043 0301 	orr.w	r3, r3, #1
 8006954:	6713      	str	r3, [r2, #112]	@ 0x70
 8006956:	e032      	b.n	80069be <HAL_RCC_OscConfig+0x4e6>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d111      	bne.n	8006984 <HAL_RCC_OscConfig+0x4ac>
 8006960:	4b06      	ldr	r3, [pc, #24]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 8006962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006964:	4a05      	ldr	r2, [pc, #20]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	6713      	str	r3, [r2, #112]	@ 0x70
 800696c:	4b03      	ldr	r3, [pc, #12]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 800696e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006970:	4a02      	ldr	r2, [pc, #8]	@ (800697c <HAL_RCC_OscConfig+0x4a4>)
 8006972:	f023 0304 	bic.w	r3, r3, #4
 8006976:	6713      	str	r3, [r2, #112]	@ 0x70
 8006978:	e021      	b.n	80069be <HAL_RCC_OscConfig+0x4e6>
 800697a:	bf00      	nop
 800697c:	58024400 	.word	0x58024400
 8006980:	58024800 	.word	0x58024800
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2b05      	cmp	r3, #5
 800698a:	d10c      	bne.n	80069a6 <HAL_RCC_OscConfig+0x4ce>
 800698c:	4b83      	ldr	r3, [pc, #524]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 800698e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006990:	4a82      	ldr	r2, [pc, #520]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006992:	f043 0304 	orr.w	r3, r3, #4
 8006996:	6713      	str	r3, [r2, #112]	@ 0x70
 8006998:	4b80      	ldr	r3, [pc, #512]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 800699a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699c:	4a7f      	ldr	r2, [pc, #508]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80069a4:	e00b      	b.n	80069be <HAL_RCC_OscConfig+0x4e6>
 80069a6:	4b7d      	ldr	r3, [pc, #500]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 80069a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069aa:	4a7c      	ldr	r2, [pc, #496]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 80069ac:	f023 0301 	bic.w	r3, r3, #1
 80069b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80069b2:	4b7a      	ldr	r3, [pc, #488]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 80069b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b6:	4a79      	ldr	r2, [pc, #484]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 80069b8:	f023 0304 	bic.w	r3, r3, #4
 80069bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d015      	beq.n	80069f2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c6:	f7fb f8af 	bl	8001b28 <HAL_GetTick>
 80069ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069cc:	e00a      	b.n	80069e4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ce:	f7fb f8ab 	bl	8001b28 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069dc:	4293      	cmp	r3, r2
 80069de:	d901      	bls.n	80069e4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e14b      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069e4:	4b6d      	ldr	r3, [pc, #436]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 80069e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0ee      	beq.n	80069ce <HAL_RCC_OscConfig+0x4f6>
 80069f0:	e014      	b.n	8006a1c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f2:	f7fb f899 	bl	8001b28 <HAL_GetTick>
 80069f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069f8:	e00a      	b.n	8006a10 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069fa:	f7fb f895 	bl	8001b28 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d901      	bls.n	8006a10 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e135      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a10:	4b62      	ldr	r3, [pc, #392]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1ee      	bne.n	80069fa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 812a 	beq.w	8006c7a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a26:	4b5d      	ldr	r3, [pc, #372]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a2e:	2b18      	cmp	r3, #24
 8006a30:	f000 80ba 	beq.w	8006ba8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	f040 8095 	bne.w	8006b68 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a3e:	4b57      	ldr	r3, [pc, #348]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a56      	ldr	r2, [pc, #344]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006a44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4a:	f7fb f86d 	bl	8001b28 <HAL_GetTick>
 8006a4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a50:	e008      	b.n	8006a64 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a52:	f7fb f869 	bl	8001b28 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d901      	bls.n	8006a64 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e10b      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a64:	4b4d      	ldr	r3, [pc, #308]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1f0      	bne.n	8006a52 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a70:	4b4a      	ldr	r3, [pc, #296]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006a72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a74:	4b4a      	ldr	r3, [pc, #296]	@ (8006ba0 <HAL_RCC_OscConfig+0x6c8>)
 8006a76:	4013      	ands	r3, r2
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a80:	0112      	lsls	r2, r2, #4
 8006a82:	430a      	orrs	r2, r1
 8006a84:	4945      	ldr	r1, [pc, #276]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	025b      	lsls	r3, r3, #9
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	041b      	lsls	r3, r3, #16
 8006aa8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	061b      	lsls	r3, r3, #24
 8006ab6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006aba:	4938      	ldr	r1, [pc, #224]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006ac0:	4b36      	ldr	r3, [pc, #216]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac4:	4a35      	ldr	r2, [pc, #212]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006ac6:	f023 0301 	bic.w	r3, r3, #1
 8006aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006acc:	4b33      	ldr	r3, [pc, #204]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006ace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ad0:	4b34      	ldr	r3, [pc, #208]	@ (8006ba4 <HAL_RCC_OscConfig+0x6cc>)
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ad8:	00d2      	lsls	r2, r2, #3
 8006ada:	4930      	ldr	r1, [pc, #192]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae4:	f023 020c 	bic.w	r2, r3, #12
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aec:	492b      	ldr	r1, [pc, #172]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006af2:	4b2a      	ldr	r3, [pc, #168]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af6:	f023 0202 	bic.w	r2, r3, #2
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006afe:	4927      	ldr	r1, [pc, #156]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b04:	4b25      	ldr	r3, [pc, #148]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	4a24      	ldr	r2, [pc, #144]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b10:	4b22      	ldr	r3, [pc, #136]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b14:	4a21      	ldr	r2, [pc, #132]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006b16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b20:	4a1e      	ldr	r2, [pc, #120]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006b22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006b28:	4b1c      	ldr	r3, [pc, #112]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006b2e:	f043 0301 	orr.w	r3, r3, #1
 8006b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b34:	4b19      	ldr	r3, [pc, #100]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a18      	ldr	r2, [pc, #96]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b40:	f7fa fff2 	bl	8001b28 <HAL_GetTick>
 8006b44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b48:	f7fa ffee 	bl	8001b28 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e090      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b5a:	4b10      	ldr	r3, [pc, #64]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0f0      	beq.n	8006b48 <HAL_RCC_OscConfig+0x670>
 8006b66:	e088      	b.n	8006c7a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b68:	4b0c      	ldr	r3, [pc, #48]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006b6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b74:	f7fa ffd8 	bl	8001b28 <HAL_GetTick>
 8006b78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b7c:	f7fa ffd4 	bl	8001b28 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e076      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b8e:	4b03      	ldr	r3, [pc, #12]	@ (8006b9c <HAL_RCC_OscConfig+0x6c4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1f0      	bne.n	8006b7c <HAL_RCC_OscConfig+0x6a4>
 8006b9a:	e06e      	b.n	8006c7a <HAL_RCC_OscConfig+0x7a2>
 8006b9c:	58024400 	.word	0x58024400
 8006ba0:	fffffc0c 	.word	0xfffffc0c
 8006ba4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006ba8:	4b36      	ldr	r3, [pc, #216]	@ (8006c84 <HAL_RCC_OscConfig+0x7ac>)
 8006baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006bae:	4b35      	ldr	r3, [pc, #212]	@ (8006c84 <HAL_RCC_OscConfig+0x7ac>)
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d031      	beq.n	8006c20 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f003 0203 	and.w	r2, r3, #3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d12a      	bne.n	8006c20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	091b      	lsrs	r3, r3, #4
 8006bce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d122      	bne.n	8006c20 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d11a      	bne.n	8006c20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	0a5b      	lsrs	r3, r3, #9
 8006bee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bf6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d111      	bne.n	8006c20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	0c1b      	lsrs	r3, r3, #16
 8006c00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d108      	bne.n	8006c20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	0e1b      	lsrs	r3, r3, #24
 8006c12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d001      	beq.n	8006c24 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e02b      	b.n	8006c7c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006c24:	4b17      	ldr	r3, [pc, #92]	@ (8006c84 <HAL_RCC_OscConfig+0x7ac>)
 8006c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c28:	08db      	lsrs	r3, r3, #3
 8006c2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c2e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d01f      	beq.n	8006c7a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006c3a:	4b12      	ldr	r3, [pc, #72]	@ (8006c84 <HAL_RCC_OscConfig+0x7ac>)
 8006c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3e:	4a11      	ldr	r2, [pc, #68]	@ (8006c84 <HAL_RCC_OscConfig+0x7ac>)
 8006c40:	f023 0301 	bic.w	r3, r3, #1
 8006c44:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c46:	f7fa ff6f 	bl	8001b28 <HAL_GetTick>
 8006c4a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006c4c:	bf00      	nop
 8006c4e:	f7fa ff6b 	bl	8001b28 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d0f9      	beq.n	8006c4e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c84 <HAL_RCC_OscConfig+0x7ac>)
 8006c5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c88 <HAL_RCC_OscConfig+0x7b0>)
 8006c60:	4013      	ands	r3, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c66:	00d2      	lsls	r2, r2, #3
 8006c68:	4906      	ldr	r1, [pc, #24]	@ (8006c84 <HAL_RCC_OscConfig+0x7ac>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006c6e:	4b05      	ldr	r3, [pc, #20]	@ (8006c84 <HAL_RCC_OscConfig+0x7ac>)
 8006c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c72:	4a04      	ldr	r2, [pc, #16]	@ (8006c84 <HAL_RCC_OscConfig+0x7ac>)
 8006c74:	f043 0301 	orr.w	r3, r3, #1
 8006c78:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3730      	adds	r7, #48	@ 0x30
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	58024400 	.word	0x58024400
 8006c88:	ffff0007 	.word	0xffff0007

08006c8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e19c      	b.n	8006fda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ca0:	4b8a      	ldr	r3, [pc, #552]	@ (8006ecc <HAL_RCC_ClockConfig+0x240>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 030f 	and.w	r3, r3, #15
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d910      	bls.n	8006cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cae:	4b87      	ldr	r3, [pc, #540]	@ (8006ecc <HAL_RCC_ClockConfig+0x240>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f023 020f 	bic.w	r2, r3, #15
 8006cb6:	4985      	ldr	r1, [pc, #532]	@ (8006ecc <HAL_RCC_ClockConfig+0x240>)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cbe:	4b83      	ldr	r3, [pc, #524]	@ (8006ecc <HAL_RCC_ClockConfig+0x240>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d001      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e184      	b.n	8006fda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d010      	beq.n	8006cfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691a      	ldr	r2, [r3, #16]
 8006ce0:	4b7b      	ldr	r3, [pc, #492]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d908      	bls.n	8006cfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006cec:	4b78      	ldr	r3, [pc, #480]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	4975      	ldr	r1, [pc, #468]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0308 	and.w	r3, r3, #8
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d010      	beq.n	8006d2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	695a      	ldr	r2, [r3, #20]
 8006d0e:	4b70      	ldr	r3, [pc, #448]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d908      	bls.n	8006d2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d1a:	4b6d      	ldr	r3, [pc, #436]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	496a      	ldr	r1, [pc, #424]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0310 	and.w	r3, r3, #16
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d010      	beq.n	8006d5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699a      	ldr	r2, [r3, #24]
 8006d3c:	4b64      	ldr	r3, [pc, #400]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d908      	bls.n	8006d5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d48:	4b61      	ldr	r3, [pc, #388]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	495e      	ldr	r1, [pc, #376]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d010      	beq.n	8006d88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69da      	ldr	r2, [r3, #28]
 8006d6a:	4b59      	ldr	r3, [pc, #356]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d908      	bls.n	8006d88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d76:	4b56      	ldr	r3, [pc, #344]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	4953      	ldr	r1, [pc, #332]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d010      	beq.n	8006db6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	4b4d      	ldr	r3, [pc, #308]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d908      	bls.n	8006db6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006da4:	4b4a      	ldr	r3, [pc, #296]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	f023 020f 	bic.w	r2, r3, #15
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	4947      	ldr	r1, [pc, #284]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d055      	beq.n	8006e6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006dc2:	4b43      	ldr	r3, [pc, #268]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	4940      	ldr	r1, [pc, #256]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d107      	bne.n	8006dec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ddc:	4b3c      	ldr	r3, [pc, #240]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d121      	bne.n	8006e2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e0f6      	b.n	8006fda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d107      	bne.n	8006e04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006df4:	4b36      	ldr	r3, [pc, #216]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d115      	bne.n	8006e2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e0ea      	b.n	8006fda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d107      	bne.n	8006e1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e0c:	4b30      	ldr	r3, [pc, #192]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d109      	bne.n	8006e2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e0de      	b.n	8006fda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e1c:	4b2c      	ldr	r3, [pc, #176]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e0d6      	b.n	8006fda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e2c:	4b28      	ldr	r3, [pc, #160]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	f023 0207 	bic.w	r2, r3, #7
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	4925      	ldr	r1, [pc, #148]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e3e:	f7fa fe73 	bl	8001b28 <HAL_GetTick>
 8006e42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e44:	e00a      	b.n	8006e5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e46:	f7fa fe6f 	bl	8001b28 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e0be      	b.n	8006fda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d1eb      	bne.n	8006e46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d010      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	4b14      	ldr	r3, [pc, #80]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d208      	bcs.n	8006e9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e8a:	4b11      	ldr	r3, [pc, #68]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f023 020f 	bic.w	r2, r3, #15
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	490e      	ldr	r1, [pc, #56]	@ (8006ed0 <HAL_RCC_ClockConfig+0x244>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006ecc <HAL_RCC_ClockConfig+0x240>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 030f 	and.w	r3, r3, #15
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d214      	bcs.n	8006ed4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eaa:	4b08      	ldr	r3, [pc, #32]	@ (8006ecc <HAL_RCC_ClockConfig+0x240>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f023 020f 	bic.w	r2, r3, #15
 8006eb2:	4906      	ldr	r1, [pc, #24]	@ (8006ecc <HAL_RCC_ClockConfig+0x240>)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eba:	4b04      	ldr	r3, [pc, #16]	@ (8006ecc <HAL_RCC_ClockConfig+0x240>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d005      	beq.n	8006ed4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e086      	b.n	8006fda <HAL_RCC_ClockConfig+0x34e>
 8006ecc:	52002000 	.word	0x52002000
 8006ed0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d010      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691a      	ldr	r2, [r3, #16]
 8006ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8006fe4 <HAL_RCC_ClockConfig+0x358>)
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d208      	bcs.n	8006f02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ef0:	4b3c      	ldr	r3, [pc, #240]	@ (8006fe4 <HAL_RCC_ClockConfig+0x358>)
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	4939      	ldr	r1, [pc, #228]	@ (8006fe4 <HAL_RCC_ClockConfig+0x358>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d010      	beq.n	8006f30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	695a      	ldr	r2, [r3, #20]
 8006f12:	4b34      	ldr	r3, [pc, #208]	@ (8006fe4 <HAL_RCC_ClockConfig+0x358>)
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d208      	bcs.n	8006f30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f1e:	4b31      	ldr	r3, [pc, #196]	@ (8006fe4 <HAL_RCC_ClockConfig+0x358>)
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	492e      	ldr	r1, [pc, #184]	@ (8006fe4 <HAL_RCC_ClockConfig+0x358>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0310 	and.w	r3, r3, #16
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d010      	beq.n	8006f5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	699a      	ldr	r2, [r3, #24]
 8006f40:	4b28      	ldr	r3, [pc, #160]	@ (8006fe4 <HAL_RCC_ClockConfig+0x358>)
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d208      	bcs.n	8006f5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f4c:	4b25      	ldr	r3, [pc, #148]	@ (8006fe4 <HAL_RCC_ClockConfig+0x358>)
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	4922      	ldr	r1, [pc, #136]	@ (8006fe4 <HAL_RCC_ClockConfig+0x358>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d010      	beq.n	8006f8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	69da      	ldr	r2, [r3, #28]
 8006f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe4 <HAL_RCC_ClockConfig+0x358>)
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d208      	bcs.n	8006f8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe4 <HAL_RCC_ClockConfig+0x358>)
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	4917      	ldr	r1, [pc, #92]	@ (8006fe4 <HAL_RCC_ClockConfig+0x358>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f8c:	f000 f834 	bl	8006ff8 <HAL_RCC_GetSysClockFreq>
 8006f90:	4602      	mov	r2, r0
 8006f92:	4b14      	ldr	r3, [pc, #80]	@ (8006fe4 <HAL_RCC_ClockConfig+0x358>)
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	0a1b      	lsrs	r3, r3, #8
 8006f98:	f003 030f 	and.w	r3, r3, #15
 8006f9c:	4912      	ldr	r1, [pc, #72]	@ (8006fe8 <HAL_RCC_ClockConfig+0x35c>)
 8006f9e:	5ccb      	ldrb	r3, [r1, r3]
 8006fa0:	f003 031f 	and.w	r3, r3, #31
 8006fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006faa:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe4 <HAL_RCC_ClockConfig+0x358>)
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	4a0d      	ldr	r2, [pc, #52]	@ (8006fe8 <HAL_RCC_ClockConfig+0x35c>)
 8006fb4:	5cd3      	ldrb	r3, [r2, r3]
 8006fb6:	f003 031f 	and.w	r3, r3, #31
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8006fec <HAL_RCC_ClockConfig+0x360>)
 8006fc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff0 <HAL_RCC_ClockConfig+0x364>)
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006fca:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff4 <HAL_RCC_ClockConfig+0x368>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fa fd60 	bl	8001a94 <HAL_InitTick>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	58024400 	.word	0x58024400
 8006fe8:	0800aac0 	.word	0x0800aac0
 8006fec:	2400000c 	.word	0x2400000c
 8006ff0:	24000008 	.word	0x24000008
 8006ff4:	24000010 	.word	0x24000010

08006ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b089      	sub	sp, #36	@ 0x24
 8006ffc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ffe:	4bb3      	ldr	r3, [pc, #716]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007006:	2b18      	cmp	r3, #24
 8007008:	f200 8155 	bhi.w	80072b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800700c:	a201      	add	r2, pc, #4	@ (adr r2, 8007014 <HAL_RCC_GetSysClockFreq+0x1c>)
 800700e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007012:	bf00      	nop
 8007014:	08007079 	.word	0x08007079
 8007018:	080072b7 	.word	0x080072b7
 800701c:	080072b7 	.word	0x080072b7
 8007020:	080072b7 	.word	0x080072b7
 8007024:	080072b7 	.word	0x080072b7
 8007028:	080072b7 	.word	0x080072b7
 800702c:	080072b7 	.word	0x080072b7
 8007030:	080072b7 	.word	0x080072b7
 8007034:	0800709f 	.word	0x0800709f
 8007038:	080072b7 	.word	0x080072b7
 800703c:	080072b7 	.word	0x080072b7
 8007040:	080072b7 	.word	0x080072b7
 8007044:	080072b7 	.word	0x080072b7
 8007048:	080072b7 	.word	0x080072b7
 800704c:	080072b7 	.word	0x080072b7
 8007050:	080072b7 	.word	0x080072b7
 8007054:	080070a5 	.word	0x080070a5
 8007058:	080072b7 	.word	0x080072b7
 800705c:	080072b7 	.word	0x080072b7
 8007060:	080072b7 	.word	0x080072b7
 8007064:	080072b7 	.word	0x080072b7
 8007068:	080072b7 	.word	0x080072b7
 800706c:	080072b7 	.word	0x080072b7
 8007070:	080072b7 	.word	0x080072b7
 8007074:	080070ab 	.word	0x080070ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007078:	4b94      	ldr	r3, [pc, #592]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0320 	and.w	r3, r3, #32
 8007080:	2b00      	cmp	r3, #0
 8007082:	d009      	beq.n	8007098 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007084:	4b91      	ldr	r3, [pc, #580]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	08db      	lsrs	r3, r3, #3
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	4a90      	ldr	r2, [pc, #576]	@ (80072d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007090:	fa22 f303 	lsr.w	r3, r2, r3
 8007094:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007096:	e111      	b.n	80072bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007098:	4b8d      	ldr	r3, [pc, #564]	@ (80072d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800709a:	61bb      	str	r3, [r7, #24]
      break;
 800709c:	e10e      	b.n	80072bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800709e:	4b8d      	ldr	r3, [pc, #564]	@ (80072d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80070a0:	61bb      	str	r3, [r7, #24]
      break;
 80070a2:	e10b      	b.n	80072bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80070a4:	4b8c      	ldr	r3, [pc, #560]	@ (80072d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80070a6:	61bb      	str	r3, [r7, #24]
      break;
 80070a8:	e108      	b.n	80072bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070aa:	4b88      	ldr	r3, [pc, #544]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80070b4:	4b85      	ldr	r3, [pc, #532]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b8:	091b      	lsrs	r3, r3, #4
 80070ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80070c0:	4b82      	ldr	r3, [pc, #520]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80070ca:	4b80      	ldr	r3, [pc, #512]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ce:	08db      	lsrs	r3, r3, #3
 80070d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	fb02 f303 	mul.w	r3, r2, r3
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 80e1 	beq.w	80072b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	f000 8083 	beq.w	80071fc <HAL_RCC_GetSysClockFreq+0x204>
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	f200 80a1 	bhi.w	8007240 <HAL_RCC_GetSysClockFreq+0x248>
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <HAL_RCC_GetSysClockFreq+0x114>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d056      	beq.n	80071b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800710a:	e099      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800710c:	4b6f      	ldr	r3, [pc, #444]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b00      	cmp	r3, #0
 8007116:	d02d      	beq.n	8007174 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007118:	4b6c      	ldr	r3, [pc, #432]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	08db      	lsrs	r3, r3, #3
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	4a6b      	ldr	r2, [pc, #428]	@ (80072d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
 8007128:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	ee07 3a90 	vmov	s15, r3
 8007130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007142:	4b62      	ldr	r3, [pc, #392]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007152:	ed97 6a02 	vldr	s12, [r7, #8]
 8007156:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80072dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800715a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800715e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800716a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007172:	e087      	b.n	8007284 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80072e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007186:	4b51      	ldr	r3, [pc, #324]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800718a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007196:	ed97 6a02 	vldr	s12, [r7, #8]
 800719a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80072dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800719e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071b6:	e065      	b.n	8007284 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80072e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ca:	4b40      	ldr	r3, [pc, #256]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071da:	ed97 6a02 	vldr	s12, [r7, #8]
 80071de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80072dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80071e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071fa:	e043      	b.n	8007284 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007206:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80072e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800720a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720e:	4b2f      	ldr	r3, [pc, #188]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007222:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80072dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800723e:	e021      	b.n	8007284 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80072e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800724e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007252:	4b1e      	ldr	r3, [pc, #120]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007262:	ed97 6a02 	vldr	s12, [r7, #8]
 8007266:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80072dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800726a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007282:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007284:	4b11      	ldr	r3, [pc, #68]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007288:	0a5b      	lsrs	r3, r3, #9
 800728a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800728e:	3301      	adds	r3, #1
 8007290:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	ee07 3a90 	vmov	s15, r3
 8007298:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800729c:	edd7 6a07 	vldr	s13, [r7, #28]
 80072a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072a8:	ee17 3a90 	vmov	r3, s15
 80072ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80072ae:	e005      	b.n	80072bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61bb      	str	r3, [r7, #24]
      break;
 80072b4:	e002      	b.n	80072bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80072b6:	4b07      	ldr	r3, [pc, #28]	@ (80072d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80072b8:	61bb      	str	r3, [r7, #24]
      break;
 80072ba:	bf00      	nop
  }

  return sysclockfreq;
 80072bc:	69bb      	ldr	r3, [r7, #24]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3724      	adds	r7, #36	@ 0x24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	58024400 	.word	0x58024400
 80072d0:	03d09000 	.word	0x03d09000
 80072d4:	003d0900 	.word	0x003d0900
 80072d8:	017d7840 	.word	0x017d7840
 80072dc:	46000000 	.word	0x46000000
 80072e0:	4c742400 	.word	0x4c742400
 80072e4:	4a742400 	.word	0x4a742400
 80072e8:	4bbebc20 	.word	0x4bbebc20

080072ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80072f2:	f7ff fe81 	bl	8006ff8 <HAL_RCC_GetSysClockFreq>
 80072f6:	4602      	mov	r2, r0
 80072f8:	4b10      	ldr	r3, [pc, #64]	@ (800733c <HAL_RCC_GetHCLKFreq+0x50>)
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	0a1b      	lsrs	r3, r3, #8
 80072fe:	f003 030f 	and.w	r3, r3, #15
 8007302:	490f      	ldr	r1, [pc, #60]	@ (8007340 <HAL_RCC_GetHCLKFreq+0x54>)
 8007304:	5ccb      	ldrb	r3, [r1, r3]
 8007306:	f003 031f 	and.w	r3, r3, #31
 800730a:	fa22 f303 	lsr.w	r3, r2, r3
 800730e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007310:	4b0a      	ldr	r3, [pc, #40]	@ (800733c <HAL_RCC_GetHCLKFreq+0x50>)
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	f003 030f 	and.w	r3, r3, #15
 8007318:	4a09      	ldr	r2, [pc, #36]	@ (8007340 <HAL_RCC_GetHCLKFreq+0x54>)
 800731a:	5cd3      	ldrb	r3, [r2, r3]
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	fa22 f303 	lsr.w	r3, r2, r3
 8007326:	4a07      	ldr	r2, [pc, #28]	@ (8007344 <HAL_RCC_GetHCLKFreq+0x58>)
 8007328:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800732a:	4a07      	ldr	r2, [pc, #28]	@ (8007348 <HAL_RCC_GetHCLKFreq+0x5c>)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007330:	4b04      	ldr	r3, [pc, #16]	@ (8007344 <HAL_RCC_GetHCLKFreq+0x58>)
 8007332:	681b      	ldr	r3, [r3, #0]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	58024400 	.word	0x58024400
 8007340:	0800aac0 	.word	0x0800aac0
 8007344:	2400000c 	.word	0x2400000c
 8007348:	24000008 	.word	0x24000008

0800734c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007350:	f7ff ffcc 	bl	80072ec <HAL_RCC_GetHCLKFreq>
 8007354:	4602      	mov	r2, r0
 8007356:	4b06      	ldr	r3, [pc, #24]	@ (8007370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	091b      	lsrs	r3, r3, #4
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	4904      	ldr	r1, [pc, #16]	@ (8007374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007362:	5ccb      	ldrb	r3, [r1, r3]
 8007364:	f003 031f 	and.w	r3, r3, #31
 8007368:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800736c:	4618      	mov	r0, r3
 800736e:	bd80      	pop	{r7, pc}
 8007370:	58024400 	.word	0x58024400
 8007374:	0800aac0 	.word	0x0800aac0

08007378 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800737c:	b0c6      	sub	sp, #280	@ 0x118
 800737e:	af00      	add	r7, sp, #0
 8007380:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007384:	2300      	movs	r3, #0
 8007386:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800738a:	2300      	movs	r3, #0
 800738c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800739c:	2500      	movs	r5, #0
 800739e:	ea54 0305 	orrs.w	r3, r4, r5
 80073a2:	d049      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80073a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073ae:	d02f      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80073b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073b4:	d828      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80073b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073ba:	d01a      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80073bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073c0:	d822      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80073c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073ca:	d007      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80073cc:	e01c      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ce:	4bab      	ldr	r3, [pc, #684]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d2:	4aaa      	ldr	r2, [pc, #680]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073da:	e01a      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e0:	3308      	adds	r3, #8
 80073e2:	2102      	movs	r1, #2
 80073e4:	4618      	mov	r0, r3
 80073e6:	f002 fa49 	bl	800987c <RCCEx_PLL2_Config>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073f0:	e00f      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f6:	3328      	adds	r3, #40	@ 0x28
 80073f8:	2102      	movs	r1, #2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f002 faf0 	bl	80099e0 <RCCEx_PLL3_Config>
 8007400:	4603      	mov	r3, r0
 8007402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007406:	e004      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800740e:	e000      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007412:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800741a:	4b98      	ldr	r3, [pc, #608]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800741c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800741e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007428:	4a94      	ldr	r2, [pc, #592]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800742a:	430b      	orrs	r3, r1
 800742c:	6513      	str	r3, [r2, #80]	@ 0x50
 800742e:	e003      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007434:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007444:	f04f 0900 	mov.w	r9, #0
 8007448:	ea58 0309 	orrs.w	r3, r8, r9
 800744c:	d047      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800744e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007454:	2b04      	cmp	r3, #4
 8007456:	d82a      	bhi.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007458:	a201      	add	r2, pc, #4	@ (adr r2, 8007460 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800745a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745e:	bf00      	nop
 8007460:	08007475 	.word	0x08007475
 8007464:	08007483 	.word	0x08007483
 8007468:	08007499 	.word	0x08007499
 800746c:	080074b7 	.word	0x080074b7
 8007470:	080074b7 	.word	0x080074b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007474:	4b81      	ldr	r3, [pc, #516]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007478:	4a80      	ldr	r2, [pc, #512]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800747a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800747e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007480:	e01a      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007486:	3308      	adds	r3, #8
 8007488:	2100      	movs	r1, #0
 800748a:	4618      	mov	r0, r3
 800748c:	f002 f9f6 	bl	800987c <RCCEx_PLL2_Config>
 8007490:	4603      	mov	r3, r0
 8007492:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007496:	e00f      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749c:	3328      	adds	r3, #40	@ 0x28
 800749e:	2100      	movs	r1, #0
 80074a0:	4618      	mov	r0, r3
 80074a2:	f002 fa9d 	bl	80099e0 <RCCEx_PLL3_Config>
 80074a6:	4603      	mov	r3, r0
 80074a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074ac:	e004      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074b4:	e000      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80074b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10a      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074c0:	4b6e      	ldr	r3, [pc, #440]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074c4:	f023 0107 	bic.w	r1, r3, #7
 80074c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ce:	4a6b      	ldr	r2, [pc, #428]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074d0:	430b      	orrs	r3, r1
 80074d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80074d4:	e003      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80074de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80074ea:	f04f 0b00 	mov.w	fp, #0
 80074ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80074f2:	d05b      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80074f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80074fc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007500:	d03b      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007502:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007506:	d834      	bhi.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007508:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800750c:	d037      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800750e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007512:	d82e      	bhi.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007514:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007518:	d033      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800751a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800751e:	d828      	bhi.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007520:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007524:	d01a      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007526:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800752a:	d822      	bhi.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007530:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007534:	d007      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007536:	e01c      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007538:	4b50      	ldr	r3, [pc, #320]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800753a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753c:	4a4f      	ldr	r2, [pc, #316]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800753e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007544:	e01e      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800754a:	3308      	adds	r3, #8
 800754c:	2100      	movs	r1, #0
 800754e:	4618      	mov	r0, r3
 8007550:	f002 f994 	bl	800987c <RCCEx_PLL2_Config>
 8007554:	4603      	mov	r3, r0
 8007556:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800755a:	e013      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800755c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007560:	3328      	adds	r3, #40	@ 0x28
 8007562:	2100      	movs	r1, #0
 8007564:	4618      	mov	r0, r3
 8007566:	f002 fa3b 	bl	80099e0 <RCCEx_PLL3_Config>
 800756a:	4603      	mov	r3, r0
 800756c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007570:	e008      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007578:	e004      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800757a:	bf00      	nop
 800757c:	e002      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800757e:	bf00      	nop
 8007580:	e000      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007584:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10b      	bne.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800758c:	4b3b      	ldr	r3, [pc, #236]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800758e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007590:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007598:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800759c:	4a37      	ldr	r2, [pc, #220]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800759e:	430b      	orrs	r3, r1
 80075a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80075a2:	e003      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80075ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80075b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80075bc:	2300      	movs	r3, #0
 80075be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80075c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80075c6:	460b      	mov	r3, r1
 80075c8:	4313      	orrs	r3, r2
 80075ca:	d05d      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80075cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80075d4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80075d8:	d03b      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80075da:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80075de:	d834      	bhi.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80075e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075e4:	d037      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80075e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075ea:	d82e      	bhi.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80075ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075f0:	d033      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80075f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075f6:	d828      	bhi.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80075f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075fc:	d01a      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80075fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007602:	d822      	bhi.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007608:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800760c:	d007      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800760e:	e01c      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007610:	4b1a      	ldr	r3, [pc, #104]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	4a19      	ldr	r2, [pc, #100]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800761a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800761c:	e01e      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800761e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007622:	3308      	adds	r3, #8
 8007624:	2100      	movs	r1, #0
 8007626:	4618      	mov	r0, r3
 8007628:	f002 f928 	bl	800987c <RCCEx_PLL2_Config>
 800762c:	4603      	mov	r3, r0
 800762e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007632:	e013      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007638:	3328      	adds	r3, #40	@ 0x28
 800763a:	2100      	movs	r1, #0
 800763c:	4618      	mov	r0, r3
 800763e:	f002 f9cf 	bl	80099e0 <RCCEx_PLL3_Config>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007648:	e008      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007650:	e004      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007652:	bf00      	nop
 8007654:	e002      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007656:	bf00      	nop
 8007658:	e000      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800765a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800765c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10d      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007664:	4b05      	ldr	r3, [pc, #20]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007668:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800766c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007670:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007674:	4a01      	ldr	r2, [pc, #4]	@ (800767c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007676:	430b      	orrs	r3, r1
 8007678:	6593      	str	r3, [r2, #88]	@ 0x58
 800767a:	e005      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800767c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007680:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007684:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007694:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007698:	2300      	movs	r3, #0
 800769a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800769e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4313      	orrs	r3, r2
 80076a6:	d03a      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80076a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ae:	2b30      	cmp	r3, #48	@ 0x30
 80076b0:	d01f      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80076b2:	2b30      	cmp	r3, #48	@ 0x30
 80076b4:	d819      	bhi.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x372>
 80076b6:	2b20      	cmp	r3, #32
 80076b8:	d00c      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80076ba:	2b20      	cmp	r3, #32
 80076bc:	d815      	bhi.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x372>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d019      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80076c2:	2b10      	cmp	r3, #16
 80076c4:	d111      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076c6:	4baa      	ldr	r3, [pc, #680]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ca:	4aa9      	ldr	r2, [pc, #676]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80076d2:	e011      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d8:	3308      	adds	r3, #8
 80076da:	2102      	movs	r1, #2
 80076dc:	4618      	mov	r0, r3
 80076de:	f002 f8cd 	bl	800987c <RCCEx_PLL2_Config>
 80076e2:	4603      	mov	r3, r0
 80076e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80076e8:	e006      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076f0:	e002      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80076f2:	bf00      	nop
 80076f4:	e000      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80076f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007700:	4b9b      	ldr	r3, [pc, #620]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007704:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800770e:	4a98      	ldr	r2, [pc, #608]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007710:	430b      	orrs	r3, r1
 8007712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007714:	e003      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007716:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800771a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800771e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800772a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800772e:	2300      	movs	r3, #0
 8007730:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007734:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007738:	460b      	mov	r3, r1
 800773a:	4313      	orrs	r3, r2
 800773c:	d051      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800773e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007744:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007748:	d035      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800774a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800774e:	d82e      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007750:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007754:	d031      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007756:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800775a:	d828      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x436>
 800775c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007760:	d01a      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007766:	d822      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800776c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007770:	d007      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007772:	e01c      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007774:	4b7e      	ldr	r3, [pc, #504]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007778:	4a7d      	ldr	r2, [pc, #500]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800777a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800777e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007780:	e01c      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007786:	3308      	adds	r3, #8
 8007788:	2100      	movs	r1, #0
 800778a:	4618      	mov	r0, r3
 800778c:	f002 f876 	bl	800987c <RCCEx_PLL2_Config>
 8007790:	4603      	mov	r3, r0
 8007792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007796:	e011      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800779c:	3328      	adds	r3, #40	@ 0x28
 800779e:	2100      	movs	r1, #0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f002 f91d 	bl	80099e0 <RCCEx_PLL3_Config>
 80077a6:	4603      	mov	r3, r0
 80077a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077ac:	e006      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077b4:	e002      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80077b6:	bf00      	nop
 80077b8:	e000      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80077ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10a      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80077c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80077cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077d2:	4a67      	ldr	r2, [pc, #412]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077d4:	430b      	orrs	r3, r1
 80077d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80077d8:	e003      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80077ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077f2:	2300      	movs	r3, #0
 80077f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077f8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80077fc:	460b      	mov	r3, r1
 80077fe:	4313      	orrs	r3, r2
 8007800:	d053      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007808:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800780c:	d033      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800780e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007812:	d82c      	bhi.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007814:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007818:	d02f      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800781a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800781e:	d826      	bhi.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007820:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007824:	d02b      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007826:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800782a:	d820      	bhi.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800782c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007830:	d012      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007832:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007836:	d81a      	bhi.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007838:	2b00      	cmp	r3, #0
 800783a:	d022      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800783c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007840:	d115      	bne.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007846:	3308      	adds	r3, #8
 8007848:	2101      	movs	r1, #1
 800784a:	4618      	mov	r0, r3
 800784c:	f002 f816 	bl	800987c <RCCEx_PLL2_Config>
 8007850:	4603      	mov	r3, r0
 8007852:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007856:	e015      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785c:	3328      	adds	r3, #40	@ 0x28
 800785e:	2101      	movs	r1, #1
 8007860:	4618      	mov	r0, r3
 8007862:	f002 f8bd 	bl	80099e0 <RCCEx_PLL3_Config>
 8007866:	4603      	mov	r3, r0
 8007868:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800786c:	e00a      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007874:	e006      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007876:	bf00      	nop
 8007878:	e004      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800787a:	bf00      	nop
 800787c:	e002      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800787e:	bf00      	nop
 8007880:	e000      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007884:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800788c:	4b38      	ldr	r3, [pc, #224]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800788e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007890:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800789a:	4a35      	ldr	r2, [pc, #212]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800789c:	430b      	orrs	r3, r1
 800789e:	6513      	str	r3, [r2, #80]	@ 0x50
 80078a0:	e003      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80078aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80078b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078ba:	2300      	movs	r3, #0
 80078bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80078c0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80078c4:	460b      	mov	r3, r1
 80078c6:	4313      	orrs	r3, r2
 80078c8:	d058      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80078ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80078d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078d6:	d033      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80078d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078dc:	d82c      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80078de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e2:	d02f      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80078e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e8:	d826      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80078ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078ee:	d02b      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80078f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078f4:	d820      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80078f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078fa:	d012      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80078fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007900:	d81a      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d022      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800790a:	d115      	bne.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800790c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007910:	3308      	adds	r3, #8
 8007912:	2101      	movs	r1, #1
 8007914:	4618      	mov	r0, r3
 8007916:	f001 ffb1 	bl	800987c <RCCEx_PLL2_Config>
 800791a:	4603      	mov	r3, r0
 800791c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007920:	e015      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007926:	3328      	adds	r3, #40	@ 0x28
 8007928:	2101      	movs	r1, #1
 800792a:	4618      	mov	r0, r3
 800792c:	f002 f858 	bl	80099e0 <RCCEx_PLL3_Config>
 8007930:	4603      	mov	r3, r0
 8007932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007936:	e00a      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800793e:	e006      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007940:	bf00      	nop
 8007942:	e004      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007944:	bf00      	nop
 8007946:	e002      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007948:	bf00      	nop
 800794a:	e000      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800794c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800794e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10e      	bne.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007956:	4b06      	ldr	r3, [pc, #24]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800795a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800795e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007962:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007966:	4a02      	ldr	r2, [pc, #8]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007968:	430b      	orrs	r3, r1
 800796a:	6593      	str	r3, [r2, #88]	@ 0x58
 800796c:	e006      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800796e:	bf00      	nop
 8007970:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007974:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007978:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800797c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007988:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800798c:	2300      	movs	r3, #0
 800798e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007992:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007996:	460b      	mov	r3, r1
 8007998:	4313      	orrs	r3, r2
 800799a:	d037      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800799c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079a6:	d00e      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80079a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079ac:	d816      	bhi.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x664>
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d018      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80079b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079b6:	d111      	bne.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b8:	4bc4      	ldr	r3, [pc, #784]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079bc:	4ac3      	ldr	r2, [pc, #780]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079c4:	e00f      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ca:	3308      	adds	r3, #8
 80079cc:	2101      	movs	r1, #1
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 ff54 	bl	800987c <RCCEx_PLL2_Config>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079da:	e004      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079e2:	e000      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80079e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10a      	bne.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80079ee:	4bb7      	ldr	r3, [pc, #732]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80079f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079fc:	4ab3      	ldr	r2, [pc, #716]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079fe:	430b      	orrs	r3, r1
 8007a00:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a02:	e003      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007a18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007a26:	460b      	mov	r3, r1
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	d039      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d81c      	bhi.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007a36:	a201      	add	r2, pc, #4	@ (adr r2, 8007a3c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3c:	08007a79 	.word	0x08007a79
 8007a40:	08007a4d 	.word	0x08007a4d
 8007a44:	08007a5b 	.word	0x08007a5b
 8007a48:	08007a79 	.word	0x08007a79
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a4c:	4b9f      	ldr	r3, [pc, #636]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a50:	4a9e      	ldr	r2, [pc, #632]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a58:	e00f      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a5e:	3308      	adds	r3, #8
 8007a60:	2102      	movs	r1, #2
 8007a62:	4618      	mov	r0, r3
 8007a64:	f001 ff0a 	bl	800987c <RCCEx_PLL2_Config>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a6e:	e004      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a76:	e000      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a82:	4b92      	ldr	r3, [pc, #584]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a86:	f023 0103 	bic.w	r1, r3, #3
 8007a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a90:	4a8e      	ldr	r2, [pc, #568]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a92:	430b      	orrs	r3, r1
 8007a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a96:	e003      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007aac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ab6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4313      	orrs	r3, r2
 8007abe:	f000 8099 	beq.w	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ac2:	4b83      	ldr	r3, [pc, #524]	@ (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a82      	ldr	r2, [pc, #520]	@ (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007acc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ace:	f7fa f82b 	bl	8001b28 <HAL_GetTick>
 8007ad2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ad6:	e00b      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ad8:	f7fa f826 	bl	8001b28 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b64      	cmp	r3, #100	@ 0x64
 8007ae6:	d903      	bls.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007aee:	e005      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007af0:	4b77      	ldr	r3, [pc, #476]	@ (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0ed      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007afc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d173      	bne.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b04:	4b71      	ldr	r3, [pc, #452]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b10:	4053      	eors	r3, r2
 8007b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d015      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b1a:	4b6c      	ldr	r3, [pc, #432]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b22:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b26:	4b69      	ldr	r3, [pc, #420]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b2a:	4a68      	ldr	r2, [pc, #416]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b30:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b32:	4b66      	ldr	r3, [pc, #408]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b36:	4a65      	ldr	r2, [pc, #404]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b3c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b3e:	4a63      	ldr	r2, [pc, #396]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b44:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b52:	d118      	bne.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b54:	f7f9 ffe8 	bl	8001b28 <HAL_GetTick>
 8007b58:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b5c:	e00d      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b5e:	f7f9 ffe3 	bl	8001b28 <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007b68:	1ad2      	subs	r2, r2, r3
 8007b6a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d903      	bls.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007b78:	e005      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b7a:	4b54      	ldr	r3, [pc, #336]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0eb      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007b86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d129      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b9e:	d10e      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007ba0:	4b4a      	ldr	r3, [pc, #296]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007bb0:	091a      	lsrs	r2, r3, #4
 8007bb2:	4b48      	ldr	r3, [pc, #288]	@ (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	4a45      	ldr	r2, [pc, #276]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bb8:	430b      	orrs	r3, r1
 8007bba:	6113      	str	r3, [r2, #16]
 8007bbc:	e005      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007bbe:	4b43      	ldr	r3, [pc, #268]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	4a42      	ldr	r2, [pc, #264]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bc4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007bc8:	6113      	str	r3, [r2, #16]
 8007bca:	4b40      	ldr	r3, [pc, #256]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bcc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bda:	4a3c      	ldr	r2, [pc, #240]	@ (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bdc:	430b      	orrs	r3, r1
 8007bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8007be0:	e008      	b.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007be2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007be6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007bea:	e003      	b.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	f002 0301 	and.w	r3, r2, #1
 8007c00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c04:	2300      	movs	r3, #0
 8007c06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c0a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4313      	orrs	r3, r2
 8007c12:	f000 808f 	beq.w	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c1c:	2b28      	cmp	r3, #40	@ 0x28
 8007c1e:	d871      	bhi.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007c20:	a201      	add	r2, pc, #4	@ (adr r2, 8007c28 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c26:	bf00      	nop
 8007c28:	08007d0d 	.word	0x08007d0d
 8007c2c:	08007d05 	.word	0x08007d05
 8007c30:	08007d05 	.word	0x08007d05
 8007c34:	08007d05 	.word	0x08007d05
 8007c38:	08007d05 	.word	0x08007d05
 8007c3c:	08007d05 	.word	0x08007d05
 8007c40:	08007d05 	.word	0x08007d05
 8007c44:	08007d05 	.word	0x08007d05
 8007c48:	08007cd9 	.word	0x08007cd9
 8007c4c:	08007d05 	.word	0x08007d05
 8007c50:	08007d05 	.word	0x08007d05
 8007c54:	08007d05 	.word	0x08007d05
 8007c58:	08007d05 	.word	0x08007d05
 8007c5c:	08007d05 	.word	0x08007d05
 8007c60:	08007d05 	.word	0x08007d05
 8007c64:	08007d05 	.word	0x08007d05
 8007c68:	08007cef 	.word	0x08007cef
 8007c6c:	08007d05 	.word	0x08007d05
 8007c70:	08007d05 	.word	0x08007d05
 8007c74:	08007d05 	.word	0x08007d05
 8007c78:	08007d05 	.word	0x08007d05
 8007c7c:	08007d05 	.word	0x08007d05
 8007c80:	08007d05 	.word	0x08007d05
 8007c84:	08007d05 	.word	0x08007d05
 8007c88:	08007d0d 	.word	0x08007d0d
 8007c8c:	08007d05 	.word	0x08007d05
 8007c90:	08007d05 	.word	0x08007d05
 8007c94:	08007d05 	.word	0x08007d05
 8007c98:	08007d05 	.word	0x08007d05
 8007c9c:	08007d05 	.word	0x08007d05
 8007ca0:	08007d05 	.word	0x08007d05
 8007ca4:	08007d05 	.word	0x08007d05
 8007ca8:	08007d0d 	.word	0x08007d0d
 8007cac:	08007d05 	.word	0x08007d05
 8007cb0:	08007d05 	.word	0x08007d05
 8007cb4:	08007d05 	.word	0x08007d05
 8007cb8:	08007d05 	.word	0x08007d05
 8007cbc:	08007d05 	.word	0x08007d05
 8007cc0:	08007d05 	.word	0x08007d05
 8007cc4:	08007d05 	.word	0x08007d05
 8007cc8:	08007d0d 	.word	0x08007d0d
 8007ccc:	58024400 	.word	0x58024400
 8007cd0:	58024800 	.word	0x58024800
 8007cd4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cdc:	3308      	adds	r3, #8
 8007cde:	2101      	movs	r1, #1
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f001 fdcb 	bl	800987c <RCCEx_PLL2_Config>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007cec:	e00f      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf2:	3328      	adds	r3, #40	@ 0x28
 8007cf4:	2101      	movs	r1, #1
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f001 fe72 	bl	80099e0 <RCCEx_PLL3_Config>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d02:	e004      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d0a:	e000      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10a      	bne.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d16:	4bbf      	ldr	r3, [pc, #764]	@ (8008014 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d1a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d24:	4abb      	ldr	r2, [pc, #748]	@ (8008014 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d26:	430b      	orrs	r3, r1
 8007d28:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d2a:	e003      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	f002 0302 	and.w	r3, r2, #2
 8007d40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d44:	2300      	movs	r3, #0
 8007d46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d4a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4313      	orrs	r3, r2
 8007d52:	d041      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	d824      	bhi.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d64 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007db1 	.word	0x08007db1
 8007d68:	08007d7d 	.word	0x08007d7d
 8007d6c:	08007d93 	.word	0x08007d93
 8007d70:	08007db1 	.word	0x08007db1
 8007d74:	08007db1 	.word	0x08007db1
 8007d78:	08007db1 	.word	0x08007db1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d80:	3308      	adds	r3, #8
 8007d82:	2101      	movs	r1, #1
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 fd79 	bl	800987c <RCCEx_PLL2_Config>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d90:	e00f      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d96:	3328      	adds	r3, #40	@ 0x28
 8007d98:	2101      	movs	r1, #1
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f001 fe20 	bl	80099e0 <RCCEx_PLL3_Config>
 8007da0:	4603      	mov	r3, r0
 8007da2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007da6:	e004      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007dae:	e000      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007db2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10a      	bne.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007dba:	4b96      	ldr	r3, [pc, #600]	@ (8008014 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dbe:	f023 0107 	bic.w	r1, r3, #7
 8007dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dc8:	4a92      	ldr	r2, [pc, #584]	@ (8008014 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007dca:	430b      	orrs	r3, r1
 8007dcc:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dce:	e003      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	f002 0304 	and.w	r3, r2, #4
 8007de4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007de8:	2300      	movs	r3, #0
 8007dea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007dee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007df2:	460b      	mov	r3, r1
 8007df4:	4313      	orrs	r3, r2
 8007df6:	d044      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e00:	2b05      	cmp	r3, #5
 8007e02:	d825      	bhi.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007e04:	a201      	add	r2, pc, #4	@ (adr r2, 8007e0c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0a:	bf00      	nop
 8007e0c:	08007e59 	.word	0x08007e59
 8007e10:	08007e25 	.word	0x08007e25
 8007e14:	08007e3b 	.word	0x08007e3b
 8007e18:	08007e59 	.word	0x08007e59
 8007e1c:	08007e59 	.word	0x08007e59
 8007e20:	08007e59 	.word	0x08007e59
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e28:	3308      	adds	r3, #8
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f001 fd25 	bl	800987c <RCCEx_PLL2_Config>
 8007e32:	4603      	mov	r3, r0
 8007e34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e38:	e00f      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3e:	3328      	adds	r3, #40	@ 0x28
 8007e40:	2101      	movs	r1, #1
 8007e42:	4618      	mov	r0, r3
 8007e44:	f001 fdcc 	bl	80099e0 <RCCEx_PLL3_Config>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e4e:	e004      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e56:	e000      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10b      	bne.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e62:	4b6c      	ldr	r3, [pc, #432]	@ (8008014 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e66:	f023 0107 	bic.w	r1, r3, #7
 8007e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e72:	4a68      	ldr	r2, [pc, #416]	@ (8008014 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e74:	430b      	orrs	r3, r1
 8007e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e78:	e003      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	f002 0320 	and.w	r3, r2, #32
 8007e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e92:	2300      	movs	r3, #0
 8007e94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e98:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	d055      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007eae:	d033      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007eb4:	d82c      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eba:	d02f      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ec0:	d826      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007ec2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ec6:	d02b      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007ec8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ecc:	d820      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed2:	d012      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed8:	d81a      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d022      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007ede:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ee2:	d115      	bne.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee8:	3308      	adds	r3, #8
 8007eea:	2100      	movs	r1, #0
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 fcc5 	bl	800987c <RCCEx_PLL2_Config>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ef8:	e015      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007efe:	3328      	adds	r3, #40	@ 0x28
 8007f00:	2102      	movs	r1, #2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f001 fd6c 	bl	80099e0 <RCCEx_PLL3_Config>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f0e:	e00a      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f16:	e006      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f18:	bf00      	nop
 8007f1a:	e004      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f1c:	bf00      	nop
 8007f1e:	e002      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f20:	bf00      	nop
 8007f22:	e000      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10b      	bne.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f2e:	4b39      	ldr	r3, [pc, #228]	@ (8008014 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f32:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f3e:	4a35      	ldr	r2, [pc, #212]	@ (8008014 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f40:	430b      	orrs	r3, r1
 8007f42:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f44:	e003      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007f5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f64:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	d058      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f76:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f7a:	d033      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007f7c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f80:	d82c      	bhi.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f86:	d02f      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f8c:	d826      	bhi.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f92:	d02b      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007f94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f98:	d820      	bhi.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f9e:	d012      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fa4:	d81a      	bhi.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d022      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fae:	d115      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb4:	3308      	adds	r3, #8
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f001 fc5f 	bl	800987c <RCCEx_PLL2_Config>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007fc4:	e015      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fca:	3328      	adds	r3, #40	@ 0x28
 8007fcc:	2102      	movs	r1, #2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f001 fd06 	bl	80099e0 <RCCEx_PLL3_Config>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007fda:	e00a      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007fe2:	e006      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007fe4:	bf00      	nop
 8007fe6:	e004      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007fe8:	bf00      	nop
 8007fea:	e002      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007fec:	bf00      	nop
 8007fee:	e000      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ff2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10e      	bne.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ffa:	4b06      	ldr	r3, [pc, #24]	@ (8008014 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ffe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008006:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800800a:	4a02      	ldr	r2, [pc, #8]	@ (8008014 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800800c:	430b      	orrs	r3, r1
 800800e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008010:	e006      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008012:	bf00      	nop
 8008014:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008018:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800801c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008028:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800802c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008030:	2300      	movs	r3, #0
 8008032:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008036:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800803a:	460b      	mov	r3, r1
 800803c:	4313      	orrs	r3, r2
 800803e:	d055      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008044:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008048:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800804c:	d033      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800804e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008052:	d82c      	bhi.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008054:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008058:	d02f      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800805a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800805e:	d826      	bhi.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008060:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008064:	d02b      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008066:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800806a:	d820      	bhi.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800806c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008070:	d012      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008076:	d81a      	bhi.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008078:	2b00      	cmp	r3, #0
 800807a:	d022      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800807c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008080:	d115      	bne.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008086:	3308      	adds	r3, #8
 8008088:	2100      	movs	r1, #0
 800808a:	4618      	mov	r0, r3
 800808c:	f001 fbf6 	bl	800987c <RCCEx_PLL2_Config>
 8008090:	4603      	mov	r3, r0
 8008092:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008096:	e015      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809c:	3328      	adds	r3, #40	@ 0x28
 800809e:	2102      	movs	r1, #2
 80080a0:	4618      	mov	r0, r3
 80080a2:	f001 fc9d 	bl	80099e0 <RCCEx_PLL3_Config>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080ac:	e00a      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80080b4:	e006      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80080b6:	bf00      	nop
 80080b8:	e004      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80080ba:	bf00      	nop
 80080bc:	e002      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80080be:	bf00      	nop
 80080c0:	e000      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80080c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10b      	bne.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80080cc:	4ba0      	ldr	r3, [pc, #640]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080d0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80080d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080dc:	4a9c      	ldr	r2, [pc, #624]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080de:	430b      	orrs	r3, r1
 80080e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80080e2:	e003      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80080ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	f002 0308 	and.w	r3, r2, #8
 80080f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80080fc:	2300      	movs	r3, #0
 80080fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008102:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008106:	460b      	mov	r3, r1
 8008108:	4313      	orrs	r3, r2
 800810a:	d01e      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800810c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008118:	d10c      	bne.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800811a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800811e:	3328      	adds	r3, #40	@ 0x28
 8008120:	2102      	movs	r1, #2
 8008122:	4618      	mov	r0, r3
 8008124:	f001 fc5c 	bl	80099e0 <RCCEx_PLL3_Config>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008134:	4b86      	ldr	r3, [pc, #536]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008138:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800813c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008144:	4a82      	ldr	r2, [pc, #520]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008146:	430b      	orrs	r3, r1
 8008148:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800814a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008152:	f002 0310 	and.w	r3, r2, #16
 8008156:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800815a:	2300      	movs	r3, #0
 800815c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008160:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008164:	460b      	mov	r3, r1
 8008166:	4313      	orrs	r3, r2
 8008168:	d01e      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800816a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800816e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008176:	d10c      	bne.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800817c:	3328      	adds	r3, #40	@ 0x28
 800817e:	2102      	movs	r1, #2
 8008180:	4618      	mov	r0, r3
 8008182:	f001 fc2d 	bl	80099e0 <RCCEx_PLL3_Config>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008192:	4b6f      	ldr	r3, [pc, #444]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008196:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800819a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800819e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081a2:	4a6b      	ldr	r2, [pc, #428]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081a4:	430b      	orrs	r3, r1
 80081a6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80081b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081b6:	2300      	movs	r3, #0
 80081b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081ba:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80081be:	460b      	mov	r3, r1
 80081c0:	4313      	orrs	r3, r2
 80081c2:	d03e      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80081c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081d0:	d022      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80081d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081d6:	d81b      	bhi.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80081dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081e0:	d00b      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80081e2:	e015      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e8:	3308      	adds	r3, #8
 80081ea:	2100      	movs	r1, #0
 80081ec:	4618      	mov	r0, r3
 80081ee:	f001 fb45 	bl	800987c <RCCEx_PLL2_Config>
 80081f2:	4603      	mov	r3, r0
 80081f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80081f8:	e00f      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081fe:	3328      	adds	r3, #40	@ 0x28
 8008200:	2102      	movs	r1, #2
 8008202:	4618      	mov	r0, r3
 8008204:	f001 fbec 	bl	80099e0 <RCCEx_PLL3_Config>
 8008208:	4603      	mov	r3, r0
 800820a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800820e:	e004      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008216:	e000      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800821a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10b      	bne.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008222:	4b4b      	ldr	r3, [pc, #300]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008226:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800822a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800822e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008232:	4a47      	ldr	r2, [pc, #284]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008234:	430b      	orrs	r3, r1
 8008236:	6593      	str	r3, [r2, #88]	@ 0x58
 8008238:	e003      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800823a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800823e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800824e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008250:	2300      	movs	r3, #0
 8008252:	677b      	str	r3, [r7, #116]	@ 0x74
 8008254:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008258:	460b      	mov	r3, r1
 800825a:	4313      	orrs	r3, r2
 800825c:	d03b      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800825e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008266:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800826a:	d01f      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800826c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008270:	d818      	bhi.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008276:	d003      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008278:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800827c:	d007      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800827e:	e011      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008280:	4b33      	ldr	r3, [pc, #204]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008284:	4a32      	ldr	r2, [pc, #200]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800828a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800828c:	e00f      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800828e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008292:	3328      	adds	r3, #40	@ 0x28
 8008294:	2101      	movs	r1, #1
 8008296:	4618      	mov	r0, r3
 8008298:	f001 fba2 	bl	80099e0 <RCCEx_PLL3_Config>
 800829c:	4603      	mov	r3, r0
 800829e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80082a2:	e004      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082aa:	e000      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80082ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10b      	bne.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082b6:	4b26      	ldr	r3, [pc, #152]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80082be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082c6:	4a22      	ldr	r2, [pc, #136]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082c8:	430b      	orrs	r3, r1
 80082ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80082cc:	e003      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80082d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80082e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082e4:	2300      	movs	r3, #0
 80082e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082e8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80082ec:	460b      	mov	r3, r1
 80082ee:	4313      	orrs	r3, r2
 80082f0:	d034      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80082f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80082fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008300:	d007      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008302:	e011      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008304:	4b12      	ldr	r3, [pc, #72]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008308:	4a11      	ldr	r2, [pc, #68]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800830a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800830e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008310:	e00e      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008316:	3308      	adds	r3, #8
 8008318:	2102      	movs	r1, #2
 800831a:	4618      	mov	r0, r3
 800831c:	f001 faae 	bl	800987c <RCCEx_PLL2_Config>
 8008320:	4603      	mov	r3, r0
 8008322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008326:	e003      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800832e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008330:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10d      	bne.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008338:	4b05      	ldr	r3, [pc, #20]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800833a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800833c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008346:	4a02      	ldr	r2, [pc, #8]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008348:	430b      	orrs	r3, r1
 800834a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800834c:	e006      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800834e:	bf00      	nop
 8008350:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008354:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008358:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800835c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008368:	663b      	str	r3, [r7, #96]	@ 0x60
 800836a:	2300      	movs	r3, #0
 800836c:	667b      	str	r3, [r7, #100]	@ 0x64
 800836e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008372:	460b      	mov	r3, r1
 8008374:	4313      	orrs	r3, r2
 8008376:	d00c      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800837c:	3328      	adds	r3, #40	@ 0x28
 800837e:	2102      	movs	r1, #2
 8008380:	4618      	mov	r0, r3
 8008382:	f001 fb2d 	bl	80099e0 <RCCEx_PLL3_Config>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d002      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800839e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083a0:	2300      	movs	r3, #0
 80083a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083a4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80083a8:	460b      	mov	r3, r1
 80083aa:	4313      	orrs	r3, r2
 80083ac:	d036      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80083ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083b8:	d018      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80083ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083be:	d811      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80083c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083c4:	d014      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80083c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083ca:	d80b      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d011      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80083d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083d4:	d106      	bne.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083d6:	4bb7      	ldr	r3, [pc, #732]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083da:	4ab6      	ldr	r2, [pc, #728]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80083e2:	e008      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80083ea:	e004      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80083ec:	bf00      	nop
 80083ee:	e002      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80083f0:	bf00      	nop
 80083f2:	e000      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80083f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10a      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083fe:	4bad      	ldr	r3, [pc, #692]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008402:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800840a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800840c:	4aa9      	ldr	r2, [pc, #676]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800840e:	430b      	orrs	r3, r1
 8008410:	6553      	str	r3, [r2, #84]	@ 0x54
 8008412:	e003      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008418:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800841c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008428:	653b      	str	r3, [r7, #80]	@ 0x50
 800842a:	2300      	movs	r3, #0
 800842c:	657b      	str	r3, [r7, #84]	@ 0x54
 800842e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008432:	460b      	mov	r3, r1
 8008434:	4313      	orrs	r3, r2
 8008436:	d009      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008438:	4b9e      	ldr	r3, [pc, #632]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800843a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800843c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008446:	4a9b      	ldr	r2, [pc, #620]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008448:	430b      	orrs	r3, r1
 800844a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800844c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008458:	64bb      	str	r3, [r7, #72]	@ 0x48
 800845a:	2300      	movs	r3, #0
 800845c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800845e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008462:	460b      	mov	r3, r1
 8008464:	4313      	orrs	r3, r2
 8008466:	d009      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008468:	4b92      	ldr	r3, [pc, #584]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800846a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800846c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008474:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008476:	4a8f      	ldr	r2, [pc, #572]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008478:	430b      	orrs	r3, r1
 800847a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800847c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008488:	643b      	str	r3, [r7, #64]	@ 0x40
 800848a:	2300      	movs	r3, #0
 800848c:	647b      	str	r3, [r7, #68]	@ 0x44
 800848e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008492:	460b      	mov	r3, r1
 8008494:	4313      	orrs	r3, r2
 8008496:	d00e      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008498:	4b86      	ldr	r3, [pc, #536]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	4a85      	ldr	r2, [pc, #532]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800849e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80084a2:	6113      	str	r3, [r2, #16]
 80084a4:	4b83      	ldr	r3, [pc, #524]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084a6:	6919      	ldr	r1, [r3, #16]
 80084a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084b0:	4a80      	ldr	r2, [pc, #512]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084b2:	430b      	orrs	r3, r1
 80084b4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80084b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80084c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084c4:	2300      	movs	r3, #0
 80084c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80084cc:	460b      	mov	r3, r1
 80084ce:	4313      	orrs	r3, r2
 80084d0:	d009      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80084d2:	4b78      	ldr	r3, [pc, #480]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80084da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e0:	4a74      	ldr	r2, [pc, #464]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80084e2:	430b      	orrs	r3, r1
 80084e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80084e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80084f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80084f4:	2300      	movs	r3, #0
 80084f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80084fc:	460b      	mov	r3, r1
 80084fe:	4313      	orrs	r3, r2
 8008500:	d00a      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008502:	4b6c      	ldr	r3, [pc, #432]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008506:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800850a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008512:	4a68      	ldr	r2, [pc, #416]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008514:	430b      	orrs	r3, r1
 8008516:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	2100      	movs	r1, #0
 8008522:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800852a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800852e:	460b      	mov	r3, r1
 8008530:	4313      	orrs	r3, r2
 8008532:	d011      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008538:	3308      	adds	r3, #8
 800853a:	2100      	movs	r1, #0
 800853c:	4618      	mov	r0, r3
 800853e:	f001 f99d 	bl	800987c <RCCEx_PLL2_Config>
 8008542:	4603      	mov	r3, r0
 8008544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008548:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008550:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008554:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	2100      	movs	r1, #0
 8008562:	6239      	str	r1, [r7, #32]
 8008564:	f003 0302 	and.w	r3, r3, #2
 8008568:	627b      	str	r3, [r7, #36]	@ 0x24
 800856a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800856e:	460b      	mov	r3, r1
 8008570:	4313      	orrs	r3, r2
 8008572:	d011      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008578:	3308      	adds	r3, #8
 800857a:	2101      	movs	r1, #1
 800857c:	4618      	mov	r0, r3
 800857e:	f001 f97d 	bl	800987c <RCCEx_PLL2_Config>
 8008582:	4603      	mov	r3, r0
 8008584:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008594:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800859c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a0:	2100      	movs	r1, #0
 80085a2:	61b9      	str	r1, [r7, #24]
 80085a4:	f003 0304 	and.w	r3, r3, #4
 80085a8:	61fb      	str	r3, [r7, #28]
 80085aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80085ae:	460b      	mov	r3, r1
 80085b0:	4313      	orrs	r3, r2
 80085b2:	d011      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b8:	3308      	adds	r3, #8
 80085ba:	2102      	movs	r1, #2
 80085bc:	4618      	mov	r0, r3
 80085be:	f001 f95d 	bl	800987c <RCCEx_PLL2_Config>
 80085c2:	4603      	mov	r3, r0
 80085c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80085c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d003      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80085d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	2100      	movs	r1, #0
 80085e2:	6139      	str	r1, [r7, #16]
 80085e4:	f003 0308 	and.w	r3, r3, #8
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80085ee:	460b      	mov	r3, r1
 80085f0:	4313      	orrs	r3, r2
 80085f2:	d011      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085f8:	3328      	adds	r3, #40	@ 0x28
 80085fa:	2100      	movs	r1, #0
 80085fc:	4618      	mov	r0, r3
 80085fe:	f001 f9ef 	bl	80099e0 <RCCEx_PLL3_Config>
 8008602:	4603      	mov	r3, r0
 8008604:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008608:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008610:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008614:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	2100      	movs	r1, #0
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	f003 0310 	and.w	r3, r3, #16
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800862e:	460b      	mov	r3, r1
 8008630:	4313      	orrs	r3, r2
 8008632:	d011      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008638:	3328      	adds	r3, #40	@ 0x28
 800863a:	2101      	movs	r1, #1
 800863c:	4618      	mov	r0, r3
 800863e:	f001 f9cf 	bl	80099e0 <RCCEx_PLL3_Config>
 8008642:	4603      	mov	r3, r0
 8008644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008648:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008650:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008654:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800865c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008660:	2100      	movs	r1, #0
 8008662:	6039      	str	r1, [r7, #0]
 8008664:	f003 0320 	and.w	r3, r3, #32
 8008668:	607b      	str	r3, [r7, #4]
 800866a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800866e:	460b      	mov	r3, r1
 8008670:	4313      	orrs	r3, r2
 8008672:	d011      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008678:	3328      	adds	r3, #40	@ 0x28
 800867a:	2102      	movs	r1, #2
 800867c:	4618      	mov	r0, r3
 800867e:	f001 f9af 	bl	80099e0 <RCCEx_PLL3_Config>
 8008682:	4603      	mov	r3, r0
 8008684:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008688:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800868c:	2b00      	cmp	r3, #0
 800868e:	d003      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008690:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008694:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008698:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	e000      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80086ac:	46bd      	mov	sp, r7
 80086ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086b2:	bf00      	nop
 80086b4:	58024400 	.word	0x58024400

080086b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b090      	sub	sp, #64	@ 0x40
 80086bc:	af00      	add	r7, sp, #0
 80086be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80086c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086c6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80086ca:	430b      	orrs	r3, r1
 80086cc:	f040 8094 	bne.w	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80086d0:	4b9b      	ldr	r3, [pc, #620]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086d4:	f003 0307 	and.w	r3, r3, #7
 80086d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80086da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086dc:	2b04      	cmp	r3, #4
 80086de:	f200 8087 	bhi.w	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80086e2:	a201      	add	r2, pc, #4	@ (adr r2, 80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80086e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e8:	080086fd 	.word	0x080086fd
 80086ec:	08008725 	.word	0x08008725
 80086f0:	0800874d 	.word	0x0800874d
 80086f4:	080087e9 	.word	0x080087e9
 80086f8:	08008775 	.word	0x08008775
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086fc:	4b90      	ldr	r3, [pc, #576]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008704:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008708:	d108      	bne.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800870a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800870e:	4618      	mov	r0, r3
 8008710:	f000 ff62 	bl	80095d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008718:	f000 bc93 	b.w	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800871c:	2300      	movs	r3, #0
 800871e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008720:	f000 bc8f 	b.w	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008724:	4b86      	ldr	r3, [pc, #536]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800872c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008730:	d108      	bne.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008732:	f107 0318 	add.w	r3, r7, #24
 8008736:	4618      	mov	r0, r3
 8008738:	f000 fca6 	bl	8009088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008740:	f000 bc7f 	b.w	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008748:	f000 bc7b 	b.w	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800874c:	4b7c      	ldr	r3, [pc, #496]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008758:	d108      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800875a:	f107 030c 	add.w	r3, r7, #12
 800875e:	4618      	mov	r0, r3
 8008760:	f000 fde6 	bl	8009330 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008768:	f000 bc6b 	b.w	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800876c:	2300      	movs	r3, #0
 800876e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008770:	f000 bc67 	b.w	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008774:	4b72      	ldr	r3, [pc, #456]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008778:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800877c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800877e:	4b70      	ldr	r3, [pc, #448]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0304 	and.w	r3, r3, #4
 8008786:	2b04      	cmp	r3, #4
 8008788:	d10c      	bne.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800878a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800878c:	2b00      	cmp	r3, #0
 800878e:	d109      	bne.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008790:	4b6b      	ldr	r3, [pc, #428]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	08db      	lsrs	r3, r3, #3
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	4a6a      	ldr	r2, [pc, #424]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800879c:	fa22 f303 	lsr.w	r3, r2, r3
 80087a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087a2:	e01f      	b.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087a4:	4b66      	ldr	r3, [pc, #408]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087b0:	d106      	bne.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80087b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087b8:	d102      	bne.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80087ba:	4b63      	ldr	r3, [pc, #396]	@ (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80087bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087be:	e011      	b.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087c0:	4b5f      	ldr	r3, [pc, #380]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087cc:	d106      	bne.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80087ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087d4:	d102      	bne.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087d6:	4b5d      	ldr	r3, [pc, #372]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087da:	e003      	b.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087dc:	2300      	movs	r3, #0
 80087de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80087e0:	f000 bc2f 	b.w	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80087e4:	f000 bc2d 	b.w	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80087e8:	4b59      	ldr	r3, [pc, #356]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80087ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ec:	f000 bc29 	b.w	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f4:	f000 bc25 	b.w	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80087f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087fc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008800:	430b      	orrs	r3, r1
 8008802:	f040 80a7 	bne.w	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008806:	4b4e      	ldr	r3, [pc, #312]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800880a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800880e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008812:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008816:	d054      	beq.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800881e:	f200 808b 	bhi.w	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008824:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008828:	f000 8083 	beq.w	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800882c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008832:	f200 8081 	bhi.w	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008838:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800883c:	d02f      	beq.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800883e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008840:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008844:	d878      	bhi.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008848:	2b00      	cmp	r3, #0
 800884a:	d004      	beq.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800884c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008852:	d012      	beq.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008854:	e070      	b.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008856:	4b3a      	ldr	r3, [pc, #232]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800885e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008862:	d107      	bne.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008868:	4618      	mov	r0, r3
 800886a:	f000 feb5 	bl	80095d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800886e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008872:	e3e6      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008874:	2300      	movs	r3, #0
 8008876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008878:	e3e3      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800887a:	4b31      	ldr	r3, [pc, #196]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008882:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008886:	d107      	bne.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008888:	f107 0318 	add.w	r3, r7, #24
 800888c:	4618      	mov	r0, r3
 800888e:	f000 fbfb 	bl	8009088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008896:	e3d4      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800889c:	e3d1      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800889e:	4b28      	ldr	r3, [pc, #160]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088aa:	d107      	bne.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ac:	f107 030c 	add.w	r3, r7, #12
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 fd3d 	bl	8009330 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ba:	e3c2      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c0:	e3bf      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088c2:	4b1f      	ldr	r3, [pc, #124]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80088ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	2b04      	cmp	r3, #4
 80088d6:	d10c      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80088d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d109      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088de:	4b18      	ldr	r3, [pc, #96]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	08db      	lsrs	r3, r3, #3
 80088e4:	f003 0303 	and.w	r3, r3, #3
 80088e8:	4a16      	ldr	r2, [pc, #88]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80088ea:	fa22 f303 	lsr.w	r3, r2, r3
 80088ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088f0:	e01e      	b.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088f2:	4b13      	ldr	r3, [pc, #76]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088fe:	d106      	bne.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008906:	d102      	bne.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008908:	4b0f      	ldr	r3, [pc, #60]	@ (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800890a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800890c:	e010      	b.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800890e:	4b0c      	ldr	r3, [pc, #48]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008916:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800891a:	d106      	bne.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800891c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800891e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008922:	d102      	bne.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008924:	4b09      	ldr	r3, [pc, #36]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008928:	e002      	b.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800892e:	e388      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008930:	e387      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008932:	4b07      	ldr	r3, [pc, #28]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008936:	e384      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800893c:	e381      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800893e:	bf00      	nop
 8008940:	58024400 	.word	0x58024400
 8008944:	03d09000 	.word	0x03d09000
 8008948:	003d0900 	.word	0x003d0900
 800894c:	017d7840 	.word	0x017d7840
 8008950:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008958:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800895c:	430b      	orrs	r3, r1
 800895e:	f040 809c 	bne.w	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008962:	4b9e      	ldr	r3, [pc, #632]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008966:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800896a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800896c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008972:	d054      	beq.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008976:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800897a:	f200 808b 	bhi.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800897e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008980:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008984:	f000 8083 	beq.w	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800898e:	f200 8081 	bhi.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008994:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008998:	d02f      	beq.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800899a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089a0:	d878      	bhi.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80089a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d004      	beq.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80089a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089ae:	d012      	beq.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80089b0:	e070      	b.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089b2:	4b8a      	ldr	r3, [pc, #552]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089be:	d107      	bne.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 fe07 	bl	80095d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089ce:	e338      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089d0:	2300      	movs	r3, #0
 80089d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089d4:	e335      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089d6:	4b81      	ldr	r3, [pc, #516]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089e2:	d107      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089e4:	f107 0318 	add.w	r3, r7, #24
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 fb4d 	bl	8009088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089f2:	e326      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089f8:	e323      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089fa:	4b78      	ldr	r3, [pc, #480]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a06:	d107      	bne.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a08:	f107 030c 	add.w	r3, r7, #12
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 fc8f 	bl	8009330 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a16:	e314      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a1c:	e311      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a1e:	4b6f      	ldr	r3, [pc, #444]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a26:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a28:	4b6c      	ldr	r3, [pc, #432]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b04      	cmp	r3, #4
 8008a32:	d10c      	bne.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d109      	bne.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a3a:	4b68      	ldr	r3, [pc, #416]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	08db      	lsrs	r3, r3, #3
 8008a40:	f003 0303 	and.w	r3, r3, #3
 8008a44:	4a66      	ldr	r2, [pc, #408]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008a46:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a4c:	e01e      	b.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a4e:	4b63      	ldr	r3, [pc, #396]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a5a:	d106      	bne.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a62:	d102      	bne.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a64:	4b5f      	ldr	r3, [pc, #380]	@ (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a68:	e010      	b.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a6a:	4b5c      	ldr	r3, [pc, #368]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a76:	d106      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a7e:	d102      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a80:	4b59      	ldr	r3, [pc, #356]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a84:	e002      	b.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a8a:	e2da      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a8c:	e2d9      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a8e:	4b57      	ldr	r3, [pc, #348]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a92:	e2d6      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a98:	e2d3      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a9e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008aa2:	430b      	orrs	r3, r1
 8008aa4:	f040 80a7 	bne.w	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008aa8:	4b4c      	ldr	r3, [pc, #304]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008ab0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ab8:	d055      	beq.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ac0:	f200 8096 	bhi.w	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008aca:	f000 8084 	beq.w	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ad4:	f200 808c 	bhi.w	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ada:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ade:	d030      	beq.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ae6:	f200 8083 	bhi.w	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d004      	beq.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008af6:	d012      	beq.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008af8:	e07a      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008afa:	4b38      	ldr	r3, [pc, #224]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b06:	d107      	bne.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 fd63 	bl	80095d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b16:	e294      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b1c:	e291      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b2a:	d107      	bne.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b2c:	f107 0318 	add.w	r3, r7, #24
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 faa9 	bl	8009088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b3a:	e282      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b40:	e27f      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b42:	4b26      	ldr	r3, [pc, #152]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b4e:	d107      	bne.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b50:	f107 030c 	add.w	r3, r7, #12
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fbeb 	bl	8009330 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b5e:	e270      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b60:	2300      	movs	r3, #0
 8008b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b64:	e26d      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b66:	4b1d      	ldr	r3, [pc, #116]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b6e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b70:	4b1a      	ldr	r3, [pc, #104]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	d10c      	bne.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d109      	bne.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b82:	4b16      	ldr	r3, [pc, #88]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	08db      	lsrs	r3, r3, #3
 8008b88:	f003 0303 	and.w	r3, r3, #3
 8008b8c:	4a14      	ldr	r2, [pc, #80]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b94:	e01e      	b.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b96:	4b11      	ldr	r3, [pc, #68]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ba2:	d106      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008baa:	d102      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008bac:	4b0d      	ldr	r3, [pc, #52]	@ (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bb0:	e010      	b.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bbe:	d106      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bc6:	d102      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008bc8:	4b07      	ldr	r3, [pc, #28]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bcc:	e002      	b.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008bd2:	e236      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008bd4:	e235      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008bd6:	4b05      	ldr	r3, [pc, #20]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bda:	e232      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008bdc:	58024400 	.word	0x58024400
 8008be0:	03d09000 	.word	0x03d09000
 8008be4:	003d0900 	.word	0x003d0900
 8008be8:	017d7840 	.word	0x017d7840
 8008bec:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf4:	e225      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008bf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bfa:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008bfe:	430b      	orrs	r3, r1
 8008c00:	f040 8085 	bne.w	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008c04:	4b9c      	ldr	r3, [pc, #624]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c08:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c14:	d06b      	beq.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c1c:	d874      	bhi.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c24:	d056      	beq.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c2c:	d86c      	bhi.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c34:	d03b      	beq.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c3c:	d864      	bhi.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c44:	d021      	beq.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c4c:	d85c      	bhi.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d004      	beq.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c5a:	d004      	beq.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008c5c:	e054      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008c5e:	f7fe fb75 	bl	800734c <HAL_RCC_GetPCLK1Freq>
 8008c62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c64:	e1ed      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c66:	4b84      	ldr	r3, [pc, #528]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c72:	d107      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c74:	f107 0318 	add.w	r3, r7, #24
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 fa05 	bl	8009088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c82:	e1de      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c88:	e1db      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c8a:	4b7b      	ldr	r3, [pc, #492]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c96:	d107      	bne.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c98:	f107 030c 	add.w	r3, r7, #12
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 fb47 	bl	8009330 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ca6:	e1cc      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cac:	e1c9      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008cae:	4b72      	ldr	r3, [pc, #456]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0304 	and.w	r3, r3, #4
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	d109      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cba:	4b6f      	ldr	r3, [pc, #444]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	08db      	lsrs	r3, r3, #3
 8008cc0:	f003 0303 	and.w	r3, r3, #3
 8008cc4:	4a6d      	ldr	r2, [pc, #436]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ccc:	e1b9      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd2:	e1b6      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008cd4:	4b68      	ldr	r3, [pc, #416]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ce0:	d102      	bne.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008ce2:	4b67      	ldr	r3, [pc, #412]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ce6:	e1ac      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cec:	e1a9      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008cee:	4b62      	ldr	r3, [pc, #392]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cfa:	d102      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008cfc:	4b61      	ldr	r3, [pc, #388]	@ (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d00:	e19f      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d02:	2300      	movs	r3, #0
 8008d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d06:	e19c      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d0c:	e199      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008d0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d12:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008d16:	430b      	orrs	r3, r1
 8008d18:	d173      	bne.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008d1a:	4b57      	ldr	r3, [pc, #348]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d22:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d2a:	d02f      	beq.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d32:	d863      	bhi.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d004      	beq.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d40:	d012      	beq.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008d42:	e05b      	b.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d44:	4b4c      	ldr	r3, [pc, #304]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d50:	d107      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d52:	f107 0318 	add.w	r3, r7, #24
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 f996 	bl	8009088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d60:	e16f      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d62:	2300      	movs	r3, #0
 8008d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d66:	e16c      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d68:	4b43      	ldr	r3, [pc, #268]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d74:	d107      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d76:	f107 030c 	add.w	r3, r7, #12
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 fad8 	bl	8009330 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d84:	e15d      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d86:	2300      	movs	r3, #0
 8008d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d8a:	e15a      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d94:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d96:	4b38      	ldr	r3, [pc, #224]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0304 	and.w	r3, r3, #4
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	d10c      	bne.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d109      	bne.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008da8:	4b33      	ldr	r3, [pc, #204]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	08db      	lsrs	r3, r3, #3
 8008dae:	f003 0303 	and.w	r3, r3, #3
 8008db2:	4a32      	ldr	r2, [pc, #200]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008db4:	fa22 f303 	lsr.w	r3, r2, r3
 8008db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dba:	e01e      	b.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dc8:	d106      	bne.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dd0:	d102      	bne.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dd6:	e010      	b.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dd8:	4b27      	ldr	r3, [pc, #156]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008de0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008de4:	d106      	bne.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dec:	d102      	bne.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008dee:	4b25      	ldr	r3, [pc, #148]	@ (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008df2:	e002      	b.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008df8:	e123      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008dfa:	e122      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e00:	e11f      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e06:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	d13c      	bne.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e16:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d004      	beq.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e24:	d012      	beq.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008e26:	e023      	b.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e28:	4b13      	ldr	r3, [pc, #76]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e34:	d107      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 fbcc 	bl	80095d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e44:	e0fd      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e4a:	e0fa      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e58:	d107      	bne.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e5a:	f107 0318 	add.w	r3, r7, #24
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 f912 	bl	8009088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e68:	e0eb      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e6e:	e0e8      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e74:	e0e5      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e76:	bf00      	nop
 8008e78:	58024400 	.word	0x58024400
 8008e7c:	03d09000 	.word	0x03d09000
 8008e80:	003d0900 	.word	0x003d0900
 8008e84:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e8c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008e90:	430b      	orrs	r3, r1
 8008e92:	f040 8085 	bne.w	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008e96:	4b6d      	ldr	r3, [pc, #436]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e9a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008e9e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ea6:	d06b      	beq.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008eae:	d874      	bhi.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eb6:	d056      	beq.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ebe:	d86c      	bhi.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ec6:	d03b      	beq.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ece:	d864      	bhi.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ed6:	d021      	beq.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ede:	d85c      	bhi.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d004      	beq.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008eec:	d004      	beq.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008eee:	e054      	b.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008ef0:	f000 f8b4 	bl	800905c <HAL_RCCEx_GetD3PCLK1Freq>
 8008ef4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ef6:	e0a4      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ef8:	4b54      	ldr	r3, [pc, #336]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f04:	d107      	bne.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f06:	f107 0318 	add.w	r3, r7, #24
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 f8bc 	bl	8009088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f14:	e095      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f1a:	e092      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f28:	d107      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f2a:	f107 030c 	add.w	r3, r7, #12
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 f9fe 	bl	8009330 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f38:	e083      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f3e:	e080      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f40:	4b42      	ldr	r3, [pc, #264]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0304 	and.w	r3, r3, #4
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d109      	bne.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f4c:	4b3f      	ldr	r3, [pc, #252]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	08db      	lsrs	r3, r3, #3
 8008f52:	f003 0303 	and.w	r3, r3, #3
 8008f56:	4a3e      	ldr	r2, [pc, #248]	@ (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008f58:	fa22 f303 	lsr.w	r3, r2, r3
 8008f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f5e:	e070      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f64:	e06d      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008f66:	4b39      	ldr	r3, [pc, #228]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f72:	d102      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008f74:	4b37      	ldr	r3, [pc, #220]	@ (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f78:	e063      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f7e:	e060      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f80:	4b32      	ldr	r3, [pc, #200]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f8c:	d102      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008f8e:	4b32      	ldr	r3, [pc, #200]	@ (8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f92:	e056      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f98:	e053      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f9e:	e050      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008fa8:	430b      	orrs	r3, r1
 8008faa:	d148      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008fac:	4b27      	ldr	r3, [pc, #156]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008fb4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fbc:	d02a      	beq.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fc4:	d838      	bhi.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d004      	beq.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fd2:	d00d      	beq.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008fd4:	e030      	b.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fe2:	d102      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fe8:	e02b      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fee:	e028      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ff0:	4b16      	ldr	r3, [pc, #88]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ff8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ffc:	d107      	bne.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009002:	4618      	mov	r0, r3
 8009004:	f000 fae8 	bl	80095d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800900a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800900c:	e019      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009012:	e016      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009014:	4b0d      	ldr	r3, [pc, #52]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800901c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009020:	d107      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009022:	f107 0318 	add.w	r3, r7, #24
 8009026:	4618      	mov	r0, r3
 8009028:	f000 f82e 	bl	8009088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009030:	e007      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009036:	e004      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009038:	2300      	movs	r3, #0
 800903a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800903c:	e001      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800903e:	2300      	movs	r3, #0
 8009040:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009044:	4618      	mov	r0, r3
 8009046:	3740      	adds	r7, #64	@ 0x40
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	58024400 	.word	0x58024400
 8009050:	03d09000 	.word	0x03d09000
 8009054:	003d0900 	.word	0x003d0900
 8009058:	017d7840 	.word	0x017d7840

0800905c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009060:	f7fe f944 	bl	80072ec <HAL_RCC_GetHCLKFreq>
 8009064:	4602      	mov	r2, r0
 8009066:	4b06      	ldr	r3, [pc, #24]	@ (8009080 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	091b      	lsrs	r3, r3, #4
 800906c:	f003 0307 	and.w	r3, r3, #7
 8009070:	4904      	ldr	r1, [pc, #16]	@ (8009084 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009072:	5ccb      	ldrb	r3, [r1, r3]
 8009074:	f003 031f 	and.w	r3, r3, #31
 8009078:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800907c:	4618      	mov	r0, r3
 800907e:	bd80      	pop	{r7, pc}
 8009080:	58024400 	.word	0x58024400
 8009084:	0800aac0 	.word	0x0800aac0

08009088 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009088:	b480      	push	{r7}
 800908a:	b089      	sub	sp, #36	@ 0x24
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009090:	4ba1      	ldr	r3, [pc, #644]	@ (8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009094:	f003 0303 	and.w	r3, r3, #3
 8009098:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800909a:	4b9f      	ldr	r3, [pc, #636]	@ (8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800909c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800909e:	0b1b      	lsrs	r3, r3, #12
 80090a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80090a6:	4b9c      	ldr	r3, [pc, #624]	@ (8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090aa:	091b      	lsrs	r3, r3, #4
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80090b2:	4b99      	ldr	r3, [pc, #612]	@ (8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b6:	08db      	lsrs	r3, r3, #3
 80090b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	fb02 f303 	mul.w	r3, r2, r3
 80090c2:	ee07 3a90 	vmov	s15, r3
 80090c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 8111 	beq.w	80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b02      	cmp	r3, #2
 80090da:	f000 8083 	beq.w	80091e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	f200 80a1 	bhi.w	8009228 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d003      	beq.n	80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d056      	beq.n	80091a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80090f2:	e099      	b.n	8009228 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090f4:	4b88      	ldr	r3, [pc, #544]	@ (8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0320 	and.w	r3, r3, #32
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d02d      	beq.n	800915c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009100:	4b85      	ldr	r3, [pc, #532]	@ (8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	08db      	lsrs	r3, r3, #3
 8009106:	f003 0303 	and.w	r3, r3, #3
 800910a:	4a84      	ldr	r2, [pc, #528]	@ (800931c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800910c:	fa22 f303 	lsr.w	r3, r2, r3
 8009110:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	ee07 3a90 	vmov	s15, r3
 8009118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	ee07 3a90 	vmov	s15, r3
 8009122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800912a:	4b7b      	ldr	r3, [pc, #492]	@ (8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800912c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913a:	ed97 6a03 	vldr	s12, [r7, #12]
 800913e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800914a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800914e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009156:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800915a:	e087      	b.n	800926c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	ee07 3a90 	vmov	s15, r3
 8009162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009166:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800916a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800916e:	4b6a      	ldr	r3, [pc, #424]	@ (8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009176:	ee07 3a90 	vmov	s15, r3
 800917a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800917e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009182:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800918e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800919e:	e065      	b.n	800926c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	ee07 3a90 	vmov	s15, r3
 80091a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091b2:	4b59      	ldr	r3, [pc, #356]	@ (8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ba:	ee07 3a90 	vmov	s15, r3
 80091be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091e2:	e043      	b.n	800926c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800932c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80091f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091f6:	4b48      	ldr	r3, [pc, #288]	@ (8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fe:	ee07 3a90 	vmov	s15, r3
 8009202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009206:	ed97 6a03 	vldr	s12, [r7, #12]
 800920a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800920e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800921a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800921e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009226:	e021      	b.n	800926c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	ee07 3a90 	vmov	s15, r3
 800922e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009232:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800923a:	4b37      	ldr	r3, [pc, #220]	@ (8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800923c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800923e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009242:	ee07 3a90 	vmov	s15, r3
 8009246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800924a:	ed97 6a03 	vldr	s12, [r7, #12]
 800924e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800925a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800925e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800926a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800926c:	4b2a      	ldr	r3, [pc, #168]	@ (8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800926e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009270:	0a5b      	lsrs	r3, r3, #9
 8009272:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009276:	ee07 3a90 	vmov	s15, r3
 800927a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800927e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009282:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009286:	edd7 6a07 	vldr	s13, [r7, #28]
 800928a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800928e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009292:	ee17 2a90 	vmov	r2, s15
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800929a:	4b1f      	ldr	r3, [pc, #124]	@ (8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800929c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800929e:	0c1b      	lsrs	r3, r3, #16
 80092a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092a4:	ee07 3a90 	vmov	s15, r3
 80092a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80092b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092c0:	ee17 2a90 	vmov	r2, s15
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80092c8:	4b13      	ldr	r3, [pc, #76]	@ (8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092cc:	0e1b      	lsrs	r3, r3, #24
 80092ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092d2:	ee07 3a90 	vmov	s15, r3
 80092d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80092e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ee:	ee17 2a90 	vmov	r2, s15
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80092f6:	e008      	b.n	800930a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	609a      	str	r2, [r3, #8]
}
 800930a:	bf00      	nop
 800930c:	3724      	adds	r7, #36	@ 0x24
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	58024400 	.word	0x58024400
 800931c:	03d09000 	.word	0x03d09000
 8009320:	46000000 	.word	0x46000000
 8009324:	4c742400 	.word	0x4c742400
 8009328:	4a742400 	.word	0x4a742400
 800932c:	4bbebc20 	.word	0x4bbebc20

08009330 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009330:	b480      	push	{r7}
 8009332:	b089      	sub	sp, #36	@ 0x24
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009338:	4ba1      	ldr	r3, [pc, #644]	@ (80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800933a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933c:	f003 0303 	and.w	r3, r3, #3
 8009340:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009342:	4b9f      	ldr	r3, [pc, #636]	@ (80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009346:	0d1b      	lsrs	r3, r3, #20
 8009348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800934c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800934e:	4b9c      	ldr	r3, [pc, #624]	@ (80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009352:	0a1b      	lsrs	r3, r3, #8
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800935a:	4b99      	ldr	r3, [pc, #612]	@ (80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800935c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800935e:	08db      	lsrs	r3, r3, #3
 8009360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	fb02 f303 	mul.w	r3, r2, r3
 800936a:	ee07 3a90 	vmov	s15, r3
 800936e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009372:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 8111 	beq.w	80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	2b02      	cmp	r3, #2
 8009382:	f000 8083 	beq.w	800948c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	2b02      	cmp	r3, #2
 800938a:	f200 80a1 	bhi.w	80094d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d003      	beq.n	800939c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d056      	beq.n	8009448 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800939a:	e099      	b.n	80094d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800939c:	4b88      	ldr	r3, [pc, #544]	@ (80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 0320 	and.w	r3, r3, #32
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d02d      	beq.n	8009404 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093a8:	4b85      	ldr	r3, [pc, #532]	@ (80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	08db      	lsrs	r3, r3, #3
 80093ae:	f003 0303 	and.w	r3, r3, #3
 80093b2:	4a84      	ldr	r2, [pc, #528]	@ (80095c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80093b4:	fa22 f303 	lsr.w	r3, r2, r3
 80093b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	ee07 3a90 	vmov	s15, r3
 80093c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	ee07 3a90 	vmov	s15, r3
 80093ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093d2:	4b7b      	ldr	r3, [pc, #492]	@ (80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093da:	ee07 3a90 	vmov	s15, r3
 80093de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009402:	e087      	b.n	8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	ee07 3a90 	vmov	s15, r3
 800940a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009416:	4b6a      	ldr	r3, [pc, #424]	@ (80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800941a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800941e:	ee07 3a90 	vmov	s15, r3
 8009422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009426:	ed97 6a03 	vldr	s12, [r7, #12]
 800942a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800942e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800943a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800943e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009446:	e065      	b.n	8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	ee07 3a90 	vmov	s15, r3
 800944e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009452:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800945a:	4b59      	ldr	r3, [pc, #356]	@ (80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800945c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800945e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009462:	ee07 3a90 	vmov	s15, r3
 8009466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800946a:	ed97 6a03 	vldr	s12, [r7, #12]
 800946e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800947a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800947e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800948a:	e043      	b.n	8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	ee07 3a90 	vmov	s15, r3
 8009492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009496:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800949a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800949e:	4b48      	ldr	r3, [pc, #288]	@ (80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094a6:	ee07 3a90 	vmov	s15, r3
 80094aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80094b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094ce:	e021      	b.n	8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	ee07 3a90 	vmov	s15, r3
 80094d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80094de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094e2:	4b37      	ldr	r3, [pc, #220]	@ (80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ea:	ee07 3a90 	vmov	s15, r3
 80094ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800950a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800950e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009512:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009514:	4b2a      	ldr	r3, [pc, #168]	@ (80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009518:	0a5b      	lsrs	r3, r3, #9
 800951a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800951e:	ee07 3a90 	vmov	s15, r3
 8009522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009526:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800952a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800952e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800953a:	ee17 2a90 	vmov	r2, s15
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009542:	4b1f      	ldr	r3, [pc, #124]	@ (80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009546:	0c1b      	lsrs	r3, r3, #16
 8009548:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800954c:	ee07 3a90 	vmov	s15, r3
 8009550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009554:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009558:	ee37 7a87 	vadd.f32	s14, s15, s14
 800955c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009568:	ee17 2a90 	vmov	r2, s15
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009570:	4b13      	ldr	r3, [pc, #76]	@ (80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009574:	0e1b      	lsrs	r3, r3, #24
 8009576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800957a:	ee07 3a90 	vmov	s15, r3
 800957e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009582:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009586:	ee37 7a87 	vadd.f32	s14, s15, s14
 800958a:	edd7 6a07 	vldr	s13, [r7, #28]
 800958e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009596:	ee17 2a90 	vmov	r2, s15
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800959e:	e008      	b.n	80095b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	609a      	str	r2, [r3, #8]
}
 80095b2:	bf00      	nop
 80095b4:	3724      	adds	r7, #36	@ 0x24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	58024400 	.word	0x58024400
 80095c4:	03d09000 	.word	0x03d09000
 80095c8:	46000000 	.word	0x46000000
 80095cc:	4c742400 	.word	0x4c742400
 80095d0:	4a742400 	.word	0x4a742400
 80095d4:	4bbebc20 	.word	0x4bbebc20

080095d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80095d8:	b480      	push	{r7}
 80095da:	b089      	sub	sp, #36	@ 0x24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095e0:	4ba0      	ldr	r3, [pc, #640]	@ (8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e4:	f003 0303 	and.w	r3, r3, #3
 80095e8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80095ea:	4b9e      	ldr	r3, [pc, #632]	@ (8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ee:	091b      	lsrs	r3, r3, #4
 80095f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095f4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80095f6:	4b9b      	ldr	r3, [pc, #620]	@ (8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009600:	4b98      	ldr	r3, [pc, #608]	@ (8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009604:	08db      	lsrs	r3, r3, #3
 8009606:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	fb02 f303 	mul.w	r3, r2, r3
 8009610:	ee07 3a90 	vmov	s15, r3
 8009614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009618:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2b00      	cmp	r3, #0
 8009620:	f000 8111 	beq.w	8009846 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	2b02      	cmp	r3, #2
 8009628:	f000 8083 	beq.w	8009732 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	2b02      	cmp	r3, #2
 8009630:	f200 80a1 	bhi.w	8009776 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d003      	beq.n	8009642 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d056      	beq.n	80096ee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009640:	e099      	b.n	8009776 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009642:	4b88      	ldr	r3, [pc, #544]	@ (8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0320 	and.w	r3, r3, #32
 800964a:	2b00      	cmp	r3, #0
 800964c:	d02d      	beq.n	80096aa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800964e:	4b85      	ldr	r3, [pc, #532]	@ (8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	08db      	lsrs	r3, r3, #3
 8009654:	f003 0303 	and.w	r3, r3, #3
 8009658:	4a83      	ldr	r2, [pc, #524]	@ (8009868 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800965a:	fa22 f303 	lsr.w	r3, r2, r3
 800965e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	ee07 3a90 	vmov	s15, r3
 8009670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009674:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009678:	4b7a      	ldr	r3, [pc, #488]	@ (8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800967a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800967c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009680:	ee07 3a90 	vmov	s15, r3
 8009684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009688:	ed97 6a03 	vldr	s12, [r7, #12]
 800968c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800986c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009690:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009694:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009698:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800969c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80096a8:	e087      	b.n	80097ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	ee07 3a90 	vmov	s15, r3
 80096b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009870 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80096b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096bc:	4b69      	ldr	r3, [pc, #420]	@ (8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c4:	ee07 3a90 	vmov	s15, r3
 80096c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80096d0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800986c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ec:	e065      	b.n	80097ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	ee07 3a90 	vmov	s15, r3
 80096f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009874 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80096fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009700:	4b58      	ldr	r3, [pc, #352]	@ (8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009708:	ee07 3a90 	vmov	s15, r3
 800970c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009710:	ed97 6a03 	vldr	s12, [r7, #12]
 8009714:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800986c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800971c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009720:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800972c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009730:	e043      	b.n	80097ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	ee07 3a90 	vmov	s15, r3
 8009738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800973c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009744:	4b47      	ldr	r3, [pc, #284]	@ (8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800974c:	ee07 3a90 	vmov	s15, r3
 8009750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009754:	ed97 6a03 	vldr	s12, [r7, #12]
 8009758:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800986c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800975c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009764:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800976c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009770:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009774:	e021      	b.n	80097ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	ee07 3a90 	vmov	s15, r3
 800977c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009780:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009870 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009788:	4b36      	ldr	r3, [pc, #216]	@ (8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800978a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800978c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009790:	ee07 3a90 	vmov	s15, r3
 8009794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009798:	ed97 6a03 	vldr	s12, [r7, #12]
 800979c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800986c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097b8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80097ba:	4b2a      	ldr	r3, [pc, #168]	@ (8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097be:	0a5b      	lsrs	r3, r3, #9
 80097c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097c4:	ee07 3a90 	vmov	s15, r3
 80097c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80097d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097e0:	ee17 2a90 	vmov	r2, s15
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80097e8:	4b1e      	ldr	r3, [pc, #120]	@ (8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ec:	0c1b      	lsrs	r3, r3, #16
 80097ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097f2:	ee07 3a90 	vmov	s15, r3
 80097f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009802:	edd7 6a07 	vldr	s13, [r7, #28]
 8009806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800980a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800980e:	ee17 2a90 	vmov	r2, s15
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009816:	4b13      	ldr	r3, [pc, #76]	@ (8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800981a:	0e1b      	lsrs	r3, r3, #24
 800981c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009820:	ee07 3a90 	vmov	s15, r3
 8009824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009828:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800982c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009830:	edd7 6a07 	vldr	s13, [r7, #28]
 8009834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800983c:	ee17 2a90 	vmov	r2, s15
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009844:	e008      	b.n	8009858 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	609a      	str	r2, [r3, #8]
}
 8009858:	bf00      	nop
 800985a:	3724      	adds	r7, #36	@ 0x24
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	58024400 	.word	0x58024400
 8009868:	03d09000 	.word	0x03d09000
 800986c:	46000000 	.word	0x46000000
 8009870:	4c742400 	.word	0x4c742400
 8009874:	4a742400 	.word	0x4a742400
 8009878:	4bbebc20 	.word	0x4bbebc20

0800987c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800988a:	4b53      	ldr	r3, [pc, #332]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 800988c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988e:	f003 0303 	and.w	r3, r3, #3
 8009892:	2b03      	cmp	r3, #3
 8009894:	d101      	bne.n	800989a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e099      	b.n	80099ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800989a:	4b4f      	ldr	r3, [pc, #316]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a4e      	ldr	r2, [pc, #312]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 80098a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80098a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098a6:	f7f8 f93f 	bl	8001b28 <HAL_GetTick>
 80098aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098ac:	e008      	b.n	80098c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098ae:	f7f8 f93b 	bl	8001b28 <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d901      	bls.n	80098c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e086      	b.n	80099ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098c0:	4b45      	ldr	r3, [pc, #276]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1f0      	bne.n	80098ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80098cc:	4b42      	ldr	r3, [pc, #264]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 80098ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	031b      	lsls	r3, r3, #12
 80098da:	493f      	ldr	r1, [pc, #252]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 80098dc:	4313      	orrs	r3, r2
 80098de:	628b      	str	r3, [r1, #40]	@ 0x28
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	3b01      	subs	r3, #1
 80098f0:	025b      	lsls	r3, r3, #9
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	431a      	orrs	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	3b01      	subs	r3, #1
 80098fc:	041b      	lsls	r3, r3, #16
 80098fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009902:	431a      	orrs	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	3b01      	subs	r3, #1
 800990a:	061b      	lsls	r3, r3, #24
 800990c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009910:	4931      	ldr	r1, [pc, #196]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 8009912:	4313      	orrs	r3, r2
 8009914:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009916:	4b30      	ldr	r3, [pc, #192]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 8009918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	492d      	ldr	r1, [pc, #180]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 8009924:	4313      	orrs	r3, r2
 8009926:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009928:	4b2b      	ldr	r3, [pc, #172]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 800992a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800992c:	f023 0220 	bic.w	r2, r3, #32
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	4928      	ldr	r1, [pc, #160]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 8009936:	4313      	orrs	r3, r2
 8009938:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800993a:	4b27      	ldr	r3, [pc, #156]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 800993c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993e:	4a26      	ldr	r2, [pc, #152]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 8009940:	f023 0310 	bic.w	r3, r3, #16
 8009944:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009946:	4b24      	ldr	r3, [pc, #144]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 8009948:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800994a:	4b24      	ldr	r3, [pc, #144]	@ (80099dc <RCCEx_PLL2_Config+0x160>)
 800994c:	4013      	ands	r3, r2
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	69d2      	ldr	r2, [r2, #28]
 8009952:	00d2      	lsls	r2, r2, #3
 8009954:	4920      	ldr	r1, [pc, #128]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 8009956:	4313      	orrs	r3, r2
 8009958:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800995a:	4b1f      	ldr	r3, [pc, #124]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 800995c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800995e:	4a1e      	ldr	r2, [pc, #120]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 8009960:	f043 0310 	orr.w	r3, r3, #16
 8009964:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d106      	bne.n	800997a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800996c:	4b1a      	ldr	r3, [pc, #104]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 800996e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009970:	4a19      	ldr	r2, [pc, #100]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 8009972:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009976:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009978:	e00f      	b.n	800999a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2b01      	cmp	r3, #1
 800997e:	d106      	bne.n	800998e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009980:	4b15      	ldr	r3, [pc, #84]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 8009982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009984:	4a14      	ldr	r2, [pc, #80]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 8009986:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800998a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800998c:	e005      	b.n	800999a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800998e:	4b12      	ldr	r3, [pc, #72]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 8009990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009992:	4a11      	ldr	r2, [pc, #68]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 8009994:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009998:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800999a:	4b0f      	ldr	r3, [pc, #60]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a0e      	ldr	r2, [pc, #56]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 80099a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80099a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099a6:	f7f8 f8bf 	bl	8001b28 <HAL_GetTick>
 80099aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099ac:	e008      	b.n	80099c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80099ae:	f7f8 f8bb 	bl	8001b28 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d901      	bls.n	80099c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e006      	b.n	80099ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099c0:	4b05      	ldr	r3, [pc, #20]	@ (80099d8 <RCCEx_PLL2_Config+0x15c>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d0f0      	beq.n	80099ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	58024400 	.word	0x58024400
 80099dc:	ffff0007 	.word	0xffff0007

080099e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099ee:	4b53      	ldr	r3, [pc, #332]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 80099f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f2:	f003 0303 	and.w	r3, r3, #3
 80099f6:	2b03      	cmp	r3, #3
 80099f8:	d101      	bne.n	80099fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e099      	b.n	8009b32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099fe:	4b4f      	ldr	r3, [pc, #316]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a4e      	ldr	r2, [pc, #312]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009a04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a0a:	f7f8 f88d 	bl	8001b28 <HAL_GetTick>
 8009a0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a10:	e008      	b.n	8009a24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a12:	f7f8 f889 	bl	8001b28 <HAL_GetTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d901      	bls.n	8009a24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e086      	b.n	8009b32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a24:	4b45      	ldr	r3, [pc, #276]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1f0      	bne.n	8009a12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a30:	4b42      	ldr	r3, [pc, #264]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a34:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	051b      	lsls	r3, r3, #20
 8009a3e:	493f      	ldr	r1, [pc, #252]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009a40:	4313      	orrs	r3, r2
 8009a42:	628b      	str	r3, [r1, #40]	@ 0x28
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	3b01      	subs	r3, #1
 8009a54:	025b      	lsls	r3, r3, #9
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	431a      	orrs	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	041b      	lsls	r3, r3, #16
 8009a62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a66:	431a      	orrs	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	061b      	lsls	r3, r3, #24
 8009a70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a74:	4931      	ldr	r1, [pc, #196]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a7a:	4b30      	ldr	r3, [pc, #192]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	492d      	ldr	r1, [pc, #180]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	4928      	ldr	r1, [pc, #160]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a9e:	4b27      	ldr	r3, [pc, #156]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa2:	4a26      	ldr	r2, [pc, #152]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009aaa:	4b24      	ldr	r3, [pc, #144]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009aac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009aae:	4b24      	ldr	r3, [pc, #144]	@ (8009b40 <RCCEx_PLL3_Config+0x160>)
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	69d2      	ldr	r2, [r2, #28]
 8009ab6:	00d2      	lsls	r2, r2, #3
 8009ab8:	4920      	ldr	r1, [pc, #128]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009abe:	4b1f      	ldr	r3, [pc, #124]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d106      	bne.n	8009ade <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad4:	4a19      	ldr	r2, [pc, #100]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009ad6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009ada:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009adc:	e00f      	b.n	8009afe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d106      	bne.n	8009af2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ae4:	4b15      	ldr	r3, [pc, #84]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae8:	4a14      	ldr	r2, [pc, #80]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009aea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009aee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009af0:	e005      	b.n	8009afe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009af2:	4b12      	ldr	r3, [pc, #72]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af6:	4a11      	ldr	r2, [pc, #68]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009af8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009afc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009afe:	4b0f      	ldr	r3, [pc, #60]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a0e      	ldr	r2, [pc, #56]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b0a:	f7f8 f80d 	bl	8001b28 <HAL_GetTick>
 8009b0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b10:	e008      	b.n	8009b24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b12:	f7f8 f809 	bl	8001b28 <HAL_GetTick>
 8009b16:	4602      	mov	r2, r0
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d901      	bls.n	8009b24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e006      	b.n	8009b32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b24:	4b05      	ldr	r3, [pc, #20]	@ (8009b3c <RCCEx_PLL3_Config+0x15c>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0f0      	beq.n	8009b12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	58024400 	.word	0x58024400
 8009b40:	ffff0007 	.word	0xffff0007

08009b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d101      	bne.n	8009b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e049      	b.n	8009bea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d106      	bne.n	8009b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f7f7 fe22 	bl	80017b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2202      	movs	r2, #2
 8009b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	4619      	mov	r1, r3
 8009b82:	4610      	mov	r0, r2
 8009b84:	f000 fb38 	bl	800a1f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d001      	beq.n	8009c0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e056      	b.n	8009cba <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a2b      	ldr	r2, [pc, #172]	@ (8009cc8 <HAL_TIM_Base_Start+0xd4>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d02c      	beq.n	8009c78 <HAL_TIM_Base_Start+0x84>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c26:	d027      	beq.n	8009c78 <HAL_TIM_Base_Start+0x84>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a27      	ldr	r2, [pc, #156]	@ (8009ccc <HAL_TIM_Base_Start+0xd8>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d022      	beq.n	8009c78 <HAL_TIM_Base_Start+0x84>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a26      	ldr	r2, [pc, #152]	@ (8009cd0 <HAL_TIM_Base_Start+0xdc>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d01d      	beq.n	8009c78 <HAL_TIM_Base_Start+0x84>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a24      	ldr	r2, [pc, #144]	@ (8009cd4 <HAL_TIM_Base_Start+0xe0>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d018      	beq.n	8009c78 <HAL_TIM_Base_Start+0x84>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a23      	ldr	r2, [pc, #140]	@ (8009cd8 <HAL_TIM_Base_Start+0xe4>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d013      	beq.n	8009c78 <HAL_TIM_Base_Start+0x84>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a21      	ldr	r2, [pc, #132]	@ (8009cdc <HAL_TIM_Base_Start+0xe8>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d00e      	beq.n	8009c78 <HAL_TIM_Base_Start+0x84>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a20      	ldr	r2, [pc, #128]	@ (8009ce0 <HAL_TIM_Base_Start+0xec>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d009      	beq.n	8009c78 <HAL_TIM_Base_Start+0x84>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a1e      	ldr	r2, [pc, #120]	@ (8009ce4 <HAL_TIM_Base_Start+0xf0>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d004      	beq.n	8009c78 <HAL_TIM_Base_Start+0x84>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a1d      	ldr	r2, [pc, #116]	@ (8009ce8 <HAL_TIM_Base_Start+0xf4>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d115      	bne.n	8009ca4 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689a      	ldr	r2, [r3, #8]
 8009c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8009cec <HAL_TIM_Base_Start+0xf8>)
 8009c80:	4013      	ands	r3, r2
 8009c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2b06      	cmp	r3, #6
 8009c88:	d015      	beq.n	8009cb6 <HAL_TIM_Base_Start+0xc2>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c90:	d011      	beq.n	8009cb6 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f042 0201 	orr.w	r2, r2, #1
 8009ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ca2:	e008      	b.n	8009cb6 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f042 0201 	orr.w	r2, r2, #1
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	e000      	b.n	8009cb8 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3714      	adds	r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	40010000 	.word	0x40010000
 8009ccc:	40000400 	.word	0x40000400
 8009cd0:	40000800 	.word	0x40000800
 8009cd4:	40000c00 	.word	0x40000c00
 8009cd8:	40010400 	.word	0x40010400
 8009cdc:	40001800 	.word	0x40001800
 8009ce0:	40014000 	.word	0x40014000
 8009ce4:	4000e000 	.word	0x4000e000
 8009ce8:	4000e400 	.word	0x4000e400
 8009cec:	00010007 	.word	0x00010007

08009cf0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e08f      	b.n	8009e24 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d106      	bne.n	8009d1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f7f7 fcf9 	bl	8001710 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2202      	movs	r2, #2
 8009d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	6899      	ldr	r1, [r3, #8]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	4b3e      	ldr	r3, [pc, #248]	@ (8009e2c <HAL_TIM_Encoder_Init+0x13c>)
 8009d32:	400b      	ands	r3, r1
 8009d34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	4619      	mov	r1, r3
 8009d40:	4610      	mov	r0, r2
 8009d42:	f000 fa59 	bl	800a1f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	6a1b      	ldr	r3, [r3, #32]
 8009d5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	4b31      	ldr	r3, [pc, #196]	@ (8009e30 <HAL_TIM_Encoder_Init+0x140>)
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	689a      	ldr	r2, [r3, #8]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	021b      	lsls	r3, r3, #8
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	693a      	ldr	r2, [r7, #16]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	4b2b      	ldr	r3, [pc, #172]	@ (8009e34 <HAL_TIM_Encoder_Init+0x144>)
 8009d86:	4013      	ands	r3, r2
 8009d88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8009e38 <HAL_TIM_Encoder_Init+0x148>)
 8009d8e:	4013      	ands	r3, r2
 8009d90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	68da      	ldr	r2, [r3, #12]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	69db      	ldr	r3, [r3, #28]
 8009d9a:	021b      	lsls	r3, r3, #8
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	011a      	lsls	r2, r3, #4
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	031b      	lsls	r3, r3, #12
 8009db0:	4313      	orrs	r3, r2
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009dbe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009dc6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	011b      	lsls	r3, r3, #4
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	fffebff8 	.word	0xfffebff8
 8009e30:	fffffcfc 	.word	0xfffffcfc
 8009e34:	fffff3f3 	.word	0xfffff3f3
 8009e38:	ffff0f0f 	.word	0xffff0f0f

08009e3c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009e4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009e54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d110      	bne.n	8009e8e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d102      	bne.n	8009e78 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e72:	7b7b      	ldrb	r3, [r7, #13]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d001      	beq.n	8009e7c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e089      	b.n	8009f90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2202      	movs	r2, #2
 8009e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e8c:	e031      	b.n	8009ef2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d110      	bne.n	8009eb6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e94:	7bbb      	ldrb	r3, [r7, #14]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d102      	bne.n	8009ea0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e9a:	7b3b      	ldrb	r3, [r7, #12]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d001      	beq.n	8009ea4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e075      	b.n	8009f90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009eb4:	e01d      	b.n	8009ef2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d108      	bne.n	8009ece <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ebc:	7bbb      	ldrb	r3, [r7, #14]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d105      	bne.n	8009ece <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ec2:	7b7b      	ldrb	r3, [r7, #13]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d102      	bne.n	8009ece <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ec8:	7b3b      	ldrb	r3, [r7, #12]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d001      	beq.n	8009ed2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e05e      	b.n	8009f90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2202      	movs	r2, #2
 8009ede:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2202      	movs	r2, #2
 8009eee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d003      	beq.n	8009f00 <HAL_TIM_Encoder_Start_IT+0xc4>
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	d010      	beq.n	8009f20 <HAL_TIM_Encoder_Start_IT+0xe4>
 8009efe:	e01f      	b.n	8009f40 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2201      	movs	r2, #1
 8009f06:	2100      	movs	r1, #0
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 fa27 	bl	800a35c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68da      	ldr	r2, [r3, #12]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f042 0202 	orr.w	r2, r2, #2
 8009f1c:	60da      	str	r2, [r3, #12]
      break;
 8009f1e:	e02e      	b.n	8009f7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2201      	movs	r2, #1
 8009f26:	2104      	movs	r1, #4
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 fa17 	bl	800a35c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68da      	ldr	r2, [r3, #12]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f042 0204 	orr.w	r2, r2, #4
 8009f3c:	60da      	str	r2, [r3, #12]
      break;
 8009f3e:	e01e      	b.n	8009f7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2201      	movs	r2, #1
 8009f46:	2100      	movs	r1, #0
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 fa07 	bl	800a35c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2201      	movs	r2, #1
 8009f54:	2104      	movs	r1, #4
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 fa00 	bl	800a35c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68da      	ldr	r2, [r3, #12]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f042 0202 	orr.w	r2, r2, #2
 8009f6a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68da      	ldr	r2, [r3, #12]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f042 0204 	orr.w	r2, r2, #4
 8009f7a:	60da      	str	r2, [r3, #12]
      break;
 8009f7c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f042 0201 	orr.w	r2, r2, #1
 8009f8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	f003 0302 	and.w	r3, r3, #2
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d020      	beq.n	8009ffc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f003 0302 	and.w	r3, r3, #2
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d01b      	beq.n	8009ffc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f06f 0202 	mvn.w	r2, #2
 8009fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	699b      	ldr	r3, [r3, #24]
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d003      	beq.n	8009fea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7f6 fc02 	bl	80007ec <HAL_TIM_IC_CaptureCallback>
 8009fe8:	e005      	b.n	8009ff6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f8e5 	bl	800a1ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f8ec 	bl	800a1ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	f003 0304 	and.w	r3, r3, #4
 800a002:	2b00      	cmp	r3, #0
 800a004:	d020      	beq.n	800a048 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f003 0304 	and.w	r3, r3, #4
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d01b      	beq.n	800a048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f06f 0204 	mvn.w	r2, #4
 800a018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2202      	movs	r2, #2
 800a01e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d003      	beq.n	800a036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f7f6 fbdc 	bl	80007ec <HAL_TIM_IC_CaptureCallback>
 800a034:	e005      	b.n	800a042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f8bf 	bl	800a1ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 f8c6 	bl	800a1ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	f003 0308 	and.w	r3, r3, #8
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d020      	beq.n	800a094 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f003 0308 	and.w	r3, r3, #8
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d01b      	beq.n	800a094 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f06f 0208 	mvn.w	r2, #8
 800a064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2204      	movs	r2, #4
 800a06a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	69db      	ldr	r3, [r3, #28]
 800a072:	f003 0303 	and.w	r3, r3, #3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d003      	beq.n	800a082 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7f6 fbb6 	bl	80007ec <HAL_TIM_IC_CaptureCallback>
 800a080:	e005      	b.n	800a08e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f899 	bl	800a1ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f8a0 	bl	800a1ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	f003 0310 	and.w	r3, r3, #16
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d020      	beq.n	800a0e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f003 0310 	and.w	r3, r3, #16
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d01b      	beq.n	800a0e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f06f 0210 	mvn.w	r2, #16
 800a0b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2208      	movs	r2, #8
 800a0b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d003      	beq.n	800a0ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7f6 fb90 	bl	80007ec <HAL_TIM_IC_CaptureCallback>
 800a0cc:	e005      	b.n	800a0da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f873 	bl	800a1ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f87a 	bl	800a1ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f003 0301 	and.w	r3, r3, #1
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00c      	beq.n	800a104 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f003 0301 	and.w	r3, r3, #1
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d007      	beq.n	800a104 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f06f 0201 	mvn.w	r2, #1
 800a0fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f851 	bl	800a1a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d104      	bne.n	800a118 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00c      	beq.n	800a132 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d007      	beq.n	800a132 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a12a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f9e1 	bl	800a4f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00c      	beq.n	800a156 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a142:	2b00      	cmp	r3, #0
 800a144:	d007      	beq.n	800a156 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a14e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f9d9 	bl	800a508 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00c      	beq.n	800a17a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a166:	2b00      	cmp	r3, #0
 800a168:	d007      	beq.n	800a17a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f834 	bl	800a1e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	f003 0320 	and.w	r3, r3, #32
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00c      	beq.n	800a19e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f003 0320 	and.w	r3, r3, #32
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d007      	beq.n	800a19e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f06f 0220 	mvn.w	r2, #32
 800a196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f9a1 	bl	800a4e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a19e:	bf00      	nop
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	b083      	sub	sp, #12
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a1ae:	bf00      	nop
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b083      	sub	sp, #12
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a1c2:	bf00      	nop
 800a1c4:	370c      	adds	r7, #12
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr

0800a1ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b083      	sub	sp, #12
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a1d6:	bf00      	nop
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b083      	sub	sp, #12
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1ea:	bf00      	nop
 800a1ec:	370c      	adds	r7, #12
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
	...

0800a1f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a4a      	ldr	r2, [pc, #296]	@ (800a334 <TIM_Base_SetConfig+0x13c>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d013      	beq.n	800a238 <TIM_Base_SetConfig+0x40>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a216:	d00f      	beq.n	800a238 <TIM_Base_SetConfig+0x40>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a47      	ldr	r2, [pc, #284]	@ (800a338 <TIM_Base_SetConfig+0x140>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d00b      	beq.n	800a238 <TIM_Base_SetConfig+0x40>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a46      	ldr	r2, [pc, #280]	@ (800a33c <TIM_Base_SetConfig+0x144>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d007      	beq.n	800a238 <TIM_Base_SetConfig+0x40>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a45      	ldr	r2, [pc, #276]	@ (800a340 <TIM_Base_SetConfig+0x148>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d003      	beq.n	800a238 <TIM_Base_SetConfig+0x40>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a44      	ldr	r2, [pc, #272]	@ (800a344 <TIM_Base_SetConfig+0x14c>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d108      	bne.n	800a24a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a23e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a39      	ldr	r2, [pc, #228]	@ (800a334 <TIM_Base_SetConfig+0x13c>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d027      	beq.n	800a2a2 <TIM_Base_SetConfig+0xaa>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a258:	d023      	beq.n	800a2a2 <TIM_Base_SetConfig+0xaa>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a36      	ldr	r2, [pc, #216]	@ (800a338 <TIM_Base_SetConfig+0x140>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d01f      	beq.n	800a2a2 <TIM_Base_SetConfig+0xaa>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a35      	ldr	r2, [pc, #212]	@ (800a33c <TIM_Base_SetConfig+0x144>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d01b      	beq.n	800a2a2 <TIM_Base_SetConfig+0xaa>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a34      	ldr	r2, [pc, #208]	@ (800a340 <TIM_Base_SetConfig+0x148>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d017      	beq.n	800a2a2 <TIM_Base_SetConfig+0xaa>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a33      	ldr	r2, [pc, #204]	@ (800a344 <TIM_Base_SetConfig+0x14c>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d013      	beq.n	800a2a2 <TIM_Base_SetConfig+0xaa>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a32      	ldr	r2, [pc, #200]	@ (800a348 <TIM_Base_SetConfig+0x150>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d00f      	beq.n	800a2a2 <TIM_Base_SetConfig+0xaa>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a31      	ldr	r2, [pc, #196]	@ (800a34c <TIM_Base_SetConfig+0x154>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d00b      	beq.n	800a2a2 <TIM_Base_SetConfig+0xaa>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a30      	ldr	r2, [pc, #192]	@ (800a350 <TIM_Base_SetConfig+0x158>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d007      	beq.n	800a2a2 <TIM_Base_SetConfig+0xaa>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a2f      	ldr	r2, [pc, #188]	@ (800a354 <TIM_Base_SetConfig+0x15c>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d003      	beq.n	800a2a2 <TIM_Base_SetConfig+0xaa>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a2e      	ldr	r2, [pc, #184]	@ (800a358 <TIM_Base_SetConfig+0x160>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d108      	bne.n	800a2b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	695b      	ldr	r3, [r3, #20]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	689a      	ldr	r2, [r3, #8]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a16      	ldr	r2, [pc, #88]	@ (800a334 <TIM_Base_SetConfig+0x13c>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d00f      	beq.n	800a300 <TIM_Base_SetConfig+0x108>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a18      	ldr	r2, [pc, #96]	@ (800a344 <TIM_Base_SetConfig+0x14c>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d00b      	beq.n	800a300 <TIM_Base_SetConfig+0x108>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a17      	ldr	r2, [pc, #92]	@ (800a348 <TIM_Base_SetConfig+0x150>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d007      	beq.n	800a300 <TIM_Base_SetConfig+0x108>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a16      	ldr	r2, [pc, #88]	@ (800a34c <TIM_Base_SetConfig+0x154>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d003      	beq.n	800a300 <TIM_Base_SetConfig+0x108>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a15      	ldr	r2, [pc, #84]	@ (800a350 <TIM_Base_SetConfig+0x158>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d103      	bne.n	800a308 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	691a      	ldr	r2, [r3, #16]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	f003 0301 	and.w	r3, r3, #1
 800a316:	2b01      	cmp	r3, #1
 800a318:	d105      	bne.n	800a326 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	691b      	ldr	r3, [r3, #16]
 800a31e:	f023 0201 	bic.w	r2, r3, #1
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	611a      	str	r2, [r3, #16]
  }
}
 800a326:	bf00      	nop
 800a328:	3714      	adds	r7, #20
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	40010000 	.word	0x40010000
 800a338:	40000400 	.word	0x40000400
 800a33c:	40000800 	.word	0x40000800
 800a340:	40000c00 	.word	0x40000c00
 800a344:	40010400 	.word	0x40010400
 800a348:	40014000 	.word	0x40014000
 800a34c:	40014400 	.word	0x40014400
 800a350:	40014800 	.word	0x40014800
 800a354:	4000e000 	.word	0x4000e000
 800a358:	4000e400 	.word	0x4000e400

0800a35c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	f003 031f 	and.w	r3, r3, #31
 800a36e:	2201      	movs	r2, #1
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6a1a      	ldr	r2, [r3, #32]
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	43db      	mvns	r3, r3
 800a37e:	401a      	ands	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6a1a      	ldr	r2, [r3, #32]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	f003 031f 	and.w	r3, r3, #31
 800a38e:	6879      	ldr	r1, [r7, #4]
 800a390:	fa01 f303 	lsl.w	r3, r1, r3
 800a394:	431a      	orrs	r2, r3
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	621a      	str	r2, [r3, #32]
}
 800a39a:	bf00      	nop
 800a39c:	371c      	adds	r7, #28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
	...

0800a3a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d101      	bne.n	800a3c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3bc:	2302      	movs	r3, #2
 800a3be:	e077      	b.n	800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a35      	ldr	r2, [pc, #212]	@ (800a4bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d004      	beq.n	800a3f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a34      	ldr	r2, [pc, #208]	@ (800a4c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d108      	bne.n	800a406 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a3fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	4313      	orrs	r3, r2
 800a404:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a40c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	4313      	orrs	r3, r2
 800a416:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a25      	ldr	r2, [pc, #148]	@ (800a4bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d02c      	beq.n	800a484 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a432:	d027      	beq.n	800a484 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a22      	ldr	r2, [pc, #136]	@ (800a4c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d022      	beq.n	800a484 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a21      	ldr	r2, [pc, #132]	@ (800a4c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d01d      	beq.n	800a484 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a1f      	ldr	r2, [pc, #124]	@ (800a4cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d018      	beq.n	800a484 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a1a      	ldr	r2, [pc, #104]	@ (800a4c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d013      	beq.n	800a484 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a1b      	ldr	r2, [pc, #108]	@ (800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d00e      	beq.n	800a484 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a1a      	ldr	r2, [pc, #104]	@ (800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d009      	beq.n	800a484 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a18      	ldr	r2, [pc, #96]	@ (800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d004      	beq.n	800a484 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a17      	ldr	r2, [pc, #92]	@ (800a4dc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d10c      	bne.n	800a49e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a48a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	4313      	orrs	r3, r2
 800a494:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3714      	adds	r7, #20
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr
 800a4bc:	40010000 	.word	0x40010000
 800a4c0:	40010400 	.word	0x40010400
 800a4c4:	40000400 	.word	0x40000400
 800a4c8:	40000800 	.word	0x40000800
 800a4cc:	40000c00 	.word	0x40000c00
 800a4d0:	40001800 	.word	0x40001800
 800a4d4:	40014000 	.word	0x40014000
 800a4d8:	4000e000 	.word	0x4000e000
 800a4dc:	4000e400 	.word	0x4000e400

0800a4e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <checkint>:
 800a51c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a520:	2b7e      	cmp	r3, #126	@ 0x7e
 800a522:	d910      	bls.n	800a546 <checkint+0x2a>
 800a524:	2b96      	cmp	r3, #150	@ 0x96
 800a526:	d80c      	bhi.n	800a542 <checkint+0x26>
 800a528:	2201      	movs	r2, #1
 800a52a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800a52e:	fa02 f303 	lsl.w	r3, r2, r3
 800a532:	1e5a      	subs	r2, r3, #1
 800a534:	4202      	tst	r2, r0
 800a536:	d106      	bne.n	800a546 <checkint+0x2a>
 800a538:	4203      	tst	r3, r0
 800a53a:	bf0c      	ite	eq
 800a53c:	2002      	moveq	r0, #2
 800a53e:	2001      	movne	r0, #1
 800a540:	4770      	bx	lr
 800a542:	2002      	movs	r0, #2
 800a544:	4770      	bx	lr
 800a546:	2000      	movs	r0, #0
 800a548:	4770      	bx	lr
 800a54a:	0000      	movs	r0, r0
 800a54c:	0000      	movs	r0, r0
	...

0800a550 <powf>:
 800a550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a552:	ee10 1a10 	vmov	r1, s0
 800a556:	ee10 4a90 	vmov	r4, s1
 800a55a:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 800a55e:	0063      	lsls	r3, r4, #1
 800a560:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800a564:	eef0 7a40 	vmov.f32	s15, s0
 800a568:	eeb0 7a60 	vmov.f32	s14, s1
 800a56c:	f103 30ff 	add.w	r0, r3, #4294967295
 800a570:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 800a574:	d252      	bcs.n	800a61c <powf+0xcc>
 800a576:	4290      	cmp	r0, r2
 800a578:	d258      	bcs.n	800a62c <powf+0xdc>
 800a57a:	2000      	movs	r0, #0
 800a57c:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 800a580:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 800a584:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 800a588:	0ddb      	lsrs	r3, r3, #23
 800a58a:	4a9d      	ldr	r2, [pc, #628]	@ (800a800 <powf+0x2b0>)
 800a58c:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 800a590:	05db      	lsls	r3, r3, #23
 800a592:	1ac9      	subs	r1, r1, r3
 800a594:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 800a598:	ee07 1a90 	vmov	s15, r1
 800a59c:	ed94 5b02 	vldr	d5, [r4, #8]
 800a5a0:	ed94 4b00 	vldr	d4, [r4]
 800a5a4:	15db      	asrs	r3, r3, #23
 800a5a6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800a5aa:	ee07 3a90 	vmov	s15, r3
 800a5ae:	eea4 2b06 	vfma.f64	d2, d4, d6
 800a5b2:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 800a5b6:	ee22 4b02 	vmul.f64	d4, d2, d2
 800a5ba:	ee24 0b04 	vmul.f64	d0, d4, d4
 800a5be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800a5c2:	ee36 6b05 	vadd.f64	d6, d6, d5
 800a5c6:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 800a5ca:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 800a5ce:	eea2 1b05 	vfma.f64	d1, d2, d5
 800a5d2:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 800a5d6:	eea2 5b03 	vfma.f64	d5, d2, d3
 800a5da:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 800a5de:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800a5e2:	eea2 6b03 	vfma.f64	d6, d2, d3
 800a5e6:	eea4 6b05 	vfma.f64	d6, d4, d5
 800a5ea:	eea1 6b00 	vfma.f64	d6, d1, d0
 800a5ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a5f2:	ee17 3a90 	vmov	r3, s15
 800a5f6:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 800a5fa:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 800a5fe:	429a      	cmp	r2, r3
 800a600:	f0c0 80b8 	bcc.w	800a774 <powf+0x224>
 800a604:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800a7e0 <powf+0x290>
 800a608:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a610:	dd79      	ble.n	800a706 <powf+0x1b6>
 800a612:	b003      	add	sp, #12
 800a614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a618:	f000 b9ec 	b.w	800a9f4 <__math_oflowf>
 800a61c:	4290      	cmp	r0, r2
 800a61e:	d330      	bcc.n	800a682 <powf+0x132>
 800a620:	b12b      	cbz	r3, 800a62e <powf+0xde>
 800a622:	0049      	lsls	r1, r1, #1
 800a624:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 800a628:	d808      	bhi.n	800a63c <powf+0xec>
 800a62a:	e015      	b.n	800a658 <powf+0x108>
 800a62c:	b953      	cbnz	r3, 800a644 <powf+0xf4>
 800a62e:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 800a632:	0049      	lsls	r1, r1, #1
 800a634:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 800a638:	f240 80ca 	bls.w	800a7d0 <powf+0x280>
 800a63c:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a640:	b003      	add	sp, #12
 800a642:	bd30      	pop	{r4, r5, pc}
 800a644:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800a648:	d105      	bne.n	800a656 <powf+0x106>
 800a64a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800a64e:	0064      	lsls	r4, r4, #1
 800a650:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800a654:	e7f0      	b.n	800a638 <powf+0xe8>
 800a656:	0049      	lsls	r1, r1, #1
 800a658:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 800a65c:	d1ee      	bne.n	800a63c <powf+0xec>
 800a65e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800a662:	f000 80b5 	beq.w	800a7d0 <powf+0x280>
 800a666:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800a66a:	ea6f 0404 	mvn.w	r4, r4
 800a66e:	bf34      	ite	cc
 800a670:	2100      	movcc	r1, #0
 800a672:	2101      	movcs	r1, #1
 800a674:	0fe4      	lsrs	r4, r4, #31
 800a676:	42a1      	cmp	r1, r4
 800a678:	f040 80ad 	bne.w	800a7d6 <powf+0x286>
 800a67c:	ee27 0a07 	vmul.f32	s0, s14, s14
 800a680:	e7de      	b.n	800a640 <powf+0xf0>
 800a682:	004d      	lsls	r5, r1, #1
 800a684:	1e6b      	subs	r3, r5, #1
 800a686:	4293      	cmp	r3, r2
 800a688:	d31b      	bcc.n	800a6c2 <powf+0x172>
 800a68a:	2900      	cmp	r1, #0
 800a68c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a690:	da0e      	bge.n	800a6b0 <powf+0x160>
 800a692:	4620      	mov	r0, r4
 800a694:	f7ff ff42 	bl	800a51c <checkint>
 800a698:	2801      	cmp	r0, #1
 800a69a:	d109      	bne.n	800a6b0 <powf+0x160>
 800a69c:	eeb1 0a40 	vneg.f32	s0, s0
 800a6a0:	b945      	cbnz	r5, 800a6b4 <powf+0x164>
 800a6a2:	2c00      	cmp	r4, #0
 800a6a4:	dacc      	bge.n	800a640 <powf+0xf0>
 800a6a6:	b003      	add	sp, #12
 800a6a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6ac:	f000 b9a8 	b.w	800aa00 <__math_divzerof>
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	e7f5      	b.n	800a6a0 <powf+0x150>
 800a6b4:	2c00      	cmp	r4, #0
 800a6b6:	dac3      	bge.n	800a640 <powf+0xf0>
 800a6b8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a6bc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a6c0:	e7be      	b.n	800a640 <powf+0xf0>
 800a6c2:	2900      	cmp	r1, #0
 800a6c4:	da1d      	bge.n	800a702 <powf+0x1b2>
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f7ff ff28 	bl	800a51c <checkint>
 800a6cc:	b920      	cbnz	r0, 800a6d8 <powf+0x188>
 800a6ce:	b003      	add	sp, #12
 800a6d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6d4:	f000 b9a6 	b.w	800aa24 <__math_invalidf>
 800a6d8:	1e43      	subs	r3, r0, #1
 800a6da:	4258      	negs	r0, r3
 800a6dc:	4158      	adcs	r0, r3
 800a6de:	0400      	lsls	r0, r0, #16
 800a6e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800a6e4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800a6e8:	f4bf af48 	bcs.w	800a57c <powf+0x2c>
 800a6ec:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800a804 <powf+0x2b4>
 800a6f0:	ee27 0aa6 	vmul.f32	s0, s15, s13
 800a6f4:	ee10 3a10 	vmov	r3, s0
 800a6f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a6fc:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 800a700:	e73c      	b.n	800a57c <powf+0x2c>
 800a702:	2000      	movs	r0, #0
 800a704:	e7ee      	b.n	800a6e4 <powf+0x194>
 800a706:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 800a7e8 <powf+0x298>
 800a70a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a712:	dd0f      	ble.n	800a734 <powf+0x1e4>
 800a714:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 800a718:	b1c0      	cbz	r0, 800a74c <powf+0x1fc>
 800a71a:	9301      	str	r3, [sp, #4]
 800a71c:	eddd 6a01 	vldr	s13, [sp, #4]
 800a720:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 800a724:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a728:	eef4 6a46 	vcmp.f32	s13, s12
 800a72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a730:	f47f af6f 	bne.w	800a612 <powf+0xc2>
 800a734:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 800a7f0 <powf+0x2a0>
 800a738:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a740:	d80c      	bhi.n	800a75c <powf+0x20c>
 800a742:	b003      	add	sp, #12
 800a744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a748:	f000 b948 	b.w	800a9dc <__math_uflowf>
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	eddd 6a00 	vldr	s13, [sp]
 800a752:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800a756:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a75a:	e7e5      	b.n	800a728 <powf+0x1d8>
 800a75c:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 800a7f8 <powf+0x2a8>
 800a760:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a768:	d504      	bpl.n	800a774 <powf+0x224>
 800a76a:	b003      	add	sp, #12
 800a76c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a770:	f000 b93a 	b.w	800a9e8 <__math_may_uflowf>
 800a774:	4b24      	ldr	r3, [pc, #144]	@ (800a808 <powf+0x2b8>)
 800a776:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800a77a:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 800a77e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800a782:	ee16 2a10 	vmov	r2, s12
 800a786:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a78a:	f002 011f 	and.w	r1, r2, #31
 800a78e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a792:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 800a796:	ee27 4b07 	vmul.f64	d4, d7, d7
 800a79a:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 800a79e:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 800a7a2:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 800a7a6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a7aa:	686d      	ldr	r5, [r5, #4]
 800a7ac:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 800a7b0:	1880      	adds	r0, r0, r2
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	190a      	adds	r2, r1, r4
 800a7b6:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800a7ba:	eea7 0b05 	vfma.f64	d0, d7, d5
 800a7be:	ec43 2b17 	vmov	d7, r2, r3
 800a7c2:	eea6 0b04 	vfma.f64	d0, d6, d4
 800a7c6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a7ca:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a7ce:	e737      	b.n	800a640 <powf+0xf0>
 800a7d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a7d4:	e734      	b.n	800a640 <powf+0xf0>
 800a7d6:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800a80c <powf+0x2bc>
 800a7da:	e731      	b.n	800a640 <powf+0xf0>
 800a7dc:	f3af 8000 	nop.w
 800a7e0:	ffd1d571 	.word	0xffd1d571
 800a7e4:	405fffff 	.word	0x405fffff
 800a7e8:	ffa3aae2 	.word	0xffa3aae2
 800a7ec:	405fffff 	.word	0x405fffff
 800a7f0:	00000000 	.word	0x00000000
 800a7f4:	c062c000 	.word	0xc062c000
 800a7f8:	00000000 	.word	0x00000000
 800a7fc:	c062a000 	.word	0xc062a000
 800a800:	0800ad60 	.word	0x0800ad60
 800a804:	4b000000 	.word	0x4b000000
 800a808:	0800ac18 	.word	0x0800ac18
 800a80c:	00000000 	.word	0x00000000

0800a810 <sinf_poly>:
 800a810:	07cb      	lsls	r3, r1, #31
 800a812:	d412      	bmi.n	800a83a <sinf_poly+0x2a>
 800a814:	ee21 5b00 	vmul.f64	d5, d1, d0
 800a818:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800a81c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 800a820:	eea6 7b01 	vfma.f64	d7, d6, d1
 800a824:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800a828:	ee21 1b05 	vmul.f64	d1, d1, d5
 800a82c:	eea6 0b05 	vfma.f64	d0, d6, d5
 800a830:	eea7 0b01 	vfma.f64	d0, d7, d1
 800a834:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a838:	4770      	bx	lr
 800a83a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 800a83e:	ee21 5b01 	vmul.f64	d5, d1, d1
 800a842:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800a846:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 800a84a:	eea1 7b06 	vfma.f64	d7, d1, d6
 800a84e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800a852:	eea1 0b06 	vfma.f64	d0, d1, d6
 800a856:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800a85a:	ee21 1b05 	vmul.f64	d1, d1, d5
 800a85e:	eea5 0b06 	vfma.f64	d0, d5, d6
 800a862:	e7e5      	b.n	800a830 <sinf_poly+0x20>
 800a864:	0000      	movs	r0, r0
	...

0800a868 <cosf>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	ee10 4a10 	vmov	r4, s0
 800a86e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a872:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800a876:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800a87a:	d21f      	bcs.n	800a8bc <cosf+0x54>
 800a87c:	ee27 7b07 	vmul.f64	d7, d7, d7
 800a880:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800a884:	f0c0 8082 	bcc.w	800a98c <cosf+0x124>
 800a888:	ee27 4b07 	vmul.f64	d4, d7, d7
 800a88c:	4b44      	ldr	r3, [pc, #272]	@ (800a9a0 <cosf+0x138>)
 800a88e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 800a892:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800a896:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 800a89a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a89e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 800a8a2:	eea7 0b05 	vfma.f64	d0, d7, d5
 800a8a6:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 800a8aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a8ae:	eea4 0b05 	vfma.f64	d0, d4, d5
 800a8b2:	eea6 0b07 	vfma.f64	d0, d6, d7
 800a8b6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a8ba:	bd38      	pop	{r3, r4, r5, pc}
 800a8bc:	f240 422e 	movw	r2, #1070	@ 0x42e
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d829      	bhi.n	800a918 <cosf+0xb0>
 800a8c4:	4b36      	ldr	r3, [pc, #216]	@ (800a9a0 <cosf+0x138>)
 800a8c6:	ed93 6b08 	vldr	d6, [r3, #32]
 800a8ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a8ce:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 800a8d2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800a8d6:	ee16 1a90 	vmov	r1, s13
 800a8da:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800a8de:	1609      	asrs	r1, r1, #24
 800a8e0:	ee06 1a90 	vmov	s13, r1
 800a8e4:	f001 0203 	and.w	r2, r1, #3
 800a8e8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800a8ec:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800a8f0:	ed92 0b00 	vldr	d0, [r2]
 800a8f4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 800a8f8:	f011 0f02 	tst.w	r1, #2
 800a8fc:	f081 0101 	eor.w	r1, r1, #1
 800a900:	eea5 7b46 	vfms.f64	d7, d5, d6
 800a904:	bf08      	it	eq
 800a906:	4618      	moveq	r0, r3
 800a908:	ee27 1b07 	vmul.f64	d1, d7, d7
 800a90c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a910:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a914:	f7ff bf7c 	b.w	800a810 <sinf_poly>
 800a918:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800a91c:	d232      	bcs.n	800a984 <cosf+0x11c>
 800a91e:	4921      	ldr	r1, [pc, #132]	@ (800a9a4 <cosf+0x13c>)
 800a920:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800a924:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800a928:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800a92c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800a930:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a934:	6a10      	ldr	r0, [r2, #32]
 800a936:	6912      	ldr	r2, [r2, #16]
 800a938:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a93c:	40ab      	lsls	r3, r5
 800a93e:	fba0 5003 	umull	r5, r0, r0, r3
 800a942:	4359      	muls	r1, r3
 800a944:	fbe3 0102 	umlal	r0, r1, r3, r2
 800a948:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 800a94c:	0f9d      	lsrs	r5, r3, #30
 800a94e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a952:	1ac9      	subs	r1, r1, r3
 800a954:	f7f5 fe6a 	bl	800062c <__aeabi_l2d>
 800a958:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800a95c:	4b10      	ldr	r3, [pc, #64]	@ (800a9a0 <cosf+0x138>)
 800a95e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 800a998 <cosf+0x130>
 800a962:	ec41 0b17 	vmov	d7, r0, r1
 800a966:	f004 0203 	and.w	r2, r4, #3
 800a96a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800a96e:	ed92 0b00 	vldr	d0, [r2]
 800a972:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a976:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800a97a:	f014 0f02 	tst.w	r4, #2
 800a97e:	f085 0101 	eor.w	r1, r5, #1
 800a982:	e7bf      	b.n	800a904 <cosf+0x9c>
 800a984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a988:	f000 b84c 	b.w	800aa24 <__math_invalidf>
 800a98c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a990:	e793      	b.n	800a8ba <cosf+0x52>
 800a992:	bf00      	nop
 800a994:	f3af 8000 	nop.w
 800a998:	54442d18 	.word	0x54442d18
 800a99c:	3c1921fb 	.word	0x3c1921fb
 800a9a0:	0800ab38 	.word	0x0800ab38
 800a9a4:	0800aad8 	.word	0x0800aad8

0800a9a8 <with_errnof>:
 800a9a8:	b510      	push	{r4, lr}
 800a9aa:	ed2d 8b02 	vpush	{d8}
 800a9ae:	eeb0 8a40 	vmov.f32	s16, s0
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	f000 f84e 	bl	800aa54 <__errno>
 800a9b8:	eeb0 0a48 	vmov.f32	s0, s16
 800a9bc:	ecbd 8b02 	vpop	{d8}
 800a9c0:	6004      	str	r4, [r0, #0]
 800a9c2:	bd10      	pop	{r4, pc}

0800a9c4 <xflowf>:
 800a9c4:	b130      	cbz	r0, 800a9d4 <xflowf+0x10>
 800a9c6:	eef1 7a40 	vneg.f32	s15, s0
 800a9ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a9ce:	2022      	movs	r0, #34	@ 0x22
 800a9d0:	f7ff bfea 	b.w	800a9a8 <with_errnof>
 800a9d4:	eef0 7a40 	vmov.f32	s15, s0
 800a9d8:	e7f7      	b.n	800a9ca <xflowf+0x6>
	...

0800a9dc <__math_uflowf>:
 800a9dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a9e4 <__math_uflowf+0x8>
 800a9e0:	f7ff bff0 	b.w	800a9c4 <xflowf>
 800a9e4:	10000000 	.word	0x10000000

0800a9e8 <__math_may_uflowf>:
 800a9e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a9f0 <__math_may_uflowf+0x8>
 800a9ec:	f7ff bfea 	b.w	800a9c4 <xflowf>
 800a9f0:	1a200000 	.word	0x1a200000

0800a9f4 <__math_oflowf>:
 800a9f4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a9fc <__math_oflowf+0x8>
 800a9f8:	f7ff bfe4 	b.w	800a9c4 <xflowf>
 800a9fc:	70000000 	.word	0x70000000

0800aa00 <__math_divzerof>:
 800aa00:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800aa20 <__math_divzerof+0x20>
 800aa04:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800aa08:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	f04f 0022 	mov.w	r0, #34	@ 0x22
 800aa12:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800aa16:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800aa1a:	f7ff bfc5 	b.w	800a9a8 <with_errnof>
 800aa1e:	bf00      	nop
 800aa20:	00000000 	.word	0x00000000

0800aa24 <__math_invalidf>:
 800aa24:	eef0 7a40 	vmov.f32	s15, s0
 800aa28:	ee30 7a40 	vsub.f32	s14, s0, s0
 800aa2c:	eef4 7a67 	vcmp.f32	s15, s15
 800aa30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa34:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800aa38:	d602      	bvs.n	800aa40 <__math_invalidf+0x1c>
 800aa3a:	2021      	movs	r0, #33	@ 0x21
 800aa3c:	f7ff bfb4 	b.w	800a9a8 <with_errnof>
 800aa40:	4770      	bx	lr

0800aa42 <memset>:
 800aa42:	4402      	add	r2, r0
 800aa44:	4603      	mov	r3, r0
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d100      	bne.n	800aa4c <memset+0xa>
 800aa4a:	4770      	bx	lr
 800aa4c:	f803 1b01 	strb.w	r1, [r3], #1
 800aa50:	e7f9      	b.n	800aa46 <memset+0x4>
	...

0800aa54 <__errno>:
 800aa54:	4b01      	ldr	r3, [pc, #4]	@ (800aa5c <__errno+0x8>)
 800aa56:	6818      	ldr	r0, [r3, #0]
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	24000018 	.word	0x24000018

0800aa60 <__libc_init_array>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	4d0d      	ldr	r5, [pc, #52]	@ (800aa98 <__libc_init_array+0x38>)
 800aa64:	4c0d      	ldr	r4, [pc, #52]	@ (800aa9c <__libc_init_array+0x3c>)
 800aa66:	1b64      	subs	r4, r4, r5
 800aa68:	10a4      	asrs	r4, r4, #2
 800aa6a:	2600      	movs	r6, #0
 800aa6c:	42a6      	cmp	r6, r4
 800aa6e:	d109      	bne.n	800aa84 <__libc_init_array+0x24>
 800aa70:	4d0b      	ldr	r5, [pc, #44]	@ (800aaa0 <__libc_init_array+0x40>)
 800aa72:	4c0c      	ldr	r4, [pc, #48]	@ (800aaa4 <__libc_init_array+0x44>)
 800aa74:	f000 f818 	bl	800aaa8 <_init>
 800aa78:	1b64      	subs	r4, r4, r5
 800aa7a:	10a4      	asrs	r4, r4, #2
 800aa7c:	2600      	movs	r6, #0
 800aa7e:	42a6      	cmp	r6, r4
 800aa80:	d105      	bne.n	800aa8e <__libc_init_array+0x2e>
 800aa82:	bd70      	pop	{r4, r5, r6, pc}
 800aa84:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa88:	4798      	blx	r3
 800aa8a:	3601      	adds	r6, #1
 800aa8c:	e7ee      	b.n	800aa6c <__libc_init_array+0xc>
 800aa8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa92:	4798      	blx	r3
 800aa94:	3601      	adds	r6, #1
 800aa96:	e7f2      	b.n	800aa7e <__libc_init_array+0x1e>
 800aa98:	0800ae88 	.word	0x0800ae88
 800aa9c:	0800ae88 	.word	0x0800ae88
 800aaa0:	0800ae88 	.word	0x0800ae88
 800aaa4:	0800ae8c 	.word	0x0800ae8c

0800aaa8 <_init>:
 800aaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaaa:	bf00      	nop
 800aaac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaae:	bc08      	pop	{r3}
 800aab0:	469e      	mov	lr, r3
 800aab2:	4770      	bx	lr

0800aab4 <_fini>:
 800aab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab6:	bf00      	nop
 800aab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaba:	bc08      	pop	{r3}
 800aabc:	469e      	mov	lr, r3
 800aabe:	4770      	bx	lr
