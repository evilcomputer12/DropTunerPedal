
DropTunerPedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d30  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800a000  0800a000  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a288  0800a288  0000b288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800a28c  0800a28c  0000b28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000060  24000000  0800a290  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000a79c  24000060  0800a2f0  0000c060  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400a7fc  0800a2f0  0000c7fc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013fee  00000000  00000000  0000c08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002750  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011a8  00000000  00000000  000227d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000da1  00000000  00000000  00023978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000343e1  00000000  00000000  00024719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00016731  00000000  00000000  00058afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015c1b2  00000000  00000000  0006f22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001cb3dd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004e14  00000000  00000000  001cb420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000072  00000000  00000000  001d0234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000060 	.word	0x24000060
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009fe8 	.word	0x08009fe8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000064 	.word	0x24000064
 800030c:	08009fe8 	.word	0x08009fe8

08000310 <ControlLEDs>:
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

// Function to control LEDs based on semitone value
void ControlLEDs(uint16_t semitone)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	80fb      	strh	r3, [r7, #6]
    // Turn off all LEDs before setting new ones
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15 | GPIO_PIN_14, GPIO_PIN_RESET); // LED8 and LED7
 800031a:	2200      	movs	r2, #0
 800031c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000320:	4852      	ldr	r0, [pc, #328]	@ (800046c <ControlLEDs+0x15c>)
 8000322:	f005 fbf3 	bl	8005b0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET); // LED6-LED1
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 517c 	mov.w	r1, #16128	@ 0x3f00
 800032c:	4850      	ldr	r0, [pc, #320]	@ (8000470 <ControlLEDs+0x160>)
 800032e:	f005 fbed 	bl	8005b0c <HAL_GPIO_WritePin>

    switch (semitone)
 8000332:	88fb      	ldrh	r3, [r7, #6]
 8000334:	2b0c      	cmp	r3, #12
 8000336:	f200 8091 	bhi.w	800045c <ControlLEDs+0x14c>
 800033a:	a201      	add	r2, pc, #4	@ (adr r2, 8000340 <ControlLEDs+0x30>)
 800033c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000340:	080003d7 	.word	0x080003d7
 8000344:	080003c9 	.word	0x080003c9
 8000348:	080003bb 	.word	0x080003bb
 800034c:	080003ad 	.word	0x080003ad
 8000350:	0800039f 	.word	0x0800039f
 8000354:	08000391 	.word	0x08000391
 8000358:	08000383 	.word	0x08000383
 800035c:	08000375 	.word	0x08000375
 8000360:	080003e5 	.word	0x080003e5
 8000364:	080003e5 	.word	0x080003e5
 8000368:	080003e5 	.word	0x080003e5
 800036c:	080003e5 	.word	0x080003e5
 8000370:	080003e5 	.word	0x080003e5
    {
        case 7:
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // Light up LED1 (semitone 0)
 8000374:	2201      	movs	r2, #1
 8000376:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800037a:	483d      	ldr	r0, [pc, #244]	@ (8000470 <ControlLEDs+0x160>)
 800037c:	f005 fbc6 	bl	8005b0c <HAL_GPIO_WritePin>
            break;
 8000380:	e06f      	b.n	8000462 <ControlLEDs+0x152>
        case 6:
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Light up LED2 (semitone 1)
 8000382:	2201      	movs	r2, #1
 8000384:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000388:	4839      	ldr	r0, [pc, #228]	@ (8000470 <ControlLEDs+0x160>)
 800038a:	f005 fbbf 	bl	8005b0c <HAL_GPIO_WritePin>
            break;
 800038e:	e068      	b.n	8000462 <ControlLEDs+0x152>
        case 5:
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET); // Light up LED3 (semitone 2)
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000396:	4836      	ldr	r0, [pc, #216]	@ (8000470 <ControlLEDs+0x160>)
 8000398:	f005 fbb8 	bl	8005b0c <HAL_GPIO_WritePin>
            break;
 800039c:	e061      	b.n	8000462 <ControlLEDs+0x152>
        case 4:
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET); // Light up LED4 (semitone 3)
 800039e:	2201      	movs	r2, #1
 80003a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003a4:	4832      	ldr	r0, [pc, #200]	@ (8000470 <ControlLEDs+0x160>)
 80003a6:	f005 fbb1 	bl	8005b0c <HAL_GPIO_WritePin>
            break;
 80003aa:	e05a      	b.n	8000462 <ControlLEDs+0x152>
        case 3:
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);  // Light up LED5 (semitone 4)
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003b2:	482f      	ldr	r0, [pc, #188]	@ (8000470 <ControlLEDs+0x160>)
 80003b4:	f005 fbaa 	bl	8005b0c <HAL_GPIO_WritePin>
            break;
 80003b8:	e053      	b.n	8000462 <ControlLEDs+0x152>
        case 2:
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);  // Light up LED6 (semitone 5)
 80003ba:	2201      	movs	r2, #1
 80003bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003c0:	482b      	ldr	r0, [pc, #172]	@ (8000470 <ControlLEDs+0x160>)
 80003c2:	f005 fba3 	bl	8005b0c <HAL_GPIO_WritePin>
            break;
 80003c6:	e04c      	b.n	8000462 <ControlLEDs+0x152>
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Light up LED7 (semitone 6)
 80003c8:	2201      	movs	r2, #1
 80003ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003ce:	4827      	ldr	r0, [pc, #156]	@ (800046c <ControlLEDs+0x15c>)
 80003d0:	f005 fb9c 	bl	8005b0c <HAL_GPIO_WritePin>
            break;
 80003d4:	e045      	b.n	8000462 <ControlLEDs+0x152>
        case 0:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // Light up LED8 (semitone 7)
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003dc:	4823      	ldr	r0, [pc, #140]	@ (800046c <ControlLEDs+0x15c>)
 80003de:	f005 fb95 	bl	8005b0c <HAL_GPIO_WritePin>
            break;
 80003e2:	e03e      	b.n	8000462 <ControlLEDs+0x152>
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);   // Light up LED6 (for semitones 8-12)
 80003e4:	2201      	movs	r2, #1
 80003e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003ea:	4821      	ldr	r0, [pc, #132]	@ (8000470 <ControlLEDs+0x160>)
 80003ec:	f005 fb8e 	bl	8005b0c <HAL_GPIO_WritePin>
            // Light up corresponding LED for semitone
            switch (semitone)
 80003f0:	88fb      	ldrh	r3, [r7, #6]
 80003f2:	3b08      	subs	r3, #8
 80003f4:	2b04      	cmp	r3, #4
 80003f6:	d833      	bhi.n	8000460 <ControlLEDs+0x150>
 80003f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000400 <ControlLEDs+0xf0>)
 80003fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003fe:	bf00      	nop
 8000400:	08000415 	.word	0x08000415
 8000404:	08000423 	.word	0x08000423
 8000408:	08000431 	.word	0x08000431
 800040c:	0800043f 	.word	0x0800043f
 8000410:	0800044d 	.word	0x0800044d
            {
                case 8:
                	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // Light up LED1 (semitone 8)
 8000414:	2201      	movs	r2, #1
 8000416:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800041a:	4814      	ldr	r0, [pc, #80]	@ (800046c <ControlLEDs+0x15c>)
 800041c:	f005 fb76 	bl	8005b0c <HAL_GPIO_WritePin>
                    break;
 8000420:	e01b      	b.n	800045a <ControlLEDs+0x14a>
                case 9:
                	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Light up LED2 (semitone 9)
 8000422:	2201      	movs	r2, #1
 8000424:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000428:	4810      	ldr	r0, [pc, #64]	@ (800046c <ControlLEDs+0x15c>)
 800042a:	f005 fb6f 	bl	8005b0c <HAL_GPIO_WritePin>
                    break;
 800042e:	e014      	b.n	800045a <ControlLEDs+0x14a>
                case 10:
                	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET); // Light up LED3 (semitone 10)
 8000430:	2201      	movs	r2, #1
 8000432:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000436:	480e      	ldr	r0, [pc, #56]	@ (8000470 <ControlLEDs+0x160>)
 8000438:	f005 fb68 	bl	8005b0c <HAL_GPIO_WritePin>
                    break;
 800043c:	e00d      	b.n	800045a <ControlLEDs+0x14a>
                case 11:
                	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET); // Light up LED4 (semitone 11)
 800043e:	2201      	movs	r2, #1
 8000440:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000444:	480a      	ldr	r0, [pc, #40]	@ (8000470 <ControlLEDs+0x160>)
 8000446:	f005 fb61 	bl	8005b0c <HAL_GPIO_WritePin>
                    break;
 800044a:	e006      	b.n	800045a <ControlLEDs+0x14a>
                case 12:
                	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);  // Light up LED5 (semitone 12)
 800044c:	2201      	movs	r2, #1
 800044e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000452:	4807      	ldr	r0, [pc, #28]	@ (8000470 <ControlLEDs+0x160>)
 8000454:	f005 fb5a 	bl	8005b0c <HAL_GPIO_WritePin>
                    break;
 8000458:	bf00      	nop
            }
            break;
 800045a:	e001      	b.n	8000460 <ControlLEDs+0x150>
        default:
            // No action needed for invalid semitone values
            break;
 800045c:	bf00      	nop
 800045e:	e000      	b.n	8000462 <ControlLEDs+0x152>
            break;
 8000460:	bf00      	nop
    }
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	58020400 	.word	0x58020400
 8000470:	58020c00 	.word	0x58020c00

08000474 <HAL_TIM_IC_CaptureCallback>:
int16_t count = 0;   // Use signed 16-bit int to handle possible negative values
uint16_t position = 0;
int speed = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
    counter = __HAL_TIM_GET_COUNTER(htim);  // Get the raw counter value
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000482:	4a13      	ldr	r2, [pc, #76]	@ (80004d0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000484:	6013      	str	r3, [r2, #0]

    count = (int16_t)counter;  // Cast to signed int to handle negative values
 8000486:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	b21a      	sxth	r2, r3
 800048c:	4b11      	ldr	r3, [pc, #68]	@ (80004d4 <HAL_TIM_IC_CaptureCallback+0x60>)
 800048e:	801a      	strh	r2, [r3, #0]

    // If count is negative, set it to zero
    if (count < 0)
 8000490:	4b10      	ldr	r3, [pc, #64]	@ (80004d4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000496:	2b00      	cmp	r3, #0
 8000498:	da02      	bge.n	80004a0 <HAL_TIM_IC_CaptureCallback+0x2c>
    {
        count = 0;
 800049a:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <HAL_TIM_IC_CaptureCallback+0x60>)
 800049c:	2200      	movs	r2, #0
 800049e:	801a      	strh	r2, [r3, #0]
    }

    // Scale down count to position, divide by 4 to adjust for sensitivity
    position = count / 4;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <HAL_TIM_IC_CaptureCallback+0x60>)
 80004a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	da00      	bge.n	80004ac <HAL_TIM_IC_CaptureCallback+0x38>
 80004aa:	3303      	adds	r3, #3
 80004ac:	109b      	asrs	r3, r3, #2
 80004ae:	b21b      	sxth	r3, r3
 80004b0:	b29a      	uxth	r2, r3
 80004b2:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <HAL_TIM_IC_CaptureCallback+0x64>)
 80004b4:	801a      	strh	r2, [r3, #0]

    // Clamp the position to be within 0 to 12
    if (position > 12)
 80004b6:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <HAL_TIM_IC_CaptureCallback+0x64>)
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	2b0c      	cmp	r3, #12
 80004bc:	d902      	bls.n	80004c4 <HAL_TIM_IC_CaptureCallback+0x50>
    {
        position = 12;  // Ensure position does not exceed 12
 80004be:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <HAL_TIM_IC_CaptureCallback+0x64>)
 80004c0:	220c      	movs	r2, #12
 80004c2:	801a      	strh	r2, [r3, #0]
    }
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	2400a6ac 	.word	0x2400a6ac
 80004d4:	2400a6b0 	.word	0x2400a6b0
 80004d8:	2400a6b2 	.word	0x2400a6b2

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	@ 0x28
 80004e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fee7 	bl	80012b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 030c 	add.w	r3, r7, #12
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]

  // Enable clocks for GPIO ports B, D, and A
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f6:	4b42      	ldr	r3, [pc, #264]	@ (8000600 <main+0x124>)
 80004f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004fc:	4a40      	ldr	r2, [pc, #256]	@ (8000600 <main+0x124>)
 80004fe:	f043 0302 	orr.w	r3, r3, #2
 8000502:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000506:	4b3e      	ldr	r3, [pc, #248]	@ (8000600 <main+0x124>)
 8000508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800050c:	f003 0302 	and.w	r3, r3, #2
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000514:	4b3a      	ldr	r3, [pc, #232]	@ (8000600 <main+0x124>)
 8000516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800051a:	4a39      	ldr	r2, [pc, #228]	@ (8000600 <main+0x124>)
 800051c:	f043 0308 	orr.w	r3, r3, #8
 8000520:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000524:	4b36      	ldr	r3, [pc, #216]	@ (8000600 <main+0x124>)
 8000526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800052a:	f003 0308 	and.w	r3, r3, #8
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b33      	ldr	r3, [pc, #204]	@ (8000600 <main+0x124>)
 8000534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000538:	4a31      	ldr	r2, [pc, #196]	@ (8000600 <main+0x124>)
 800053a:	f043 0301 	orr.w	r3, r3, #1
 800053e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000542:	4b2f      	ldr	r3, [pc, #188]	@ (8000600 <main+0x124>)
 8000544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000548:	f003 0301 	and.w	r3, r3, #1
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	683b      	ldr	r3, [r7, #0]

  // Configure GPIO pin outputs for LED8 (PB15) and LED7 (PB14)
  GPIO_InitStruct.Pin = GPIO_PIN_15 | GPIO_PIN_14;
 8000550:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;   // Push-pull output
 8000556:	2301      	movs	r3, #1
 8000558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;           // No pull-up or pull-down resistors
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;  // Set low frequency for LEDs
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);       // Initialize GPIOB
 8000562:	f107 030c 	add.w	r3, r7, #12
 8000566:	4619      	mov	r1, r3
 8000568:	4826      	ldr	r0, [pc, #152]	@ (8000604 <main+0x128>)
 800056a:	f005 f927 	bl	80057bc <HAL_GPIO_Init>

  // Configure GPIO pin outputs for LED6 (PD8), LED5 (PD9), LED4 (PD10), LED3 (PD11), LED2 (PD12) , LED2 (PD13)
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13;
 800056e:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8000572:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	4823      	ldr	r0, [pc, #140]	@ (8000608 <main+0x12c>)
 800057c:	f005 f91e 	bl	80057bc <HAL_GPIO_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f85c 	bl	800063c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  WtrP = 0;
 8000584:	4b21      	ldr	r3, [pc, #132]	@ (800060c <main+0x130>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
  Rd_P = 0.0f;
 800058a:	4b21      	ldr	r3, [pc, #132]	@ (8000610 <main+0x134>)
 800058c:	f04f 0200 	mov.w	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
  Shift = 0.0f;  // Pitch shift amount (adjust as needed)
 8000592:	4b20      	ldr	r3, [pc, #128]	@ (8000614 <main+0x138>)
 8000594:	f04f 0200 	mov.w	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
  CrossFade = 1.0f;
 800059a:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <main+0x13c>)
 800059c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80005a0:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fa15 	bl	80009d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a6:	f000 f9eb 	bl	8000980 <MX_DMA_Init>
  MX_ADC3_Init();
 80005aa:	f000 f8b7 	bl	800071c <MX_ADC3_Init>
  MX_DAC1_Init();
 80005ae:	f000 f929 	bl	8000804 <MX_DAC1_Init>
  MX_TIM6_Init();
 80005b2:	f000 f9af 	bl	8000914 <MX_TIM6_Init>
  MX_TIM3_Init();
 80005b6:	f000 f957 	bl	8000868 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc3, adc_buffer, N);
 80005ba:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80005be:	4917      	ldr	r1, [pc, #92]	@ (800061c <main+0x140>)
 80005c0:	4817      	ldr	r0, [pc, #92]	@ (8000620 <main+0x144>)
 80005c2:	f001 fc29 	bl	8001e18 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, dac_buffer, N, DAC_ALIGN_12B_R);
 80005c6:	2300      	movs	r3, #0
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	f640 53ac 	movw	r3, #3500	@ 0xdac
 80005ce:	4a15      	ldr	r2, [pc, #84]	@ (8000624 <main+0x148>)
 80005d0:	2110      	movs	r1, #16
 80005d2:	4815      	ldr	r0, [pc, #84]	@ (8000628 <main+0x14c>)
 80005d4:	f002 fd74 	bl	80030c0 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 80005d8:	4814      	ldr	r0, [pc, #80]	@ (800062c <main+0x150>)
 80005da:	f008 fe79 	bl	80092d0 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80005de:	213c      	movs	r1, #60	@ 0x3c
 80005e0:	4813      	ldr	r0, [pc, #76]	@ (8000630 <main+0x154>)
 80005e2:	f008 ff99 	bl	8009518 <HAL_TIM_Encoder_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  semitoneShift = position;
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <main+0x158>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <main+0x15c>)
 80005ee:	601a      	str	r2, [r3, #0]
	  ControlLEDs(semitoneShift);
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <main+0x15c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fe8a 	bl	8000310 <ControlLEDs>
	  semitoneShift = position;
 80005fc:	bf00      	nop
 80005fe:	e7f2      	b.n	80005e6 <main+0x10a>
 8000600:	58024400 	.word	0x58024400
 8000604:	58020400 	.word	0x58020400
 8000608:	58020c00 	.word	0x58020c00
 800060c:	2400372c 	.word	0x2400372c
 8000610:	24003730 	.word	0x24003730
 8000614:	24003734 	.word	0x24003734
 8000618:	24003738 	.word	0x24003738
 800061c:	2400394c 	.word	0x2400394c
 8000620:	24003740 	.word	0x24003740
 8000624:	24006ffc 	.word	0x24006ffc
 8000628:	24003828 	.word	0x24003828
 800062c:	24003900 	.word	0x24003900
 8000630:	240038b4 	.word	0x240038b4
 8000634:	2400a6b2 	.word	0x2400a6b2
 8000638:	2400373c 	.word	0x2400373c

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b09c      	sub	sp, #112	@ 0x70
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000646:	224c      	movs	r2, #76	@ 0x4c
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f009 fc99 	bl	8009f82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2220      	movs	r2, #32
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f009 fc93 	bl	8009f82 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800065c:	2002      	movs	r0, #2
 800065e:	f005 fa6f 	bl	8005b40 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b2c      	ldr	r3, [pc, #176]	@ (8000718 <SystemClock_Config+0xdc>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	4a2b      	ldr	r2, [pc, #172]	@ (8000718 <SystemClock_Config+0xdc>)
 800066c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000670:	6193      	str	r3, [r2, #24]
 8000672:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <SystemClock_Config+0xdc>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800067e:	bf00      	nop
 8000680:	4b25      	ldr	r3, [pc, #148]	@ (8000718 <SystemClock_Config+0xdc>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800068c:	d1f8      	bne.n	8000680 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068e:	2302      	movs	r3, #2
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000692:	2301      	movs	r3, #1
 8000694:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000696:	2340      	movs	r3, #64	@ 0x40
 8000698:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069e:	2300      	movs	r3, #0
 80006a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 80006a6:	2322      	movs	r3, #34	@ 0x22
 80006a8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006b6:	230c      	movs	r3, #12
 80006b8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80006be:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80006c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006c8:	4618      	mov	r0, r3
 80006ca:	f005 fa73 	bl	8005bb4 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006d4:	f000 fb10 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	233f      	movs	r3, #63	@ 0x3f
 80006da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2303      	movs	r3, #3
 80006de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006e4:	2308      	movs	r3, #8
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006e8:	2340      	movs	r3, #64	@ 0x40
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ec:	2340      	movs	r3, #64	@ 0x40
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006f6:	2340      	movs	r3, #64	@ 0x40
 80006f8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2103      	movs	r1, #3
 80006fe:	4618      	mov	r0, r3
 8000700:	f005 fe32 	bl	8006368 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800070a:	f000 faf5 	bl	8000cf8 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3770      	adds	r7, #112	@ 0x70
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	58024800 	.word	0x58024800

0800071c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2224      	movs	r2, #36	@ 0x24
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f009 fc2a 	bl	8009f82 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800072e:	4b32      	ldr	r3, [pc, #200]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 8000730:	4a32      	ldr	r2, [pc, #200]	@ (80007fc <MX_ADC3_Init+0xe0>)
 8000732:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000734:	4b30      	ldr	r3, [pc, #192]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 8000736:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800073a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800073c:	4b2e      	ldr	r3, [pc, #184]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 800073e:	2208      	movs	r2, #8
 8000740:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000742:	4b2d      	ldr	r3, [pc, #180]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000748:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 8000750:	2204      	movs	r2, #4
 8000752:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000754:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 8000756:	2200      	movs	r2, #0
 8000758:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800075a:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 800075c:	2200      	movs	r2, #0
 800075e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000760:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 8000762:	2201      	movs	r2, #1
 8000764:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000766:	4b24      	ldr	r3, [pc, #144]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800076e:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 8000770:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000774:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000776:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 8000778:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800077c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800077e:	4b1e      	ldr	r3, [pc, #120]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 8000780:	2201      	movs	r2, #1
 8000782:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 8000788:	2200      	movs	r2, #0
 800078a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800078c:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 800078e:	2203      	movs	r2, #3
 8000790:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000792:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 8000794:	2200      	movs	r2, #0
 8000796:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 800079a:	2200      	movs	r2, #0
 800079c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800079e:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80007a6:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007ac:	4812      	ldr	r0, [pc, #72]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 80007ae:	f001 f92b 	bl	8001a08 <HAL_ADC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 80007b8:	f000 fa9e 	bl	8000cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007bc:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_ADC3_Init+0xe4>)
 80007be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c0:	2306      	movs	r3, #6
 80007c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ce:	2304      	movs	r3, #4
 80007d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <MX_ADC3_Init+0xdc>)
 80007e0:	f001 fc00 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 80007ea:	f000 fa85 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	@ 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	24003740 	.word	0x24003740
 80007fc:	58026000 	.word	0x58026000
 8000800:	2e300800 	.word	0x2e300800

08000804 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	@ 0x28
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2224      	movs	r2, #36	@ 0x24
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f009 fbb6 	bl	8009f82 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000816:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_DAC1_Init+0x5c>)
 8000818:	4a12      	ldr	r2, [pc, #72]	@ (8000864 <MX_DAC1_Init+0x60>)
 800081a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800081c:	4810      	ldr	r0, [pc, #64]	@ (8000860 <MX_DAC1_Init+0x5c>)
 800081e:	f002 fc2c 	bl	800307a <HAL_DAC_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000828:	f000 fa66 	bl	8000cf8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000830:	2316      	movs	r3, #22
 8000832:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2210      	movs	r2, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	@ (8000860 <MX_DAC1_Init+0x5c>)
 8000848:	f002 fd18 	bl	800327c <HAL_DAC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 fa51 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	@ 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	24003828 	.word	0x24003828
 8000864:	40007400 	.word	0x40007400

08000868 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	@ 0x30
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2224      	movs	r2, #36	@ 0x24
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f009 fb83 	bl	8009f82 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000886:	4b21      	ldr	r3, [pc, #132]	@ (800090c <MX_TIM3_Init+0xa4>)
 8000888:	4a21      	ldr	r2, [pc, #132]	@ (8000910 <MX_TIM3_Init+0xa8>)
 800088a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800088c:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <MX_TIM3_Init+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <MX_TIM3_Init+0xa4>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000898:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <MX_TIM3_Init+0xa4>)
 800089a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_TIM3_Init+0xa4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a6:	4b19      	ldr	r3, [pc, #100]	@ (800090c <MX_TIM3_Init+0xa4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008ac:	2303      	movs	r3, #3
 80008ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80008b0:	2302      	movs	r3, #2
 80008b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008b4:	2301      	movs	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008c4:	2301      	movs	r3, #1
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4619      	mov	r1, r3
 80008d6:	480d      	ldr	r0, [pc, #52]	@ (800090c <MX_TIM3_Init+0xa4>)
 80008d8:	f008 fd78 	bl	80093cc <HAL_TIM_Encoder_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008e2:	f000 fa09 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	@ (800090c <MX_TIM3_Init+0xa4>)
 80008f4:	f009 f8c6 	bl	8009a84 <HAL_TIMEx_MasterConfigSynchronization>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80008fe:	f000 f9fb 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	3730      	adds	r7, #48	@ 0x30
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	240038b4 	.word	0x240038b4
 8000910:	40000400 	.word	0x40000400

08000914 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_TIM6_Init+0x64>)
 8000926:	4a15      	ldr	r2, [pc, #84]	@ (800097c <MX_TIM6_Init+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800092a:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <MX_TIM6_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_TIM6_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2865;
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <MX_TIM6_Init+0x64>)
 8000938:	f640 3231 	movw	r2, #2865	@ 0xb31
 800093c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_TIM6_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000944:	480c      	ldr	r0, [pc, #48]	@ (8000978 <MX_TIM6_Init+0x64>)
 8000946:	f008 fc6b 	bl	8009220 <HAL_TIM_Base_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000950:	f000 f9d2 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000954:	2320      	movs	r3, #32
 8000956:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_TIM6_Init+0x64>)
 8000962:	f009 f88f 	bl	8009a84 <HAL_TIMEx_MasterConfigSynchronization>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800096c:	f000 f9c4 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	24003900 	.word	0x24003900
 800097c:	40001000 	.word	0x40001000

08000980 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_DMA_Init+0x4c>)
 8000988:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800098c:	4a0f      	ldr	r2, [pc, #60]	@ (80009cc <MX_DMA_Init+0x4c>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000996:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <MX_DMA_Init+0x4c>)
 8000998:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	200b      	movs	r0, #11
 80009aa:	f002 fb32 	bl	8003012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009ae:	200b      	movs	r0, #11
 80009b0:	f002 fb49 	bl	8003046 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	200c      	movs	r0, #12
 80009ba:	f002 fb2a 	bl	8003012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80009be:	200c      	movs	r0, #12
 80009c0:	f002 fb41 	bl	8003046 <HAL_NVIC_EnableIRQ>

}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	58024400 	.word	0x58024400

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <MX_GPIO_Init+0x50>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009dc:	4a10      	ldr	r2, [pc, #64]	@ (8000a20 <MX_GPIO_Init+0x50>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_GPIO_Init+0x50>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <MX_GPIO_Init+0x50>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fa:	4a09      	ldr	r2, [pc, #36]	@ (8000a20 <MX_GPIO_Init+0x50>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_GPIO_Init+0x50>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	58024400 	.word	0x58024400

08000a24 <Do_PitchShift>:

/* USER CODE BEGIN 4 */
// Pitch shifting function (downward only)
uint32_t Do_PitchShift(uint32_t sample) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	@ 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
    // Write the original sample to the ring buffer
    Buf[WtrP] = sample;
 8000a2c:	4b84      	ldr	r3, [pc, #528]	@ (8000c40 <Do_PitchShift+0x21c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	4984      	ldr	r1, [pc, #528]	@ (8000c44 <Do_PitchShift+0x220>)
 8000a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // Ensure semitoneShift is within the valid range (0 to MAX_DOWN_SHIFT)
    if (semitoneShift > MAX_DOWN_SHIFT) {
 8000a38:	4b83      	ldr	r3, [pc, #524]	@ (8000c48 <Do_PitchShift+0x224>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b0c      	cmp	r3, #12
 8000a3e:	d902      	bls.n	8000a46 <Do_PitchShift+0x22>
        semitoneShift = MAX_DOWN_SHIFT;
 8000a40:	4b81      	ldr	r3, [pc, #516]	@ (8000c48 <Do_PitchShift+0x224>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    }

    // Calculate the pitch shift ratio based on downward semitone shift
    float pitchShiftRatio = powf(2.0f, -(float)semitoneShift / 12.0f); // Only downshift
 8000a46:	4b80      	ldr	r3, [pc, #512]	@ (8000c48 <Do_PitchShift+0x224>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	ee07 3a90 	vmov	s15, r3
 8000a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a52:	eef1 7a67 	vneg.f32	s15, s15
 8000a56:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8000a5a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a5e:	eef0 0a47 	vmov.f32	s1, s14
 8000a62:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000a66:	f009 f8df 	bl	8009c28 <powf>
 8000a6a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

    // Update the read pointer based on the pitch shift ratio
    Rd_P += pitchShiftRatio;
 8000a6e:	4b77      	ldr	r3, [pc, #476]	@ (8000c4c <Do_PitchShift+0x228>)
 8000a70:	ed93 7a00 	vldr	s14, [r3]
 8000a74:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a7c:	4b73      	ldr	r3, [pc, #460]	@ (8000c4c <Do_PitchShift+0x228>)
 8000a7e:	edc3 7a00 	vstr	s15, [r3]

    // Clamp the read pointer to prevent overflow
    if (Rd_P >= BufSize) Rd_P -= BufSize;
 8000a82:	4b72      	ldr	r3, [pc, #456]	@ (8000c4c <Do_PitchShift+0x228>)
 8000a84:	edd3 7a00 	vldr	s15, [r3]
 8000a88:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8000c50 <Do_PitchShift+0x22c>
 8000a8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a94:	db09      	blt.n	8000aaa <Do_PitchShift+0x86>
 8000a96:	4b6d      	ldr	r3, [pc, #436]	@ (8000c4c <Do_PitchShift+0x228>)
 8000a98:	edd3 7a00 	vldr	s15, [r3]
 8000a9c:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8000c50 <Do_PitchShift+0x22c>
 8000aa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000aa4:	4b69      	ldr	r3, [pc, #420]	@ (8000c4c <Do_PitchShift+0x228>)
 8000aa6:	edc3 7a00 	vstr	s15, [r3]

    // Compute integer read pointers for pitch-shifting (0° and 180° phases)
    int RdPtr_Int = (int)Rd_P % BufSize;             // Main read pointer
 8000aaa:	4b68      	ldr	r3, [pc, #416]	@ (8000c4c <Do_PitchShift+0x228>)
 8000aac:	edd3 7a00 	vldr	s15, [r3]
 8000ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ab4:	ee17 3a90 	vmov	r3, s15
 8000ab8:	4a66      	ldr	r2, [pc, #408]	@ (8000c54 <Do_PitchShift+0x230>)
 8000aba:	fb82 1203 	smull	r1, r2, r2, r3
 8000abe:	1251      	asrs	r1, r2, #9
 8000ac0:	17da      	asrs	r2, r3, #31
 8000ac2:	1a8a      	subs	r2, r1, r2
 8000ac4:	f640 51ac 	movw	r1, #3500	@ 0xdac
 8000ac8:	fb01 f202 	mul.w	r2, r1, r2
 8000acc:	1a9b      	subs	r3, r3, r2
 8000ace:	623b      	str	r3, [r7, #32]
    int RdPtr_Int2 = (RdPtr_Int + (BufSize / 2)) % BufSize; // 180° phase pointer
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	f203 63d6 	addw	r3, r3, #1750	@ 0x6d6
 8000ad6:	4a5f      	ldr	r2, [pc, #380]	@ (8000c54 <Do_PitchShift+0x230>)
 8000ad8:	fb82 1203 	smull	r1, r2, r2, r3
 8000adc:	1251      	asrs	r1, r2, #9
 8000ade:	17da      	asrs	r2, r3, #31
 8000ae0:	1a8a      	subs	r2, r1, r2
 8000ae2:	f640 51ac 	movw	r1, #3500	@ 0xdac
 8000ae6:	fb01 f202 	mul.w	r2, r1, r2
 8000aea:	1a9b      	subs	r3, r3, r2
 8000aec:	61fb      	str	r3, [r7, #28]

    // Read the two samples from the buffer
    float Rd0 = (float)Buf[RdPtr_Int];
 8000aee:	4a55      	ldr	r2, [pc, #340]	@ (8000c44 <Do_PitchShift+0x220>)
 8000af0:	6a3b      	ldr	r3, [r7, #32]
 8000af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af6:	ee07 3a90 	vmov	s15, r3
 8000afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000afe:	edc7 7a06 	vstr	s15, [r7, #24]
    float Rd1 = (float)Buf[RdPtr_Int2];
 8000b02:	4a50      	ldr	r2, [pc, #320]	@ (8000c44 <Do_PitchShift+0x220>)
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b12:	edc7 7a05 	vstr	s15, [r7, #20]

    // Cross-fade between two read pointers if overlap occurs
    if (Overlap >= (WtrP - RdPtr_Int) && (WtrP - RdPtr_Int) >= 0 && Shift != 1.0f) {
 8000b16:	4b4a      	ldr	r3, [pc, #296]	@ (8000c40 <Do_PitchShift+0x21c>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	6a3b      	ldr	r3, [r7, #32]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8000b22:	dc21      	bgt.n	8000b68 <Do_PitchShift+0x144>
 8000b24:	4b46      	ldr	r3, [pc, #280]	@ (8000c40 <Do_PitchShift+0x21c>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	6a3b      	ldr	r3, [r7, #32]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db1b      	blt.n	8000b68 <Do_PitchShift+0x144>
 8000b30:	4b49      	ldr	r3, [pc, #292]	@ (8000c58 <Do_PitchShift+0x234>)
 8000b32:	edd3 7a00 	vldr	s15, [r3]
 8000b36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b3a:	eef4 7a47 	vcmp.f32	s15, s14
 8000b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b42:	d011      	beq.n	8000b68 <Do_PitchShift+0x144>
        int rel = WtrP - RdPtr_Int;
 8000b44:	4b3e      	ldr	r3, [pc, #248]	@ (8000c40 <Do_PitchShift+0x21c>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	6a3b      	ldr	r3, [r7, #32]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	613b      	str	r3, [r7, #16]
        CrossFade = ((float)rel) / (float)Overlap;
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	ee07 3a90 	vmov	s15, r3
 8000b54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b58:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8000c5c <Do_PitchShift+0x238>
 8000b5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b60:	4b3f      	ldr	r3, [pc, #252]	@ (8000c60 <Do_PitchShift+0x23c>)
 8000b62:	edc3 7a00 	vstr	s15, [r3]
    if (Overlap >= (WtrP - RdPtr_Int) && (WtrP - RdPtr_Int) >= 0 && Shift != 1.0f) {
 8000b66:	e008      	b.n	8000b7a <Do_PitchShift+0x156>
    } else if (WtrP - RdPtr_Int == 0) {
 8000b68:	4b35      	ldr	r3, [pc, #212]	@ (8000c40 <Do_PitchShift+0x21c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	6a3a      	ldr	r2, [r7, #32]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d103      	bne.n	8000b7a <Do_PitchShift+0x156>
        CrossFade = 0.0f;
 8000b72:	4b3b      	ldr	r3, [pc, #236]	@ (8000c60 <Do_PitchShift+0x23c>)
 8000b74:	f04f 0200 	mov.w	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
    }

    if (Overlap >= (WtrP - RdPtr_Int2) && (WtrP - RdPtr_Int2) >= 0 && Shift != 1.0f) {
 8000b7a:	4b31      	ldr	r3, [pc, #196]	@ (8000c40 <Do_PitchShift+0x21c>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8000b86:	dc25      	bgt.n	8000bd4 <Do_PitchShift+0x1b0>
 8000b88:	4b2d      	ldr	r3, [pc, #180]	@ (8000c40 <Do_PitchShift+0x21c>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db1f      	blt.n	8000bd4 <Do_PitchShift+0x1b0>
 8000b94:	4b30      	ldr	r3, [pc, #192]	@ (8000c58 <Do_PitchShift+0x234>)
 8000b96:	edd3 7a00 	vldr	s15, [r3]
 8000b9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b9e:	eef4 7a47 	vcmp.f32	s15, s14
 8000ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba6:	d015      	beq.n	8000bd4 <Do_PitchShift+0x1b0>
        int rel = WtrP - RdPtr_Int2;
 8000ba8:	4b25      	ldr	r3, [pc, #148]	@ (8000c40 <Do_PitchShift+0x21c>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	60fb      	str	r3, [r7, #12]
        CrossFade = 1.0f - ((float)rel) / (float)Overlap;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	ee07 3a90 	vmov	s15, r3
 8000bb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bbc:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8000c5c <Do_PitchShift+0x238>
 8000bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bcc:	4b24      	ldr	r3, [pc, #144]	@ (8000c60 <Do_PitchShift+0x23c>)
 8000bce:	edc3 7a00 	vstr	s15, [r3]
    if (Overlap >= (WtrP - RdPtr_Int2) && (WtrP - RdPtr_Int2) >= 0 && Shift != 1.0f) {
 8000bd2:	e008      	b.n	8000be6 <Do_PitchShift+0x1c2>
    } else if (WtrP - RdPtr_Int2 == 0) {
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <Do_PitchShift+0x21c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	69fa      	ldr	r2, [r7, #28]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d103      	bne.n	8000be6 <Do_PitchShift+0x1c2>
        CrossFade = 1.0f;
 8000bde:	4b20      	ldr	r3, [pc, #128]	@ (8000c60 <Do_PitchShift+0x23c>)
 8000be0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000be4:	601a      	str	r2, [r3, #0]
    }

    // Perform cross-fading and combine the two read samples
    sample = (uint32_t)(Rd0 * CrossFade + Rd1 * (1.0f - CrossFade));
 8000be6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <Do_PitchShift+0x23c>)
 8000be8:	ed93 7a00 	vldr	s14, [r3]
 8000bec:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <Do_PitchShift+0x23c>)
 8000bf6:	edd3 7a00 	vldr	s15, [r3]
 8000bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000bfe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000c02:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c12:	ee17 3a90 	vmov	r3, s15
 8000c16:	607b      	str	r3, [r7, #4]

    // Increment the write pointer and handle wrap-around
    WtrP++;
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <Do_PitchShift+0x21c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	4a08      	ldr	r2, [pc, #32]	@ (8000c40 <Do_PitchShift+0x21c>)
 8000c20:	6013      	str	r3, [r2, #0]
    if (WtrP == BufSize) WtrP = 0;
 8000c22:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <Do_PitchShift+0x21c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d102      	bne.n	8000c34 <Do_PitchShift+0x210>
 8000c2e:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <Do_PitchShift+0x21c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]

    return sample;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3728      	adds	r7, #40	@ 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2400372c 	.word	0x2400372c
 8000c44:	2400007c 	.word	0x2400007c
 8000c48:	2400373c 	.word	0x2400373c
 8000c4c:	24003730 	.word	0x24003730
 8000c50:	455ac000 	.word	0x455ac000
 8000c54:	2572fb07 	.word	0x2572fb07
 8000c58:	24003734 	.word	0x24003734
 8000c5c:	43af0000 	.word	0x43af0000
 8000c60:	24003738 	.word	0x24003738

08000c64 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	for(int n = 0; n < halfN; n++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	e00e      	b.n	8000c90 <HAL_ADC_ConvHalfCpltCallback+0x2c>
	{
		dac_buffer[n] = Do_PitchShift(adc_buffer[n]);
 8000c72:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca4 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fed2 	bl	8000a24 <Do_PitchShift>
 8000c80:	4602      	mov	r2, r0
 8000c82:	4909      	ldr	r1, [pc, #36]	@ (8000ca8 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int n = 0; n < halfN; n++)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8000c96:	4293      	cmp	r3, r2
 8000c98:	ddeb      	ble.n	8000c72 <HAL_ADC_ConvHalfCpltCallback+0xe>
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2400394c 	.word	0x2400394c
 8000ca8:	24006ffc 	.word	0x24006ffc

08000cac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	for(int n = halfN; n < N; n++)
 8000cb4:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	e00e      	b.n	8000cda <HAL_ADC_ConvCpltCallback+0x2e>
	{
		dac_buffer[n] =  Do_PitchShift(adc_buffer[n]);
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf0 <HAL_ADC_ConvCpltCallback+0x44>)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fead 	bl	8000a24 <Do_PitchShift>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	4909      	ldr	r1, [pc, #36]	@ (8000cf4 <HAL_ADC_ConvCpltCallback+0x48>)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int n = halfN; n < N; n++)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	ddeb      	ble.n	8000cbc <HAL_ADC_ConvCpltCallback+0x10>
	}
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2400394c 	.word	0x2400394c
 8000cf4:	24006ffc 	.word	0x24006ffc

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <Error_Handler+0x8>

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <HAL_MspInit+0x5c>)
 8000d0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d10:	4a13      	ldr	r2, [pc, #76]	@ (8000d60 <HAL_MspInit+0x5c>)
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <HAL_MspInit+0x5c>)
 8000d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8000d28:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <HAL_MspInit+0x5c>)
 8000d2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d60 <HAL_MspInit+0x5c>)
 8000d30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d34:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d38:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <HAL_MspInit+0x5c>)
 8000d3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 fb46 	bl	80013d8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000d4c:	f000 fb6c 	bl	8001428 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 fb55 	bl	8001400 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	58024400 	.word	0x58024400

08000d64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0b8      	sub	sp, #224	@ 0xe0
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	22b8      	movs	r2, #184	@ 0xb8
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f009 f8fc 	bl	8009f82 <memset>
  if(hadc->Instance==ADC3)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a44      	ldr	r2, [pc, #272]	@ (8000ea0 <HAL_ADC_MspInit+0x13c>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	f040 8081 	bne.w	8000e98 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d96:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d9a:	f04f 0300 	mov.w	r3, #0
 8000d9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000da2:	2304      	movs	r3, #4
 8000da4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000da6:	230c      	movs	r3, #12
 8000da8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000daa:	2304      	movs	r3, #4
 8000dac:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000db6:	23c0      	movs	r3, #192	@ 0xc0
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f005 fe41 	bl	8006a54 <HAL_RCCEx_PeriphCLKConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000dd8:	f7ff ff8e 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ddc:	4b31      	ldr	r3, [pc, #196]	@ (8000ea4 <HAL_ADC_MspInit+0x140>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de2:	4a30      	ldr	r2, [pc, #192]	@ (8000ea4 <HAL_ADC_MspInit+0x140>)
 8000de4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000de8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea4 <HAL_ADC_MspInit+0x140>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea4 <HAL_ADC_MspInit+0x140>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e00:	4a28      	ldr	r2, [pc, #160]	@ (8000ea4 <HAL_ADC_MspInit+0x140>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ea4 <HAL_ADC_MspInit+0x140>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC1     ------> ADC3_INP11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481d      	ldr	r0, [pc, #116]	@ (8000ea8 <HAL_ADC_MspInit+0x144>)
 8000e32:	f004 fcc3 	bl	80057bc <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8000e36:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <HAL_ADC_MspInit+0x148>)
 8000e38:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb0 <HAL_ADC_MspInit+0x14c>)
 8000e3a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <HAL_ADC_MspInit+0x148>)
 8000e3e:	2273      	movs	r2, #115	@ 0x73
 8000e40:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <HAL_ADC_MspInit+0x148>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e48:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <HAL_ADC_MspInit+0x148>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <HAL_ADC_MspInit+0x148>)
 8000e50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e54:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <HAL_ADC_MspInit+0x148>)
 8000e58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e5c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <HAL_ADC_MspInit+0x148>)
 8000e60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e64:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <HAL_ADC_MspInit+0x148>)
 8000e68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e6c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <HAL_ADC_MspInit+0x148>)
 8000e70:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e74:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <HAL_ADC_MspInit+0x148>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000e7c:	480b      	ldr	r0, [pc, #44]	@ (8000eac <HAL_ADC_MspInit+0x148>)
 8000e7e:	f002 fbc9 	bl	8003614 <HAL_DMA_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8000e88:	f7ff ff36 	bl	8000cf8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <HAL_ADC_MspInit+0x148>)
 8000e90:	659a      	str	r2, [r3, #88]	@ 0x58
 8000e92:	4a06      	ldr	r2, [pc, #24]	@ (8000eac <HAL_ADC_MspInit+0x148>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000e98:	bf00      	nop
 8000e9a:	37e0      	adds	r7, #224	@ 0xe0
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	58026000 	.word	0x58026000
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	58020800 	.word	0x58020800
 8000eac:	240037b0 	.word	0x240037b0
 8000eb0:	40020010 	.word	0x40020010

08000eb4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	@ 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a30      	ldr	r2, [pc, #192]	@ (8000f94 <HAL_DAC_MspInit+0xe0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d15a      	bne.n	8000f8c <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000ed6:	4b30      	ldr	r3, [pc, #192]	@ (8000f98 <HAL_DAC_MspInit+0xe4>)
 8000ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000edc:	4a2e      	ldr	r2, [pc, #184]	@ (8000f98 <HAL_DAC_MspInit+0xe4>)
 8000ede:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000ee2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <HAL_DAC_MspInit+0xe4>)
 8000ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <HAL_DAC_MspInit+0xe4>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efa:	4a27      	ldr	r2, [pc, #156]	@ (8000f98 <HAL_DAC_MspInit+0xe4>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f04:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <HAL_DAC_MspInit+0xe4>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f12:	2320      	movs	r3, #32
 8000f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f16:	2303      	movs	r3, #3
 8000f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	481d      	ldr	r0, [pc, #116]	@ (8000f9c <HAL_DAC_MspInit+0xe8>)
 8000f26:	f004 fc49 	bl	80057bc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <HAL_DAC_MspInit+0xec>)
 8000f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa4 <HAL_DAC_MspInit+0xf0>)
 8000f2e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <HAL_DAC_MspInit+0xec>)
 8000f32:	2244      	movs	r2, #68	@ 0x44
 8000f34:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <HAL_DAC_MspInit+0xec>)
 8000f38:	2240      	movs	r2, #64	@ 0x40
 8000f3a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <HAL_DAC_MspInit+0xec>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000f42:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <HAL_DAC_MspInit+0xec>)
 8000f44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f48:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <HAL_DAC_MspInit+0xec>)
 8000f4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f50:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f52:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <HAL_DAC_MspInit+0xec>)
 8000f54:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f58:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <HAL_DAC_MspInit+0xec>)
 8000f5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f60:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f62:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <HAL_DAC_MspInit+0xec>)
 8000f64:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f68:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <HAL_DAC_MspInit+0xec>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8000f70:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <HAL_DAC_MspInit+0xec>)
 8000f72:	f002 fb4f 	bl	8003614 <HAL_DMA_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8000f7c:	f7ff febc 	bl	8000cf8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a07      	ldr	r2, [pc, #28]	@ (8000fa0 <HAL_DAC_MspInit+0xec>)
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	4a06      	ldr	r2, [pc, #24]	@ (8000fa0 <HAL_DAC_MspInit+0xec>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	@ 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40007400 	.word	0x40007400
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	58020000 	.word	0x58020000
 8000fa0:	2400383c 	.word	0x2400383c
 8000fa4:	40020028 	.word	0x40020028

08000fa8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8001040 <HAL_TIM_Encoder_MspInit+0x98>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d135      	bne.n	8001036 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fca:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8001044 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fda:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fee:	4a15      	ldr	r2, [pc, #84]	@ (8001044 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001006:	23c0      	movs	r3, #192	@ 0xc0
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001016:	2302      	movs	r3, #2
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	4809      	ldr	r0, [pc, #36]	@ (8001048 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001022:	f004 fbcb 	bl	80057bc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	201d      	movs	r0, #29
 800102c:	f001 fff1 	bl	8003012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001030:	201d      	movs	r0, #29
 8001032:	f002 f808 	bl	8003046 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	@ 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40000400 	.word	0x40000400
 8001044:	58024400 	.word	0x58024400
 8001048:	58020000 	.word	0x58020000

0800104c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0b      	ldr	r2, [pc, #44]	@ (8001088 <HAL_TIM_Base_MspInit+0x3c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10e      	bne.n	800107c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <HAL_TIM_Base_MspInit+0x40>)
 8001060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001064:	4a09      	ldr	r2, [pc, #36]	@ (800108c <HAL_TIM_Base_MspInit+0x40>)
 8001066:	f043 0310 	orr.w	r3, r3, #16
 800106a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <HAL_TIM_Base_MspInit+0x40>)
 8001070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001074:	f003 0310 	and.w	r3, r3, #16
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	40001000 	.word	0x40001000
 800108c:	58024400 	.word	0x58024400

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <NMI_Handler+0x4>

08001098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <MemManage_Handler+0x4>

080010a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 80010e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <SysTick_Handler+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001124 <SysTick_Handler+0x40>)
 80010f0:	6013      	str	r3, [r2, #0]

	if (indx == 1000)
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <SysTick_Handler+0x40>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010fa:	d10f      	bne.n	800111c <SysTick_Handler+0x38>
	{
		speed = ((position - oldpos)*2);  // speed in clicks/sec
 80010fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <SysTick_Handler+0x44>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <SysTick_Handler+0x48>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4a09      	ldr	r2, [pc, #36]	@ (8001130 <SysTick_Handler+0x4c>)
 800110c:	6013      	str	r3, [r2, #0]
		oldpos = position;
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <SysTick_Handler+0x44>)
 8001110:	881a      	ldrh	r2, [r3, #0]
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <SysTick_Handler+0x48>)
 8001114:	801a      	strh	r2, [r3, #0]
		indx = 0;
 8001116:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <SysTick_Handler+0x40>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111c:	f000 f93c 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2400a6bc 	.word	0x2400a6bc
 8001128:	2400a6b2 	.word	0x2400a6b2
 800112c:	2400a6b8 	.word	0x2400a6b8
 8001130:	2400a6b4 	.word	0x2400a6b4

08001134 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001138:	4802      	ldr	r0, [pc, #8]	@ (8001144 <DMA1_Stream0_IRQHandler+0x10>)
 800113a:	f003 f82d 	bl	8004198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	240037b0 	.word	0x240037b0

08001148 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <DMA1_Stream1_IRQHandler+0x10>)
 800114e:	f003 f823 	bl	8004198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2400383c 	.word	0x2400383c

0800115c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <TIM3_IRQHandler+0x10>)
 8001162:	f008 fa87 	bl	8009674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	240038b4 	.word	0x240038b4

08001170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001174:	4b32      	ldr	r3, [pc, #200]	@ (8001240 <SystemInit+0xd0>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117a:	4a31      	ldr	r2, [pc, #196]	@ (8001240 <SystemInit+0xd0>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001184:	4b2f      	ldr	r3, [pc, #188]	@ (8001244 <SystemInit+0xd4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	2b06      	cmp	r3, #6
 800118e:	d807      	bhi.n	80011a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001190:	4b2c      	ldr	r3, [pc, #176]	@ (8001244 <SystemInit+0xd4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f023 030f 	bic.w	r3, r3, #15
 8001198:	4a2a      	ldr	r2, [pc, #168]	@ (8001244 <SystemInit+0xd4>)
 800119a:	f043 0307 	orr.w	r3, r3, #7
 800119e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011a0:	4b29      	ldr	r3, [pc, #164]	@ (8001248 <SystemInit+0xd8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a28      	ldr	r2, [pc, #160]	@ (8001248 <SystemInit+0xd8>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011ac:	4b26      	ldr	r3, [pc, #152]	@ (8001248 <SystemInit+0xd8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011b2:	4b25      	ldr	r3, [pc, #148]	@ (8001248 <SystemInit+0xd8>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4924      	ldr	r1, [pc, #144]	@ (8001248 <SystemInit+0xd8>)
 80011b8:	4b24      	ldr	r3, [pc, #144]	@ (800124c <SystemInit+0xdc>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011be:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <SystemInit+0xd4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d007      	beq.n	80011da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <SystemInit+0xd4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 030f 	bic.w	r3, r3, #15
 80011d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001244 <SystemInit+0xd4>)
 80011d4:	f043 0307 	orr.w	r3, r3, #7
 80011d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011da:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <SystemInit+0xd8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011e0:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <SystemInit+0xd8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011e6:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <SystemInit+0xd8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011ec:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <SystemInit+0xd8>)
 80011ee:	4a18      	ldr	r2, [pc, #96]	@ (8001250 <SystemInit+0xe0>)
 80011f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <SystemInit+0xd8>)
 80011f4:	4a17      	ldr	r2, [pc, #92]	@ (8001254 <SystemInit+0xe4>)
 80011f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011f8:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <SystemInit+0xd8>)
 80011fa:	4a17      	ldr	r2, [pc, #92]	@ (8001258 <SystemInit+0xe8>)
 80011fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011fe:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <SystemInit+0xd8>)
 8001200:	2200      	movs	r2, #0
 8001202:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001204:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <SystemInit+0xd8>)
 8001206:	4a14      	ldr	r2, [pc, #80]	@ (8001258 <SystemInit+0xe8>)
 8001208:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800120a:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <SystemInit+0xd8>)
 800120c:	2200      	movs	r2, #0
 800120e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001210:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <SystemInit+0xd8>)
 8001212:	4a11      	ldr	r2, [pc, #68]	@ (8001258 <SystemInit+0xe8>)
 8001214:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001216:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <SystemInit+0xd8>)
 8001218:	2200      	movs	r2, #0
 800121a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800121c:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <SystemInit+0xd8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a09      	ldr	r2, [pc, #36]	@ (8001248 <SystemInit+0xd8>)
 8001222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001226:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <SystemInit+0xd8>)
 800122a:	2200      	movs	r2, #0
 800122c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <SystemInit+0xec>)
 8001230:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001234:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00
 8001244:	52002000 	.word	0x52002000
 8001248:	58024400 	.word	0x58024400
 800124c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001250:	02020200 	.word	0x02020200
 8001254:	01ff0000 	.word	0x01ff0000
 8001258:	01010280 	.word	0x01010280
 800125c:	52004000 	.word	0x52004000

08001260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001298 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001264:	f7ff ff84 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001268:	480c      	ldr	r0, [pc, #48]	@ (800129c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800126a:	490d      	ldr	r1, [pc, #52]	@ (80012a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800126c:	4a0d      	ldr	r2, [pc, #52]	@ (80012a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001280:	4c0a      	ldr	r4, [pc, #40]	@ (80012ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128e:	f008 fe87 	bl	8009fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001292:	f7ff f923 	bl	80004dc <main>
  bx  lr
 8001296:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001298:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800129c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012a0:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80012a4:	0800a290 	.word	0x0800a290
  ldr r2, =_sbss
 80012a8:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80012ac:	2400a7fc 	.word	0x2400a7fc

080012b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC3_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ba:	2003      	movs	r0, #3
 80012bc:	f001 fe9e 	bl	8002ffc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012c0:	f005 fa08 	bl	80066d4 <HAL_RCC_GetSysClockFreq>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <HAL_Init+0x68>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	4913      	ldr	r1, [pc, #76]	@ (8001320 <HAL_Init+0x6c>)
 80012d2:	5ccb      	ldrb	r3, [r1, r3]
 80012d4:	f003 031f 	and.w	r3, r3, #31
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
 80012dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <HAL_Init+0x68>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001320 <HAL_Init+0x6c>)
 80012e8:	5cd3      	ldrb	r3, [r2, r3]
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	fa22 f303 	lsr.w	r3, r2, r3
 80012f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001324 <HAL_Init+0x70>)
 80012f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001328 <HAL_Init+0x74>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fe:	200f      	movs	r0, #15
 8001300:	f000 f814 	bl	800132c <HAL_InitTick>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e002      	b.n	8001314 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800130e:	f7ff fcf9 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	58024400 	.word	0x58024400
 8001320:	0800a000 	.word	0x0800a000
 8001324:	24000004 	.word	0x24000004
 8001328:	24000000 	.word	0x24000000

0800132c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_InitTick+0x60>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e021      	b.n	8001384 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <HAL_InitTick+0x64>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <HAL_InitTick+0x60>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fe83 	bl	8003062 <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f001 fe4d 	bl	8003012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	@ (8001394 <HAL_InitTick+0x68>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	2400000c 	.word	0x2400000c
 8001390:	24000000 	.word	0x24000000
 8001394:	24000008 	.word	0x24000008

08001398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_IncTick+0x20>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_IncTick+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <HAL_IncTick+0x24>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2400000c 	.word	0x2400000c
 80013bc:	2400a6c0 	.word	0x2400a6c0

080013c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b03      	ldr	r3, [pc, #12]	@ (80013d4 <HAL_GetTick+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	2400a6c0 	.word	0x2400a6c0

080013d8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80013e8:	4904      	ldr	r1, [pc, #16]	@ (80013fc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	58003c00 	.word	0x58003c00

08001400 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f023 0202 	bic.w	r2, r3, #2
 8001410:	4904      	ldr	r1, [pc, #16]	@ (8001424 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4313      	orrs	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	58003c00 	.word	0x58003c00

08001428 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800142e:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a0e      	ldr	r2, [pc, #56]	@ (800146c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800143a:	f7ff ffc1 	bl	80013c0 <HAL_GetTick>
 800143e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001440:	e008      	b.n	8001454 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001442:	f7ff ffbd 	bl	80013c0 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b0a      	cmp	r3, #10
 800144e:	d901      	bls.n	8001454 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e006      	b.n	8001462 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	58003c00 	.word	0x58003c00

08001470 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	609a      	str	r2, [r3, #8]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	609a      	str	r2, [r3, #8]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3360      	adds	r3, #96	@ 0x60
 80014ea:	461a      	mov	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4a10      	ldr	r2, [pc, #64]	@ (8001538 <LL_ADC_SetOffset+0x60>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d10b      	bne.n	8001514 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	4313      	orrs	r3, r2
 800150a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001512:	e00b      	b.n	800152c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	430b      	orrs	r3, r1
 8001526:	431a      	orrs	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	371c      	adds	r7, #28
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	58026000 	.word	0x58026000

0800153c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3360      	adds	r3, #96	@ 0x60
 800154a:	461a      	mov	r2, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	f003 031f 	and.w	r3, r3, #31
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	431a      	orrs	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	611a      	str	r2, [r3, #16]
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4a0c      	ldr	r2, [pc, #48]	@ (80015dc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d00e      	beq.n	80015ce <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3360      	adds	r3, #96	@ 0x60
 80015b4:	461a      	mov	r2, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	431a      	orrs	r2, r3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	601a      	str	r2, [r3, #0]
  }
}
 80015ce:	bf00      	nop
 80015d0:	371c      	adds	r7, #28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	58026000 	.word	0x58026000

080015e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001620 <LL_ADC_SetOffsetSaturation+0x40>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d10e      	bne.n	8001612 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3360      	adds	r3, #96	@ 0x60
 80015f8:	461a      	mov	r2, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	431a      	orrs	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001612:	bf00      	nop
 8001614:	371c      	adds	r7, #28
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	58026000 	.word	0x58026000

08001624 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4a0c      	ldr	r2, [pc, #48]	@ (8001664 <LL_ADC_SetOffsetSign+0x40>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d10e      	bne.n	8001656 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3360      	adds	r3, #96	@ 0x60
 800163c:	461a      	mov	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	431a      	orrs	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001656:	bf00      	nop
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	58026000 	.word	0x58026000

08001668 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3360      	adds	r3, #96	@ 0x60
 8001678:	461a      	mov	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4a0c      	ldr	r2, [pc, #48]	@ (80016b8 <LL_ADC_SetOffsetState+0x50>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d108      	bne.n	800169c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	431a      	orrs	r2, r3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800169a:	e007      	b.n	80016ac <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	58026000 	.word	0x58026000

080016bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b087      	sub	sp, #28
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3330      	adds	r3, #48	@ 0x30
 80016f2:	461a      	mov	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	0a1b      	lsrs	r3, r3, #8
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	4413      	add	r3, r2
 8001700:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	211f      	movs	r1, #31
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	401a      	ands	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	0e9b      	lsrs	r3, r3, #26
 800171a:	f003 011f 	and.w	r1, r3, #31
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	431a      	orrs	r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800172e:	bf00      	nop
 8001730:	371c      	adds	r7, #28
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f023 0203 	bic.w	r2, r3, #3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	60da      	str	r2, [r3, #12]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	60da      	str	r2, [r3, #12]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a08      	ldr	r2, [pc, #32]	@ (80017b0 <LL_ADC_REG_SetDMATransferMode+0x30>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d107      	bne.n	80017a2 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f023 0203 	bic.w	r2, r3, #3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60da      	str	r2, [r3, #12]
  }
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	58026000 	.word	0x58026000

080017b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3314      	adds	r3, #20
 80017c4:	461a      	mov	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	0e5b      	lsrs	r3, r3, #25
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	4413      	add	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	0d1b      	lsrs	r3, r3, #20
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	2107      	movs	r1, #7
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	401a      	ands	r2, r3
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	0d1b      	lsrs	r3, r3, #20
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	431a      	orrs	r2, r3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017fe:	bf00      	nop
 8001800:	371c      	adds	r7, #28
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4a1a      	ldr	r2, [pc, #104]	@ (8001884 <LL_ADC_SetChannelSingleDiff+0x78>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d115      	bne.n	800184c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800182c:	43db      	mvns	r3, r3
 800182e:	401a      	ands	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0318 	and.w	r3, r3, #24
 8001836:	4914      	ldr	r1, [pc, #80]	@ (8001888 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001838:	40d9      	lsrs	r1, r3
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	400b      	ands	r3, r1
 800183e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001842:	431a      	orrs	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800184a:	e014      	b.n	8001876 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001858:	43db      	mvns	r3, r3
 800185a:	401a      	ands	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0318 	and.w	r3, r3, #24
 8001862:	4909      	ldr	r1, [pc, #36]	@ (8001888 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001864:	40d9      	lsrs	r1, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	400b      	ands	r3, r1
 800186a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800186e:	431a      	orrs	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	58026000 	.word	0x58026000
 8001888:	000fffff 	.word	0x000fffff

0800188c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 031f 	and.w	r3, r3, #31
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6093      	str	r3, [r2, #8]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	5fffffc0 	.word	0x5fffffc0

080018cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018e0:	d101      	bne.n	80018e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <LL_ADC_EnableInternalRegulator+0x24>)
 8001902:	4013      	ands	r3, r2
 8001904:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	6fffffc0 	.word	0x6fffffc0

0800191c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001930:	d101      	bne.n	8001936 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <LL_ADC_Enable+0x24>)
 8001952:	4013      	ands	r3, r2
 8001954:	f043 0201 	orr.w	r2, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	7fffffc0 	.word	0x7fffffc0

0800196c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <LL_ADC_IsEnabled+0x18>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <LL_ADC_IsEnabled+0x1a>
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <LL_ADC_REG_StartConversion+0x24>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	f043 0204 	orr.w	r2, r3, #4
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	7fffffc0 	.word	0x7fffffc0

080019bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d101      	bne.n	80019d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d101      	bne.n	80019fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b089      	sub	sp, #36	@ 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e1ee      	b.n	8001e00 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff f997 	bl	8000d64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff3f 	bl	80018cc <LL_ADC_IsDeepPowerDownEnabled>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d004      	beq.n	8001a5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff25 	bl	80018a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff ff5a 	bl	800191c <LL_ADC_IsInternalRegulatorEnabled>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d114      	bne.n	8001a98 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff3e 	bl	80018f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a78:	4b8e      	ldr	r3, [pc, #568]	@ (8001cb4 <HAL_ADC_Init+0x2ac>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	099b      	lsrs	r3, r3, #6
 8001a7e:	4a8e      	ldr	r2, [pc, #568]	@ (8001cb8 <HAL_ADC_Init+0x2b0>)
 8001a80:	fba2 2303 	umull	r2, r3, r2, r3
 8001a84:	099b      	lsrs	r3, r3, #6
 8001a86:	3301      	adds	r3, #1
 8001a88:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a8a:	e002      	b.n	8001a92 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f9      	bne.n	8001a8c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff3d 	bl	800191c <LL_ADC_IsInternalRegulatorEnabled>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10d      	bne.n	8001ac4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aac:	f043 0210 	orr.w	r2, r3, #16
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ab8:	f043 0201 	orr.w	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff77 	bl	80019bc <LL_ADC_REG_IsConversionOngoing>
 8001ace:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f040 8188 	bne.w	8001dee <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f040 8184 	bne.w	8001dee <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aea:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001aee:	f043 0202 	orr.w	r2, r3, #2
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff36 	bl	800196c <LL_ADC_IsEnabled>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d136      	bne.n	8001b74 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a6c      	ldr	r2, [pc, #432]	@ (8001cbc <HAL_ADC_Init+0x2b4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d004      	beq.n	8001b1a <HAL_ADC_Init+0x112>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a6a      	ldr	r2, [pc, #424]	@ (8001cc0 <HAL_ADC_Init+0x2b8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10e      	bne.n	8001b38 <HAL_ADC_Init+0x130>
 8001b1a:	4868      	ldr	r0, [pc, #416]	@ (8001cbc <HAL_ADC_Init+0x2b4>)
 8001b1c:	f7ff ff26 	bl	800196c <LL_ADC_IsEnabled>
 8001b20:	4604      	mov	r4, r0
 8001b22:	4867      	ldr	r0, [pc, #412]	@ (8001cc0 <HAL_ADC_Init+0x2b8>)
 8001b24:	f7ff ff22 	bl	800196c <LL_ADC_IsEnabled>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4323      	orrs	r3, r4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf0c      	ite	eq
 8001b30:	2301      	moveq	r3, #1
 8001b32:	2300      	movne	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	e008      	b.n	8001b4a <HAL_ADC_Init+0x142>
 8001b38:	4862      	ldr	r0, [pc, #392]	@ (8001cc4 <HAL_ADC_Init+0x2bc>)
 8001b3a:	f7ff ff17 	bl	800196c <LL_ADC_IsEnabled>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d012      	beq.n	8001b74 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a5a      	ldr	r2, [pc, #360]	@ (8001cbc <HAL_ADC_Init+0x2b4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d004      	beq.n	8001b62 <HAL_ADC_Init+0x15a>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	@ (8001cc0 <HAL_ADC_Init+0x2b8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_ADC_Init+0x15e>
 8001b62:	4a59      	ldr	r2, [pc, #356]	@ (8001cc8 <HAL_ADC_Init+0x2c0>)
 8001b64:	e000      	b.n	8001b68 <HAL_ADC_Init+0x160>
 8001b66:	4a59      	ldr	r2, [pc, #356]	@ (8001ccc <HAL_ADC_Init+0x2c4>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f7ff fc7e 	bl	8001470 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a52      	ldr	r2, [pc, #328]	@ (8001cc4 <HAL_ADC_Init+0x2bc>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d129      	bne.n	8001bd2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7e5b      	ldrb	r3, [r3, #25]
 8001b82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001b88:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001b8e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d013      	beq.n	8001bc0 <HAL_ADC_Init+0x1b8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	d00d      	beq.n	8001bbc <HAL_ADC_Init+0x1b4>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b1c      	cmp	r3, #28
 8001ba6:	d007      	beq.n	8001bb8 <HAL_ADC_Init+0x1b0>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b18      	cmp	r3, #24
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_Init+0x1ac>
 8001bb0:	2318      	movs	r3, #24
 8001bb2:	e006      	b.n	8001bc2 <HAL_ADC_Init+0x1ba>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e004      	b.n	8001bc2 <HAL_ADC_Init+0x1ba>
 8001bb8:	2310      	movs	r3, #16
 8001bba:	e002      	b.n	8001bc2 <HAL_ADC_Init+0x1ba>
 8001bbc:	2308      	movs	r3, #8
 8001bbe:	e000      	b.n	8001bc2 <HAL_ADC_Init+0x1ba>
 8001bc0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001bc2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	e00e      	b.n	8001bf0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	7e5b      	ldrb	r3, [r3, #25]
 8001bd6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bdc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001be2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d106      	bne.n	8001c08 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	045b      	lsls	r3, r3, #17
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c14:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a26      	ldr	r2, [pc, #152]	@ (8001cc4 <HAL_ADC_Init+0x2bc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d115      	bne.n	8001c5a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	4b26      	ldr	r3, [pc, #152]	@ (8001cd0 <HAL_ADC_Init+0x2c8>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	69b9      	ldr	r1, [r7, #24]
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	611a      	str	r2, [r3, #16]
 8001c58:	e009      	b.n	8001c6e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <HAL_ADC_Init+0x2cc>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	69b9      	ldr	r1, [r7, #24]
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fea2 	bl	80019bc <LL_ADC_REG_IsConversionOngoing>
 8001c78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff feaf 	bl	80019e2 <LL_ADC_INJ_IsConversionOngoing>
 8001c84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f040 808e 	bne.w	8001daa <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 808a 	bne.w	8001daa <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_ADC_Init+0x2bc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d11b      	bne.n	8001cd8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	7e1b      	ldrb	r3, [r3, #24]
 8001ca4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cac:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	e018      	b.n	8001ce6 <HAL_ADC_Init+0x2de>
 8001cb4:	24000000 	.word	0x24000000
 8001cb8:	053e2d63 	.word	0x053e2d63
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40022100 	.word	0x40022100
 8001cc4:	58026000 	.word	0x58026000
 8001cc8:	40022300 	.word	0x40022300
 8001ccc:	58026300 	.word	0x58026300
 8001cd0:	fff04007 	.word	0xfff04007
 8001cd4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7e1b      	ldrb	r3, [r3, #24]
 8001cdc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	4b46      	ldr	r3, [pc, #280]	@ (8001e08 <HAL_ADC_Init+0x400>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	69b9      	ldr	r1, [r7, #24]
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d137      	bne.n	8001d74 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d08:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e0c <HAL_ADC_Init+0x404>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d116      	bne.n	8001d42 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e10 <HAL_ADC_Init+0x408>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001d26:	4311      	orrs	r1, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001d32:	430a      	orrs	r2, r1
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	611a      	str	r2, [r3, #16]
 8001d40:	e020      	b.n	8001d84 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	4b32      	ldr	r3, [pc, #200]	@ (8001e14 <HAL_ADC_Init+0x40c>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d50:	3a01      	subs	r2, #1
 8001d52:	0411      	lsls	r1, r2, #16
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d5e:	4311      	orrs	r1, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001d64:	430a      	orrs	r2, r1
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	611a      	str	r2, [r3, #16]
 8001d72:	e007      	b.n	8001d84 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e0c <HAL_ADC_Init+0x404>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d002      	beq.n	8001daa <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 ff6b 	bl	8002c80 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d10c      	bne.n	8001dcc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db8:	f023 010f 	bic.w	r1, r3, #15
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	1e5a      	subs	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dca:	e007      	b.n	8001ddc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 020f 	bic.w	r2, r2, #15
 8001dda:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de0:	f023 0303 	bic.w	r3, r3, #3
 8001de4:	f043 0201 	orr.w	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	661a      	str	r2, [r3, #96]	@ 0x60
 8001dec:	e007      	b.n	8001dfe <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df2:	f043 0210 	orr.w	r2, r3, #16
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3724      	adds	r7, #36	@ 0x24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd90      	pop	{r4, r7, pc}
 8001e08:	ffffbffc 	.word	0xffffbffc
 8001e0c:	58026000 	.word	0x58026000
 8001e10:	fc00f81f 	.word	0xfc00f81f
 8001e14:	fc00f81e 	.word	0xfc00f81e

08001e18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a60      	ldr	r2, [pc, #384]	@ (8001fac <HAL_ADC_Start_DMA+0x194>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d004      	beq.n	8001e38 <HAL_ADC_Start_DMA+0x20>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a5f      	ldr	r2, [pc, #380]	@ (8001fb0 <HAL_ADC_Start_DMA+0x198>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_Start_DMA+0x24>
 8001e38:	4b5e      	ldr	r3, [pc, #376]	@ (8001fb4 <HAL_ADC_Start_DMA+0x19c>)
 8001e3a:	e000      	b.n	8001e3e <HAL_ADC_Start_DMA+0x26>
 8001e3c:	4b5e      	ldr	r3, [pc, #376]	@ (8001fb8 <HAL_ADC_Start_DMA+0x1a0>)
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fd24 	bl	800188c <LL_ADC_GetMultimode>
 8001e44:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fdb6 	bl	80019bc <LL_ADC_REG_IsConversionOngoing>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 80a2 	bne.w	8001f9c <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_Start_DMA+0x4e>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e09d      	b.n	8001fa2 <HAL_ADC_Start_DMA+0x18a>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d003      	beq.n	8001e82 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2b09      	cmp	r3, #9
 8001e7e:	f040 8086 	bne.w	8001f8e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 fdde 	bl	8002a44 <ADC_Enable>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d178      	bne.n	8001f84 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e96:	4b49      	ldr	r3, [pc, #292]	@ (8001fbc <HAL_ADC_Start_DMA+0x1a4>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a42      	ldr	r2, [pc, #264]	@ (8001fb0 <HAL_ADC_Start_DMA+0x198>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d002      	beq.n	8001eb2 <HAL_ADC_Start_DMA+0x9a>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	e000      	b.n	8001eb4 <HAL_ADC_Start_DMA+0x9c>
 8001eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8001fac <HAL_ADC_Start_DMA+0x194>)
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d002      	beq.n	8001ec2 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d105      	bne.n	8001ece <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d006      	beq.n	8001ee8 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ede:	f023 0206 	bic.w	r2, r3, #6
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	665a      	str	r2, [r3, #100]	@ 0x64
 8001ee6:	e002      	b.n	8001eee <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef2:	4a33      	ldr	r2, [pc, #204]	@ (8001fc0 <HAL_ADC_Start_DMA+0x1a8>)
 8001ef4:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efa:	4a32      	ldr	r2, [pc, #200]	@ (8001fc4 <HAL_ADC_Start_DMA+0x1ac>)
 8001efc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f02:	4a31      	ldr	r2, [pc, #196]	@ (8001fc8 <HAL_ADC_Start_DMA+0x1b0>)
 8001f04:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	221c      	movs	r2, #28
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0210 	orr.w	r2, r2, #16
 8001f24:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a28      	ldr	r2, [pc, #160]	@ (8001fcc <HAL_ADC_Start_DMA+0x1b4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d10f      	bne.n	8001f50 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f7ff fc1e 	bl	8001780 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fc09 	bl	8001760 <LL_ADC_EnableDMAReq>
 8001f4e:	e007      	b.n	8001f60 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	f7ff fbed 	bl	800173a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3340      	adds	r3, #64	@ 0x40
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f001 fea8 	bl	8003cc4 <HAL_DMA_Start_IT>
 8001f74:	4603      	mov	r3, r0
 8001f76:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fd09 	bl	8001994 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001f82:	e00d      	b.n	8001fa0 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8001f8c:	e008      	b.n	8001fa0 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8001f9a:	e001      	b.n	8001fa0 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40022100 	.word	0x40022100
 8001fb4:	40022300 	.word	0x40022300
 8001fb8:	58026300 	.word	0x58026300
 8001fbc:	fffff0fe 	.word	0xfffff0fe
 8001fc0:	08002b59 	.word	0x08002b59
 8001fc4:	08002c31 	.word	0x08002c31
 8001fc8:	08002c4d 	.word	0x08002c4d
 8001fcc:	58026000 	.word	0x58026000

08001fd0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b0b9      	sub	sp, #228	@ 0xe4
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001ffe:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4aab      	ldr	r2, [pc, #684]	@ (80022b4 <HAL_ADC_ConfigChannel+0x2d0>)
 8002006:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800200e:	2b01      	cmp	r3, #1
 8002010:	d102      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x34>
 8002012:	2302      	movs	r3, #2
 8002014:	f000 bcfe 	b.w	8002a14 <HAL_ADC_ConfigChannel+0xa30>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fcc9 	bl	80019bc <LL_ADC_REG_IsConversionOngoing>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	f040 84e2 	bne.w	80029f6 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db38      	blt.n	80020ac <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a9e      	ldr	r2, [pc, #632]	@ (80022b8 <HAL_ADC_ConfigChannel+0x2d4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d033      	beq.n	80020ac <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800204c:	2b00      	cmp	r3, #0
 800204e:	d108      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x7e>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0e9b      	lsrs	r3, r3, #26
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	2201      	movs	r2, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	e01d      	b.n	800209e <HAL_ADC_ConfigChannel+0xba>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002076:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800207a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800207e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002086:	2320      	movs	r3, #32
 8002088:	e004      	b.n	8002094 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800208a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	2201      	movs	r2, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	69d1      	ldr	r1, [r2, #28]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	430b      	orrs	r3, r1
 80020aa:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	f7ff fb12 	bl	80016e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fc7a 	bl	80019bc <LL_ADC_REG_IsConversionOngoing>
 80020c8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fc86 	bl	80019e2 <LL_ADC_INJ_IsConversionOngoing>
 80020d6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 8270 	bne.w	80025c4 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f040 826b 	bne.w	80025c4 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6819      	ldr	r1, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	461a      	mov	r2, r3
 80020fc:	f7ff fb5a 	bl	80017b4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a6c      	ldr	r2, [pc, #432]	@ (80022b8 <HAL_ADC_ConfigChannel+0x2d4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d10d      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	08db      	lsrs	r3, r3, #3
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002124:	e032      	b.n	800218c <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002126:	4b65      	ldr	r3, [pc, #404]	@ (80022bc <HAL_ADC_ConfigChannel+0x2d8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800212e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002132:	d10b      	bne.n	800214c <HAL_ADC_ConfigChannel+0x168>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	e01d      	b.n	8002188 <HAL_ADC_ConfigChannel+0x1a4>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10b      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x18e>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	e00a      	b.n	8002188 <HAL_ADC_ConfigChannel+0x1a4>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	089b      	lsrs	r3, r3, #2
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b04      	cmp	r3, #4
 8002192:	d048      	beq.n	8002226 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6919      	ldr	r1, [r3, #16]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80021a4:	f7ff f998 	bl	80014d8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a42      	ldr	r2, [pc, #264]	@ (80022b8 <HAL_ADC_ConfigChannel+0x2d4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d119      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6919      	ldr	r1, [r3, #16]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	461a      	mov	r2, r3
 80021c0:	f7ff fa30 	bl	8001624 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6919      	ldr	r1, [r3, #16]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d102      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x1f8>
 80021d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021da:	e000      	b.n	80021de <HAL_ADC_ConfigChannel+0x1fa>
 80021dc:	2300      	movs	r3, #0
 80021de:	461a      	mov	r2, r3
 80021e0:	f7ff f9fe 	bl	80015e0 <LL_ADC_SetOffsetSaturation>
 80021e4:	e1ee      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6919      	ldr	r1, [r3, #16]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d102      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x21a>
 80021f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80021fc:	e000      	b.n	8002200 <HAL_ADC_ConfigChannel+0x21c>
 80021fe:	2300      	movs	r3, #0
 8002200:	461a      	mov	r2, r3
 8002202:	f7ff f9cb 	bl	800159c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6919      	ldr	r1, [r3, #16]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	7e1b      	ldrb	r3, [r3, #24]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d102      	bne.n	800221c <HAL_ADC_ConfigChannel+0x238>
 8002216:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800221a:	e000      	b.n	800221e <HAL_ADC_ConfigChannel+0x23a>
 800221c:	2300      	movs	r3, #0
 800221e:	461a      	mov	r2, r3
 8002220:	f7ff f9a2 	bl	8001568 <LL_ADC_SetDataRightShift>
 8002224:	e1ce      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a23      	ldr	r2, [pc, #140]	@ (80022b8 <HAL_ADC_ConfigChannel+0x2d4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	f040 8181 	bne.w	8002534 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff f97f 	bl	800153c <LL_ADC_GetOffsetChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10a      	bne.n	800225e <HAL_ADC_ConfigChannel+0x27a>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f974 	bl	800153c <LL_ADC_GetOffsetChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	0e9b      	lsrs	r3, r3, #26
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	e01e      	b.n	800229c <HAL_ADC_ConfigChannel+0x2b8>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff f969 	bl	800153c <LL_ADC_GetOffsetChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800227c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002280:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002284:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 800228c:	2320      	movs	r3, #32
 800228e:	e004      	b.n	800229a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002290:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10b      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x2dc>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	0e9b      	lsrs	r3, r3, #26
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	e01e      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x30e>
 80022b4:	47ff0000 	.word	0x47ff0000
 80022b8:	58026000 	.word	0x58026000
 80022bc:	5c001000 	.word	0x5c001000
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80022d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80022dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80022e4:	2320      	movs	r3, #32
 80022e6:	e004      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80022e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d106      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f9b2 	bl	8001668 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2101      	movs	r1, #1
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff f916 	bl	800153c <LL_ADC_GetOffsetChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10a      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x34c>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2101      	movs	r1, #1
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff f90b 	bl	800153c <LL_ADC_GetOffsetChannel>
 8002326:	4603      	mov	r3, r0
 8002328:	0e9b      	lsrs	r3, r3, #26
 800232a:	f003 021f 	and.w	r2, r3, #31
 800232e:	e01e      	b.n	800236e <HAL_ADC_ConfigChannel+0x38a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2101      	movs	r1, #1
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f900 	bl	800153c <LL_ADC_GetOffsetChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800234e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002352:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800235e:	2320      	movs	r3, #32
 8002360:	e004      	b.n	800236c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8002362:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002376:	2b00      	cmp	r3, #0
 8002378:	d105      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x3a2>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	0e9b      	lsrs	r3, r3, #26
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	e018      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x3d4>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800239a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800239e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80023a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80023aa:	2320      	movs	r3, #32
 80023ac:	e004      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80023ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d106      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2200      	movs	r2, #0
 80023c2:	2101      	movs	r1, #1
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff f94f 	bl	8001668 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2102      	movs	r1, #2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff f8b3 	bl	800153c <LL_ADC_GetOffsetChannel>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10a      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x412>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2102      	movs	r1, #2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff f8a8 	bl	800153c <LL_ADC_GetOffsetChannel>
 80023ec:	4603      	mov	r3, r0
 80023ee:	0e9b      	lsrs	r3, r3, #26
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	e01e      	b.n	8002434 <HAL_ADC_ConfigChannel+0x450>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2102      	movs	r1, #2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff f89d 	bl	800153c <LL_ADC_GetOffsetChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002414:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002418:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800241c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002424:	2320      	movs	r3, #32
 8002426:	e004      	b.n	8002432 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002428:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_ADC_ConfigChannel+0x468>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0e9b      	lsrs	r3, r3, #26
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	e014      	b.n	8002476 <HAL_ADC_ConfigChannel+0x492>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800245a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800245c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002460:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002468:	2320      	movs	r3, #32
 800246a:	e004      	b.n	8002476 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800246c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	429a      	cmp	r2, r3
 8002478:	d106      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2200      	movs	r2, #0
 8002480:	2102      	movs	r1, #2
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff f8f0 	bl	8001668 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2103      	movs	r1, #3
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff f854 	bl	800153c <LL_ADC_GetOffsetChannel>
 8002494:	4603      	mov	r3, r0
 8002496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10a      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x4d0>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2103      	movs	r1, #3
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff f849 	bl	800153c <LL_ADC_GetOffsetChannel>
 80024aa:	4603      	mov	r3, r0
 80024ac:	0e9b      	lsrs	r3, r3, #26
 80024ae:	f003 021f 	and.w	r2, r3, #31
 80024b2:	e017      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x500>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2103      	movs	r1, #3
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f83e 	bl	800153c <LL_ADC_GetOffsetChannel>
 80024c0:	4603      	mov	r3, r0
 80024c2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80024cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ce:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80024d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80024d6:	2320      	movs	r3, #32
 80024d8:	e003      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80024da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d105      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x518>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0e9b      	lsrs	r3, r3, #26
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	e011      	b.n	8002520 <HAL_ADC_ConfigChannel+0x53c>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800250a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800250c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800250e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002518:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	429a      	cmp	r2, r3
 8002522:	d14f      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2200      	movs	r2, #0
 800252a:	2103      	movs	r1, #3
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff f89b 	bl	8001668 <LL_ADC_SetOffsetState>
 8002532:	e047      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800253a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	069b      	lsls	r3, r3, #26
 8002544:	429a      	cmp	r2, r3
 8002546:	d107      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002556:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800255e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	069b      	lsls	r3, r3, #26
 8002568:	429a      	cmp	r2, r3
 800256a:	d107      	bne.n	800257c <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800257a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002582:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	069b      	lsls	r3, r3, #26
 800258c:	429a      	cmp	r2, r3
 800258e:	d107      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800259e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	069b      	lsls	r3, r3, #26
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d107      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025c2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff f9cf 	bl	800196c <LL_ADC_IsEnabled>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f040 8219 	bne.w	8002a08 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6819      	ldr	r1, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	461a      	mov	r2, r3
 80025e4:	f7ff f912 	bl	800180c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4aa1      	ldr	r2, [pc, #644]	@ (8002874 <HAL_ADC_ConfigChannel+0x890>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	f040 812e 	bne.w	8002850 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10b      	bne.n	800261c <HAL_ADC_ConfigChannel+0x638>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	0e9b      	lsrs	r3, r3, #26
 800260a:	3301      	adds	r3, #1
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	2b09      	cmp	r3, #9
 8002612:	bf94      	ite	ls
 8002614:	2301      	movls	r3, #1
 8002616:	2300      	movhi	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	e019      	b.n	8002650 <HAL_ADC_ConfigChannel+0x66c>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800262a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800262c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800262e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002634:	2320      	movs	r3, #32
 8002636:	e003      	b.n	8002640 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002638:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	3301      	adds	r3, #1
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	2b09      	cmp	r3, #9
 8002648:	bf94      	ite	ls
 800264a:	2301      	movls	r3, #1
 800264c:	2300      	movhi	r3, #0
 800264e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002650:	2b00      	cmp	r3, #0
 8002652:	d079      	beq.n	8002748 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800265c:	2b00      	cmp	r3, #0
 800265e:	d107      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x68c>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	3301      	adds	r3, #1
 8002668:	069b      	lsls	r3, r3, #26
 800266a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800266e:	e015      	b.n	800269c <HAL_ADC_ConfigChannel+0x6b8>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800267e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002680:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002688:	2320      	movs	r3, #32
 800268a:	e003      	b.n	8002694 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 800268c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	3301      	adds	r3, #1
 8002696:	069b      	lsls	r3, r3, #26
 8002698:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d109      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x6d8>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0e9b      	lsrs	r3, r3, #26
 80026ae:	3301      	adds	r3, #1
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	2101      	movs	r1, #1
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	e017      	b.n	80026ec <HAL_ADC_ConfigChannel+0x708>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80026ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026cc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80026ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80026d4:	2320      	movs	r3, #32
 80026d6:	e003      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80026d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	3301      	adds	r3, #1
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	2101      	movs	r1, #1
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	ea42 0103 	orr.w	r1, r2, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x72e>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	0e9b      	lsrs	r3, r3, #26
 8002702:	3301      	adds	r3, #1
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	051b      	lsls	r3, r3, #20
 8002710:	e018      	b.n	8002744 <HAL_ADC_ConfigChannel+0x760>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002722:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800272a:	2320      	movs	r3, #32
 800272c:	e003      	b.n	8002736 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800272e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002730:	fab3 f383 	clz	r3, r3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	3301      	adds	r3, #1
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002744:	430b      	orrs	r3, r1
 8002746:	e07e      	b.n	8002846 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002750:	2b00      	cmp	r3, #0
 8002752:	d107      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x780>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	3301      	adds	r3, #1
 800275c:	069b      	lsls	r3, r3, #26
 800275e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002762:	e015      	b.n	8002790 <HAL_ADC_ConfigChannel+0x7ac>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 800277c:	2320      	movs	r3, #32
 800277e:	e003      	b.n	8002788 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8002780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002782:	fab3 f383 	clz	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	3301      	adds	r3, #1
 800278a:	069b      	lsls	r3, r3, #26
 800278c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002798:	2b00      	cmp	r3, #0
 800279a:	d109      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x7cc>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	0e9b      	lsrs	r3, r3, #26
 80027a2:	3301      	adds	r3, #1
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	2101      	movs	r1, #1
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	e017      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x7fc>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	61bb      	str	r3, [r7, #24]
  return result;
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80027c8:	2320      	movs	r3, #32
 80027ca:	e003      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	3301      	adds	r3, #1
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	ea42 0103 	orr.w	r1, r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10d      	bne.n	800280c <HAL_ADC_ConfigChannel+0x828>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	3301      	adds	r3, #1
 80027f8:	f003 021f 	and.w	r2, r3, #31
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	3b1e      	subs	r3, #30
 8002804:	051b      	lsls	r3, r3, #20
 8002806:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800280a:	e01b      	b.n	8002844 <HAL_ADC_ConfigChannel+0x860>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	60fb      	str	r3, [r7, #12]
  return result;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e003      	b.n	8002830 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	3301      	adds	r3, #1
 8002832:	f003 021f 	and.w	r2, r3, #31
 8002836:	4613      	mov	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	3b1e      	subs	r3, #30
 800283e:	051b      	lsls	r3, r3, #20
 8002840:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002844:	430b      	orrs	r3, r1
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	6892      	ldr	r2, [r2, #8]
 800284a:	4619      	mov	r1, r3
 800284c:	f7fe ffb2 	bl	80017b4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	f280 80d7 	bge.w	8002a08 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a06      	ldr	r2, [pc, #24]	@ (8002878 <HAL_ADC_ConfigChannel+0x894>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d004      	beq.n	800286e <HAL_ADC_ConfigChannel+0x88a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a04      	ldr	r2, [pc, #16]	@ (800287c <HAL_ADC_ConfigChannel+0x898>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d10a      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x8a0>
 800286e:	4b04      	ldr	r3, [pc, #16]	@ (8002880 <HAL_ADC_ConfigChannel+0x89c>)
 8002870:	e009      	b.n	8002886 <HAL_ADC_ConfigChannel+0x8a2>
 8002872:	bf00      	nop
 8002874:	47ff0000 	.word	0x47ff0000
 8002878:	40022000 	.word	0x40022000
 800287c:	40022100 	.word	0x40022100
 8002880:	40022300 	.word	0x40022300
 8002884:	4b65      	ldr	r3, [pc, #404]	@ (8002a1c <HAL_ADC_ConfigChannel+0xa38>)
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fe18 	bl	80014bc <LL_ADC_GetCommonPathInternalCh>
 800288c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a62      	ldr	r2, [pc, #392]	@ (8002a20 <HAL_ADC_ConfigChannel+0xa3c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d004      	beq.n	80028a4 <HAL_ADC_ConfigChannel+0x8c0>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a61      	ldr	r2, [pc, #388]	@ (8002a24 <HAL_ADC_ConfigChannel+0xa40>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d10e      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x8de>
 80028a4:	485e      	ldr	r0, [pc, #376]	@ (8002a20 <HAL_ADC_ConfigChannel+0xa3c>)
 80028a6:	f7ff f861 	bl	800196c <LL_ADC_IsEnabled>
 80028aa:	4604      	mov	r4, r0
 80028ac:	485d      	ldr	r0, [pc, #372]	@ (8002a24 <HAL_ADC_ConfigChannel+0xa40>)
 80028ae:	f7ff f85d 	bl	800196c <LL_ADC_IsEnabled>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4323      	orrs	r3, r4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	bf0c      	ite	eq
 80028ba:	2301      	moveq	r3, #1
 80028bc:	2300      	movne	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	e008      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x8f0>
 80028c2:	4859      	ldr	r0, [pc, #356]	@ (8002a28 <HAL_ADC_ConfigChannel+0xa44>)
 80028c4:	f7ff f852 	bl	800196c <LL_ADC_IsEnabled>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	bf0c      	ite	eq
 80028ce:	2301      	moveq	r3, #1
 80028d0:	2300      	movne	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8084 	beq.w	80029e2 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a53      	ldr	r2, [pc, #332]	@ (8002a2c <HAL_ADC_ConfigChannel+0xa48>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d132      	bne.n	800294a <HAL_ADC_ConfigChannel+0x966>
 80028e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d12c      	bne.n	800294a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002a28 <HAL_ADC_ConfigChannel+0xa44>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	f040 8086 	bne.w	8002a08 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a47      	ldr	r2, [pc, #284]	@ (8002a20 <HAL_ADC_ConfigChannel+0xa3c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d004      	beq.n	8002910 <HAL_ADC_ConfigChannel+0x92c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a46      	ldr	r2, [pc, #280]	@ (8002a24 <HAL_ADC_ConfigChannel+0xa40>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d101      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x930>
 8002910:	4a47      	ldr	r2, [pc, #284]	@ (8002a30 <HAL_ADC_ConfigChannel+0xa4c>)
 8002912:	e000      	b.n	8002916 <HAL_ADC_ConfigChannel+0x932>
 8002914:	4a41      	ldr	r2, [pc, #260]	@ (8002a1c <HAL_ADC_ConfigChannel+0xa38>)
 8002916:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800291a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f7fe fdb8 	bl	8001496 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002926:	4b43      	ldr	r3, [pc, #268]	@ (8002a34 <HAL_ADC_ConfigChannel+0xa50>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	099b      	lsrs	r3, r3, #6
 800292c:	4a42      	ldr	r2, [pc, #264]	@ (8002a38 <HAL_ADC_ConfigChannel+0xa54>)
 800292e:	fba2 2303 	umull	r2, r3, r2, r3
 8002932:	099b      	lsrs	r3, r3, #6
 8002934:	3301      	adds	r3, #1
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800293a:	e002      	b.n	8002942 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	3b01      	subs	r3, #1
 8002940:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f9      	bne.n	800293c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002948:	e05e      	b.n	8002a08 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a3c <HAL_ADC_ConfigChannel+0xa58>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d120      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x9b2>
 8002954:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d11a      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a30      	ldr	r2, [pc, #192]	@ (8002a28 <HAL_ADC_ConfigChannel+0xa44>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d14e      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2c      	ldr	r2, [pc, #176]	@ (8002a20 <HAL_ADC_ConfigChannel+0xa3c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_ADC_ConfigChannel+0x99a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a2a      	ldr	r2, [pc, #168]	@ (8002a24 <HAL_ADC_ConfigChannel+0xa40>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x99e>
 800297e:	4a2c      	ldr	r2, [pc, #176]	@ (8002a30 <HAL_ADC_ConfigChannel+0xa4c>)
 8002980:	e000      	b.n	8002984 <HAL_ADC_ConfigChannel+0x9a0>
 8002982:	4a26      	ldr	r2, [pc, #152]	@ (8002a1c <HAL_ADC_ConfigChannel+0xa38>)
 8002984:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002988:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f7fe fd81 	bl	8001496 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002994:	e038      	b.n	8002a08 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a29      	ldr	r2, [pc, #164]	@ (8002a40 <HAL_ADC_ConfigChannel+0xa5c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d133      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0xa24>
 80029a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d12d      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002a28 <HAL_ADC_ConfigChannel+0xa44>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d128      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a19      	ldr	r2, [pc, #100]	@ (8002a20 <HAL_ADC_ConfigChannel+0xa3c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x9e6>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a17      	ldr	r2, [pc, #92]	@ (8002a24 <HAL_ADC_ConfigChannel+0xa40>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d101      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x9ea>
 80029ca:	4a19      	ldr	r2, [pc, #100]	@ (8002a30 <HAL_ADC_ConfigChannel+0xa4c>)
 80029cc:	e000      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x9ec>
 80029ce:	4a13      	ldr	r2, [pc, #76]	@ (8002a1c <HAL_ADC_ConfigChannel+0xa38>)
 80029d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029d8:	4619      	mov	r1, r3
 80029da:	4610      	mov	r0, r2
 80029dc:	f7fe fd5b 	bl	8001496 <LL_ADC_SetCommonPathInternalCh>
 80029e0:	e012      	b.n	8002a08 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e6:	f043 0220 	orr.w	r2, r3, #32
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80029f4:	e008      	b.n	8002a08 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fa:	f043 0220 	orr.w	r2, r3, #32
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002a10:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	37e4      	adds	r7, #228	@ 0xe4
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd90      	pop	{r4, r7, pc}
 8002a1c:	58026300 	.word	0x58026300
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40022100 	.word	0x40022100
 8002a28:	58026000 	.word	0x58026000
 8002a2c:	c7520000 	.word	0xc7520000
 8002a30:	40022300 	.word	0x40022300
 8002a34:	24000000 	.word	0x24000000
 8002a38:	053e2d63 	.word	0x053e2d63
 8002a3c:	c3210000 	.word	0xc3210000
 8002a40:	cb840000 	.word	0xcb840000

08002a44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fe ff8b 	bl	800196c <LL_ADC_IsEnabled>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d16e      	bne.n	8002b3a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	4b38      	ldr	r3, [pc, #224]	@ (8002b44 <ADC_Enable+0x100>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00d      	beq.n	8002a86 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6e:	f043 0210 	orr.w	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e05a      	b.n	8002b3c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe ff5a 	bl	8001944 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a90:	f7fe fc96 	bl	80013c0 <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a2b      	ldr	r2, [pc, #172]	@ (8002b48 <ADC_Enable+0x104>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <ADC_Enable+0x66>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a29      	ldr	r2, [pc, #164]	@ (8002b4c <ADC_Enable+0x108>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d101      	bne.n	8002aae <ADC_Enable+0x6a>
 8002aaa:	4b29      	ldr	r3, [pc, #164]	@ (8002b50 <ADC_Enable+0x10c>)
 8002aac:	e000      	b.n	8002ab0 <ADC_Enable+0x6c>
 8002aae:	4b29      	ldr	r3, [pc, #164]	@ (8002b54 <ADC_Enable+0x110>)
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe feeb 	bl	800188c <LL_ADC_GetMultimode>
 8002ab6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a23      	ldr	r2, [pc, #140]	@ (8002b4c <ADC_Enable+0x108>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d002      	beq.n	8002ac8 <ADC_Enable+0x84>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	e000      	b.n	8002aca <ADC_Enable+0x86>
 8002ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b48 <ADC_Enable+0x104>)
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d02c      	beq.n	8002b2c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d130      	bne.n	8002b3a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ad8:	e028      	b.n	8002b2c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe ff44 	bl	800196c <LL_ADC_IsEnabled>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d104      	bne.n	8002af4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe ff28 	bl	8001944 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002af4:	f7fe fc64 	bl	80013c0 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d914      	bls.n	8002b2c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d00d      	beq.n	8002b2c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b14:	f043 0210 	orr.w	r2, r3, #16
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b20:	f043 0201 	orr.w	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e007      	b.n	8002b3c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d1cf      	bne.n	8002ada <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	8000003f 	.word	0x8000003f
 8002b48:	40022000 	.word	0x40022000
 8002b4c:	40022100 	.word	0x40022100
 8002b50:	40022300 	.word	0x40022300
 8002b54:	58026300 	.word	0x58026300

08002b58 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b6a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d14b      	bne.n	8002c0a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d021      	beq.n	8002bd0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe fd93 	bl	80016bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d032      	beq.n	8002c02 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d12b      	bne.n	8002c02 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d11f      	bne.n	8002c02 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc6:	f043 0201 	orr.w	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	661a      	str	r2, [r3, #96]	@ 0x60
 8002bce:	e018      	b.n	8002c02 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d111      	bne.n	8002c02 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d105      	bne.n	8002c02 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7fe f852 	bl	8000cac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c08:	e00e      	b.n	8002c28 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f7ff f9da 	bl	8001fd0 <HAL_ADC_ErrorCallback>
}
 8002c1c:	e004      	b.n	8002c28 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f7fe f810 	bl	8000c64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c6a:	f043 0204 	orr.w	r2, r3, #4
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f7ff f9ac 	bl	8001fd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a6c      	ldr	r2, [pc, #432]	@ (8002e40 <ADC_ConfigureBoostMode+0x1c0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d004      	beq.n	8002c9c <ADC_ConfigureBoostMode+0x1c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a6b      	ldr	r2, [pc, #428]	@ (8002e44 <ADC_ConfigureBoostMode+0x1c4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d109      	bne.n	8002cb0 <ADC_ConfigureBoostMode+0x30>
 8002c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002e48 <ADC_ConfigureBoostMode+0x1c8>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e008      	b.n	8002cc2 <ADC_ConfigureBoostMode+0x42>
 8002cb0:	4b66      	ldr	r3, [pc, #408]	@ (8002e4c <ADC_ConfigureBoostMode+0x1cc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01c      	beq.n	8002d00 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002cc6:	f003 fe7f 	bl	80069c8 <HAL_RCC_GetHCLKFreq>
 8002cca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cd4:	d010      	beq.n	8002cf8 <ADC_ConfigureBoostMode+0x78>
 8002cd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cda:	d873      	bhi.n	8002dc4 <ADC_ConfigureBoostMode+0x144>
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce0:	d002      	beq.n	8002ce8 <ADC_ConfigureBoostMode+0x68>
 8002ce2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ce6:	d16d      	bne.n	8002dc4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	60fb      	str	r3, [r7, #12]
        break;
 8002cf6:	e068      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	60fb      	str	r3, [r7, #12]
        break;
 8002cfe:	e064      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002d00:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002d04:	f04f 0100 	mov.w	r1, #0
 8002d08:	f005 f844 	bl	8007d94 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d0c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002d16:	d051      	beq.n	8002dbc <ADC_ConfigureBoostMode+0x13c>
 8002d18:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002d1c:	d854      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d1e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002d22:	d047      	beq.n	8002db4 <ADC_ConfigureBoostMode+0x134>
 8002d24:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002d28:	d84e      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d2a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002d2e:	d03d      	beq.n	8002dac <ADC_ConfigureBoostMode+0x12c>
 8002d30:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002d34:	d848      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d3a:	d033      	beq.n	8002da4 <ADC_ConfigureBoostMode+0x124>
 8002d3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d40:	d842      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d42:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002d46:	d029      	beq.n	8002d9c <ADC_ConfigureBoostMode+0x11c>
 8002d48:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002d4c:	d83c      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d4e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002d52:	d01a      	beq.n	8002d8a <ADC_ConfigureBoostMode+0x10a>
 8002d54:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002d58:	d836      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d5a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002d5e:	d014      	beq.n	8002d8a <ADC_ConfigureBoostMode+0x10a>
 8002d60:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002d64:	d830      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d6a:	d00e      	beq.n	8002d8a <ADC_ConfigureBoostMode+0x10a>
 8002d6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d70:	d82a      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d72:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d76:	d008      	beq.n	8002d8a <ADC_ConfigureBoostMode+0x10a>
 8002d78:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d7c:	d824      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d82:	d002      	beq.n	8002d8a <ADC_ConfigureBoostMode+0x10a>
 8002d84:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d88:	d11e      	bne.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	0c9b      	lsrs	r3, r3, #18
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	60fb      	str	r3, [r7, #12]
        break;
 8002d9a:	e016      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	60fb      	str	r3, [r7, #12]
        break;
 8002da2:	e012      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	60fb      	str	r3, [r7, #12]
        break;
 8002daa:	e00e      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	099b      	lsrs	r3, r3, #6
 8002db0:	60fb      	str	r3, [r7, #12]
        break;
 8002db2:	e00a      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	09db      	lsrs	r3, r3, #7
 8002db8:	60fb      	str	r3, [r7, #12]
        break;
 8002dba:	e006      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	60fb      	str	r3, [r7, #12]
        break;
 8002dc2:	e002      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
        break;
 8002dc4:	bf00      	nop
 8002dc6:	e000      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002dc8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	085b      	lsrs	r3, r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e50 <ADC_ConfigureBoostMode+0x1d0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d808      	bhi.n	8002dea <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002de6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002de8:	e025      	b.n	8002e36 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4a19      	ldr	r2, [pc, #100]	@ (8002e54 <ADC_ConfigureBoostMode+0x1d4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d80a      	bhi.n	8002e08 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e04:	609a      	str	r2, [r3, #8]
}
 8002e06:	e016      	b.n	8002e36 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a13      	ldr	r2, [pc, #76]	@ (8002e58 <ADC_ConfigureBoostMode+0x1d8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d80a      	bhi.n	8002e26 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e22:	609a      	str	r2, [r3, #8]
}
 8002e24:	e007      	b.n	8002e36 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002e34:	609a      	str	r2, [r3, #8]
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40022000 	.word	0x40022000
 8002e44:	40022100 	.word	0x40022100
 8002e48:	40022300 	.word	0x40022300
 8002e4c:	58026300 	.word	0x58026300
 8002e50:	005f5e10 	.word	0x005f5e10
 8002e54:	00bebc20 	.word	0x00bebc20
 8002e58:	017d7840 	.word	0x017d7840

08002e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <__NVIC_SetPriorityGrouping+0x40>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e84:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e8a:	4a04      	ldr	r2, [pc, #16]	@ (8002e9c <__NVIC_SetPriorityGrouping+0x40>)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	60d3      	str	r3, [r2, #12]
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000ed00 	.word	0xe000ed00
 8002ea0:	05fa0000 	.word	0x05fa0000

08002ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea8:	4b04      	ldr	r3, [pc, #16]	@ (8002ebc <__NVIC_GetPriorityGrouping+0x18>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	0a1b      	lsrs	r3, r3, #8
 8002eae:	f003 0307 	and.w	r3, r3, #7
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	db0b      	blt.n	8002eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	f003 021f 	and.w	r2, r3, #31
 8002ed8:	4907      	ldr	r1, [pc, #28]	@ (8002ef8 <__NVIC_EnableIRQ+0x38>)
 8002eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	e000e100 	.word	0xe000e100

08002efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	6039      	str	r1, [r7, #0]
 8002f06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	db0a      	blt.n	8002f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	490c      	ldr	r1, [pc, #48]	@ (8002f48 <__NVIC_SetPriority+0x4c>)
 8002f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f1a:	0112      	lsls	r2, r2, #4
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	440b      	add	r3, r1
 8002f20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f24:	e00a      	b.n	8002f3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4908      	ldr	r1, [pc, #32]	@ (8002f4c <__NVIC_SetPriority+0x50>)
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	3b04      	subs	r3, #4
 8002f34:	0112      	lsls	r2, r2, #4
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	440b      	add	r3, r1
 8002f3a:	761a      	strb	r2, [r3, #24]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000e100 	.word	0xe000e100
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	@ 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f1c3 0307 	rsb	r3, r3, #7
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	bf28      	it	cs
 8002f6e:	2304      	movcs	r3, #4
 8002f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3304      	adds	r3, #4
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d902      	bls.n	8002f80 <NVIC_EncodePriority+0x30>
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3b03      	subs	r3, #3
 8002f7e:	e000      	b.n	8002f82 <NVIC_EncodePriority+0x32>
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	f04f 32ff 	mov.w	r2, #4294967295
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	401a      	ands	r2, r3
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f98:	f04f 31ff 	mov.w	r1, #4294967295
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	43d9      	mvns	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa8:	4313      	orrs	r3, r2
         );
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3724      	adds	r7, #36	@ 0x24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fc8:	d301      	bcc.n	8002fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00f      	b.n	8002fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fce:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff8 <SysTick_Config+0x40>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd6:	210f      	movs	r1, #15
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	f7ff ff8e 	bl	8002efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe0:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <SysTick_Config+0x40>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe6:	4b04      	ldr	r3, [pc, #16]	@ (8002ff8 <SysTick_Config+0x40>)
 8002fe8:	2207      	movs	r2, #7
 8002fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	e000e010 	.word	0xe000e010

08002ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff ff29 	bl	8002e5c <__NVIC_SetPriorityGrouping>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af00      	add	r7, sp, #0
 8003018:	4603      	mov	r3, r0
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003020:	f7ff ff40 	bl	8002ea4 <__NVIC_GetPriorityGrouping>
 8003024:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	6978      	ldr	r0, [r7, #20]
 800302c:	f7ff ff90 	bl	8002f50 <NVIC_EncodePriority>
 8003030:	4602      	mov	r2, r0
 8003032:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ff5f 	bl	8002efc <__NVIC_SetPriority>
}
 800303e:	bf00      	nop
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ff33 	bl	8002ec0 <__NVIC_EnableIRQ>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ffa4 	bl	8002fb8 <SysTick_Config>
 8003070:	4603      	mov	r3, r0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e014      	b.n	80030b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	791b      	ldrb	r3, [r3, #4]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d105      	bne.n	80030a2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fd ff09 	bl	8000eb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0a2      	b.n	800321e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	795b      	ldrb	r3, [r3, #5]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_DAC_Start_DMA+0x24>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e09c      	b.n	800321e <HAL_DAC_Start_DMA+0x15e>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2202      	movs	r2, #2
 80030ee:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d129      	bne.n	800314a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	4a4b      	ldr	r2, [pc, #300]	@ (8003228 <HAL_DAC_Start_DMA+0x168>)
 80030fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	4a4a      	ldr	r2, [pc, #296]	@ (800322c <HAL_DAC_Start_DMA+0x16c>)
 8003104:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	4a49      	ldr	r2, [pc, #292]	@ (8003230 <HAL_DAC_Start_DMA+0x170>)
 800310c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800311c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_DAC_Start_DMA+0x6c>
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	2b04      	cmp	r3, #4
 8003128:	d005      	beq.n	8003136 <HAL_DAC_Start_DMA+0x76>
 800312a:	e009      	b.n	8003140 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3308      	adds	r3, #8
 8003132:	613b      	str	r3, [r7, #16]
        break;
 8003134:	e033      	b.n	800319e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	330c      	adds	r3, #12
 800313c:	613b      	str	r3, [r7, #16]
        break;
 800313e:	e02e      	b.n	800319e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3310      	adds	r3, #16
 8003146:	613b      	str	r3, [r7, #16]
        break;
 8003148:	e029      	b.n	800319e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	4a39      	ldr	r2, [pc, #228]	@ (8003234 <HAL_DAC_Start_DMA+0x174>)
 8003150:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	4a38      	ldr	r2, [pc, #224]	@ (8003238 <HAL_DAC_Start_DMA+0x178>)
 8003158:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	4a37      	ldr	r2, [pc, #220]	@ (800323c <HAL_DAC_Start_DMA+0x17c>)
 8003160:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003170:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_DAC_Start_DMA+0xc0>
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	2b04      	cmp	r3, #4
 800317c:	d005      	beq.n	800318a <HAL_DAC_Start_DMA+0xca>
 800317e:	e009      	b.n	8003194 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3314      	adds	r3, #20
 8003186:	613b      	str	r3, [r7, #16]
        break;
 8003188:	e009      	b.n	800319e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3318      	adds	r3, #24
 8003190:	613b      	str	r3, [r7, #16]
        break;
 8003192:	e004      	b.n	800319e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	331c      	adds	r3, #28
 800319a:	613b      	str	r3, [r7, #16]
        break;
 800319c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d111      	bne.n	80031c8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6898      	ldr	r0, [r3, #8]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	f000 fd81 	bl	8003cc4 <HAL_DMA_Start_IT>
 80031c2:	4603      	mov	r3, r0
 80031c4:	75fb      	strb	r3, [r7, #23]
 80031c6:	e010      	b.n	80031ea <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80031d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68d8      	ldr	r0, [r3, #12]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	f000 fd6f 	bl	8003cc4 <HAL_DMA_Start_IT>
 80031e6:	4603      	mov	r3, r0
 80031e8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10c      	bne.n	8003210 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6819      	ldr	r1, [r3, #0]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2201      	movs	r2, #1
 8003204:	409a      	lsls	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e005      	b.n	800321c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f043 0204 	orr.w	r2, r3, #4
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800321c:	7dfb      	ldrb	r3, [r7, #23]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	08003501 	.word	0x08003501
 800322c:	08003523 	.word	0x08003523
 8003230:	0800353f 	.word	0x0800353f
 8003234:	080035a9 	.word	0x080035a9
 8003238:	080035cb 	.word	0x080035cb
 800323c:	080035e7 	.word	0x080035e7

08003240 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	@ 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <HAL_DAC_ConfigChannel+0x1e>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e12a      	b.n	80034f4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	795b      	ldrb	r3, [r3, #5]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_DAC_ConfigChannel+0x2e>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e124      	b.n	80034f4 <HAL_DAC_ConfigChannel+0x278>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2202      	movs	r2, #2
 80032b4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d17a      	bne.n	80033b4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80032be:	f7fe f87f 	bl	80013c0 <HAL_GetTick>
 80032c2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d13d      	bne.n	8003346 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032ca:	e018      	b.n	80032fe <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032cc:	f7fe f878 	bl	80013c0 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d911      	bls.n	80032fe <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032e0:	4b86      	ldr	r3, [pc, #536]	@ (80034fc <HAL_DAC_ConfigChannel+0x280>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f043 0208 	orr.w	r2, r3, #8
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2203      	movs	r2, #3
 80032f8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0fa      	b.n	80034f4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003304:	4b7d      	ldr	r3, [pc, #500]	@ (80034fc <HAL_DAC_ConfigChannel+0x280>)
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1df      	bne.n	80032cc <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	6992      	ldr	r2, [r2, #24]
 8003314:	641a      	str	r2, [r3, #64]	@ 0x40
 8003316:	e020      	b.n	800335a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003318:	f7fe f852 	bl	80013c0 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d90f      	bls.n	8003346 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800332c:	2b00      	cmp	r3, #0
 800332e:	da0a      	bge.n	8003346 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f043 0208 	orr.w	r2, r3, #8
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2203      	movs	r2, #3
 8003340:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e0d6      	b.n	80034f4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800334c:	2b00      	cmp	r3, #0
 800334e:	dbe3      	blt.n	8003318 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	6992      	ldr	r2, [r2, #24]
 8003358:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	ea02 0103 	and.w	r1, r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	69da      	ldr	r2, [r3, #28]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	409a      	lsls	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	21ff      	movs	r1, #255	@ 0xff
 8003396:	fa01 f303 	lsl.w	r3, r1, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	ea02 0103 	and.w	r1, r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	6a1a      	ldr	r2, [r3, #32]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d11d      	bne.n	80033f8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	221f      	movs	r2, #31
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2207      	movs	r2, #7
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d102      	bne.n	8003422 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800341c:	2300      	movs	r3, #0
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003420:	e00f      	b.n	8003442 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d102      	bne.n	8003430 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800342a:	2301      	movs	r3, #1
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24
 800342e:	e008      	b.n	8003442 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003438:	2301      	movs	r3, #1
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24
 800343c:	e001      	b.n	8003442 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800343e:	2300      	movs	r3, #0
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4313      	orrs	r3, r2
 800344c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43da      	mvns	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	400a      	ands	r2, r1
 8003488:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6819      	ldr	r1, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	22c0      	movs	r2, #192	@ 0xc0
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43da      	mvns	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	400a      	ands	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80034f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3728      	adds	r7, #40	@ 0x28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20008000 	.word	0x20008000

08003500 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f7ff fe96 	bl	8003240 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	711a      	strb	r2, [r3, #4]
}
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7ff fe8f 	bl	8003254 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f043 0204 	orr.w	r2, r3, #4
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7ff fe85 	bl	8003268 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	711a      	strb	r2, [r3, #4]
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f7ff ffd8 	bl	800356c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	711a      	strb	r2, [r3, #4]
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f7ff ffd1 	bl	8003580 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f043 0204 	orr.w	r2, r3, #4
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff ffc7 	bl	8003594 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	711a      	strb	r2, [r3, #4]
}
 800360c:	bf00      	nop
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800361c:	f7fd fed0 	bl	80013c0 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e312      	b.n	8003c52 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a66      	ldr	r2, [pc, #408]	@ (80037cc <HAL_DMA_Init+0x1b8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d04a      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a65      	ldr	r2, [pc, #404]	@ (80037d0 <HAL_DMA_Init+0x1bc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d045      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a63      	ldr	r2, [pc, #396]	@ (80037d4 <HAL_DMA_Init+0x1c0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d040      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a62      	ldr	r2, [pc, #392]	@ (80037d8 <HAL_DMA_Init+0x1c4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d03b      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a60      	ldr	r2, [pc, #384]	@ (80037dc <HAL_DMA_Init+0x1c8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d036      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a5f      	ldr	r2, [pc, #380]	@ (80037e0 <HAL_DMA_Init+0x1cc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d031      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a5d      	ldr	r2, [pc, #372]	@ (80037e4 <HAL_DMA_Init+0x1d0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d02c      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a5c      	ldr	r2, [pc, #368]	@ (80037e8 <HAL_DMA_Init+0x1d4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d027      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a5a      	ldr	r2, [pc, #360]	@ (80037ec <HAL_DMA_Init+0x1d8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d022      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a59      	ldr	r2, [pc, #356]	@ (80037f0 <HAL_DMA_Init+0x1dc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d01d      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a57      	ldr	r2, [pc, #348]	@ (80037f4 <HAL_DMA_Init+0x1e0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d018      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a56      	ldr	r2, [pc, #344]	@ (80037f8 <HAL_DMA_Init+0x1e4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a54      	ldr	r2, [pc, #336]	@ (80037fc <HAL_DMA_Init+0x1e8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a53      	ldr	r2, [pc, #332]	@ (8003800 <HAL_DMA_Init+0x1ec>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a51      	ldr	r2, [pc, #324]	@ (8003804 <HAL_DMA_Init+0x1f0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a50      	ldr	r2, [pc, #320]	@ (8003808 <HAL_DMA_Init+0x1f4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_DMA_Init+0xbc>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_DMA_Init+0xbe>
 80036d0:	2300      	movs	r3, #0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 813c 	beq.w	8003950 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a37      	ldr	r2, [pc, #220]	@ (80037cc <HAL_DMA_Init+0x1b8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d04a      	beq.n	8003788 <HAL_DMA_Init+0x174>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a36      	ldr	r2, [pc, #216]	@ (80037d0 <HAL_DMA_Init+0x1bc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d045      	beq.n	8003788 <HAL_DMA_Init+0x174>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a34      	ldr	r2, [pc, #208]	@ (80037d4 <HAL_DMA_Init+0x1c0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d040      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a33      	ldr	r2, [pc, #204]	@ (80037d8 <HAL_DMA_Init+0x1c4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d03b      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a31      	ldr	r2, [pc, #196]	@ (80037dc <HAL_DMA_Init+0x1c8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d036      	beq.n	8003788 <HAL_DMA_Init+0x174>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a30      	ldr	r2, [pc, #192]	@ (80037e0 <HAL_DMA_Init+0x1cc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d031      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2e      	ldr	r2, [pc, #184]	@ (80037e4 <HAL_DMA_Init+0x1d0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02c      	beq.n	8003788 <HAL_DMA_Init+0x174>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a2d      	ldr	r2, [pc, #180]	@ (80037e8 <HAL_DMA_Init+0x1d4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d027      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a2b      	ldr	r2, [pc, #172]	@ (80037ec <HAL_DMA_Init+0x1d8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a2a      	ldr	r2, [pc, #168]	@ (80037f0 <HAL_DMA_Init+0x1dc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <HAL_DMA_Init+0x174>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a28      	ldr	r2, [pc, #160]	@ (80037f4 <HAL_DMA_Init+0x1e0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a27      	ldr	r2, [pc, #156]	@ (80037f8 <HAL_DMA_Init+0x1e4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a25      	ldr	r2, [pc, #148]	@ (80037fc <HAL_DMA_Init+0x1e8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_DMA_Init+0x174>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a24      	ldr	r2, [pc, #144]	@ (8003800 <HAL_DMA_Init+0x1ec>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a22      	ldr	r2, [pc, #136]	@ (8003804 <HAL_DMA_Init+0x1f0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_DMA_Init+0x174>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a21      	ldr	r2, [pc, #132]	@ (8003808 <HAL_DMA_Init+0x1f4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d108      	bne.n	800379a <HAL_DMA_Init+0x186>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e007      	b.n	80037aa <HAL_DMA_Init+0x196>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037aa:	e02f      	b.n	800380c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ac:	f7fd fe08 	bl	80013c0 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d928      	bls.n	800380c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2203      	movs	r2, #3
 80037c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e242      	b.n	8003c52 <HAL_DMA_Init+0x63e>
 80037cc:	40020010 	.word	0x40020010
 80037d0:	40020028 	.word	0x40020028
 80037d4:	40020040 	.word	0x40020040
 80037d8:	40020058 	.word	0x40020058
 80037dc:	40020070 	.word	0x40020070
 80037e0:	40020088 	.word	0x40020088
 80037e4:	400200a0 	.word	0x400200a0
 80037e8:	400200b8 	.word	0x400200b8
 80037ec:	40020410 	.word	0x40020410
 80037f0:	40020428 	.word	0x40020428
 80037f4:	40020440 	.word	0x40020440
 80037f8:	40020458 	.word	0x40020458
 80037fc:	40020470 	.word	0x40020470
 8003800:	40020488 	.word	0x40020488
 8003804:	400204a0 	.word	0x400204a0
 8003808:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1c8      	bne.n	80037ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4b83      	ldr	r3, [pc, #524]	@ (8003a34 <HAL_DMA_Init+0x420>)
 8003826:	4013      	ands	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003832:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	2b04      	cmp	r3, #4
 800385e:	d107      	bne.n	8003870 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003868:	4313      	orrs	r3, r2
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b28      	cmp	r3, #40	@ 0x28
 8003876:	d903      	bls.n	8003880 <HAL_DMA_Init+0x26c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b2e      	cmp	r3, #46	@ 0x2e
 800387e:	d91f      	bls.n	80038c0 <HAL_DMA_Init+0x2ac>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b3e      	cmp	r3, #62	@ 0x3e
 8003886:	d903      	bls.n	8003890 <HAL_DMA_Init+0x27c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b42      	cmp	r3, #66	@ 0x42
 800388e:	d917      	bls.n	80038c0 <HAL_DMA_Init+0x2ac>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b46      	cmp	r3, #70	@ 0x46
 8003896:	d903      	bls.n	80038a0 <HAL_DMA_Init+0x28c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b48      	cmp	r3, #72	@ 0x48
 800389e:	d90f      	bls.n	80038c0 <HAL_DMA_Init+0x2ac>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b4e      	cmp	r3, #78	@ 0x4e
 80038a6:	d903      	bls.n	80038b0 <HAL_DMA_Init+0x29c>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b52      	cmp	r3, #82	@ 0x52
 80038ae:	d907      	bls.n	80038c0 <HAL_DMA_Init+0x2ac>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b73      	cmp	r3, #115	@ 0x73
 80038b6:	d905      	bls.n	80038c4 <HAL_DMA_Init+0x2b0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b77      	cmp	r3, #119	@ 0x77
 80038be:	d801      	bhi.n	80038c4 <HAL_DMA_Init+0x2b0>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <HAL_DMA_Init+0x2b2>
 80038c4:	2300      	movs	r3, #0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038d0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f023 0307 	bic.w	r3, r3, #7
 80038e8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d117      	bne.n	800392c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	4313      	orrs	r3, r2
 8003904:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00e      	beq.n	800392c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f001 fdca 	bl	80054a8 <DMA_CheckFifoParam>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2240      	movs	r2, #64	@ 0x40
 800391e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e192      	b.n	8003c52 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f001 fd05 	bl	8005344 <DMA_CalcBaseAndBitshift>
 800393a:	4603      	mov	r3, r0
 800393c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	223f      	movs	r2, #63	@ 0x3f
 8003948:	409a      	lsls	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	609a      	str	r2, [r3, #8]
 800394e:	e0c8      	b.n	8003ae2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a38      	ldr	r2, [pc, #224]	@ (8003a38 <HAL_DMA_Init+0x424>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d022      	beq.n	80039a0 <HAL_DMA_Init+0x38c>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a37      	ldr	r2, [pc, #220]	@ (8003a3c <HAL_DMA_Init+0x428>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d01d      	beq.n	80039a0 <HAL_DMA_Init+0x38c>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a35      	ldr	r2, [pc, #212]	@ (8003a40 <HAL_DMA_Init+0x42c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d018      	beq.n	80039a0 <HAL_DMA_Init+0x38c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a34      	ldr	r2, [pc, #208]	@ (8003a44 <HAL_DMA_Init+0x430>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d013      	beq.n	80039a0 <HAL_DMA_Init+0x38c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a32      	ldr	r2, [pc, #200]	@ (8003a48 <HAL_DMA_Init+0x434>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00e      	beq.n	80039a0 <HAL_DMA_Init+0x38c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a31      	ldr	r2, [pc, #196]	@ (8003a4c <HAL_DMA_Init+0x438>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d009      	beq.n	80039a0 <HAL_DMA_Init+0x38c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2f      	ldr	r2, [pc, #188]	@ (8003a50 <HAL_DMA_Init+0x43c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d004      	beq.n	80039a0 <HAL_DMA_Init+0x38c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a54 <HAL_DMA_Init+0x440>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d101      	bne.n	80039a4 <HAL_DMA_Init+0x390>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <HAL_DMA_Init+0x392>
 80039a4:	2300      	movs	r3, #0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8092 	beq.w	8003ad0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a21      	ldr	r2, [pc, #132]	@ (8003a38 <HAL_DMA_Init+0x424>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d021      	beq.n	80039fa <HAL_DMA_Init+0x3e6>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a20      	ldr	r2, [pc, #128]	@ (8003a3c <HAL_DMA_Init+0x428>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d01c      	beq.n	80039fa <HAL_DMA_Init+0x3e6>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a40 <HAL_DMA_Init+0x42c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d017      	beq.n	80039fa <HAL_DMA_Init+0x3e6>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003a44 <HAL_DMA_Init+0x430>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d012      	beq.n	80039fa <HAL_DMA_Init+0x3e6>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a48 <HAL_DMA_Init+0x434>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00d      	beq.n	80039fa <HAL_DMA_Init+0x3e6>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a1a      	ldr	r2, [pc, #104]	@ (8003a4c <HAL_DMA_Init+0x438>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d008      	beq.n	80039fa <HAL_DMA_Init+0x3e6>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a18      	ldr	r2, [pc, #96]	@ (8003a50 <HAL_DMA_Init+0x43c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d003      	beq.n	80039fa <HAL_DMA_Init+0x3e6>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a17      	ldr	r2, [pc, #92]	@ (8003a54 <HAL_DMA_Init+0x440>)
 80039f8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4b10      	ldr	r3, [pc, #64]	@ (8003a58 <HAL_DMA_Init+0x444>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b40      	cmp	r3, #64	@ 0x40
 8003a20:	d01c      	beq.n	8003a5c <HAL_DMA_Init+0x448>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b80      	cmp	r3, #128	@ 0x80
 8003a28:	d102      	bne.n	8003a30 <HAL_DMA_Init+0x41c>
 8003a2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a2e:	e016      	b.n	8003a5e <HAL_DMA_Init+0x44a>
 8003a30:	2300      	movs	r3, #0
 8003a32:	e014      	b.n	8003a5e <HAL_DMA_Init+0x44a>
 8003a34:	fe10803f 	.word	0xfe10803f
 8003a38:	58025408 	.word	0x58025408
 8003a3c:	5802541c 	.word	0x5802541c
 8003a40:	58025430 	.word	0x58025430
 8003a44:	58025444 	.word	0x58025444
 8003a48:	58025458 	.word	0x58025458
 8003a4c:	5802546c 	.word	0x5802546c
 8003a50:	58025480 	.word	0x58025480
 8003a54:	58025494 	.word	0x58025494
 8003a58:	fffe000f 	.word	0xfffe000f
 8003a5c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a8c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4b6e      	ldr	r3, [pc, #440]	@ (8003c5c <HAL_DMA_Init+0x648>)
 8003aa4:	4413      	add	r3, r2
 8003aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8003c60 <HAL_DMA_Init+0x64c>)
 8003aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	009a      	lsls	r2, r3, #2
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f001 fc45 	bl	8005344 <DMA_CalcBaseAndBitshift>
 8003aba:	4603      	mov	r3, r0
 8003abc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	e008      	b.n	8003ae2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2240      	movs	r2, #64	@ 0x40
 8003ad4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2203      	movs	r2, #3
 8003ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e0b7      	b.n	8003c52 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a5f      	ldr	r2, [pc, #380]	@ (8003c64 <HAL_DMA_Init+0x650>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d072      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a5d      	ldr	r2, [pc, #372]	@ (8003c68 <HAL_DMA_Init+0x654>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d06d      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a5c      	ldr	r2, [pc, #368]	@ (8003c6c <HAL_DMA_Init+0x658>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d068      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a5a      	ldr	r2, [pc, #360]	@ (8003c70 <HAL_DMA_Init+0x65c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d063      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a59      	ldr	r2, [pc, #356]	@ (8003c74 <HAL_DMA_Init+0x660>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d05e      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a57      	ldr	r2, [pc, #348]	@ (8003c78 <HAL_DMA_Init+0x664>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d059      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a56      	ldr	r2, [pc, #344]	@ (8003c7c <HAL_DMA_Init+0x668>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d054      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a54      	ldr	r2, [pc, #336]	@ (8003c80 <HAL_DMA_Init+0x66c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d04f      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a53      	ldr	r2, [pc, #332]	@ (8003c84 <HAL_DMA_Init+0x670>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d04a      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a51      	ldr	r2, [pc, #324]	@ (8003c88 <HAL_DMA_Init+0x674>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d045      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a50      	ldr	r2, [pc, #320]	@ (8003c8c <HAL_DMA_Init+0x678>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d040      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a4e      	ldr	r2, [pc, #312]	@ (8003c90 <HAL_DMA_Init+0x67c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d03b      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a4d      	ldr	r2, [pc, #308]	@ (8003c94 <HAL_DMA_Init+0x680>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d036      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a4b      	ldr	r2, [pc, #300]	@ (8003c98 <HAL_DMA_Init+0x684>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d031      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a4a      	ldr	r2, [pc, #296]	@ (8003c9c <HAL_DMA_Init+0x688>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d02c      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a48      	ldr	r2, [pc, #288]	@ (8003ca0 <HAL_DMA_Init+0x68c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d027      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a47      	ldr	r2, [pc, #284]	@ (8003ca4 <HAL_DMA_Init+0x690>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d022      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a45      	ldr	r2, [pc, #276]	@ (8003ca8 <HAL_DMA_Init+0x694>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01d      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a44      	ldr	r2, [pc, #272]	@ (8003cac <HAL_DMA_Init+0x698>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d018      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a42      	ldr	r2, [pc, #264]	@ (8003cb0 <HAL_DMA_Init+0x69c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a41      	ldr	r2, [pc, #260]	@ (8003cb4 <HAL_DMA_Init+0x6a0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a3f      	ldr	r2, [pc, #252]	@ (8003cb8 <HAL_DMA_Init+0x6a4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d009      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a3e      	ldr	r2, [pc, #248]	@ (8003cbc <HAL_DMA_Init+0x6a8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_DMA_Init+0x5be>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8003cc0 <HAL_DMA_Init+0x6ac>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d101      	bne.n	8003bd6 <HAL_DMA_Init+0x5c2>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_DMA_Init+0x5c4>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d032      	beq.n	8003c42 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f001 fcdf 	bl	80055a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b80      	cmp	r3, #128	@ 0x80
 8003be8:	d102      	bne.n	8003bf0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c04:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d010      	beq.n	8003c30 <HAL_DMA_Init+0x61c>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d80c      	bhi.n	8003c30 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f001 fd5c 	bl	80056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	e008      	b.n	8003c42 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	a7fdabf8 	.word	0xa7fdabf8
 8003c60:	cccccccd 	.word	0xcccccccd
 8003c64:	40020010 	.word	0x40020010
 8003c68:	40020028 	.word	0x40020028
 8003c6c:	40020040 	.word	0x40020040
 8003c70:	40020058 	.word	0x40020058
 8003c74:	40020070 	.word	0x40020070
 8003c78:	40020088 	.word	0x40020088
 8003c7c:	400200a0 	.word	0x400200a0
 8003c80:	400200b8 	.word	0x400200b8
 8003c84:	40020410 	.word	0x40020410
 8003c88:	40020428 	.word	0x40020428
 8003c8c:	40020440 	.word	0x40020440
 8003c90:	40020458 	.word	0x40020458
 8003c94:	40020470 	.word	0x40020470
 8003c98:	40020488 	.word	0x40020488
 8003c9c:	400204a0 	.word	0x400204a0
 8003ca0:	400204b8 	.word	0x400204b8
 8003ca4:	58025408 	.word	0x58025408
 8003ca8:	5802541c 	.word	0x5802541c
 8003cac:	58025430 	.word	0x58025430
 8003cb0:	58025444 	.word	0x58025444
 8003cb4:	58025458 	.word	0x58025458
 8003cb8:	5802546c 	.word	0x5802546c
 8003cbc:	58025480 	.word	0x58025480
 8003cc0:	58025494 	.word	0x58025494

08003cc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e226      	b.n	800412e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_DMA_Start_IT+0x2a>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e21f      	b.n	800412e <HAL_DMA_Start_IT+0x46a>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	f040 820a 	bne.w	8004118 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a68      	ldr	r2, [pc, #416]	@ (8003eb8 <HAL_DMA_Start_IT+0x1f4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d04a      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a66      	ldr	r2, [pc, #408]	@ (8003ebc <HAL_DMA_Start_IT+0x1f8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d045      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a65      	ldr	r2, [pc, #404]	@ (8003ec0 <HAL_DMA_Start_IT+0x1fc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d040      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a63      	ldr	r2, [pc, #396]	@ (8003ec4 <HAL_DMA_Start_IT+0x200>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d03b      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a62      	ldr	r2, [pc, #392]	@ (8003ec8 <HAL_DMA_Start_IT+0x204>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d036      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a60      	ldr	r2, [pc, #384]	@ (8003ecc <HAL_DMA_Start_IT+0x208>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d031      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a5f      	ldr	r2, [pc, #380]	@ (8003ed0 <HAL_DMA_Start_IT+0x20c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d02c      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ed4 <HAL_DMA_Start_IT+0x210>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d027      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a5c      	ldr	r2, [pc, #368]	@ (8003ed8 <HAL_DMA_Start_IT+0x214>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d022      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a5a      	ldr	r2, [pc, #360]	@ (8003edc <HAL_DMA_Start_IT+0x218>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d01d      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a59      	ldr	r2, [pc, #356]	@ (8003ee0 <HAL_DMA_Start_IT+0x21c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d018      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a57      	ldr	r2, [pc, #348]	@ (8003ee4 <HAL_DMA_Start_IT+0x220>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a56      	ldr	r2, [pc, #344]	@ (8003ee8 <HAL_DMA_Start_IT+0x224>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00e      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a54      	ldr	r2, [pc, #336]	@ (8003eec <HAL_DMA_Start_IT+0x228>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d009      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a53      	ldr	r2, [pc, #332]	@ (8003ef0 <HAL_DMA_Start_IT+0x22c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_DMA_Start_IT+0xee>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a51      	ldr	r2, [pc, #324]	@ (8003ef4 <HAL_DMA_Start_IT+0x230>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d108      	bne.n	8003dc4 <HAL_DMA_Start_IT+0x100>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	e007      	b.n	8003dd4 <HAL_DMA_Start_IT+0x110>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f001 f906 	bl	8004fec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a34      	ldr	r2, [pc, #208]	@ (8003eb8 <HAL_DMA_Start_IT+0x1f4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d04a      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a33      	ldr	r2, [pc, #204]	@ (8003ebc <HAL_DMA_Start_IT+0x1f8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d045      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a31      	ldr	r2, [pc, #196]	@ (8003ec0 <HAL_DMA_Start_IT+0x1fc>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d040      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a30      	ldr	r2, [pc, #192]	@ (8003ec4 <HAL_DMA_Start_IT+0x200>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d03b      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ec8 <HAL_DMA_Start_IT+0x204>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d036      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2d      	ldr	r2, [pc, #180]	@ (8003ecc <HAL_DMA_Start_IT+0x208>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d031      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a2b      	ldr	r2, [pc, #172]	@ (8003ed0 <HAL_DMA_Start_IT+0x20c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d02c      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ed4 <HAL_DMA_Start_IT+0x210>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d027      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a28      	ldr	r2, [pc, #160]	@ (8003ed8 <HAL_DMA_Start_IT+0x214>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d022      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a27      	ldr	r2, [pc, #156]	@ (8003edc <HAL_DMA_Start_IT+0x218>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d01d      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a25      	ldr	r2, [pc, #148]	@ (8003ee0 <HAL_DMA_Start_IT+0x21c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d018      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a24      	ldr	r2, [pc, #144]	@ (8003ee4 <HAL_DMA_Start_IT+0x220>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a22      	ldr	r2, [pc, #136]	@ (8003ee8 <HAL_DMA_Start_IT+0x224>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00e      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a21      	ldr	r2, [pc, #132]	@ (8003eec <HAL_DMA_Start_IT+0x228>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef0 <HAL_DMA_Start_IT+0x22c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <HAL_DMA_Start_IT+0x1bc>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef4 <HAL_DMA_Start_IT+0x230>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <HAL_DMA_Start_IT+0x1c0>
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <HAL_DMA_Start_IT+0x1c2>
 8003e84:	2300      	movs	r3, #0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d036      	beq.n	8003ef8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 021e 	bic.w	r2, r3, #30
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0216 	orr.w	r2, r2, #22
 8003e9c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d03e      	beq.n	8003f24 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0208 	orr.w	r2, r2, #8
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	e035      	b.n	8003f24 <HAL_DMA_Start_IT+0x260>
 8003eb8:	40020010 	.word	0x40020010
 8003ebc:	40020028 	.word	0x40020028
 8003ec0:	40020040 	.word	0x40020040
 8003ec4:	40020058 	.word	0x40020058
 8003ec8:	40020070 	.word	0x40020070
 8003ecc:	40020088 	.word	0x40020088
 8003ed0:	400200a0 	.word	0x400200a0
 8003ed4:	400200b8 	.word	0x400200b8
 8003ed8:	40020410 	.word	0x40020410
 8003edc:	40020428 	.word	0x40020428
 8003ee0:	40020440 	.word	0x40020440
 8003ee4:	40020458 	.word	0x40020458
 8003ee8:	40020470 	.word	0x40020470
 8003eec:	40020488 	.word	0x40020488
 8003ef0:	400204a0 	.word	0x400204a0
 8003ef4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f023 020e 	bic.w	r2, r3, #14
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 020a 	orr.w	r2, r2, #10
 8003f0a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0204 	orr.w	r2, r2, #4
 8003f22:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a83      	ldr	r2, [pc, #524]	@ (8004138 <HAL_DMA_Start_IT+0x474>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d072      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a82      	ldr	r2, [pc, #520]	@ (800413c <HAL_DMA_Start_IT+0x478>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d06d      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a80      	ldr	r2, [pc, #512]	@ (8004140 <HAL_DMA_Start_IT+0x47c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d068      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a7f      	ldr	r2, [pc, #508]	@ (8004144 <HAL_DMA_Start_IT+0x480>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d063      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a7d      	ldr	r2, [pc, #500]	@ (8004148 <HAL_DMA_Start_IT+0x484>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d05e      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a7c      	ldr	r2, [pc, #496]	@ (800414c <HAL_DMA_Start_IT+0x488>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d059      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a7a      	ldr	r2, [pc, #488]	@ (8004150 <HAL_DMA_Start_IT+0x48c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d054      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a79      	ldr	r2, [pc, #484]	@ (8004154 <HAL_DMA_Start_IT+0x490>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d04f      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a77      	ldr	r2, [pc, #476]	@ (8004158 <HAL_DMA_Start_IT+0x494>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d04a      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a76      	ldr	r2, [pc, #472]	@ (800415c <HAL_DMA_Start_IT+0x498>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d045      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a74      	ldr	r2, [pc, #464]	@ (8004160 <HAL_DMA_Start_IT+0x49c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d040      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a73      	ldr	r2, [pc, #460]	@ (8004164 <HAL_DMA_Start_IT+0x4a0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d03b      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a71      	ldr	r2, [pc, #452]	@ (8004168 <HAL_DMA_Start_IT+0x4a4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d036      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a70      	ldr	r2, [pc, #448]	@ (800416c <HAL_DMA_Start_IT+0x4a8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d031      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a6e      	ldr	r2, [pc, #440]	@ (8004170 <HAL_DMA_Start_IT+0x4ac>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d02c      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6d      	ldr	r2, [pc, #436]	@ (8004174 <HAL_DMA_Start_IT+0x4b0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d027      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a6b      	ldr	r2, [pc, #428]	@ (8004178 <HAL_DMA_Start_IT+0x4b4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d022      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a6a      	ldr	r2, [pc, #424]	@ (800417c <HAL_DMA_Start_IT+0x4b8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d01d      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a68      	ldr	r2, [pc, #416]	@ (8004180 <HAL_DMA_Start_IT+0x4bc>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d018      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a67      	ldr	r2, [pc, #412]	@ (8004184 <HAL_DMA_Start_IT+0x4c0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d013      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a65      	ldr	r2, [pc, #404]	@ (8004188 <HAL_DMA_Start_IT+0x4c4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00e      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a64      	ldr	r2, [pc, #400]	@ (800418c <HAL_DMA_Start_IT+0x4c8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d009      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a62      	ldr	r2, [pc, #392]	@ (8004190 <HAL_DMA_Start_IT+0x4cc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_DMA_Start_IT+0x350>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a61      	ldr	r2, [pc, #388]	@ (8004194 <HAL_DMA_Start_IT+0x4d0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d101      	bne.n	8004018 <HAL_DMA_Start_IT+0x354>
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <HAL_DMA_Start_IT+0x356>
 8004018:	2300      	movs	r3, #0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01a      	beq.n	8004054 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004036:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800403a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800404e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004052:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a37      	ldr	r2, [pc, #220]	@ (8004138 <HAL_DMA_Start_IT+0x474>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d04a      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a36      	ldr	r2, [pc, #216]	@ (800413c <HAL_DMA_Start_IT+0x478>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d045      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a34      	ldr	r2, [pc, #208]	@ (8004140 <HAL_DMA_Start_IT+0x47c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d040      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a33      	ldr	r2, [pc, #204]	@ (8004144 <HAL_DMA_Start_IT+0x480>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d03b      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a31      	ldr	r2, [pc, #196]	@ (8004148 <HAL_DMA_Start_IT+0x484>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d036      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a30      	ldr	r2, [pc, #192]	@ (800414c <HAL_DMA_Start_IT+0x488>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d031      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2e      	ldr	r2, [pc, #184]	@ (8004150 <HAL_DMA_Start_IT+0x48c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d02c      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a2d      	ldr	r2, [pc, #180]	@ (8004154 <HAL_DMA_Start_IT+0x490>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d027      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004158 <HAL_DMA_Start_IT+0x494>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d022      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a2a      	ldr	r2, [pc, #168]	@ (800415c <HAL_DMA_Start_IT+0x498>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d01d      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a28      	ldr	r2, [pc, #160]	@ (8004160 <HAL_DMA_Start_IT+0x49c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d018      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a27      	ldr	r2, [pc, #156]	@ (8004164 <HAL_DMA_Start_IT+0x4a0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a25      	ldr	r2, [pc, #148]	@ (8004168 <HAL_DMA_Start_IT+0x4a4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00e      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a24      	ldr	r2, [pc, #144]	@ (800416c <HAL_DMA_Start_IT+0x4a8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d009      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a22      	ldr	r2, [pc, #136]	@ (8004170 <HAL_DMA_Start_IT+0x4ac>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_DMA_Start_IT+0x430>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a21      	ldr	r2, [pc, #132]	@ (8004174 <HAL_DMA_Start_IT+0x4b0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d108      	bne.n	8004106 <HAL_DMA_Start_IT+0x442>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e012      	b.n	800412c <HAL_DMA_Start_IT+0x468>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	e009      	b.n	800412c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800411e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40020010 	.word	0x40020010
 800413c:	40020028 	.word	0x40020028
 8004140:	40020040 	.word	0x40020040
 8004144:	40020058 	.word	0x40020058
 8004148:	40020070 	.word	0x40020070
 800414c:	40020088 	.word	0x40020088
 8004150:	400200a0 	.word	0x400200a0
 8004154:	400200b8 	.word	0x400200b8
 8004158:	40020410 	.word	0x40020410
 800415c:	40020428 	.word	0x40020428
 8004160:	40020440 	.word	0x40020440
 8004164:	40020458 	.word	0x40020458
 8004168:	40020470 	.word	0x40020470
 800416c:	40020488 	.word	0x40020488
 8004170:	400204a0 	.word	0x400204a0
 8004174:	400204b8 	.word	0x400204b8
 8004178:	58025408 	.word	0x58025408
 800417c:	5802541c 	.word	0x5802541c
 8004180:	58025430 	.word	0x58025430
 8004184:	58025444 	.word	0x58025444
 8004188:	58025458 	.word	0x58025458
 800418c:	5802546c 	.word	0x5802546c
 8004190:	58025480 	.word	0x58025480
 8004194:	58025494 	.word	0x58025494

08004198 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	@ 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041a4:	4b67      	ldr	r3, [pc, #412]	@ (8004344 <HAL_DMA_IRQHandler+0x1ac>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a67      	ldr	r2, [pc, #412]	@ (8004348 <HAL_DMA_IRQHandler+0x1b0>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	0a9b      	lsrs	r3, r3, #10
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a5f      	ldr	r2, [pc, #380]	@ (800434c <HAL_DMA_IRQHandler+0x1b4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d04a      	beq.n	800426a <HAL_DMA_IRQHandler+0xd2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a5d      	ldr	r2, [pc, #372]	@ (8004350 <HAL_DMA_IRQHandler+0x1b8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d045      	beq.n	800426a <HAL_DMA_IRQHandler+0xd2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a5c      	ldr	r2, [pc, #368]	@ (8004354 <HAL_DMA_IRQHandler+0x1bc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d040      	beq.n	800426a <HAL_DMA_IRQHandler+0xd2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a5a      	ldr	r2, [pc, #360]	@ (8004358 <HAL_DMA_IRQHandler+0x1c0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d03b      	beq.n	800426a <HAL_DMA_IRQHandler+0xd2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a59      	ldr	r2, [pc, #356]	@ (800435c <HAL_DMA_IRQHandler+0x1c4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d036      	beq.n	800426a <HAL_DMA_IRQHandler+0xd2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a57      	ldr	r2, [pc, #348]	@ (8004360 <HAL_DMA_IRQHandler+0x1c8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d031      	beq.n	800426a <HAL_DMA_IRQHandler+0xd2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a56      	ldr	r2, [pc, #344]	@ (8004364 <HAL_DMA_IRQHandler+0x1cc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d02c      	beq.n	800426a <HAL_DMA_IRQHandler+0xd2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a54      	ldr	r2, [pc, #336]	@ (8004368 <HAL_DMA_IRQHandler+0x1d0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d027      	beq.n	800426a <HAL_DMA_IRQHandler+0xd2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a53      	ldr	r2, [pc, #332]	@ (800436c <HAL_DMA_IRQHandler+0x1d4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d022      	beq.n	800426a <HAL_DMA_IRQHandler+0xd2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a51      	ldr	r2, [pc, #324]	@ (8004370 <HAL_DMA_IRQHandler+0x1d8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01d      	beq.n	800426a <HAL_DMA_IRQHandler+0xd2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a50      	ldr	r2, [pc, #320]	@ (8004374 <HAL_DMA_IRQHandler+0x1dc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d018      	beq.n	800426a <HAL_DMA_IRQHandler+0xd2>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a4e      	ldr	r2, [pc, #312]	@ (8004378 <HAL_DMA_IRQHandler+0x1e0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d013      	beq.n	800426a <HAL_DMA_IRQHandler+0xd2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a4d      	ldr	r2, [pc, #308]	@ (800437c <HAL_DMA_IRQHandler+0x1e4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00e      	beq.n	800426a <HAL_DMA_IRQHandler+0xd2>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a4b      	ldr	r2, [pc, #300]	@ (8004380 <HAL_DMA_IRQHandler+0x1e8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d009      	beq.n	800426a <HAL_DMA_IRQHandler+0xd2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a4a      	ldr	r2, [pc, #296]	@ (8004384 <HAL_DMA_IRQHandler+0x1ec>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d004      	beq.n	800426a <HAL_DMA_IRQHandler+0xd2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a48      	ldr	r2, [pc, #288]	@ (8004388 <HAL_DMA_IRQHandler+0x1f0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d101      	bne.n	800426e <HAL_DMA_IRQHandler+0xd6>
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <HAL_DMA_IRQHandler+0xd8>
 800426e:	2300      	movs	r3, #0
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 842b 	beq.w	8004acc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	2208      	movs	r2, #8
 8004280:	409a      	lsls	r2, r3
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	4013      	ands	r3, r2
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80a2 	beq.w	80043d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a2e      	ldr	r2, [pc, #184]	@ (800434c <HAL_DMA_IRQHandler+0x1b4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d04a      	beq.n	800432c <HAL_DMA_IRQHandler+0x194>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a2d      	ldr	r2, [pc, #180]	@ (8004350 <HAL_DMA_IRQHandler+0x1b8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d045      	beq.n	800432c <HAL_DMA_IRQHandler+0x194>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004354 <HAL_DMA_IRQHandler+0x1bc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d040      	beq.n	800432c <HAL_DMA_IRQHandler+0x194>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004358 <HAL_DMA_IRQHandler+0x1c0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d03b      	beq.n	800432c <HAL_DMA_IRQHandler+0x194>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a28      	ldr	r2, [pc, #160]	@ (800435c <HAL_DMA_IRQHandler+0x1c4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d036      	beq.n	800432c <HAL_DMA_IRQHandler+0x194>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a27      	ldr	r2, [pc, #156]	@ (8004360 <HAL_DMA_IRQHandler+0x1c8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d031      	beq.n	800432c <HAL_DMA_IRQHandler+0x194>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a25      	ldr	r2, [pc, #148]	@ (8004364 <HAL_DMA_IRQHandler+0x1cc>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d02c      	beq.n	800432c <HAL_DMA_IRQHandler+0x194>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a24      	ldr	r2, [pc, #144]	@ (8004368 <HAL_DMA_IRQHandler+0x1d0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d027      	beq.n	800432c <HAL_DMA_IRQHandler+0x194>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a22      	ldr	r2, [pc, #136]	@ (800436c <HAL_DMA_IRQHandler+0x1d4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d022      	beq.n	800432c <HAL_DMA_IRQHandler+0x194>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a21      	ldr	r2, [pc, #132]	@ (8004370 <HAL_DMA_IRQHandler+0x1d8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d01d      	beq.n	800432c <HAL_DMA_IRQHandler+0x194>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004374 <HAL_DMA_IRQHandler+0x1dc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d018      	beq.n	800432c <HAL_DMA_IRQHandler+0x194>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004378 <HAL_DMA_IRQHandler+0x1e0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <HAL_DMA_IRQHandler+0x194>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1c      	ldr	r2, [pc, #112]	@ (800437c <HAL_DMA_IRQHandler+0x1e4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00e      	beq.n	800432c <HAL_DMA_IRQHandler+0x194>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1b      	ldr	r2, [pc, #108]	@ (8004380 <HAL_DMA_IRQHandler+0x1e8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d009      	beq.n	800432c <HAL_DMA_IRQHandler+0x194>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a19      	ldr	r2, [pc, #100]	@ (8004384 <HAL_DMA_IRQHandler+0x1ec>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <HAL_DMA_IRQHandler+0x194>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a18      	ldr	r2, [pc, #96]	@ (8004388 <HAL_DMA_IRQHandler+0x1f0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d12f      	bne.n	800438c <HAL_DMA_IRQHandler+0x1f4>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	bf14      	ite	ne
 800433a:	2301      	movne	r3, #1
 800433c:	2300      	moveq	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	e02e      	b.n	80043a0 <HAL_DMA_IRQHandler+0x208>
 8004342:	bf00      	nop
 8004344:	24000000 	.word	0x24000000
 8004348:	1b4e81b5 	.word	0x1b4e81b5
 800434c:	40020010 	.word	0x40020010
 8004350:	40020028 	.word	0x40020028
 8004354:	40020040 	.word	0x40020040
 8004358:	40020058 	.word	0x40020058
 800435c:	40020070 	.word	0x40020070
 8004360:	40020088 	.word	0x40020088
 8004364:	400200a0 	.word	0x400200a0
 8004368:	400200b8 	.word	0x400200b8
 800436c:	40020410 	.word	0x40020410
 8004370:	40020428 	.word	0x40020428
 8004374:	40020440 	.word	0x40020440
 8004378:	40020458 	.word	0x40020458
 800437c:	40020470 	.word	0x40020470
 8004380:	40020488 	.word	0x40020488
 8004384:	400204a0 	.word	0x400204a0
 8004388:	400204b8 	.word	0x400204b8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	bf14      	ite	ne
 800439a:	2301      	movne	r3, #1
 800439c:	2300      	moveq	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d015      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0204 	bic.w	r2, r2, #4
 80043b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	2208      	movs	r2, #8
 80043be:	409a      	lsls	r2, r3
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c8:	f043 0201 	orr.w	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	fa22 f303 	lsr.w	r3, r2, r3
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d06e      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a69      	ldr	r2, [pc, #420]	@ (8004590 <HAL_DMA_IRQHandler+0x3f8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d04a      	beq.n	8004486 <HAL_DMA_IRQHandler+0x2ee>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a67      	ldr	r2, [pc, #412]	@ (8004594 <HAL_DMA_IRQHandler+0x3fc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d045      	beq.n	8004486 <HAL_DMA_IRQHandler+0x2ee>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a66      	ldr	r2, [pc, #408]	@ (8004598 <HAL_DMA_IRQHandler+0x400>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d040      	beq.n	8004486 <HAL_DMA_IRQHandler+0x2ee>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a64      	ldr	r2, [pc, #400]	@ (800459c <HAL_DMA_IRQHandler+0x404>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d03b      	beq.n	8004486 <HAL_DMA_IRQHandler+0x2ee>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a63      	ldr	r2, [pc, #396]	@ (80045a0 <HAL_DMA_IRQHandler+0x408>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d036      	beq.n	8004486 <HAL_DMA_IRQHandler+0x2ee>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a61      	ldr	r2, [pc, #388]	@ (80045a4 <HAL_DMA_IRQHandler+0x40c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d031      	beq.n	8004486 <HAL_DMA_IRQHandler+0x2ee>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a60      	ldr	r2, [pc, #384]	@ (80045a8 <HAL_DMA_IRQHandler+0x410>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d02c      	beq.n	8004486 <HAL_DMA_IRQHandler+0x2ee>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a5e      	ldr	r2, [pc, #376]	@ (80045ac <HAL_DMA_IRQHandler+0x414>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d027      	beq.n	8004486 <HAL_DMA_IRQHandler+0x2ee>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a5d      	ldr	r2, [pc, #372]	@ (80045b0 <HAL_DMA_IRQHandler+0x418>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d022      	beq.n	8004486 <HAL_DMA_IRQHandler+0x2ee>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a5b      	ldr	r2, [pc, #364]	@ (80045b4 <HAL_DMA_IRQHandler+0x41c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d01d      	beq.n	8004486 <HAL_DMA_IRQHandler+0x2ee>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a5a      	ldr	r2, [pc, #360]	@ (80045b8 <HAL_DMA_IRQHandler+0x420>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d018      	beq.n	8004486 <HAL_DMA_IRQHandler+0x2ee>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a58      	ldr	r2, [pc, #352]	@ (80045bc <HAL_DMA_IRQHandler+0x424>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <HAL_DMA_IRQHandler+0x2ee>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a57      	ldr	r2, [pc, #348]	@ (80045c0 <HAL_DMA_IRQHandler+0x428>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00e      	beq.n	8004486 <HAL_DMA_IRQHandler+0x2ee>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a55      	ldr	r2, [pc, #340]	@ (80045c4 <HAL_DMA_IRQHandler+0x42c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d009      	beq.n	8004486 <HAL_DMA_IRQHandler+0x2ee>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a54      	ldr	r2, [pc, #336]	@ (80045c8 <HAL_DMA_IRQHandler+0x430>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_DMA_IRQHandler+0x2ee>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a52      	ldr	r2, [pc, #328]	@ (80045cc <HAL_DMA_IRQHandler+0x434>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d10a      	bne.n	800449c <HAL_DMA_IRQHandler+0x304>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf14      	ite	ne
 8004494:	2301      	movne	r3, #1
 8004496:	2300      	moveq	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	e003      	b.n	80044a4 <HAL_DMA_IRQHandler+0x30c>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2300      	movs	r3, #0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00d      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	2201      	movs	r2, #1
 80044b2:	409a      	lsls	r2, r3
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044bc:	f043 0202 	orr.w	r2, r3, #2
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	2204      	movs	r2, #4
 80044ce:	409a      	lsls	r2, r3
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 808f 	beq.w	80045f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a2c      	ldr	r2, [pc, #176]	@ (8004590 <HAL_DMA_IRQHandler+0x3f8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d04a      	beq.n	800457a <HAL_DMA_IRQHandler+0x3e2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004594 <HAL_DMA_IRQHandler+0x3fc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d045      	beq.n	800457a <HAL_DMA_IRQHandler+0x3e2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a29      	ldr	r2, [pc, #164]	@ (8004598 <HAL_DMA_IRQHandler+0x400>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d040      	beq.n	800457a <HAL_DMA_IRQHandler+0x3e2>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a27      	ldr	r2, [pc, #156]	@ (800459c <HAL_DMA_IRQHandler+0x404>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d03b      	beq.n	800457a <HAL_DMA_IRQHandler+0x3e2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a26      	ldr	r2, [pc, #152]	@ (80045a0 <HAL_DMA_IRQHandler+0x408>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d036      	beq.n	800457a <HAL_DMA_IRQHandler+0x3e2>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a24      	ldr	r2, [pc, #144]	@ (80045a4 <HAL_DMA_IRQHandler+0x40c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d031      	beq.n	800457a <HAL_DMA_IRQHandler+0x3e2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a23      	ldr	r2, [pc, #140]	@ (80045a8 <HAL_DMA_IRQHandler+0x410>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d02c      	beq.n	800457a <HAL_DMA_IRQHandler+0x3e2>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a21      	ldr	r2, [pc, #132]	@ (80045ac <HAL_DMA_IRQHandler+0x414>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d027      	beq.n	800457a <HAL_DMA_IRQHandler+0x3e2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a20      	ldr	r2, [pc, #128]	@ (80045b0 <HAL_DMA_IRQHandler+0x418>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d022      	beq.n	800457a <HAL_DMA_IRQHandler+0x3e2>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1e      	ldr	r2, [pc, #120]	@ (80045b4 <HAL_DMA_IRQHandler+0x41c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d01d      	beq.n	800457a <HAL_DMA_IRQHandler+0x3e2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1d      	ldr	r2, [pc, #116]	@ (80045b8 <HAL_DMA_IRQHandler+0x420>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d018      	beq.n	800457a <HAL_DMA_IRQHandler+0x3e2>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1b      	ldr	r2, [pc, #108]	@ (80045bc <HAL_DMA_IRQHandler+0x424>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <HAL_DMA_IRQHandler+0x3e2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1a      	ldr	r2, [pc, #104]	@ (80045c0 <HAL_DMA_IRQHandler+0x428>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00e      	beq.n	800457a <HAL_DMA_IRQHandler+0x3e2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a18      	ldr	r2, [pc, #96]	@ (80045c4 <HAL_DMA_IRQHandler+0x42c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d009      	beq.n	800457a <HAL_DMA_IRQHandler+0x3e2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a17      	ldr	r2, [pc, #92]	@ (80045c8 <HAL_DMA_IRQHandler+0x430>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d004      	beq.n	800457a <HAL_DMA_IRQHandler+0x3e2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a15      	ldr	r2, [pc, #84]	@ (80045cc <HAL_DMA_IRQHandler+0x434>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d12a      	bne.n	80045d0 <HAL_DMA_IRQHandler+0x438>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	bf14      	ite	ne
 8004588:	2301      	movne	r3, #1
 800458a:	2300      	moveq	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e023      	b.n	80045d8 <HAL_DMA_IRQHandler+0x440>
 8004590:	40020010 	.word	0x40020010
 8004594:	40020028 	.word	0x40020028
 8004598:	40020040 	.word	0x40020040
 800459c:	40020058 	.word	0x40020058
 80045a0:	40020070 	.word	0x40020070
 80045a4:	40020088 	.word	0x40020088
 80045a8:	400200a0 	.word	0x400200a0
 80045ac:	400200b8 	.word	0x400200b8
 80045b0:	40020410 	.word	0x40020410
 80045b4:	40020428 	.word	0x40020428
 80045b8:	40020440 	.word	0x40020440
 80045bc:	40020458 	.word	0x40020458
 80045c0:	40020470 	.word	0x40020470
 80045c4:	40020488 	.word	0x40020488
 80045c8:	400204a0 	.word	0x400204a0
 80045cc:	400204b8 	.word	0x400204b8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2300      	movs	r3, #0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00d      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	2204      	movs	r2, #4
 80045e6:	409a      	lsls	r2, r3
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f0:	f043 0204 	orr.w	r2, r3, #4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	2210      	movs	r2, #16
 8004602:	409a      	lsls	r2, r3
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 80a6 	beq.w	800475a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a85      	ldr	r2, [pc, #532]	@ (8004828 <HAL_DMA_IRQHandler+0x690>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d04a      	beq.n	80046ae <HAL_DMA_IRQHandler+0x516>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a83      	ldr	r2, [pc, #524]	@ (800482c <HAL_DMA_IRQHandler+0x694>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d045      	beq.n	80046ae <HAL_DMA_IRQHandler+0x516>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a82      	ldr	r2, [pc, #520]	@ (8004830 <HAL_DMA_IRQHandler+0x698>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d040      	beq.n	80046ae <HAL_DMA_IRQHandler+0x516>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a80      	ldr	r2, [pc, #512]	@ (8004834 <HAL_DMA_IRQHandler+0x69c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d03b      	beq.n	80046ae <HAL_DMA_IRQHandler+0x516>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a7f      	ldr	r2, [pc, #508]	@ (8004838 <HAL_DMA_IRQHandler+0x6a0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d036      	beq.n	80046ae <HAL_DMA_IRQHandler+0x516>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a7d      	ldr	r2, [pc, #500]	@ (800483c <HAL_DMA_IRQHandler+0x6a4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d031      	beq.n	80046ae <HAL_DMA_IRQHandler+0x516>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a7c      	ldr	r2, [pc, #496]	@ (8004840 <HAL_DMA_IRQHandler+0x6a8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d02c      	beq.n	80046ae <HAL_DMA_IRQHandler+0x516>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a7a      	ldr	r2, [pc, #488]	@ (8004844 <HAL_DMA_IRQHandler+0x6ac>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d027      	beq.n	80046ae <HAL_DMA_IRQHandler+0x516>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a79      	ldr	r2, [pc, #484]	@ (8004848 <HAL_DMA_IRQHandler+0x6b0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d022      	beq.n	80046ae <HAL_DMA_IRQHandler+0x516>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a77      	ldr	r2, [pc, #476]	@ (800484c <HAL_DMA_IRQHandler+0x6b4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d01d      	beq.n	80046ae <HAL_DMA_IRQHandler+0x516>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a76      	ldr	r2, [pc, #472]	@ (8004850 <HAL_DMA_IRQHandler+0x6b8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d018      	beq.n	80046ae <HAL_DMA_IRQHandler+0x516>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a74      	ldr	r2, [pc, #464]	@ (8004854 <HAL_DMA_IRQHandler+0x6bc>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_DMA_IRQHandler+0x516>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a73      	ldr	r2, [pc, #460]	@ (8004858 <HAL_DMA_IRQHandler+0x6c0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00e      	beq.n	80046ae <HAL_DMA_IRQHandler+0x516>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a71      	ldr	r2, [pc, #452]	@ (800485c <HAL_DMA_IRQHandler+0x6c4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d009      	beq.n	80046ae <HAL_DMA_IRQHandler+0x516>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a70      	ldr	r2, [pc, #448]	@ (8004860 <HAL_DMA_IRQHandler+0x6c8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d004      	beq.n	80046ae <HAL_DMA_IRQHandler+0x516>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004864 <HAL_DMA_IRQHandler+0x6cc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d10a      	bne.n	80046c4 <HAL_DMA_IRQHandler+0x52c>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e009      	b.n	80046d8 <HAL_DMA_IRQHandler+0x540>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bf14      	ite	ne
 80046d2:	2301      	movne	r3, #1
 80046d4:	2300      	moveq	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d03e      	beq.n	800475a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2210      	movs	r2, #16
 80046e6:	409a      	lsls	r2, r3
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d018      	beq.n	800472c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d108      	bne.n	800471a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	d024      	beq.n	800475a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	4798      	blx	r3
 8004718:	e01f      	b.n	800475a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800471e:	2b00      	cmp	r3, #0
 8004720:	d01b      	beq.n	800475a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	4798      	blx	r3
 800472a:	e016      	b.n	800475a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004736:	2b00      	cmp	r3, #0
 8004738:	d107      	bne.n	800474a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0208 	bic.w	r2, r2, #8
 8004748:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475e:	f003 031f 	and.w	r3, r3, #31
 8004762:	2220      	movs	r2, #32
 8004764:	409a      	lsls	r2, r3
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 8110 	beq.w	8004990 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a2c      	ldr	r2, [pc, #176]	@ (8004828 <HAL_DMA_IRQHandler+0x690>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d04a      	beq.n	8004810 <HAL_DMA_IRQHandler+0x678>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2b      	ldr	r2, [pc, #172]	@ (800482c <HAL_DMA_IRQHandler+0x694>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d045      	beq.n	8004810 <HAL_DMA_IRQHandler+0x678>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a29      	ldr	r2, [pc, #164]	@ (8004830 <HAL_DMA_IRQHandler+0x698>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d040      	beq.n	8004810 <HAL_DMA_IRQHandler+0x678>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a28      	ldr	r2, [pc, #160]	@ (8004834 <HAL_DMA_IRQHandler+0x69c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d03b      	beq.n	8004810 <HAL_DMA_IRQHandler+0x678>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a26      	ldr	r2, [pc, #152]	@ (8004838 <HAL_DMA_IRQHandler+0x6a0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d036      	beq.n	8004810 <HAL_DMA_IRQHandler+0x678>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a25      	ldr	r2, [pc, #148]	@ (800483c <HAL_DMA_IRQHandler+0x6a4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d031      	beq.n	8004810 <HAL_DMA_IRQHandler+0x678>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a23      	ldr	r2, [pc, #140]	@ (8004840 <HAL_DMA_IRQHandler+0x6a8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d02c      	beq.n	8004810 <HAL_DMA_IRQHandler+0x678>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a22      	ldr	r2, [pc, #136]	@ (8004844 <HAL_DMA_IRQHandler+0x6ac>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d027      	beq.n	8004810 <HAL_DMA_IRQHandler+0x678>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a20      	ldr	r2, [pc, #128]	@ (8004848 <HAL_DMA_IRQHandler+0x6b0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <HAL_DMA_IRQHandler+0x678>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1f      	ldr	r2, [pc, #124]	@ (800484c <HAL_DMA_IRQHandler+0x6b4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d01d      	beq.n	8004810 <HAL_DMA_IRQHandler+0x678>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004850 <HAL_DMA_IRQHandler+0x6b8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_DMA_IRQHandler+0x678>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004854 <HAL_DMA_IRQHandler+0x6bc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_DMA_IRQHandler+0x678>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004858 <HAL_DMA_IRQHandler+0x6c0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_DMA_IRQHandler+0x678>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a19      	ldr	r2, [pc, #100]	@ (800485c <HAL_DMA_IRQHandler+0x6c4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_DMA_IRQHandler+0x678>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a17      	ldr	r2, [pc, #92]	@ (8004860 <HAL_DMA_IRQHandler+0x6c8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_DMA_IRQHandler+0x678>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a16      	ldr	r2, [pc, #88]	@ (8004864 <HAL_DMA_IRQHandler+0x6cc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d12b      	bne.n	8004868 <HAL_DMA_IRQHandler+0x6d0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0310 	and.w	r3, r3, #16
 800481a:	2b00      	cmp	r3, #0
 800481c:	bf14      	ite	ne
 800481e:	2301      	movne	r3, #1
 8004820:	2300      	moveq	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	e02a      	b.n	800487c <HAL_DMA_IRQHandler+0x6e4>
 8004826:	bf00      	nop
 8004828:	40020010 	.word	0x40020010
 800482c:	40020028 	.word	0x40020028
 8004830:	40020040 	.word	0x40020040
 8004834:	40020058 	.word	0x40020058
 8004838:	40020070 	.word	0x40020070
 800483c:	40020088 	.word	0x40020088
 8004840:	400200a0 	.word	0x400200a0
 8004844:	400200b8 	.word	0x400200b8
 8004848:	40020410 	.word	0x40020410
 800484c:	40020428 	.word	0x40020428
 8004850:	40020440 	.word	0x40020440
 8004854:	40020458 	.word	0x40020458
 8004858:	40020470 	.word	0x40020470
 800485c:	40020488 	.word	0x40020488
 8004860:	400204a0 	.word	0x400204a0
 8004864:	400204b8 	.word	0x400204b8
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	bf14      	ite	ne
 8004876:	2301      	movne	r3, #1
 8004878:	2300      	moveq	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8087 	beq.w	8004990 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	2220      	movs	r2, #32
 800488c:	409a      	lsls	r2, r3
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b04      	cmp	r3, #4
 800489c:	d139      	bne.n	8004912 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0216 	bic.w	r2, r2, #22
 80048ac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695a      	ldr	r2, [r3, #20]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048bc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d103      	bne.n	80048ce <HAL_DMA_IRQHandler+0x736>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d007      	beq.n	80048de <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0208 	bic.w	r2, r2, #8
 80048dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	223f      	movs	r2, #63	@ 0x3f
 80048e8:	409a      	lsls	r2, r3
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 834a 	beq.w	8004f9c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	4798      	blx	r3
          }
          return;
 8004910:	e344      	b.n	8004f9c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d018      	beq.n	8004952 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d108      	bne.n	8004940 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004932:	2b00      	cmp	r3, #0
 8004934:	d02c      	beq.n	8004990 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	4798      	blx	r3
 800493e:	e027      	b.n	8004990 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d023      	beq.n	8004990 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4798      	blx	r3
 8004950:	e01e      	b.n	8004990 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10f      	bne.n	8004980 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0210 	bic.w	r2, r2, #16
 800496e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8306 	beq.w	8004fa6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 8088 	beq.w	8004ab8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2204      	movs	r2, #4
 80049ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a7a      	ldr	r2, [pc, #488]	@ (8004ba0 <HAL_DMA_IRQHandler+0xa08>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d04a      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x8b8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a79      	ldr	r2, [pc, #484]	@ (8004ba4 <HAL_DMA_IRQHandler+0xa0c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d045      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x8b8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a77      	ldr	r2, [pc, #476]	@ (8004ba8 <HAL_DMA_IRQHandler+0xa10>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d040      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x8b8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a76      	ldr	r2, [pc, #472]	@ (8004bac <HAL_DMA_IRQHandler+0xa14>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d03b      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x8b8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a74      	ldr	r2, [pc, #464]	@ (8004bb0 <HAL_DMA_IRQHandler+0xa18>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d036      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x8b8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a73      	ldr	r2, [pc, #460]	@ (8004bb4 <HAL_DMA_IRQHandler+0xa1c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d031      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x8b8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a71      	ldr	r2, [pc, #452]	@ (8004bb8 <HAL_DMA_IRQHandler+0xa20>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d02c      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x8b8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a70      	ldr	r2, [pc, #448]	@ (8004bbc <HAL_DMA_IRQHandler+0xa24>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d027      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x8b8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a6e      	ldr	r2, [pc, #440]	@ (8004bc0 <HAL_DMA_IRQHandler+0xa28>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d022      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x8b8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a6d      	ldr	r2, [pc, #436]	@ (8004bc4 <HAL_DMA_IRQHandler+0xa2c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d01d      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x8b8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a6b      	ldr	r2, [pc, #428]	@ (8004bc8 <HAL_DMA_IRQHandler+0xa30>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d018      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x8b8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a6a      	ldr	r2, [pc, #424]	@ (8004bcc <HAL_DMA_IRQHandler+0xa34>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d013      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x8b8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a68      	ldr	r2, [pc, #416]	@ (8004bd0 <HAL_DMA_IRQHandler+0xa38>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00e      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x8b8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a67      	ldr	r2, [pc, #412]	@ (8004bd4 <HAL_DMA_IRQHandler+0xa3c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d009      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x8b8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a65      	ldr	r2, [pc, #404]	@ (8004bd8 <HAL_DMA_IRQHandler+0xa40>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x8b8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a64      	ldr	r2, [pc, #400]	@ (8004bdc <HAL_DMA_IRQHandler+0xa44>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d108      	bne.n	8004a62 <HAL_DMA_IRQHandler+0x8ca>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e007      	b.n	8004a72 <HAL_DMA_IRQHandler+0x8da>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3301      	adds	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d307      	bcc.n	8004a8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f2      	bne.n	8004a72 <HAL_DMA_IRQHandler+0x8da>
 8004a8c:	e000      	b.n	8004a90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004a8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d004      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004aa6:	e003      	b.n	8004ab0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8272 	beq.w	8004fa6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
 8004aca:	e26c      	b.n	8004fa6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a43      	ldr	r2, [pc, #268]	@ (8004be0 <HAL_DMA_IRQHandler+0xa48>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d022      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x984>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a42      	ldr	r2, [pc, #264]	@ (8004be4 <HAL_DMA_IRQHandler+0xa4c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d01d      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x984>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a40      	ldr	r2, [pc, #256]	@ (8004be8 <HAL_DMA_IRQHandler+0xa50>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d018      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x984>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a3f      	ldr	r2, [pc, #252]	@ (8004bec <HAL_DMA_IRQHandler+0xa54>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d013      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x984>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a3d      	ldr	r2, [pc, #244]	@ (8004bf0 <HAL_DMA_IRQHandler+0xa58>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00e      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x984>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a3c      	ldr	r2, [pc, #240]	@ (8004bf4 <HAL_DMA_IRQHandler+0xa5c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d009      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x984>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a3a      	ldr	r2, [pc, #232]	@ (8004bf8 <HAL_DMA_IRQHandler+0xa60>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d004      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x984>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a39      	ldr	r2, [pc, #228]	@ (8004bfc <HAL_DMA_IRQHandler+0xa64>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <HAL_DMA_IRQHandler+0x988>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_DMA_IRQHandler+0x98a>
 8004b20:	2300      	movs	r3, #0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 823f 	beq.w	8004fa6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b34:	f003 031f 	and.w	r3, r3, #31
 8004b38:	2204      	movs	r2, #4
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80cd 	beq.w	8004ce0 <HAL_DMA_IRQHandler+0xb48>
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80c7 	beq.w	8004ce0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b56:	f003 031f 	and.w	r3, r3, #31
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d049      	beq.n	8004c00 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d109      	bne.n	8004b8a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 8210 	beq.w	8004fa0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b88:	e20a      	b.n	8004fa0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 8206 	beq.w	8004fa0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b9c:	e200      	b.n	8004fa0 <HAL_DMA_IRQHandler+0xe08>
 8004b9e:	bf00      	nop
 8004ba0:	40020010 	.word	0x40020010
 8004ba4:	40020028 	.word	0x40020028
 8004ba8:	40020040 	.word	0x40020040
 8004bac:	40020058 	.word	0x40020058
 8004bb0:	40020070 	.word	0x40020070
 8004bb4:	40020088 	.word	0x40020088
 8004bb8:	400200a0 	.word	0x400200a0
 8004bbc:	400200b8 	.word	0x400200b8
 8004bc0:	40020410 	.word	0x40020410
 8004bc4:	40020428 	.word	0x40020428
 8004bc8:	40020440 	.word	0x40020440
 8004bcc:	40020458 	.word	0x40020458
 8004bd0:	40020470 	.word	0x40020470
 8004bd4:	40020488 	.word	0x40020488
 8004bd8:	400204a0 	.word	0x400204a0
 8004bdc:	400204b8 	.word	0x400204b8
 8004be0:	58025408 	.word	0x58025408
 8004be4:	5802541c 	.word	0x5802541c
 8004be8:	58025430 	.word	0x58025430
 8004bec:	58025444 	.word	0x58025444
 8004bf0:	58025458 	.word	0x58025458
 8004bf4:	5802546c 	.word	0x5802546c
 8004bf8:	58025480 	.word	0x58025480
 8004bfc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d160      	bne.n	8004ccc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a7f      	ldr	r2, [pc, #508]	@ (8004e0c <HAL_DMA_IRQHandler+0xc74>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d04a      	beq.n	8004caa <HAL_DMA_IRQHandler+0xb12>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a7d      	ldr	r2, [pc, #500]	@ (8004e10 <HAL_DMA_IRQHandler+0xc78>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d045      	beq.n	8004caa <HAL_DMA_IRQHandler+0xb12>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a7c      	ldr	r2, [pc, #496]	@ (8004e14 <HAL_DMA_IRQHandler+0xc7c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d040      	beq.n	8004caa <HAL_DMA_IRQHandler+0xb12>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a7a      	ldr	r2, [pc, #488]	@ (8004e18 <HAL_DMA_IRQHandler+0xc80>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d03b      	beq.n	8004caa <HAL_DMA_IRQHandler+0xb12>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a79      	ldr	r2, [pc, #484]	@ (8004e1c <HAL_DMA_IRQHandler+0xc84>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d036      	beq.n	8004caa <HAL_DMA_IRQHandler+0xb12>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a77      	ldr	r2, [pc, #476]	@ (8004e20 <HAL_DMA_IRQHandler+0xc88>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d031      	beq.n	8004caa <HAL_DMA_IRQHandler+0xb12>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a76      	ldr	r2, [pc, #472]	@ (8004e24 <HAL_DMA_IRQHandler+0xc8c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d02c      	beq.n	8004caa <HAL_DMA_IRQHandler+0xb12>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a74      	ldr	r2, [pc, #464]	@ (8004e28 <HAL_DMA_IRQHandler+0xc90>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d027      	beq.n	8004caa <HAL_DMA_IRQHandler+0xb12>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a73      	ldr	r2, [pc, #460]	@ (8004e2c <HAL_DMA_IRQHandler+0xc94>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d022      	beq.n	8004caa <HAL_DMA_IRQHandler+0xb12>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a71      	ldr	r2, [pc, #452]	@ (8004e30 <HAL_DMA_IRQHandler+0xc98>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d01d      	beq.n	8004caa <HAL_DMA_IRQHandler+0xb12>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a70      	ldr	r2, [pc, #448]	@ (8004e34 <HAL_DMA_IRQHandler+0xc9c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d018      	beq.n	8004caa <HAL_DMA_IRQHandler+0xb12>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e38 <HAL_DMA_IRQHandler+0xca0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <HAL_DMA_IRQHandler+0xb12>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a6d      	ldr	r2, [pc, #436]	@ (8004e3c <HAL_DMA_IRQHandler+0xca4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00e      	beq.n	8004caa <HAL_DMA_IRQHandler+0xb12>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a6b      	ldr	r2, [pc, #428]	@ (8004e40 <HAL_DMA_IRQHandler+0xca8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d009      	beq.n	8004caa <HAL_DMA_IRQHandler+0xb12>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a6a      	ldr	r2, [pc, #424]	@ (8004e44 <HAL_DMA_IRQHandler+0xcac>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_DMA_IRQHandler+0xb12>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a68      	ldr	r2, [pc, #416]	@ (8004e48 <HAL_DMA_IRQHandler+0xcb0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d108      	bne.n	8004cbc <HAL_DMA_IRQHandler+0xb24>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0208 	bic.w	r2, r2, #8
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	e007      	b.n	8004ccc <HAL_DMA_IRQHandler+0xb34>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0204 	bic.w	r2, r2, #4
 8004cca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8165 	beq.w	8004fa0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cde:	e15f      	b.n	8004fa0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	2202      	movs	r2, #2
 8004cea:	409a      	lsls	r2, r3
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80c5 	beq.w	8004e80 <HAL_DMA_IRQHandler+0xce8>
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 80bf 	beq.w	8004e80 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	409a      	lsls	r2, r3
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d018      	beq.n	8004d4e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d109      	bne.n	8004d3a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 813a 	beq.w	8004fa4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d38:	e134      	b.n	8004fa4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8130 	beq.w	8004fa4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d4c:	e12a      	b.n	8004fa4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f040 8089 	bne.w	8004e6c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8004e0c <HAL_DMA_IRQHandler+0xc74>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d04a      	beq.n	8004dfa <HAL_DMA_IRQHandler+0xc62>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a29      	ldr	r2, [pc, #164]	@ (8004e10 <HAL_DMA_IRQHandler+0xc78>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d045      	beq.n	8004dfa <HAL_DMA_IRQHandler+0xc62>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a28      	ldr	r2, [pc, #160]	@ (8004e14 <HAL_DMA_IRQHandler+0xc7c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d040      	beq.n	8004dfa <HAL_DMA_IRQHandler+0xc62>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a26      	ldr	r2, [pc, #152]	@ (8004e18 <HAL_DMA_IRQHandler+0xc80>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d03b      	beq.n	8004dfa <HAL_DMA_IRQHandler+0xc62>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a25      	ldr	r2, [pc, #148]	@ (8004e1c <HAL_DMA_IRQHandler+0xc84>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d036      	beq.n	8004dfa <HAL_DMA_IRQHandler+0xc62>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a23      	ldr	r2, [pc, #140]	@ (8004e20 <HAL_DMA_IRQHandler+0xc88>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d031      	beq.n	8004dfa <HAL_DMA_IRQHandler+0xc62>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a22      	ldr	r2, [pc, #136]	@ (8004e24 <HAL_DMA_IRQHandler+0xc8c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d02c      	beq.n	8004dfa <HAL_DMA_IRQHandler+0xc62>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a20      	ldr	r2, [pc, #128]	@ (8004e28 <HAL_DMA_IRQHandler+0xc90>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d027      	beq.n	8004dfa <HAL_DMA_IRQHandler+0xc62>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a1f      	ldr	r2, [pc, #124]	@ (8004e2c <HAL_DMA_IRQHandler+0xc94>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d022      	beq.n	8004dfa <HAL_DMA_IRQHandler+0xc62>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e30 <HAL_DMA_IRQHandler+0xc98>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01d      	beq.n	8004dfa <HAL_DMA_IRQHandler+0xc62>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e34 <HAL_DMA_IRQHandler+0xc9c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d018      	beq.n	8004dfa <HAL_DMA_IRQHandler+0xc62>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8004e38 <HAL_DMA_IRQHandler+0xca0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <HAL_DMA_IRQHandler+0xc62>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a19      	ldr	r2, [pc, #100]	@ (8004e3c <HAL_DMA_IRQHandler+0xca4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00e      	beq.n	8004dfa <HAL_DMA_IRQHandler+0xc62>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a17      	ldr	r2, [pc, #92]	@ (8004e40 <HAL_DMA_IRQHandler+0xca8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d009      	beq.n	8004dfa <HAL_DMA_IRQHandler+0xc62>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a16      	ldr	r2, [pc, #88]	@ (8004e44 <HAL_DMA_IRQHandler+0xcac>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d004      	beq.n	8004dfa <HAL_DMA_IRQHandler+0xc62>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a14      	ldr	r2, [pc, #80]	@ (8004e48 <HAL_DMA_IRQHandler+0xcb0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d128      	bne.n	8004e4c <HAL_DMA_IRQHandler+0xcb4>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0214 	bic.w	r2, r2, #20
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	e027      	b.n	8004e5c <HAL_DMA_IRQHandler+0xcc4>
 8004e0c:	40020010 	.word	0x40020010
 8004e10:	40020028 	.word	0x40020028
 8004e14:	40020040 	.word	0x40020040
 8004e18:	40020058 	.word	0x40020058
 8004e1c:	40020070 	.word	0x40020070
 8004e20:	40020088 	.word	0x40020088
 8004e24:	400200a0 	.word	0x400200a0
 8004e28:	400200b8 	.word	0x400200b8
 8004e2c:	40020410 	.word	0x40020410
 8004e30:	40020428 	.word	0x40020428
 8004e34:	40020440 	.word	0x40020440
 8004e38:	40020458 	.word	0x40020458
 8004e3c:	40020470 	.word	0x40020470
 8004e40:	40020488 	.word	0x40020488
 8004e44:	400204a0 	.word	0x400204a0
 8004e48:	400204b8 	.word	0x400204b8
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 020a 	bic.w	r2, r2, #10
 8004e5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 8097 	beq.w	8004fa4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e7e:	e091      	b.n	8004fa4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e84:	f003 031f 	and.w	r3, r3, #31
 8004e88:	2208      	movs	r2, #8
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8088 	beq.w	8004fa6 <HAL_DMA_IRQHandler+0xe0e>
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 8082 	beq.w	8004fa6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a41      	ldr	r2, [pc, #260]	@ (8004fac <HAL_DMA_IRQHandler+0xe14>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d04a      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xdaa>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a3f      	ldr	r2, [pc, #252]	@ (8004fb0 <HAL_DMA_IRQHandler+0xe18>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d045      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xdaa>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a3e      	ldr	r2, [pc, #248]	@ (8004fb4 <HAL_DMA_IRQHandler+0xe1c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d040      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xdaa>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a3c      	ldr	r2, [pc, #240]	@ (8004fb8 <HAL_DMA_IRQHandler+0xe20>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d03b      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xdaa>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a3b      	ldr	r2, [pc, #236]	@ (8004fbc <HAL_DMA_IRQHandler+0xe24>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d036      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xdaa>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a39      	ldr	r2, [pc, #228]	@ (8004fc0 <HAL_DMA_IRQHandler+0xe28>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d031      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xdaa>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a38      	ldr	r2, [pc, #224]	@ (8004fc4 <HAL_DMA_IRQHandler+0xe2c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d02c      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xdaa>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a36      	ldr	r2, [pc, #216]	@ (8004fc8 <HAL_DMA_IRQHandler+0xe30>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d027      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xdaa>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a35      	ldr	r2, [pc, #212]	@ (8004fcc <HAL_DMA_IRQHandler+0xe34>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d022      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xdaa>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a33      	ldr	r2, [pc, #204]	@ (8004fd0 <HAL_DMA_IRQHandler+0xe38>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d01d      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xdaa>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a32      	ldr	r2, [pc, #200]	@ (8004fd4 <HAL_DMA_IRQHandler+0xe3c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d018      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xdaa>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a30      	ldr	r2, [pc, #192]	@ (8004fd8 <HAL_DMA_IRQHandler+0xe40>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xdaa>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8004fdc <HAL_DMA_IRQHandler+0xe44>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00e      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xdaa>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe0 <HAL_DMA_IRQHandler+0xe48>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d009      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xdaa>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe4 <HAL_DMA_IRQHandler+0xe4c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xdaa>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe8 <HAL_DMA_IRQHandler+0xe50>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d108      	bne.n	8004f54 <HAL_DMA_IRQHandler+0xdbc>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 021c 	bic.w	r2, r2, #28
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e007      	b.n	8004f64 <HAL_DMA_IRQHandler+0xdcc>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 020e 	bic.w	r2, r2, #14
 8004f62:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f68:	f003 031f 	and.w	r3, r3, #31
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	409a      	lsls	r2, r3
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d009      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3
 8004f9a:	e004      	b.n	8004fa6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004f9c:	bf00      	nop
 8004f9e:	e002      	b.n	8004fa6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa0:	bf00      	nop
 8004fa2:	e000      	b.n	8004fa6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004fa6:	3728      	adds	r7, #40	@ 0x28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40020010 	.word	0x40020010
 8004fb0:	40020028 	.word	0x40020028
 8004fb4:	40020040 	.word	0x40020040
 8004fb8:	40020058 	.word	0x40020058
 8004fbc:	40020070 	.word	0x40020070
 8004fc0:	40020088 	.word	0x40020088
 8004fc4:	400200a0 	.word	0x400200a0
 8004fc8:	400200b8 	.word	0x400200b8
 8004fcc:	40020410 	.word	0x40020410
 8004fd0:	40020428 	.word	0x40020428
 8004fd4:	40020440 	.word	0x40020440
 8004fd8:	40020458 	.word	0x40020458
 8004fdc:	40020470 	.word	0x40020470
 8004fe0:	40020488 	.word	0x40020488
 8004fe4:	400204a0 	.word	0x400204a0
 8004fe8:	400204b8 	.word	0x400204b8

08004fec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005004:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a7f      	ldr	r2, [pc, #508]	@ (8005208 <DMA_SetConfig+0x21c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d072      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a7d      	ldr	r2, [pc, #500]	@ (800520c <DMA_SetConfig+0x220>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d06d      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a7c      	ldr	r2, [pc, #496]	@ (8005210 <DMA_SetConfig+0x224>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d068      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a7a      	ldr	r2, [pc, #488]	@ (8005214 <DMA_SetConfig+0x228>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d063      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a79      	ldr	r2, [pc, #484]	@ (8005218 <DMA_SetConfig+0x22c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d05e      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a77      	ldr	r2, [pc, #476]	@ (800521c <DMA_SetConfig+0x230>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d059      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a76      	ldr	r2, [pc, #472]	@ (8005220 <DMA_SetConfig+0x234>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d054      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a74      	ldr	r2, [pc, #464]	@ (8005224 <DMA_SetConfig+0x238>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d04f      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a73      	ldr	r2, [pc, #460]	@ (8005228 <DMA_SetConfig+0x23c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d04a      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a71      	ldr	r2, [pc, #452]	@ (800522c <DMA_SetConfig+0x240>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d045      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a70      	ldr	r2, [pc, #448]	@ (8005230 <DMA_SetConfig+0x244>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d040      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a6e      	ldr	r2, [pc, #440]	@ (8005234 <DMA_SetConfig+0x248>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d03b      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a6d      	ldr	r2, [pc, #436]	@ (8005238 <DMA_SetConfig+0x24c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d036      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a6b      	ldr	r2, [pc, #428]	@ (800523c <DMA_SetConfig+0x250>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d031      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a6a      	ldr	r2, [pc, #424]	@ (8005240 <DMA_SetConfig+0x254>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d02c      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a68      	ldr	r2, [pc, #416]	@ (8005244 <DMA_SetConfig+0x258>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d027      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a67      	ldr	r2, [pc, #412]	@ (8005248 <DMA_SetConfig+0x25c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d022      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a65      	ldr	r2, [pc, #404]	@ (800524c <DMA_SetConfig+0x260>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d01d      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a64      	ldr	r2, [pc, #400]	@ (8005250 <DMA_SetConfig+0x264>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d018      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a62      	ldr	r2, [pc, #392]	@ (8005254 <DMA_SetConfig+0x268>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d013      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a61      	ldr	r2, [pc, #388]	@ (8005258 <DMA_SetConfig+0x26c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00e      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a5f      	ldr	r2, [pc, #380]	@ (800525c <DMA_SetConfig+0x270>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d009      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a5e      	ldr	r2, [pc, #376]	@ (8005260 <DMA_SetConfig+0x274>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d004      	beq.n	80050f6 <DMA_SetConfig+0x10a>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a5c      	ldr	r2, [pc, #368]	@ (8005264 <DMA_SetConfig+0x278>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d101      	bne.n	80050fa <DMA_SetConfig+0x10e>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <DMA_SetConfig+0x110>
 80050fa:	2300      	movs	r3, #0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00d      	beq.n	800511c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005108:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800510e:	2b00      	cmp	r3, #0
 8005110:	d004      	beq.n	800511c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800511a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a39      	ldr	r2, [pc, #228]	@ (8005208 <DMA_SetConfig+0x21c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d04a      	beq.n	80051bc <DMA_SetConfig+0x1d0>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a38      	ldr	r2, [pc, #224]	@ (800520c <DMA_SetConfig+0x220>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d045      	beq.n	80051bc <DMA_SetConfig+0x1d0>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a36      	ldr	r2, [pc, #216]	@ (8005210 <DMA_SetConfig+0x224>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d040      	beq.n	80051bc <DMA_SetConfig+0x1d0>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a35      	ldr	r2, [pc, #212]	@ (8005214 <DMA_SetConfig+0x228>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d03b      	beq.n	80051bc <DMA_SetConfig+0x1d0>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a33      	ldr	r2, [pc, #204]	@ (8005218 <DMA_SetConfig+0x22c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d036      	beq.n	80051bc <DMA_SetConfig+0x1d0>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a32      	ldr	r2, [pc, #200]	@ (800521c <DMA_SetConfig+0x230>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d031      	beq.n	80051bc <DMA_SetConfig+0x1d0>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a30      	ldr	r2, [pc, #192]	@ (8005220 <DMA_SetConfig+0x234>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d02c      	beq.n	80051bc <DMA_SetConfig+0x1d0>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a2f      	ldr	r2, [pc, #188]	@ (8005224 <DMA_SetConfig+0x238>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d027      	beq.n	80051bc <DMA_SetConfig+0x1d0>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a2d      	ldr	r2, [pc, #180]	@ (8005228 <DMA_SetConfig+0x23c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d022      	beq.n	80051bc <DMA_SetConfig+0x1d0>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a2c      	ldr	r2, [pc, #176]	@ (800522c <DMA_SetConfig+0x240>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d01d      	beq.n	80051bc <DMA_SetConfig+0x1d0>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a2a      	ldr	r2, [pc, #168]	@ (8005230 <DMA_SetConfig+0x244>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d018      	beq.n	80051bc <DMA_SetConfig+0x1d0>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a29      	ldr	r2, [pc, #164]	@ (8005234 <DMA_SetConfig+0x248>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d013      	beq.n	80051bc <DMA_SetConfig+0x1d0>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a27      	ldr	r2, [pc, #156]	@ (8005238 <DMA_SetConfig+0x24c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00e      	beq.n	80051bc <DMA_SetConfig+0x1d0>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a26      	ldr	r2, [pc, #152]	@ (800523c <DMA_SetConfig+0x250>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d009      	beq.n	80051bc <DMA_SetConfig+0x1d0>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a24      	ldr	r2, [pc, #144]	@ (8005240 <DMA_SetConfig+0x254>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <DMA_SetConfig+0x1d0>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a23      	ldr	r2, [pc, #140]	@ (8005244 <DMA_SetConfig+0x258>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d101      	bne.n	80051c0 <DMA_SetConfig+0x1d4>
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <DMA_SetConfig+0x1d6>
 80051c0:	2300      	movs	r3, #0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d059      	beq.n	800527a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	223f      	movs	r2, #63	@ 0x3f
 80051d0:	409a      	lsls	r2, r3
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80051e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2b40      	cmp	r3, #64	@ 0x40
 80051f4:	d138      	bne.n	8005268 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005206:	e086      	b.n	8005316 <DMA_SetConfig+0x32a>
 8005208:	40020010 	.word	0x40020010
 800520c:	40020028 	.word	0x40020028
 8005210:	40020040 	.word	0x40020040
 8005214:	40020058 	.word	0x40020058
 8005218:	40020070 	.word	0x40020070
 800521c:	40020088 	.word	0x40020088
 8005220:	400200a0 	.word	0x400200a0
 8005224:	400200b8 	.word	0x400200b8
 8005228:	40020410 	.word	0x40020410
 800522c:	40020428 	.word	0x40020428
 8005230:	40020440 	.word	0x40020440
 8005234:	40020458 	.word	0x40020458
 8005238:	40020470 	.word	0x40020470
 800523c:	40020488 	.word	0x40020488
 8005240:	400204a0 	.word	0x400204a0
 8005244:	400204b8 	.word	0x400204b8
 8005248:	58025408 	.word	0x58025408
 800524c:	5802541c 	.word	0x5802541c
 8005250:	58025430 	.word	0x58025430
 8005254:	58025444 	.word	0x58025444
 8005258:	58025458 	.word	0x58025458
 800525c:	5802546c 	.word	0x5802546c
 8005260:	58025480 	.word	0x58025480
 8005264:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	60da      	str	r2, [r3, #12]
}
 8005278:	e04d      	b.n	8005316 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a29      	ldr	r2, [pc, #164]	@ (8005324 <DMA_SetConfig+0x338>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d022      	beq.n	80052ca <DMA_SetConfig+0x2de>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a27      	ldr	r2, [pc, #156]	@ (8005328 <DMA_SetConfig+0x33c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d01d      	beq.n	80052ca <DMA_SetConfig+0x2de>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a26      	ldr	r2, [pc, #152]	@ (800532c <DMA_SetConfig+0x340>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d018      	beq.n	80052ca <DMA_SetConfig+0x2de>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a24      	ldr	r2, [pc, #144]	@ (8005330 <DMA_SetConfig+0x344>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <DMA_SetConfig+0x2de>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a23      	ldr	r2, [pc, #140]	@ (8005334 <DMA_SetConfig+0x348>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00e      	beq.n	80052ca <DMA_SetConfig+0x2de>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a21      	ldr	r2, [pc, #132]	@ (8005338 <DMA_SetConfig+0x34c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <DMA_SetConfig+0x2de>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a20      	ldr	r2, [pc, #128]	@ (800533c <DMA_SetConfig+0x350>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <DMA_SetConfig+0x2de>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005340 <DMA_SetConfig+0x354>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d101      	bne.n	80052ce <DMA_SetConfig+0x2e2>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <DMA_SetConfig+0x2e4>
 80052ce:	2300      	movs	r3, #0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d020      	beq.n	8005316 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d8:	f003 031f 	and.w	r3, r3, #31
 80052dc:	2201      	movs	r2, #1
 80052de:	409a      	lsls	r2, r3
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b40      	cmp	r3, #64	@ 0x40
 80052f2:	d108      	bne.n	8005306 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	60da      	str	r2, [r3, #12]
}
 8005304:	e007      	b.n	8005316 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	60da      	str	r2, [r3, #12]
}
 8005316:	bf00      	nop
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	58025408 	.word	0x58025408
 8005328:	5802541c 	.word	0x5802541c
 800532c:	58025430 	.word	0x58025430
 8005330:	58025444 	.word	0x58025444
 8005334:	58025458 	.word	0x58025458
 8005338:	5802546c 	.word	0x5802546c
 800533c:	58025480 	.word	0x58025480
 8005340:	58025494 	.word	0x58025494

08005344 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a42      	ldr	r2, [pc, #264]	@ (800545c <DMA_CalcBaseAndBitshift+0x118>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d04a      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a41      	ldr	r2, [pc, #260]	@ (8005460 <DMA_CalcBaseAndBitshift+0x11c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d045      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a3f      	ldr	r2, [pc, #252]	@ (8005464 <DMA_CalcBaseAndBitshift+0x120>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d040      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a3e      	ldr	r2, [pc, #248]	@ (8005468 <DMA_CalcBaseAndBitshift+0x124>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d03b      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a3c      	ldr	r2, [pc, #240]	@ (800546c <DMA_CalcBaseAndBitshift+0x128>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d036      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a3b      	ldr	r2, [pc, #236]	@ (8005470 <DMA_CalcBaseAndBitshift+0x12c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d031      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a39      	ldr	r2, [pc, #228]	@ (8005474 <DMA_CalcBaseAndBitshift+0x130>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d02c      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a38      	ldr	r2, [pc, #224]	@ (8005478 <DMA_CalcBaseAndBitshift+0x134>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d027      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a36      	ldr	r2, [pc, #216]	@ (800547c <DMA_CalcBaseAndBitshift+0x138>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d022      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a35      	ldr	r2, [pc, #212]	@ (8005480 <DMA_CalcBaseAndBitshift+0x13c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d01d      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a33      	ldr	r2, [pc, #204]	@ (8005484 <DMA_CalcBaseAndBitshift+0x140>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d018      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a32      	ldr	r2, [pc, #200]	@ (8005488 <DMA_CalcBaseAndBitshift+0x144>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d013      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a30      	ldr	r2, [pc, #192]	@ (800548c <DMA_CalcBaseAndBitshift+0x148>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00e      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005490 <DMA_CalcBaseAndBitshift+0x14c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d009      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005494 <DMA_CalcBaseAndBitshift+0x150>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d004      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005498 <DMA_CalcBaseAndBitshift+0x154>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d101      	bne.n	80053f0 <DMA_CalcBaseAndBitshift+0xac>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <DMA_CalcBaseAndBitshift+0xae>
 80053f0:	2300      	movs	r3, #0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d024      	beq.n	8005440 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	3b10      	subs	r3, #16
 80053fe:	4a27      	ldr	r2, [pc, #156]	@ (800549c <DMA_CalcBaseAndBitshift+0x158>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	091b      	lsrs	r3, r3, #4
 8005406:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	4a24      	ldr	r2, [pc, #144]	@ (80054a0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005410:	5cd3      	ldrb	r3, [r2, r3]
 8005412:	461a      	mov	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b03      	cmp	r3, #3
 800541c:	d908      	bls.n	8005430 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	4b1f      	ldr	r3, [pc, #124]	@ (80054a4 <DMA_CalcBaseAndBitshift+0x160>)
 8005426:	4013      	ands	r3, r2
 8005428:	1d1a      	adds	r2, r3, #4
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	659a      	str	r2, [r3, #88]	@ 0x58
 800542e:	e00d      	b.n	800544c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	4b1b      	ldr	r3, [pc, #108]	@ (80054a4 <DMA_CalcBaseAndBitshift+0x160>)
 8005438:	4013      	ands	r3, r2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6593      	str	r3, [r2, #88]	@ 0x58
 800543e:	e005      	b.n	800544c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	40020010 	.word	0x40020010
 8005460:	40020028 	.word	0x40020028
 8005464:	40020040 	.word	0x40020040
 8005468:	40020058 	.word	0x40020058
 800546c:	40020070 	.word	0x40020070
 8005470:	40020088 	.word	0x40020088
 8005474:	400200a0 	.word	0x400200a0
 8005478:	400200b8 	.word	0x400200b8
 800547c:	40020410 	.word	0x40020410
 8005480:	40020428 	.word	0x40020428
 8005484:	40020440 	.word	0x40020440
 8005488:	40020458 	.word	0x40020458
 800548c:	40020470 	.word	0x40020470
 8005490:	40020488 	.word	0x40020488
 8005494:	400204a0 	.word	0x400204a0
 8005498:	400204b8 	.word	0x400204b8
 800549c:	aaaaaaab 	.word	0xaaaaaaab
 80054a0:	0800a010 	.word	0x0800a010
 80054a4:	fffffc00 	.word	0xfffffc00

080054a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d120      	bne.n	80054fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d858      	bhi.n	8005576 <DMA_CheckFifoParam+0xce>
 80054c4:	a201      	add	r2, pc, #4	@ (adr r2, 80054cc <DMA_CheckFifoParam+0x24>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080054ef 	.word	0x080054ef
 80054d4:	080054dd 	.word	0x080054dd
 80054d8:	08005577 	.word	0x08005577
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d048      	beq.n	800557a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054ec:	e045      	b.n	800557a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80054f6:	d142      	bne.n	800557e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054fc:	e03f      	b.n	800557e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005506:	d123      	bne.n	8005550 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550c:	2b03      	cmp	r3, #3
 800550e:	d838      	bhi.n	8005582 <DMA_CheckFifoParam+0xda>
 8005510:	a201      	add	r2, pc, #4	@ (adr r2, 8005518 <DMA_CheckFifoParam+0x70>)
 8005512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005516:	bf00      	nop
 8005518:	08005529 	.word	0x08005529
 800551c:	0800552f 	.word	0x0800552f
 8005520:	08005529 	.word	0x08005529
 8005524:	08005541 	.word	0x08005541
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
        break;
 800552c:	e030      	b.n	8005590 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005532:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d025      	beq.n	8005586 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800553e:	e022      	b.n	8005586 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005544:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005548:	d11f      	bne.n	800558a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800554e:	e01c      	b.n	800558a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005554:	2b02      	cmp	r3, #2
 8005556:	d902      	bls.n	800555e <DMA_CheckFifoParam+0xb6>
 8005558:	2b03      	cmp	r3, #3
 800555a:	d003      	beq.n	8005564 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800555c:	e018      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
        break;
 8005562:	e015      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005568:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00e      	beq.n	800558e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	73fb      	strb	r3, [r7, #15]
    break;
 8005574:	e00b      	b.n	800558e <DMA_CheckFifoParam+0xe6>
        break;
 8005576:	bf00      	nop
 8005578:	e00a      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
        break;
 800557a:	bf00      	nop
 800557c:	e008      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
        break;
 800557e:	bf00      	nop
 8005580:	e006      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
        break;
 8005582:	bf00      	nop
 8005584:	e004      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
        break;
 8005586:	bf00      	nop
 8005588:	e002      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
        break;
 800558a:	bf00      	nop
 800558c:	e000      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
    break;
 800558e:	bf00      	nop
    }
  }

  return status;
 8005590:	7bfb      	ldrb	r3, [r7, #15]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop

080055a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a38      	ldr	r2, [pc, #224]	@ (8005694 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d022      	beq.n	80055fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a36      	ldr	r2, [pc, #216]	@ (8005698 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d01d      	beq.n	80055fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a35      	ldr	r2, [pc, #212]	@ (800569c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d018      	beq.n	80055fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a33      	ldr	r2, [pc, #204]	@ (80056a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d013      	beq.n	80055fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a32      	ldr	r2, [pc, #200]	@ (80056a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00e      	beq.n	80055fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a30      	ldr	r2, [pc, #192]	@ (80056a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d009      	beq.n	80055fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a2f      	ldr	r2, [pc, #188]	@ (80056ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d004      	beq.n	80055fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a2d      	ldr	r2, [pc, #180]	@ (80056b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d101      	bne.n	8005602 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005602:	2300      	movs	r3, #0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01a      	beq.n	800563e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	3b08      	subs	r3, #8
 8005610:	4a28      	ldr	r2, [pc, #160]	@ (80056b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	091b      	lsrs	r3, r3, #4
 8005618:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4b26      	ldr	r3, [pc, #152]	@ (80056b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	461a      	mov	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a24      	ldr	r2, [pc, #144]	@ (80056bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800562c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	2201      	movs	r2, #1
 8005636:	409a      	lsls	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800563c:	e024      	b.n	8005688 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	3b10      	subs	r3, #16
 8005646:	4a1e      	ldr	r2, [pc, #120]	@ (80056c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	091b      	lsrs	r3, r3, #4
 800564e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4a1c      	ldr	r2, [pc, #112]	@ (80056c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d806      	bhi.n	8005666 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4a1b      	ldr	r2, [pc, #108]	@ (80056c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d902      	bls.n	8005666 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3308      	adds	r3, #8
 8005664:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4b18      	ldr	r3, [pc, #96]	@ (80056cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	461a      	mov	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a16      	ldr	r2, [pc, #88]	@ (80056d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005678:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 031f 	and.w	r3, r3, #31
 8005680:	2201      	movs	r2, #1
 8005682:	409a      	lsls	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005688:	bf00      	nop
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	58025408 	.word	0x58025408
 8005698:	5802541c 	.word	0x5802541c
 800569c:	58025430 	.word	0x58025430
 80056a0:	58025444 	.word	0x58025444
 80056a4:	58025458 	.word	0x58025458
 80056a8:	5802546c 	.word	0x5802546c
 80056ac:	58025480 	.word	0x58025480
 80056b0:	58025494 	.word	0x58025494
 80056b4:	cccccccd 	.word	0xcccccccd
 80056b8:	16009600 	.word	0x16009600
 80056bc:	58025880 	.word	0x58025880
 80056c0:	aaaaaaab 	.word	0xaaaaaaab
 80056c4:	400204b8 	.word	0x400204b8
 80056c8:	4002040f 	.word	0x4002040f
 80056cc:	10008200 	.word	0x10008200
 80056d0:	40020880 	.word	0x40020880

080056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d04a      	beq.n	8005780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d847      	bhi.n	8005780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a25      	ldr	r2, [pc, #148]	@ (800578c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d022      	beq.n	8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a24      	ldr	r2, [pc, #144]	@ (8005790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d01d      	beq.n	8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a22      	ldr	r2, [pc, #136]	@ (8005794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d018      	beq.n	8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a21      	ldr	r2, [pc, #132]	@ (8005798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d013      	beq.n	8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1f      	ldr	r2, [pc, #124]	@ (800579c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00e      	beq.n	8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a1e      	ldr	r2, [pc, #120]	@ (80057a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d009      	beq.n	8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1c      	ldr	r2, [pc, #112]	@ (80057a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d004      	beq.n	8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1b      	ldr	r2, [pc, #108]	@ (80057a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d101      	bne.n	8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005744:	2300      	movs	r3, #0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4b17      	ldr	r3, [pc, #92]	@ (80057ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	461a      	mov	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a15      	ldr	r2, [pc, #84]	@ (80057b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800575c:	671a      	str	r2, [r3, #112]	@ 0x70
 800575e:	e009      	b.n	8005774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4b14      	ldr	r3, [pc, #80]	@ (80057b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	461a      	mov	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a11      	ldr	r2, [pc, #68]	@ (80057b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005772:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3b01      	subs	r3, #1
 8005778:	2201      	movs	r2, #1
 800577a:	409a      	lsls	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005780:	bf00      	nop
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	58025408 	.word	0x58025408
 8005790:	5802541c 	.word	0x5802541c
 8005794:	58025430 	.word	0x58025430
 8005798:	58025444 	.word	0x58025444
 800579c:	58025458 	.word	0x58025458
 80057a0:	5802546c 	.word	0x5802546c
 80057a4:	58025480 	.word	0x58025480
 80057a8:	58025494 	.word	0x58025494
 80057ac:	1600963f 	.word	0x1600963f
 80057b0:	58025940 	.word	0x58025940
 80057b4:	1000823f 	.word	0x1000823f
 80057b8:	40020940 	.word	0x40020940

080057bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057bc:	b480      	push	{r7}
 80057be:	b089      	sub	sp, #36	@ 0x24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80057ca:	4b86      	ldr	r3, [pc, #536]	@ (80059e4 <HAL_GPIO_Init+0x228>)
 80057cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057ce:	e18c      	b.n	8005aea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	2101      	movs	r1, #1
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	fa01 f303 	lsl.w	r3, r1, r3
 80057dc:	4013      	ands	r3, r2
 80057de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 817e 	beq.w	8005ae4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d005      	beq.n	8005800 <HAL_GPIO_Init+0x44>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d130      	bne.n	8005862 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	2203      	movs	r2, #3
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	43db      	mvns	r3, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4013      	ands	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4313      	orrs	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005836:	2201      	movs	r2, #1
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	43db      	mvns	r3, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4013      	ands	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	091b      	lsrs	r3, r3, #4
 800584c:	f003 0201 	and.w	r2, r3, #1
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4313      	orrs	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	2b03      	cmp	r3, #3
 800586c:	d017      	beq.n	800589e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	2203      	movs	r2, #3
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43db      	mvns	r3, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	4013      	ands	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	fa02 f303 	lsl.w	r3, r2, r3
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	4313      	orrs	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d123      	bne.n	80058f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	08da      	lsrs	r2, r3, #3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3208      	adds	r2, #8
 80058b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	220f      	movs	r2, #15
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	43db      	mvns	r3, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4013      	ands	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	fa02 f303 	lsl.w	r3, r2, r3
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	08da      	lsrs	r2, r3, #3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3208      	adds	r2, #8
 80058ec:	69b9      	ldr	r1, [r7, #24]
 80058ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	2203      	movs	r2, #3
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	43db      	mvns	r3, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4013      	ands	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f003 0203 	and.w	r2, r3, #3
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4313      	orrs	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 80d8 	beq.w	8005ae4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005934:	4b2c      	ldr	r3, [pc, #176]	@ (80059e8 <HAL_GPIO_Init+0x22c>)
 8005936:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800593a:	4a2b      	ldr	r2, [pc, #172]	@ (80059e8 <HAL_GPIO_Init+0x22c>)
 800593c:	f043 0302 	orr.w	r3, r3, #2
 8005940:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005944:	4b28      	ldr	r3, [pc, #160]	@ (80059e8 <HAL_GPIO_Init+0x22c>)
 8005946:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005952:	4a26      	ldr	r2, [pc, #152]	@ (80059ec <HAL_GPIO_Init+0x230>)
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	089b      	lsrs	r3, r3, #2
 8005958:	3302      	adds	r3, #2
 800595a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800595e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	220f      	movs	r2, #15
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	4013      	ands	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a1d      	ldr	r2, [pc, #116]	@ (80059f0 <HAL_GPIO_Init+0x234>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d04a      	beq.n	8005a14 <HAL_GPIO_Init+0x258>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a1c      	ldr	r2, [pc, #112]	@ (80059f4 <HAL_GPIO_Init+0x238>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d02b      	beq.n	80059de <HAL_GPIO_Init+0x222>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a1b      	ldr	r2, [pc, #108]	@ (80059f8 <HAL_GPIO_Init+0x23c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d025      	beq.n	80059da <HAL_GPIO_Init+0x21e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a1a      	ldr	r2, [pc, #104]	@ (80059fc <HAL_GPIO_Init+0x240>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d01f      	beq.n	80059d6 <HAL_GPIO_Init+0x21a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a19      	ldr	r2, [pc, #100]	@ (8005a00 <HAL_GPIO_Init+0x244>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d019      	beq.n	80059d2 <HAL_GPIO_Init+0x216>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a18      	ldr	r2, [pc, #96]	@ (8005a04 <HAL_GPIO_Init+0x248>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_GPIO_Init+0x212>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a17      	ldr	r2, [pc, #92]	@ (8005a08 <HAL_GPIO_Init+0x24c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00d      	beq.n	80059ca <HAL_GPIO_Init+0x20e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a16      	ldr	r2, [pc, #88]	@ (8005a0c <HAL_GPIO_Init+0x250>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d007      	beq.n	80059c6 <HAL_GPIO_Init+0x20a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a15      	ldr	r2, [pc, #84]	@ (8005a10 <HAL_GPIO_Init+0x254>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d101      	bne.n	80059c2 <HAL_GPIO_Init+0x206>
 80059be:	2309      	movs	r3, #9
 80059c0:	e029      	b.n	8005a16 <HAL_GPIO_Init+0x25a>
 80059c2:	230a      	movs	r3, #10
 80059c4:	e027      	b.n	8005a16 <HAL_GPIO_Init+0x25a>
 80059c6:	2307      	movs	r3, #7
 80059c8:	e025      	b.n	8005a16 <HAL_GPIO_Init+0x25a>
 80059ca:	2306      	movs	r3, #6
 80059cc:	e023      	b.n	8005a16 <HAL_GPIO_Init+0x25a>
 80059ce:	2305      	movs	r3, #5
 80059d0:	e021      	b.n	8005a16 <HAL_GPIO_Init+0x25a>
 80059d2:	2304      	movs	r3, #4
 80059d4:	e01f      	b.n	8005a16 <HAL_GPIO_Init+0x25a>
 80059d6:	2303      	movs	r3, #3
 80059d8:	e01d      	b.n	8005a16 <HAL_GPIO_Init+0x25a>
 80059da:	2302      	movs	r3, #2
 80059dc:	e01b      	b.n	8005a16 <HAL_GPIO_Init+0x25a>
 80059de:	2301      	movs	r3, #1
 80059e0:	e019      	b.n	8005a16 <HAL_GPIO_Init+0x25a>
 80059e2:	bf00      	nop
 80059e4:	58000080 	.word	0x58000080
 80059e8:	58024400 	.word	0x58024400
 80059ec:	58000400 	.word	0x58000400
 80059f0:	58020000 	.word	0x58020000
 80059f4:	58020400 	.word	0x58020400
 80059f8:	58020800 	.word	0x58020800
 80059fc:	58020c00 	.word	0x58020c00
 8005a00:	58021000 	.word	0x58021000
 8005a04:	58021400 	.word	0x58021400
 8005a08:	58021800 	.word	0x58021800
 8005a0c:	58021c00 	.word	0x58021c00
 8005a10:	58022400 	.word	0x58022400
 8005a14:	2300      	movs	r3, #0
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	f002 0203 	and.w	r2, r2, #3
 8005a1c:	0092      	lsls	r2, r2, #2
 8005a1e:	4093      	lsls	r3, r2
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a26:	4938      	ldr	r1, [pc, #224]	@ (8005b08 <HAL_GPIO_Init+0x34c>)
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	089b      	lsrs	r3, r3, #2
 8005a2c:	3302      	adds	r3, #2
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4013      	ands	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	4013      	ands	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005a88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f47f ae6b 	bne.w	80057d0 <HAL_GPIO_Init+0x14>
  }
}
 8005afa:	bf00      	nop
 8005afc:	bf00      	nop
 8005afe:	3724      	adds	r7, #36	@ 0x24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	58000400 	.word	0x58000400

08005b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	460b      	mov	r3, r1
 8005b16:	807b      	strh	r3, [r7, #2]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b1c:	787b      	ldrb	r3, [r7, #1]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b22:	887a      	ldrh	r2, [r7, #2]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005b28:	e003      	b.n	8005b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b2a:	887b      	ldrh	r3, [r7, #2]
 8005b2c:	041a      	lsls	r2, r3, #16
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	619a      	str	r2, [r3, #24]
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005b48:	4b19      	ldr	r3, [pc, #100]	@ (8005bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d00a      	beq.n	8005b6a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005b54:	4b16      	ldr	r3, [pc, #88]	@ (8005bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d001      	beq.n	8005b66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e01f      	b.n	8005ba6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	e01d      	b.n	8005ba6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b6a:	4b11      	ldr	r3, [pc, #68]	@ (8005bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f023 0207 	bic.w	r2, r3, #7
 8005b72:	490f      	ldr	r1, [pc, #60]	@ (8005bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b7a:	f7fb fc21 	bl	80013c0 <HAL_GetTick>
 8005b7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b80:	e009      	b.n	8005b96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b82:	f7fb fc1d 	bl	80013c0 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b90:	d901      	bls.n	8005b96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e007      	b.n	8005ba6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b96:	4b06      	ldr	r3, [pc, #24]	@ (8005bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ba2:	d1ee      	bne.n	8005b82 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	58024800 	.word	0x58024800

08005bb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08c      	sub	sp, #48	@ 0x30
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e3c8      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 8087 	beq.w	8005ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bd4:	4b88      	ldr	r3, [pc, #544]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bde:	4b86      	ldr	r3, [pc, #536]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be6:	2b10      	cmp	r3, #16
 8005be8:	d007      	beq.n	8005bfa <HAL_RCC_OscConfig+0x46>
 8005bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bec:	2b18      	cmp	r3, #24
 8005bee:	d110      	bne.n	8005c12 <HAL_RCC_OscConfig+0x5e>
 8005bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d10b      	bne.n	8005c12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bfa:	4b7f      	ldr	r3, [pc, #508]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d06c      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x12c>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d168      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e3a2      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c1a:	d106      	bne.n	8005c2a <HAL_RCC_OscConfig+0x76>
 8005c1c:	4b76      	ldr	r3, [pc, #472]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a75      	ldr	r2, [pc, #468]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	e02e      	b.n	8005c88 <HAL_RCC_OscConfig+0xd4>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10c      	bne.n	8005c4c <HAL_RCC_OscConfig+0x98>
 8005c32:	4b71      	ldr	r3, [pc, #452]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a70      	ldr	r2, [pc, #448]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005c38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c3c:	6013      	str	r3, [r2, #0]
 8005c3e:	4b6e      	ldr	r3, [pc, #440]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a6d      	ldr	r2, [pc, #436]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005c44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	e01d      	b.n	8005c88 <HAL_RCC_OscConfig+0xd4>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c54:	d10c      	bne.n	8005c70 <HAL_RCC_OscConfig+0xbc>
 8005c56:	4b68      	ldr	r3, [pc, #416]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a67      	ldr	r2, [pc, #412]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	4b65      	ldr	r3, [pc, #404]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a64      	ldr	r2, [pc, #400]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	e00b      	b.n	8005c88 <HAL_RCC_OscConfig+0xd4>
 8005c70:	4b61      	ldr	r3, [pc, #388]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a60      	ldr	r2, [pc, #384]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a5d      	ldr	r2, [pc, #372]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d013      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c90:	f7fb fb96 	bl	80013c0 <HAL_GetTick>
 8005c94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c98:	f7fb fb92 	bl	80013c0 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b64      	cmp	r3, #100	@ 0x64
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e356      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005caa:	4b53      	ldr	r3, [pc, #332]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCC_OscConfig+0xe4>
 8005cb6:	e014      	b.n	8005ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb8:	f7fb fb82 	bl	80013c0 <HAL_GetTick>
 8005cbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cc0:	f7fb fb7e 	bl	80013c0 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b64      	cmp	r3, #100	@ 0x64
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e342      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005cd2:	4b49      	ldr	r3, [pc, #292]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f0      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x10c>
 8005cde:	e000      	b.n	8005ce2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 808c 	beq.w	8005e08 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cf0:	4b41      	ldr	r3, [pc, #260]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cf8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <HAL_RCC_OscConfig+0x162>
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	2b18      	cmp	r3, #24
 8005d0a:	d137      	bne.n	8005d7c <HAL_RCC_OscConfig+0x1c8>
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d132      	bne.n	8005d7c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d16:	4b38      	ldr	r3, [pc, #224]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0304 	and.w	r3, r3, #4
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <HAL_RCC_OscConfig+0x17a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e314      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d2e:	4b32      	ldr	r3, [pc, #200]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f023 0219 	bic.w	r2, r3, #25
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	492f      	ldr	r1, [pc, #188]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d40:	f7fb fb3e 	bl	80013c0 <HAL_GetTick>
 8005d44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d48:	f7fb fb3a 	bl	80013c0 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e2fe      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d5a:	4b27      	ldr	r3, [pc, #156]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f0      	beq.n	8005d48 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d66:	4b24      	ldr	r3, [pc, #144]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	061b      	lsls	r3, r3, #24
 8005d74:	4920      	ldr	r1, [pc, #128]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d7a:	e045      	b.n	8005e08 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d026      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d84:	4b1c      	ldr	r3, [pc, #112]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f023 0219 	bic.w	r2, r3, #25
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4919      	ldr	r1, [pc, #100]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d96:	f7fb fb13 	bl	80013c0 <HAL_GetTick>
 8005d9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d9e:	f7fb fb0f 	bl	80013c0 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e2d3      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005db0:	4b11      	ldr	r3, [pc, #68]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0f0      	beq.n	8005d9e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	061b      	lsls	r3, r3, #24
 8005dca:	490b      	ldr	r1, [pc, #44]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	604b      	str	r3, [r1, #4]
 8005dd0:	e01a      	b.n	8005e08 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dd2:	4b09      	ldr	r3, [pc, #36]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a08      	ldr	r2, [pc, #32]	@ (8005df8 <HAL_RCC_OscConfig+0x244>)
 8005dd8:	f023 0301 	bic.w	r3, r3, #1
 8005ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dde:	f7fb faef 	bl	80013c0 <HAL_GetTick>
 8005de2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005de4:	e00a      	b.n	8005dfc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005de6:	f7fb faeb 	bl	80013c0 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d903      	bls.n	8005dfc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e2af      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
 8005df8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dfc:	4b96      	ldr	r3, [pc, #600]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1ee      	bne.n	8005de6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d06a      	beq.n	8005eea <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e14:	4b90      	ldr	r3, [pc, #576]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e1c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e1e:	4b8e      	ldr	r3, [pc, #568]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e22:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d007      	beq.n	8005e3a <HAL_RCC_OscConfig+0x286>
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b18      	cmp	r3, #24
 8005e2e:	d11b      	bne.n	8005e68 <HAL_RCC_OscConfig+0x2b4>
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d116      	bne.n	8005e68 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e3a:	4b87      	ldr	r3, [pc, #540]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <HAL_RCC_OscConfig+0x29e>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	2b80      	cmp	r3, #128	@ 0x80
 8005e4c:	d001      	beq.n	8005e52 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e282      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e52:	4b81      	ldr	r3, [pc, #516]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	061b      	lsls	r3, r3, #24
 8005e60:	497d      	ldr	r1, [pc, #500]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e66:	e040      	b.n	8005eea <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d023      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e70:	4b79      	ldr	r3, [pc, #484]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a78      	ldr	r2, [pc, #480]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7c:	f7fb faa0 	bl	80013c0 <HAL_GetTick>
 8005e80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e84:	f7fb fa9c 	bl	80013c0 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e260      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e96:	4b70      	ldr	r3, [pc, #448]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0f0      	beq.n	8005e84 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ea2:	4b6d      	ldr	r3, [pc, #436]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	061b      	lsls	r3, r3, #24
 8005eb0:	4969      	ldr	r1, [pc, #420]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60cb      	str	r3, [r1, #12]
 8005eb6:	e018      	b.n	8005eea <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005eb8:	4b67      	ldr	r3, [pc, #412]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a66      	ldr	r2, [pc, #408]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec4:	f7fb fa7c 	bl	80013c0 <HAL_GetTick>
 8005ec8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ecc:	f7fb fa78 	bl	80013c0 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e23c      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ede:	4b5e      	ldr	r3, [pc, #376]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1f0      	bne.n	8005ecc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d036      	beq.n	8005f64 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d019      	beq.n	8005f32 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005efe:	4b56      	ldr	r3, [pc, #344]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f02:	4a55      	ldr	r2, [pc, #340]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0a:	f7fb fa59 	bl	80013c0 <HAL_GetTick>
 8005f0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f10:	e008      	b.n	8005f24 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f12:	f7fb fa55 	bl	80013c0 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e219      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f24:	4b4c      	ldr	r3, [pc, #304]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0f0      	beq.n	8005f12 <HAL_RCC_OscConfig+0x35e>
 8005f30:	e018      	b.n	8005f64 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f32:	4b49      	ldr	r3, [pc, #292]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f36:	4a48      	ldr	r2, [pc, #288]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005f38:	f023 0301 	bic.w	r3, r3, #1
 8005f3c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3e:	f7fb fa3f 	bl	80013c0 <HAL_GetTick>
 8005f42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f46:	f7fb fa3b 	bl	80013c0 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e1ff      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f58:	4b3f      	ldr	r3, [pc, #252]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f0      	bne.n	8005f46 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0320 	and.w	r3, r3, #32
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d036      	beq.n	8005fde <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d019      	beq.n	8005fac <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f78:	4b37      	ldr	r3, [pc, #220]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a36      	ldr	r2, [pc, #216]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005f7e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f84:	f7fb fa1c 	bl	80013c0 <HAL_GetTick>
 8005f88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f8c:	f7fb fa18 	bl	80013c0 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e1dc      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0f0      	beq.n	8005f8c <HAL_RCC_OscConfig+0x3d8>
 8005faa:	e018      	b.n	8005fde <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fac:	4b2a      	ldr	r3, [pc, #168]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a29      	ldr	r2, [pc, #164]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005fb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fb6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fb8:	f7fb fa02 	bl	80013c0 <HAL_GetTick>
 8005fbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fc0:	f7fb f9fe 	bl	80013c0 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e1c2      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005fd2:	4b21      	ldr	r3, [pc, #132]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1f0      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8086 	beq.w	80060f8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005fec:	4b1b      	ldr	r3, [pc, #108]	@ (800605c <HAL_RCC_OscConfig+0x4a8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800605c <HAL_RCC_OscConfig+0x4a8>)
 8005ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ff6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ff8:	f7fb f9e2 	bl	80013c0 <HAL_GetTick>
 8005ffc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006000:	f7fb f9de 	bl	80013c0 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b64      	cmp	r3, #100	@ 0x64
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e1a2      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006012:	4b12      	ldr	r3, [pc, #72]	@ (800605c <HAL_RCC_OscConfig+0x4a8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d106      	bne.n	8006034 <HAL_RCC_OscConfig+0x480>
 8006026:	4b0c      	ldr	r3, [pc, #48]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8006028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800602a:	4a0b      	ldr	r2, [pc, #44]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 800602c:	f043 0301 	orr.w	r3, r3, #1
 8006030:	6713      	str	r3, [r2, #112]	@ 0x70
 8006032:	e032      	b.n	800609a <HAL_RCC_OscConfig+0x4e6>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d111      	bne.n	8006060 <HAL_RCC_OscConfig+0x4ac>
 800603c:	4b06      	ldr	r3, [pc, #24]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 800603e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006040:	4a05      	ldr	r2, [pc, #20]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 8006042:	f023 0301 	bic.w	r3, r3, #1
 8006046:	6713      	str	r3, [r2, #112]	@ 0x70
 8006048:	4b03      	ldr	r3, [pc, #12]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604c:	4a02      	ldr	r2, [pc, #8]	@ (8006058 <HAL_RCC_OscConfig+0x4a4>)
 800604e:	f023 0304 	bic.w	r3, r3, #4
 8006052:	6713      	str	r3, [r2, #112]	@ 0x70
 8006054:	e021      	b.n	800609a <HAL_RCC_OscConfig+0x4e6>
 8006056:	bf00      	nop
 8006058:	58024400 	.word	0x58024400
 800605c:	58024800 	.word	0x58024800
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b05      	cmp	r3, #5
 8006066:	d10c      	bne.n	8006082 <HAL_RCC_OscConfig+0x4ce>
 8006068:	4b83      	ldr	r3, [pc, #524]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 800606a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606c:	4a82      	ldr	r2, [pc, #520]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 800606e:	f043 0304 	orr.w	r3, r3, #4
 8006072:	6713      	str	r3, [r2, #112]	@ 0x70
 8006074:	4b80      	ldr	r3, [pc, #512]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 8006076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006078:	4a7f      	ldr	r2, [pc, #508]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 800607a:	f043 0301 	orr.w	r3, r3, #1
 800607e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006080:	e00b      	b.n	800609a <HAL_RCC_OscConfig+0x4e6>
 8006082:	4b7d      	ldr	r3, [pc, #500]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 8006084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006086:	4a7c      	ldr	r2, [pc, #496]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 8006088:	f023 0301 	bic.w	r3, r3, #1
 800608c:	6713      	str	r3, [r2, #112]	@ 0x70
 800608e:	4b7a      	ldr	r3, [pc, #488]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 8006090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006092:	4a79      	ldr	r2, [pc, #484]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 8006094:	f023 0304 	bic.w	r3, r3, #4
 8006098:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d015      	beq.n	80060ce <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a2:	f7fb f98d 	bl	80013c0 <HAL_GetTick>
 80060a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060a8:	e00a      	b.n	80060c0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060aa:	f7fb f989 	bl	80013c0 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e14b      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060c0:	4b6d      	ldr	r3, [pc, #436]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 80060c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0ee      	beq.n	80060aa <HAL_RCC_OscConfig+0x4f6>
 80060cc:	e014      	b.n	80060f8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ce:	f7fb f977 	bl	80013c0 <HAL_GetTick>
 80060d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060d4:	e00a      	b.n	80060ec <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d6:	f7fb f973 	bl	80013c0 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e135      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060ec:	4b62      	ldr	r3, [pc, #392]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 80060ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1ee      	bne.n	80060d6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 812a 	beq.w	8006356 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006102:	4b5d      	ldr	r3, [pc, #372]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800610a:	2b18      	cmp	r3, #24
 800610c:	f000 80ba 	beq.w	8006284 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006114:	2b02      	cmp	r3, #2
 8006116:	f040 8095 	bne.w	8006244 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611a:	4b57      	ldr	r3, [pc, #348]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a56      	ldr	r2, [pc, #344]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 8006120:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006126:	f7fb f94b 	bl	80013c0 <HAL_GetTick>
 800612a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800612c:	e008      	b.n	8006140 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800612e:	f7fb f947 	bl	80013c0 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e10b      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006140:	4b4d      	ldr	r3, [pc, #308]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1f0      	bne.n	800612e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800614c:	4b4a      	ldr	r3, [pc, #296]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 800614e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006150:	4b4a      	ldr	r3, [pc, #296]	@ (800627c <HAL_RCC_OscConfig+0x6c8>)
 8006152:	4013      	ands	r3, r2
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800615c:	0112      	lsls	r2, r2, #4
 800615e:	430a      	orrs	r2, r1
 8006160:	4945      	ldr	r1, [pc, #276]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 8006162:	4313      	orrs	r3, r2
 8006164:	628b      	str	r3, [r1, #40]	@ 0x28
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616a:	3b01      	subs	r3, #1
 800616c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006174:	3b01      	subs	r3, #1
 8006176:	025b      	lsls	r3, r3, #9
 8006178:	b29b      	uxth	r3, r3
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006180:	3b01      	subs	r3, #1
 8006182:	041b      	lsls	r3, r3, #16
 8006184:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006188:	431a      	orrs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800618e:	3b01      	subs	r3, #1
 8006190:	061b      	lsls	r3, r3, #24
 8006192:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006196:	4938      	ldr	r1, [pc, #224]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 8006198:	4313      	orrs	r3, r2
 800619a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800619c:	4b36      	ldr	r3, [pc, #216]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 800619e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a0:	4a35      	ldr	r2, [pc, #212]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 80061a2:	f023 0301 	bic.w	r3, r3, #1
 80061a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061a8:	4b33      	ldr	r3, [pc, #204]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 80061aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061ac:	4b34      	ldr	r3, [pc, #208]	@ (8006280 <HAL_RCC_OscConfig+0x6cc>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80061b4:	00d2      	lsls	r2, r2, #3
 80061b6:	4930      	ldr	r1, [pc, #192]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80061bc:	4b2e      	ldr	r3, [pc, #184]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 80061be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c0:	f023 020c 	bic.w	r2, r3, #12
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c8:	492b      	ldr	r1, [pc, #172]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80061ce:	4b2a      	ldr	r3, [pc, #168]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 80061d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d2:	f023 0202 	bic.w	r2, r3, #2
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061da:	4927      	ldr	r1, [pc, #156]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061e0:	4b25      	ldr	r3, [pc, #148]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 80061e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e4:	4a24      	ldr	r2, [pc, #144]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 80061e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ec:	4b22      	ldr	r3, [pc, #136]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 80061ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f0:	4a21      	ldr	r2, [pc, #132]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 80061f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80061f8:	4b1f      	ldr	r3, [pc, #124]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 80061fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 80061fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006202:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006204:	4b1c      	ldr	r3, [pc, #112]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 8006206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006208:	4a1b      	ldr	r2, [pc, #108]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 800620a:	f043 0301 	orr.w	r3, r3, #1
 800620e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006210:	4b19      	ldr	r3, [pc, #100]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a18      	ldr	r2, [pc, #96]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 8006216:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800621a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621c:	f7fb f8d0 	bl	80013c0 <HAL_GetTick>
 8006220:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006224:	f7fb f8cc 	bl	80013c0 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e090      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006236:	4b10      	ldr	r3, [pc, #64]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0f0      	beq.n	8006224 <HAL_RCC_OscConfig+0x670>
 8006242:	e088      	b.n	8006356 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006244:	4b0c      	ldr	r3, [pc, #48]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a0b      	ldr	r2, [pc, #44]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 800624a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800624e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006250:	f7fb f8b6 	bl	80013c0 <HAL_GetTick>
 8006254:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006258:	f7fb f8b2 	bl	80013c0 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e076      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800626a:	4b03      	ldr	r3, [pc, #12]	@ (8006278 <HAL_RCC_OscConfig+0x6c4>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1f0      	bne.n	8006258 <HAL_RCC_OscConfig+0x6a4>
 8006276:	e06e      	b.n	8006356 <HAL_RCC_OscConfig+0x7a2>
 8006278:	58024400 	.word	0x58024400
 800627c:	fffffc0c 	.word	0xfffffc0c
 8006280:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006284:	4b36      	ldr	r3, [pc, #216]	@ (8006360 <HAL_RCC_OscConfig+0x7ac>)
 8006286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006288:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800628a:	4b35      	ldr	r3, [pc, #212]	@ (8006360 <HAL_RCC_OscConfig+0x7ac>)
 800628c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006294:	2b01      	cmp	r3, #1
 8006296:	d031      	beq.n	80062fc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f003 0203 	and.w	r2, r3, #3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d12a      	bne.n	80062fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	091b      	lsrs	r3, r3, #4
 80062aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d122      	bne.n	80062fc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d11a      	bne.n	80062fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	0a5b      	lsrs	r3, r3, #9
 80062ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d111      	bne.n	80062fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	0c1b      	lsrs	r3, r3, #16
 80062dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d108      	bne.n	80062fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	0e1b      	lsrs	r3, r3, #24
 80062ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d001      	beq.n	8006300 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e02b      	b.n	8006358 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006300:	4b17      	ldr	r3, [pc, #92]	@ (8006360 <HAL_RCC_OscConfig+0x7ac>)
 8006302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006304:	08db      	lsrs	r3, r3, #3
 8006306:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800630a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	429a      	cmp	r2, r3
 8006314:	d01f      	beq.n	8006356 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006316:	4b12      	ldr	r3, [pc, #72]	@ (8006360 <HAL_RCC_OscConfig+0x7ac>)
 8006318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631a:	4a11      	ldr	r2, [pc, #68]	@ (8006360 <HAL_RCC_OscConfig+0x7ac>)
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006322:	f7fb f84d 	bl	80013c0 <HAL_GetTick>
 8006326:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006328:	bf00      	nop
 800632a:	f7fb f849 	bl	80013c0 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006332:	4293      	cmp	r3, r2
 8006334:	d0f9      	beq.n	800632a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006336:	4b0a      	ldr	r3, [pc, #40]	@ (8006360 <HAL_RCC_OscConfig+0x7ac>)
 8006338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800633a:	4b0a      	ldr	r3, [pc, #40]	@ (8006364 <HAL_RCC_OscConfig+0x7b0>)
 800633c:	4013      	ands	r3, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006342:	00d2      	lsls	r2, r2, #3
 8006344:	4906      	ldr	r1, [pc, #24]	@ (8006360 <HAL_RCC_OscConfig+0x7ac>)
 8006346:	4313      	orrs	r3, r2
 8006348:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800634a:	4b05      	ldr	r3, [pc, #20]	@ (8006360 <HAL_RCC_OscConfig+0x7ac>)
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	4a04      	ldr	r2, [pc, #16]	@ (8006360 <HAL_RCC_OscConfig+0x7ac>)
 8006350:	f043 0301 	orr.w	r3, r3, #1
 8006354:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3730      	adds	r7, #48	@ 0x30
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	58024400 	.word	0x58024400
 8006364:	ffff0007 	.word	0xffff0007

08006368 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e19c      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800637c:	4b8a      	ldr	r3, [pc, #552]	@ (80065a8 <HAL_RCC_ClockConfig+0x240>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 030f 	and.w	r3, r3, #15
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d910      	bls.n	80063ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638a:	4b87      	ldr	r3, [pc, #540]	@ (80065a8 <HAL_RCC_ClockConfig+0x240>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f023 020f 	bic.w	r2, r3, #15
 8006392:	4985      	ldr	r1, [pc, #532]	@ (80065a8 <HAL_RCC_ClockConfig+0x240>)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	4313      	orrs	r3, r2
 8006398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800639a:	4b83      	ldr	r3, [pc, #524]	@ (80065a8 <HAL_RCC_ClockConfig+0x240>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d001      	beq.n	80063ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e184      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d010      	beq.n	80063da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	4b7b      	ldr	r3, [pc, #492]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d908      	bls.n	80063da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063c8:	4b78      	ldr	r3, [pc, #480]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	4975      	ldr	r1, [pc, #468]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d010      	beq.n	8006408 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	695a      	ldr	r2, [r3, #20]
 80063ea:	4b70      	ldr	r3, [pc, #448]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d908      	bls.n	8006408 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063f6:	4b6d      	ldr	r3, [pc, #436]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	496a      	ldr	r1, [pc, #424]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006404:	4313      	orrs	r3, r2
 8006406:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0310 	and.w	r3, r3, #16
 8006410:	2b00      	cmp	r3, #0
 8006412:	d010      	beq.n	8006436 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	699a      	ldr	r2, [r3, #24]
 8006418:	4b64      	ldr	r3, [pc, #400]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006420:	429a      	cmp	r2, r3
 8006422:	d908      	bls.n	8006436 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006424:	4b61      	ldr	r3, [pc, #388]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	495e      	ldr	r1, [pc, #376]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006432:	4313      	orrs	r3, r2
 8006434:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b00      	cmp	r3, #0
 8006440:	d010      	beq.n	8006464 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69da      	ldr	r2, [r3, #28]
 8006446:	4b59      	ldr	r3, [pc, #356]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800644e:	429a      	cmp	r2, r3
 8006450:	d908      	bls.n	8006464 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006452:	4b56      	ldr	r3, [pc, #344]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	4953      	ldr	r1, [pc, #332]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006460:	4313      	orrs	r3, r2
 8006462:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d010      	beq.n	8006492 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	4b4d      	ldr	r3, [pc, #308]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	429a      	cmp	r2, r3
 800647e:	d908      	bls.n	8006492 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006480:	4b4a      	ldr	r3, [pc, #296]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	f023 020f 	bic.w	r2, r3, #15
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	4947      	ldr	r1, [pc, #284]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 800648e:	4313      	orrs	r3, r2
 8006490:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d055      	beq.n	800654a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800649e:	4b43      	ldr	r3, [pc, #268]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	4940      	ldr	r1, [pc, #256]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d107      	bne.n	80064c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064b8:	4b3c      	ldr	r3, [pc, #240]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d121      	bne.n	8006508 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e0f6      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d107      	bne.n	80064e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064d0:	4b36      	ldr	r3, [pc, #216]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d115      	bne.n	8006508 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e0ea      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d107      	bne.n	80064f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064e8:	4b30      	ldr	r3, [pc, #192]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d109      	bne.n	8006508 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0de      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064f8:	4b2c      	ldr	r3, [pc, #176]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e0d6      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006508:	4b28      	ldr	r3, [pc, #160]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f023 0207 	bic.w	r2, r3, #7
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	4925      	ldr	r1, [pc, #148]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006516:	4313      	orrs	r3, r2
 8006518:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800651a:	f7fa ff51 	bl	80013c0 <HAL_GetTick>
 800651e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006520:	e00a      	b.n	8006538 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006522:	f7fa ff4d 	bl	80013c0 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006530:	4293      	cmp	r3, r2
 8006532:	d901      	bls.n	8006538 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e0be      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006538:	4b1c      	ldr	r3, [pc, #112]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	429a      	cmp	r2, r3
 8006548:	d1eb      	bne.n	8006522 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d010      	beq.n	8006578 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	4b14      	ldr	r3, [pc, #80]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	429a      	cmp	r2, r3
 8006564:	d208      	bcs.n	8006578 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006566:	4b11      	ldr	r3, [pc, #68]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	f023 020f 	bic.w	r2, r3, #15
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	490e      	ldr	r1, [pc, #56]	@ (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006574:	4313      	orrs	r3, r2
 8006576:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006578:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <HAL_RCC_ClockConfig+0x240>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 030f 	and.w	r3, r3, #15
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d214      	bcs.n	80065b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006586:	4b08      	ldr	r3, [pc, #32]	@ (80065a8 <HAL_RCC_ClockConfig+0x240>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f023 020f 	bic.w	r2, r3, #15
 800658e:	4906      	ldr	r1, [pc, #24]	@ (80065a8 <HAL_RCC_ClockConfig+0x240>)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	4313      	orrs	r3, r2
 8006594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006596:	4b04      	ldr	r3, [pc, #16]	@ (80065a8 <HAL_RCC_ClockConfig+0x240>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d005      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e086      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>
 80065a8:	52002000 	.word	0x52002000
 80065ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d010      	beq.n	80065de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	4b3f      	ldr	r3, [pc, #252]	@ (80066c0 <HAL_RCC_ClockConfig+0x358>)
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d208      	bcs.n	80065de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065cc:	4b3c      	ldr	r3, [pc, #240]	@ (80066c0 <HAL_RCC_ClockConfig+0x358>)
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	4939      	ldr	r1, [pc, #228]	@ (80066c0 <HAL_RCC_ClockConfig+0x358>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d010      	beq.n	800660c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	4b34      	ldr	r3, [pc, #208]	@ (80066c0 <HAL_RCC_ClockConfig+0x358>)
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d208      	bcs.n	800660c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065fa:	4b31      	ldr	r3, [pc, #196]	@ (80066c0 <HAL_RCC_ClockConfig+0x358>)
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	492e      	ldr	r1, [pc, #184]	@ (80066c0 <HAL_RCC_ClockConfig+0x358>)
 8006608:	4313      	orrs	r3, r2
 800660a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0310 	and.w	r3, r3, #16
 8006614:	2b00      	cmp	r3, #0
 8006616:	d010      	beq.n	800663a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	699a      	ldr	r2, [r3, #24]
 800661c:	4b28      	ldr	r3, [pc, #160]	@ (80066c0 <HAL_RCC_ClockConfig+0x358>)
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006624:	429a      	cmp	r2, r3
 8006626:	d208      	bcs.n	800663a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006628:	4b25      	ldr	r3, [pc, #148]	@ (80066c0 <HAL_RCC_ClockConfig+0x358>)
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	4922      	ldr	r1, [pc, #136]	@ (80066c0 <HAL_RCC_ClockConfig+0x358>)
 8006636:	4313      	orrs	r3, r2
 8006638:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d010      	beq.n	8006668 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69da      	ldr	r2, [r3, #28]
 800664a:	4b1d      	ldr	r3, [pc, #116]	@ (80066c0 <HAL_RCC_ClockConfig+0x358>)
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006652:	429a      	cmp	r2, r3
 8006654:	d208      	bcs.n	8006668 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006656:	4b1a      	ldr	r3, [pc, #104]	@ (80066c0 <HAL_RCC_ClockConfig+0x358>)
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	4917      	ldr	r1, [pc, #92]	@ (80066c0 <HAL_RCC_ClockConfig+0x358>)
 8006664:	4313      	orrs	r3, r2
 8006666:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006668:	f000 f834 	bl	80066d4 <HAL_RCC_GetSysClockFreq>
 800666c:	4602      	mov	r2, r0
 800666e:	4b14      	ldr	r3, [pc, #80]	@ (80066c0 <HAL_RCC_ClockConfig+0x358>)
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	0a1b      	lsrs	r3, r3, #8
 8006674:	f003 030f 	and.w	r3, r3, #15
 8006678:	4912      	ldr	r1, [pc, #72]	@ (80066c4 <HAL_RCC_ClockConfig+0x35c>)
 800667a:	5ccb      	ldrb	r3, [r1, r3]
 800667c:	f003 031f 	and.w	r3, r3, #31
 8006680:	fa22 f303 	lsr.w	r3, r2, r3
 8006684:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006686:	4b0e      	ldr	r3, [pc, #56]	@ (80066c0 <HAL_RCC_ClockConfig+0x358>)
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	4a0d      	ldr	r2, [pc, #52]	@ (80066c4 <HAL_RCC_ClockConfig+0x35c>)
 8006690:	5cd3      	ldrb	r3, [r2, r3]
 8006692:	f003 031f 	and.w	r3, r3, #31
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	fa22 f303 	lsr.w	r3, r2, r3
 800669c:	4a0a      	ldr	r2, [pc, #40]	@ (80066c8 <HAL_RCC_ClockConfig+0x360>)
 800669e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066a0:	4a0a      	ldr	r2, [pc, #40]	@ (80066cc <HAL_RCC_ClockConfig+0x364>)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80066a6:	4b0a      	ldr	r3, [pc, #40]	@ (80066d0 <HAL_RCC_ClockConfig+0x368>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fa fe3e 	bl	800132c <HAL_InitTick>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	58024400 	.word	0x58024400
 80066c4:	0800a000 	.word	0x0800a000
 80066c8:	24000004 	.word	0x24000004
 80066cc:	24000000 	.word	0x24000000
 80066d0:	24000008 	.word	0x24000008

080066d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b089      	sub	sp, #36	@ 0x24
 80066d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066da:	4bb3      	ldr	r3, [pc, #716]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066e2:	2b18      	cmp	r3, #24
 80066e4:	f200 8155 	bhi.w	8006992 <HAL_RCC_GetSysClockFreq+0x2be>
 80066e8:	a201      	add	r2, pc, #4	@ (adr r2, 80066f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80066ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ee:	bf00      	nop
 80066f0:	08006755 	.word	0x08006755
 80066f4:	08006993 	.word	0x08006993
 80066f8:	08006993 	.word	0x08006993
 80066fc:	08006993 	.word	0x08006993
 8006700:	08006993 	.word	0x08006993
 8006704:	08006993 	.word	0x08006993
 8006708:	08006993 	.word	0x08006993
 800670c:	08006993 	.word	0x08006993
 8006710:	0800677b 	.word	0x0800677b
 8006714:	08006993 	.word	0x08006993
 8006718:	08006993 	.word	0x08006993
 800671c:	08006993 	.word	0x08006993
 8006720:	08006993 	.word	0x08006993
 8006724:	08006993 	.word	0x08006993
 8006728:	08006993 	.word	0x08006993
 800672c:	08006993 	.word	0x08006993
 8006730:	08006781 	.word	0x08006781
 8006734:	08006993 	.word	0x08006993
 8006738:	08006993 	.word	0x08006993
 800673c:	08006993 	.word	0x08006993
 8006740:	08006993 	.word	0x08006993
 8006744:	08006993 	.word	0x08006993
 8006748:	08006993 	.word	0x08006993
 800674c:	08006993 	.word	0x08006993
 8006750:	08006787 	.word	0x08006787
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006754:	4b94      	ldr	r3, [pc, #592]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b00      	cmp	r3, #0
 800675e:	d009      	beq.n	8006774 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006760:	4b91      	ldr	r3, [pc, #580]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	08db      	lsrs	r3, r3, #3
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	4a90      	ldr	r2, [pc, #576]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800676c:	fa22 f303 	lsr.w	r3, r2, r3
 8006770:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006772:	e111      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006774:	4b8d      	ldr	r3, [pc, #564]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006776:	61bb      	str	r3, [r7, #24]
      break;
 8006778:	e10e      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800677a:	4b8d      	ldr	r3, [pc, #564]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800677c:	61bb      	str	r3, [r7, #24]
      break;
 800677e:	e10b      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006780:	4b8c      	ldr	r3, [pc, #560]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006782:	61bb      	str	r3, [r7, #24]
      break;
 8006784:	e108      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006786:	4b88      	ldr	r3, [pc, #544]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006790:	4b85      	ldr	r3, [pc, #532]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006794:	091b      	lsrs	r3, r3, #4
 8006796:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800679a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800679c:	4b82      	ldr	r3, [pc, #520]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800679e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80067a6:	4b80      	ldr	r3, [pc, #512]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067aa:	08db      	lsrs	r3, r3, #3
 80067ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	fb02 f303 	mul.w	r3, r2, r3
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 80e1 	beq.w	800698c <HAL_RCC_GetSysClockFreq+0x2b8>
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	f000 8083 	beq.w	80068d8 <HAL_RCC_GetSysClockFreq+0x204>
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	f200 80a1 	bhi.w	800691c <HAL_RCC_GetSysClockFreq+0x248>
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <HAL_RCC_GetSysClockFreq+0x114>
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d056      	beq.n	8006894 <HAL_RCC_GetSysClockFreq+0x1c0>
 80067e6:	e099      	b.n	800691c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067e8:	4b6f      	ldr	r3, [pc, #444]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d02d      	beq.n	8006850 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067f4:	4b6c      	ldr	r3, [pc, #432]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	08db      	lsrs	r3, r3, #3
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	4a6b      	ldr	r2, [pc, #428]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006800:	fa22 f303 	lsr.w	r3, r2, r3
 8006804:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	ee07 3a90 	vmov	s15, r3
 800680c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	ee07 3a90 	vmov	s15, r3
 8006816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681e:	4b62      	ldr	r3, [pc, #392]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006832:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80069b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800684e:	e087      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80069bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800685e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006862:	4b51      	ldr	r3, [pc, #324]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006872:	ed97 6a02 	vldr	s12, [r7, #8]
 8006876:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80069b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800687a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800687e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006892:	e065      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80069c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80068a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068a6:	4b40      	ldr	r3, [pc, #256]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80069b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068d6:	e043      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	ee07 3a90 	vmov	s15, r3
 80068de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80069c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80068e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ea:	4b2f      	ldr	r3, [pc, #188]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f2:	ee07 3a90 	vmov	s15, r3
 80068f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80068fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80069b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800690a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800690e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006916:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800691a:	e021      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	ee07 3a90 	vmov	s15, r3
 8006922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006926:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80069c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800692a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800692e:	4b1e      	ldr	r3, [pc, #120]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006936:	ee07 3a90 	vmov	s15, r3
 800693a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800693e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006942:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80069b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800694a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800694e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800695a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800695e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006960:	4b11      	ldr	r3, [pc, #68]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006964:	0a5b      	lsrs	r3, r3, #9
 8006966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800696a:	3301      	adds	r3, #1
 800696c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	ee07 3a90 	vmov	s15, r3
 8006974:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006978:	edd7 6a07 	vldr	s13, [r7, #28]
 800697c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006984:	ee17 3a90 	vmov	r3, s15
 8006988:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800698a:	e005      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	61bb      	str	r3, [r7, #24]
      break;
 8006990:	e002      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006992:	4b07      	ldr	r3, [pc, #28]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006994:	61bb      	str	r3, [r7, #24]
      break;
 8006996:	bf00      	nop
  }

  return sysclockfreq;
 8006998:	69bb      	ldr	r3, [r7, #24]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3724      	adds	r7, #36	@ 0x24
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	58024400 	.word	0x58024400
 80069ac:	03d09000 	.word	0x03d09000
 80069b0:	003d0900 	.word	0x003d0900
 80069b4:	017d7840 	.word	0x017d7840
 80069b8:	46000000 	.word	0x46000000
 80069bc:	4c742400 	.word	0x4c742400
 80069c0:	4a742400 	.word	0x4a742400
 80069c4:	4bbebc20 	.word	0x4bbebc20

080069c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069ce:	f7ff fe81 	bl	80066d4 <HAL_RCC_GetSysClockFreq>
 80069d2:	4602      	mov	r2, r0
 80069d4:	4b10      	ldr	r3, [pc, #64]	@ (8006a18 <HAL_RCC_GetHCLKFreq+0x50>)
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	0a1b      	lsrs	r3, r3, #8
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	490f      	ldr	r1, [pc, #60]	@ (8006a1c <HAL_RCC_GetHCLKFreq+0x54>)
 80069e0:	5ccb      	ldrb	r3, [r1, r3]
 80069e2:	f003 031f 	and.w	r3, r3, #31
 80069e6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006a18 <HAL_RCC_GetHCLKFreq+0x50>)
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	4a09      	ldr	r2, [pc, #36]	@ (8006a1c <HAL_RCC_GetHCLKFreq+0x54>)
 80069f6:	5cd3      	ldrb	r3, [r2, r3]
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006a02:	4a07      	ldr	r2, [pc, #28]	@ (8006a20 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a06:	4a07      	ldr	r2, [pc, #28]	@ (8006a24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a0c:	4b04      	ldr	r3, [pc, #16]	@ (8006a20 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	58024400 	.word	0x58024400
 8006a1c:	0800a000 	.word	0x0800a000
 8006a20:	24000004 	.word	0x24000004
 8006a24:	24000000 	.word	0x24000000

08006a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006a2c:	f7ff ffcc 	bl	80069c8 <HAL_RCC_GetHCLKFreq>
 8006a30:	4602      	mov	r2, r0
 8006a32:	4b06      	ldr	r3, [pc, #24]	@ (8006a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	091b      	lsrs	r3, r3, #4
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	4904      	ldr	r1, [pc, #16]	@ (8006a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a3e:	5ccb      	ldrb	r3, [r1, r3]
 8006a40:	f003 031f 	and.w	r3, r3, #31
 8006a44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	58024400 	.word	0x58024400
 8006a50:	0800a000 	.word	0x0800a000

08006a54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a58:	b0c6      	sub	sp, #280	@ 0x118
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a60:	2300      	movs	r3, #0
 8006a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a66:	2300      	movs	r3, #0
 8006a68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006a78:	2500      	movs	r5, #0
 8006a7a:	ea54 0305 	orrs.w	r3, r4, r5
 8006a7e:	d049      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a8a:	d02f      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006a8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a90:	d828      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a96:	d01a      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a9c:	d822      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aa6:	d007      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006aa8:	e01c      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aaa:	4bab      	ldr	r3, [pc, #684]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aae:	4aaa      	ldr	r2, [pc, #680]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ab6:	e01a      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abc:	3308      	adds	r3, #8
 8006abe:	2102      	movs	r1, #2
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f002 fa49 	bl	8008f58 <RCCEx_PLL2_Config>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006acc:	e00f      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad2:	3328      	adds	r3, #40	@ 0x28
 8006ad4:	2102      	movs	r1, #2
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f002 faf0 	bl	80090bc <RCCEx_PLL3_Config>
 8006adc:	4603      	mov	r3, r0
 8006ade:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ae2:	e004      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006aea:	e000      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10a      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006af6:	4b98      	ldr	r3, [pc, #608]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b04:	4a94      	ldr	r2, [pc, #592]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b06:	430b      	orrs	r3, r1
 8006b08:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b0a:	e003      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006b20:	f04f 0900 	mov.w	r9, #0
 8006b24:	ea58 0309 	orrs.w	r3, r8, r9
 8006b28:	d047      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d82a      	bhi.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006b34:	a201      	add	r2, pc, #4	@ (adr r2, 8006b3c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3a:	bf00      	nop
 8006b3c:	08006b51 	.word	0x08006b51
 8006b40:	08006b5f 	.word	0x08006b5f
 8006b44:	08006b75 	.word	0x08006b75
 8006b48:	08006b93 	.word	0x08006b93
 8006b4c:	08006b93 	.word	0x08006b93
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b50:	4b81      	ldr	r3, [pc, #516]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b54:	4a80      	ldr	r2, [pc, #512]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b5c:	e01a      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b62:	3308      	adds	r3, #8
 8006b64:	2100      	movs	r1, #0
 8006b66:	4618      	mov	r0, r3
 8006b68:	f002 f9f6 	bl	8008f58 <RCCEx_PLL2_Config>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b72:	e00f      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b78:	3328      	adds	r3, #40	@ 0x28
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f002 fa9d 	bl	80090bc <RCCEx_PLL3_Config>
 8006b82:	4603      	mov	r3, r0
 8006b84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b88:	e004      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b90:	e000      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b9c:	4b6e      	ldr	r3, [pc, #440]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba0:	f023 0107 	bic.w	r1, r3, #7
 8006ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006baa:	4a6b      	ldr	r2, [pc, #428]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6513      	str	r3, [r2, #80]	@ 0x50
 8006bb0:	e003      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006bc6:	f04f 0b00 	mov.w	fp, #0
 8006bca:	ea5a 030b 	orrs.w	r3, sl, fp
 8006bce:	d05b      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bd8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006bdc:	d03b      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006bde:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006be2:	d834      	bhi.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006be4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006be8:	d037      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006bea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bee:	d82e      	bhi.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bf0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bf4:	d033      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006bf6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006bfa:	d828      	bhi.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c00:	d01a      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006c02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c06:	d822      	bhi.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006c0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c10:	d007      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006c12:	e01c      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c14:	4b50      	ldr	r3, [pc, #320]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c18:	4a4f      	ldr	r2, [pc, #316]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c20:	e01e      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c26:	3308      	adds	r3, #8
 8006c28:	2100      	movs	r1, #0
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f002 f994 	bl	8008f58 <RCCEx_PLL2_Config>
 8006c30:	4603      	mov	r3, r0
 8006c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c36:	e013      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3c:	3328      	adds	r3, #40	@ 0x28
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f002 fa3b 	bl	80090bc <RCCEx_PLL3_Config>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c4c:	e008      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c54:	e004      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c56:	bf00      	nop
 8006c58:	e002      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c5a:	bf00      	nop
 8006c5c:	e000      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10b      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006c68:	4b3b      	ldr	r3, [pc, #236]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c6c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c78:	4a37      	ldr	r2, [pc, #220]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c7a:	430b      	orrs	r3, r1
 8006c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c7e:	e003      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006c94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	d05d      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006cb0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006cb4:	d03b      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006cb6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006cba:	d834      	bhi.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cc0:	d037      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006cc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cc6:	d82e      	bhi.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ccc:	d033      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006cce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006cd2:	d828      	bhi.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cd8:	d01a      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006cda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cde:	d822      	bhi.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ce8:	d007      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006cea:	e01c      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cec:	4b1a      	ldr	r3, [pc, #104]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf0:	4a19      	ldr	r2, [pc, #100]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cf8:	e01e      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfe:	3308      	adds	r3, #8
 8006d00:	2100      	movs	r1, #0
 8006d02:	4618      	mov	r0, r3
 8006d04:	f002 f928 	bl	8008f58 <RCCEx_PLL2_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006d0e:	e013      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d14:	3328      	adds	r3, #40	@ 0x28
 8006d16:	2100      	movs	r1, #0
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f002 f9cf 	bl	80090bc <RCCEx_PLL3_Config>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d24:	e008      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d2c:	e004      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d2e:	bf00      	nop
 8006d30:	e002      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d32:	bf00      	nop
 8006d34:	e000      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10d      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d40:	4b05      	ldr	r3, [pc, #20]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d44:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006d50:	4a01      	ldr	r2, [pc, #4]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d52:	430b      	orrs	r3, r1
 8006d54:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d56:	e005      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006d58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006d70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d74:	2300      	movs	r3, #0
 8006d76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d7a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4313      	orrs	r3, r2
 8006d82:	d03a      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d8a:	2b30      	cmp	r3, #48	@ 0x30
 8006d8c:	d01f      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006d8e:	2b30      	cmp	r3, #48	@ 0x30
 8006d90:	d819      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006d92:	2b20      	cmp	r3, #32
 8006d94:	d00c      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	d815      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d019      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006d9e:	2b10      	cmp	r3, #16
 8006da0:	d111      	bne.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da2:	4baa      	ldr	r3, [pc, #680]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da6:	4aa9      	ldr	r2, [pc, #676]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006dae:	e011      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db4:	3308      	adds	r3, #8
 8006db6:	2102      	movs	r1, #2
 8006db8:	4618      	mov	r0, r3
 8006dba:	f002 f8cd 	bl	8008f58 <RCCEx_PLL2_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006dc4:	e006      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006dcc:	e002      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006dce:	bf00      	nop
 8006dd0:	e000      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006ddc:	4b9b      	ldr	r3, [pc, #620]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006de0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dea:	4a98      	ldr	r2, [pc, #608]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006dec:	430b      	orrs	r3, r1
 8006dee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006df0:	e003      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006e06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006e14:	460b      	mov	r3, r1
 8006e16:	4313      	orrs	r3, r2
 8006e18:	d051      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e24:	d035      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006e26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e2a:	d82e      	bhi.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e30:	d031      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006e32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e36:	d828      	bhi.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e3c:	d01a      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e42:	d822      	bhi.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e4c:	d007      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006e4e:	e01c      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e50:	4b7e      	ldr	r3, [pc, #504]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e54:	4a7d      	ldr	r2, [pc, #500]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e5c:	e01c      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e62:	3308      	adds	r3, #8
 8006e64:	2100      	movs	r1, #0
 8006e66:	4618      	mov	r0, r3
 8006e68:	f002 f876 	bl	8008f58 <RCCEx_PLL2_Config>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e72:	e011      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e78:	3328      	adds	r3, #40	@ 0x28
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f002 f91d 	bl	80090bc <RCCEx_PLL3_Config>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e88:	e006      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e90:	e002      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006e92:	bf00      	nop
 8006e94:	e000      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006ea0:	4b6a      	ldr	r3, [pc, #424]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eae:	4a67      	ldr	r2, [pc, #412]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006eb4:	e003      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006eca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ed4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4313      	orrs	r3, r2
 8006edc:	d053      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ee4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ee8:	d033      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006eea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006eee:	d82c      	bhi.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ef0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ef4:	d02f      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006ef6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006efa:	d826      	bhi.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006efc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f00:	d02b      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006f02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f06:	d820      	bhi.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f0c:	d012      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f12:	d81a      	bhi.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d022      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f1c:	d115      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f22:	3308      	adds	r3, #8
 8006f24:	2101      	movs	r1, #1
 8006f26:	4618      	mov	r0, r3
 8006f28:	f002 f816 	bl	8008f58 <RCCEx_PLL2_Config>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f32:	e015      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f38:	3328      	adds	r3, #40	@ 0x28
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f002 f8bd 	bl	80090bc <RCCEx_PLL3_Config>
 8006f42:	4603      	mov	r3, r0
 8006f44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f48:	e00a      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f50:	e006      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f52:	bf00      	nop
 8006f54:	e004      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f56:	bf00      	nop
 8006f58:	e002      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f5a:	bf00      	nop
 8006f5c:	e000      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f68:	4b38      	ldr	r3, [pc, #224]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f6c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f76:	4a35      	ldr	r2, [pc, #212]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f78:	430b      	orrs	r3, r1
 8006f7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f7c:	e003      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006f92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f96:	2300      	movs	r3, #0
 8006f98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006f9c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	d058      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006faa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fb2:	d033      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fb8:	d82c      	bhi.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fbe:	d02f      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fc4:	d826      	bhi.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fca:	d02b      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006fcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fd0:	d820      	bhi.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fd6:	d012      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006fd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fdc:	d81a      	bhi.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d022      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fe6:	d115      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fec:	3308      	adds	r3, #8
 8006fee:	2101      	movs	r1, #1
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f001 ffb1 	bl	8008f58 <RCCEx_PLL2_Config>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ffc:	e015      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007002:	3328      	adds	r3, #40	@ 0x28
 8007004:	2101      	movs	r1, #1
 8007006:	4618      	mov	r0, r3
 8007008:	f002 f858 	bl	80090bc <RCCEx_PLL3_Config>
 800700c:	4603      	mov	r3, r0
 800700e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007012:	e00a      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800701a:	e006      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800701c:	bf00      	nop
 800701e:	e004      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007020:	bf00      	nop
 8007022:	e002      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007024:	bf00      	nop
 8007026:	e000      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800702a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10e      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007032:	4b06      	ldr	r3, [pc, #24]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007036:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800703a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007042:	4a02      	ldr	r2, [pc, #8]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007044:	430b      	orrs	r3, r1
 8007046:	6593      	str	r3, [r2, #88]	@ 0x58
 8007048:	e006      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800704a:	bf00      	nop
 800704c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007054:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007068:	2300      	movs	r3, #0
 800706a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800706e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007072:	460b      	mov	r3, r1
 8007074:	4313      	orrs	r3, r2
 8007076:	d037      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800707e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007082:	d00e      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007088:	d816      	bhi.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800708a:	2b00      	cmp	r3, #0
 800708c:	d018      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800708e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007092:	d111      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007094:	4bc4      	ldr	r3, [pc, #784]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007098:	4ac3      	ldr	r2, [pc, #780]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800709a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800709e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80070a0:	e00f      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a6:	3308      	adds	r3, #8
 80070a8:	2101      	movs	r1, #1
 80070aa:	4618      	mov	r0, r3
 80070ac:	f001 ff54 	bl	8008f58 <RCCEx_PLL2_Config>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80070b6:	e004      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070be:	e000      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80070c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10a      	bne.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070ca:	4bb7      	ldr	r3, [pc, #732]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80070d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070d8:	4ab3      	ldr	r2, [pc, #716]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070da:	430b      	orrs	r3, r1
 80070dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80070de:	e003      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80070f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070f8:	2300      	movs	r3, #0
 80070fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007102:	460b      	mov	r3, r1
 8007104:	4313      	orrs	r3, r2
 8007106:	d039      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800710e:	2b03      	cmp	r3, #3
 8007110:	d81c      	bhi.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007112:	a201      	add	r2, pc, #4	@ (adr r2, 8007118 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007118:	08007155 	.word	0x08007155
 800711c:	08007129 	.word	0x08007129
 8007120:	08007137 	.word	0x08007137
 8007124:	08007155 	.word	0x08007155
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007128:	4b9f      	ldr	r3, [pc, #636]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712c:	4a9e      	ldr	r2, [pc, #632]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800712e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007134:	e00f      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713a:	3308      	adds	r3, #8
 800713c:	2102      	movs	r1, #2
 800713e:	4618      	mov	r0, r3
 8007140:	f001 ff0a 	bl	8008f58 <RCCEx_PLL2_Config>
 8007144:	4603      	mov	r3, r0
 8007146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800714a:	e004      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007152:	e000      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007156:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10a      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800715e:	4b92      	ldr	r3, [pc, #584]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007162:	f023 0103 	bic.w	r1, r3, #3
 8007166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800716c:	4a8e      	ldr	r2, [pc, #568]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800716e:	430b      	orrs	r3, r1
 8007170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007172:	e003      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007174:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007178:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800717c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007188:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800718c:	2300      	movs	r3, #0
 800718e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007192:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007196:	460b      	mov	r3, r1
 8007198:	4313      	orrs	r3, r2
 800719a:	f000 8099 	beq.w	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800719e:	4b83      	ldr	r3, [pc, #524]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a82      	ldr	r2, [pc, #520]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071aa:	f7fa f909 	bl	80013c0 <HAL_GetTick>
 80071ae:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071b2:	e00b      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071b4:	f7fa f904 	bl	80013c0 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b64      	cmp	r3, #100	@ 0x64
 80071c2:	d903      	bls.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071ca:	e005      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071cc:	4b77      	ldr	r3, [pc, #476]	@ (80073ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0ed      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80071d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d173      	bne.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071e0:	4b71      	ldr	r3, [pc, #452]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80071ec:	4053      	eors	r3, r2
 80071ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d015      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071f6:	4b6c      	ldr	r3, [pc, #432]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071fe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007202:	4b69      	ldr	r3, [pc, #420]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007206:	4a68      	ldr	r2, [pc, #416]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800720c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800720e:	4b66      	ldr	r3, [pc, #408]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007212:	4a65      	ldr	r2, [pc, #404]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007218:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800721a:	4a63      	ldr	r2, [pc, #396]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800721c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007220:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007226:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800722a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800722e:	d118      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007230:	f7fa f8c6 	bl	80013c0 <HAL_GetTick>
 8007234:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007238:	e00d      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800723a:	f7fa f8c1 	bl	80013c0 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007244:	1ad2      	subs	r2, r2, r3
 8007246:	f241 3388 	movw	r3, #5000	@ 0x1388
 800724a:	429a      	cmp	r2, r3
 800724c:	d903      	bls.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007254:	e005      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007256:	4b54      	ldr	r3, [pc, #336]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0eb      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007262:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007266:	2b00      	cmp	r3, #0
 8007268:	d129      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800727a:	d10e      	bne.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800727c:	4b4a      	ldr	r3, [pc, #296]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007288:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800728c:	091a      	lsrs	r2, r3, #4
 800728e:	4b48      	ldr	r3, [pc, #288]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007290:	4013      	ands	r3, r2
 8007292:	4a45      	ldr	r2, [pc, #276]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007294:	430b      	orrs	r3, r1
 8007296:	6113      	str	r3, [r2, #16]
 8007298:	e005      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800729a:	4b43      	ldr	r3, [pc, #268]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	4a42      	ldr	r2, [pc, #264]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80072a4:	6113      	str	r3, [r2, #16]
 80072a6:	4b40      	ldr	r3, [pc, #256]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072a8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80072aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072b6:	4a3c      	ldr	r2, [pc, #240]	@ (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072b8:	430b      	orrs	r3, r1
 80072ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80072bc:	e008      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80072c6:	e003      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	f002 0301 	and.w	r3, r2, #1
 80072dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072e0:	2300      	movs	r3, #0
 80072e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80072e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80072ea:	460b      	mov	r3, r1
 80072ec:	4313      	orrs	r3, r2
 80072ee:	f000 808f 	beq.w	8007410 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80072f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072f8:	2b28      	cmp	r3, #40	@ 0x28
 80072fa:	d871      	bhi.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80072fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007304 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80072fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007302:	bf00      	nop
 8007304:	080073e9 	.word	0x080073e9
 8007308:	080073e1 	.word	0x080073e1
 800730c:	080073e1 	.word	0x080073e1
 8007310:	080073e1 	.word	0x080073e1
 8007314:	080073e1 	.word	0x080073e1
 8007318:	080073e1 	.word	0x080073e1
 800731c:	080073e1 	.word	0x080073e1
 8007320:	080073e1 	.word	0x080073e1
 8007324:	080073b5 	.word	0x080073b5
 8007328:	080073e1 	.word	0x080073e1
 800732c:	080073e1 	.word	0x080073e1
 8007330:	080073e1 	.word	0x080073e1
 8007334:	080073e1 	.word	0x080073e1
 8007338:	080073e1 	.word	0x080073e1
 800733c:	080073e1 	.word	0x080073e1
 8007340:	080073e1 	.word	0x080073e1
 8007344:	080073cb 	.word	0x080073cb
 8007348:	080073e1 	.word	0x080073e1
 800734c:	080073e1 	.word	0x080073e1
 8007350:	080073e1 	.word	0x080073e1
 8007354:	080073e1 	.word	0x080073e1
 8007358:	080073e1 	.word	0x080073e1
 800735c:	080073e1 	.word	0x080073e1
 8007360:	080073e1 	.word	0x080073e1
 8007364:	080073e9 	.word	0x080073e9
 8007368:	080073e1 	.word	0x080073e1
 800736c:	080073e1 	.word	0x080073e1
 8007370:	080073e1 	.word	0x080073e1
 8007374:	080073e1 	.word	0x080073e1
 8007378:	080073e1 	.word	0x080073e1
 800737c:	080073e1 	.word	0x080073e1
 8007380:	080073e1 	.word	0x080073e1
 8007384:	080073e9 	.word	0x080073e9
 8007388:	080073e1 	.word	0x080073e1
 800738c:	080073e1 	.word	0x080073e1
 8007390:	080073e1 	.word	0x080073e1
 8007394:	080073e1 	.word	0x080073e1
 8007398:	080073e1 	.word	0x080073e1
 800739c:	080073e1 	.word	0x080073e1
 80073a0:	080073e1 	.word	0x080073e1
 80073a4:	080073e9 	.word	0x080073e9
 80073a8:	58024400 	.word	0x58024400
 80073ac:	58024800 	.word	0x58024800
 80073b0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b8:	3308      	adds	r3, #8
 80073ba:	2101      	movs	r1, #1
 80073bc:	4618      	mov	r0, r3
 80073be:	f001 fdcb 	bl	8008f58 <RCCEx_PLL2_Config>
 80073c2:	4603      	mov	r3, r0
 80073c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073c8:	e00f      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ce:	3328      	adds	r3, #40	@ 0x28
 80073d0:	2101      	movs	r1, #1
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 fe72 	bl	80090bc <RCCEx_PLL3_Config>
 80073d8:	4603      	mov	r3, r0
 80073da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073de:	e004      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073e6:	e000      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80073e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10a      	bne.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073f2:	4bbf      	ldr	r3, [pc, #764]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80073fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007400:	4abb      	ldr	r2, [pc, #748]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007402:	430b      	orrs	r3, r1
 8007404:	6553      	str	r3, [r2, #84]	@ 0x54
 8007406:	e003      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800740c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007418:	f002 0302 	and.w	r3, r2, #2
 800741c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007420:	2300      	movs	r3, #0
 8007422:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007426:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800742a:	460b      	mov	r3, r1
 800742c:	4313      	orrs	r3, r2
 800742e:	d041      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007436:	2b05      	cmp	r3, #5
 8007438:	d824      	bhi.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800743a:	a201      	add	r2, pc, #4	@ (adr r2, 8007440 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	0800748d 	.word	0x0800748d
 8007444:	08007459 	.word	0x08007459
 8007448:	0800746f 	.word	0x0800746f
 800744c:	0800748d 	.word	0x0800748d
 8007450:	0800748d 	.word	0x0800748d
 8007454:	0800748d 	.word	0x0800748d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745c:	3308      	adds	r3, #8
 800745e:	2101      	movs	r1, #1
 8007460:	4618      	mov	r0, r3
 8007462:	f001 fd79 	bl	8008f58 <RCCEx_PLL2_Config>
 8007466:	4603      	mov	r3, r0
 8007468:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800746c:	e00f      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007472:	3328      	adds	r3, #40	@ 0x28
 8007474:	2101      	movs	r1, #1
 8007476:	4618      	mov	r0, r3
 8007478:	f001 fe20 	bl	80090bc <RCCEx_PLL3_Config>
 800747c:	4603      	mov	r3, r0
 800747e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007482:	e004      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800748a:	e000      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800748c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800748e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10a      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007496:	4b96      	ldr	r3, [pc, #600]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800749a:	f023 0107 	bic.w	r1, r3, #7
 800749e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074a4:	4a92      	ldr	r2, [pc, #584]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80074a6:	430b      	orrs	r3, r1
 80074a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80074aa:	e003      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	f002 0304 	and.w	r3, r2, #4
 80074c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074c4:	2300      	movs	r3, #0
 80074c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074ca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074ce:	460b      	mov	r3, r1
 80074d0:	4313      	orrs	r3, r2
 80074d2:	d044      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80074d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074dc:	2b05      	cmp	r3, #5
 80074de:	d825      	bhi.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80074e0:	a201      	add	r2, pc, #4	@ (adr r2, 80074e8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80074e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e6:	bf00      	nop
 80074e8:	08007535 	.word	0x08007535
 80074ec:	08007501 	.word	0x08007501
 80074f0:	08007517 	.word	0x08007517
 80074f4:	08007535 	.word	0x08007535
 80074f8:	08007535 	.word	0x08007535
 80074fc:	08007535 	.word	0x08007535
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007504:	3308      	adds	r3, #8
 8007506:	2101      	movs	r1, #1
 8007508:	4618      	mov	r0, r3
 800750a:	f001 fd25 	bl	8008f58 <RCCEx_PLL2_Config>
 800750e:	4603      	mov	r3, r0
 8007510:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007514:	e00f      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800751a:	3328      	adds	r3, #40	@ 0x28
 800751c:	2101      	movs	r1, #1
 800751e:	4618      	mov	r0, r3
 8007520:	f001 fdcc 	bl	80090bc <RCCEx_PLL3_Config>
 8007524:	4603      	mov	r3, r0
 8007526:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800752a:	e004      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007532:	e000      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007536:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10b      	bne.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800753e:	4b6c      	ldr	r3, [pc, #432]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007542:	f023 0107 	bic.w	r1, r3, #7
 8007546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800754a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800754e:	4a68      	ldr	r2, [pc, #416]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007550:	430b      	orrs	r3, r1
 8007552:	6593      	str	r3, [r2, #88]	@ 0x58
 8007554:	e003      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007556:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800755a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800755e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	f002 0320 	and.w	r3, r2, #32
 800756a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800756e:	2300      	movs	r3, #0
 8007570:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007574:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007578:	460b      	mov	r3, r1
 800757a:	4313      	orrs	r3, r2
 800757c:	d055      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800757e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007586:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800758a:	d033      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800758c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007590:	d82c      	bhi.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007596:	d02f      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800759c:	d826      	bhi.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800759e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075a2:	d02b      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80075a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075a8:	d820      	bhi.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80075aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075ae:	d012      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80075b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075b4:	d81a      	bhi.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d022      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80075ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075be:	d115      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c4:	3308      	adds	r3, #8
 80075c6:	2100      	movs	r1, #0
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 fcc5 	bl	8008f58 <RCCEx_PLL2_Config>
 80075ce:	4603      	mov	r3, r0
 80075d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075d4:	e015      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075da:	3328      	adds	r3, #40	@ 0x28
 80075dc:	2102      	movs	r1, #2
 80075de:	4618      	mov	r0, r3
 80075e0:	f001 fd6c 	bl	80090bc <RCCEx_PLL3_Config>
 80075e4:	4603      	mov	r3, r0
 80075e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075ea:	e00a      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075f2:	e006      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075f4:	bf00      	nop
 80075f6:	e004      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075f8:	bf00      	nop
 80075fa:	e002      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075fc:	bf00      	nop
 80075fe:	e000      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007602:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10b      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800760a:	4b39      	ldr	r3, [pc, #228]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800760c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800760e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007616:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800761a:	4a35      	ldr	r2, [pc, #212]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800761c:	430b      	orrs	r3, r1
 800761e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007620:	e003      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007622:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007626:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800762a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007632:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007636:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800763a:	2300      	movs	r3, #0
 800763c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007640:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007644:	460b      	mov	r3, r1
 8007646:	4313      	orrs	r3, r2
 8007648:	d058      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800764a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007652:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007656:	d033      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007658:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800765c:	d82c      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800765e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007662:	d02f      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007668:	d826      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800766a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800766e:	d02b      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007670:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007674:	d820      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007676:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800767a:	d012      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800767c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007680:	d81a      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007682:	2b00      	cmp	r3, #0
 8007684:	d022      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800768a:	d115      	bne.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800768c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007690:	3308      	adds	r3, #8
 8007692:	2100      	movs	r1, #0
 8007694:	4618      	mov	r0, r3
 8007696:	f001 fc5f 	bl	8008f58 <RCCEx_PLL2_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80076a0:	e015      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a6:	3328      	adds	r3, #40	@ 0x28
 80076a8:	2102      	movs	r1, #2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f001 fd06 	bl	80090bc <RCCEx_PLL3_Config>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80076b6:	e00a      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076be:	e006      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076c0:	bf00      	nop
 80076c2:	e004      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076c4:	bf00      	nop
 80076c6:	e002      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076c8:	bf00      	nop
 80076ca:	e000      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10e      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076d6:	4b06      	ldr	r3, [pc, #24]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076da:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80076de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076e6:	4a02      	ldr	r2, [pc, #8]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076e8:	430b      	orrs	r3, r1
 80076ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80076ec:	e006      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80076ee:	bf00      	nop
 80076f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007708:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800770c:	2300      	movs	r3, #0
 800770e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007712:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007716:	460b      	mov	r3, r1
 8007718:	4313      	orrs	r3, r2
 800771a:	d055      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800771c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007720:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007724:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007728:	d033      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800772a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800772e:	d82c      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007734:	d02f      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800773a:	d826      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800773c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007740:	d02b      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007742:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007746:	d820      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007748:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800774c:	d012      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800774e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007752:	d81a      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007754:	2b00      	cmp	r3, #0
 8007756:	d022      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800775c:	d115      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800775e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007762:	3308      	adds	r3, #8
 8007764:	2100      	movs	r1, #0
 8007766:	4618      	mov	r0, r3
 8007768:	f001 fbf6 	bl	8008f58 <RCCEx_PLL2_Config>
 800776c:	4603      	mov	r3, r0
 800776e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007772:	e015      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007778:	3328      	adds	r3, #40	@ 0x28
 800777a:	2102      	movs	r1, #2
 800777c:	4618      	mov	r0, r3
 800777e:	f001 fc9d 	bl	80090bc <RCCEx_PLL3_Config>
 8007782:	4603      	mov	r3, r0
 8007784:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007788:	e00a      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007790:	e006      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007792:	bf00      	nop
 8007794:	e004      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007796:	bf00      	nop
 8007798:	e002      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800779a:	bf00      	nop
 800779c:	e000      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800779e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10b      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80077a8:	4ba0      	ldr	r3, [pc, #640]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80077b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077b8:	4a9c      	ldr	r2, [pc, #624]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077ba:	430b      	orrs	r3, r1
 80077bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80077be:	e003      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80077c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f002 0308 	and.w	r3, r2, #8
 80077d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077d8:	2300      	movs	r3, #0
 80077da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077de:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80077e2:	460b      	mov	r3, r1
 80077e4:	4313      	orrs	r3, r2
 80077e6:	d01e      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80077e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077f4:	d10c      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fa:	3328      	adds	r3, #40	@ 0x28
 80077fc:	2102      	movs	r1, #2
 80077fe:	4618      	mov	r0, r3
 8007800:	f001 fc5c 	bl	80090bc <RCCEx_PLL3_Config>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007810:	4b86      	ldr	r3, [pc, #536]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007814:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007820:	4a82      	ldr	r2, [pc, #520]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007822:	430b      	orrs	r3, r1
 8007824:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782e:	f002 0310 	and.w	r3, r2, #16
 8007832:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007836:	2300      	movs	r3, #0
 8007838:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800783c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007840:	460b      	mov	r3, r1
 8007842:	4313      	orrs	r3, r2
 8007844:	d01e      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800784a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800784e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007852:	d10c      	bne.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007858:	3328      	adds	r3, #40	@ 0x28
 800785a:	2102      	movs	r1, #2
 800785c:	4618      	mov	r0, r3
 800785e:	f001 fc2d 	bl	80090bc <RCCEx_PLL3_Config>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800786e:	4b6f      	ldr	r3, [pc, #444]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007872:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800787e:	4a6b      	ldr	r2, [pc, #428]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007880:	430b      	orrs	r3, r1
 8007882:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007890:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007892:	2300      	movs	r3, #0
 8007894:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007896:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800789a:	460b      	mov	r3, r1
 800789c:	4313      	orrs	r3, r2
 800789e:	d03e      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80078a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078ac:	d022      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80078ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078b2:	d81b      	bhi.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80078b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078bc:	d00b      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80078be:	e015      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c4:	3308      	adds	r3, #8
 80078c6:	2100      	movs	r1, #0
 80078c8:	4618      	mov	r0, r3
 80078ca:	f001 fb45 	bl	8008f58 <RCCEx_PLL2_Config>
 80078ce:	4603      	mov	r3, r0
 80078d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078d4:	e00f      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078da:	3328      	adds	r3, #40	@ 0x28
 80078dc:	2102      	movs	r1, #2
 80078de:	4618      	mov	r0, r3
 80078e0:	f001 fbec 	bl	80090bc <RCCEx_PLL3_Config>
 80078e4:	4603      	mov	r3, r0
 80078e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078ea:	e004      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078f2:	e000      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80078f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10b      	bne.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078fe:	4b4b      	ldr	r3, [pc, #300]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007902:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800790e:	4a47      	ldr	r2, [pc, #284]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007910:	430b      	orrs	r3, r1
 8007912:	6593      	str	r3, [r2, #88]	@ 0x58
 8007914:	e003      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007916:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800791a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800791e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800792a:	673b      	str	r3, [r7, #112]	@ 0x70
 800792c:	2300      	movs	r3, #0
 800792e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007930:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007934:	460b      	mov	r3, r1
 8007936:	4313      	orrs	r3, r2
 8007938:	d03b      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800793a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007942:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007946:	d01f      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007948:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800794c:	d818      	bhi.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800794e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007952:	d003      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007954:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007958:	d007      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800795a:	e011      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800795c:	4b33      	ldr	r3, [pc, #204]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800795e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007960:	4a32      	ldr	r2, [pc, #200]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007966:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007968:	e00f      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800796a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796e:	3328      	adds	r3, #40	@ 0x28
 8007970:	2101      	movs	r1, #1
 8007972:	4618      	mov	r0, r3
 8007974:	f001 fba2 	bl	80090bc <RCCEx_PLL3_Config>
 8007978:	4603      	mov	r3, r0
 800797a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800797e:	e004      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007986:	e000      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800798a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10b      	bne.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007992:	4b26      	ldr	r3, [pc, #152]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007996:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800799a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800799e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079a2:	4a22      	ldr	r2, [pc, #136]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079a4:	430b      	orrs	r3, r1
 80079a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80079a8:	e003      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80079b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80079be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079c0:	2300      	movs	r3, #0
 80079c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079c4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80079c8:	460b      	mov	r3, r1
 80079ca:	4313      	orrs	r3, r2
 80079cc:	d034      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80079ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80079d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079dc:	d007      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80079de:	e011      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079e0:	4b12      	ldr	r3, [pc, #72]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e4:	4a11      	ldr	r2, [pc, #68]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079ec:	e00e      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f2:	3308      	adds	r3, #8
 80079f4:	2102      	movs	r1, #2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 faae 	bl	8008f58 <RCCEx_PLL2_Config>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a02:	e003      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10d      	bne.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a14:	4b05      	ldr	r3, [pc, #20]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a18:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a22:	4a02      	ldr	r2, [pc, #8]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a24:	430b      	orrs	r3, r1
 8007a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a28:	e006      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007a2a:	bf00      	nop
 8007a2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007a44:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a46:	2300      	movs	r3, #0
 8007a48:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a4a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4313      	orrs	r3, r2
 8007a52:	d00c      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a58:	3328      	adds	r3, #40	@ 0x28
 8007a5a:	2102      	movs	r1, #2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f001 fb2d 	bl	80090bc <RCCEx_PLL3_Config>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007a7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a80:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007a84:	460b      	mov	r3, r1
 8007a86:	4313      	orrs	r3, r2
 8007a88:	d036      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a94:	d018      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007a96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a9a:	d811      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aa0:	d014      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007aa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aa6:	d80b      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d011      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ab0:	d106      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab2:	4bb7      	ldr	r3, [pc, #732]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab6:	4ab6      	ldr	r2, [pc, #728]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007abc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007abe:	e008      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ac6:	e004      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ac8:	bf00      	nop
 8007aca:	e002      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007acc:	bf00      	nop
 8007ace:	e000      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ad2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ada:	4bad      	ldr	r3, [pc, #692]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ade:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ae8:	4aa9      	ldr	r2, [pc, #676]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007aea:	430b      	orrs	r3, r1
 8007aec:	6553      	str	r3, [r2, #84]	@ 0x54
 8007aee:	e003      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007af4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007b04:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b06:	2300      	movs	r3, #0
 8007b08:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b0a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4313      	orrs	r3, r2
 8007b12:	d009      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b14:	4b9e      	ldr	r3, [pc, #632]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b22:	4a9b      	ldr	r2, [pc, #620]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b24:	430b      	orrs	r3, r1
 8007b26:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007b34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b36:	2300      	movs	r3, #0
 8007b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b3a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4313      	orrs	r3, r2
 8007b42:	d009      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b44:	4b92      	ldr	r3, [pc, #584]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b48:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b52:	4a8f      	ldr	r2, [pc, #572]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b54:	430b      	orrs	r3, r1
 8007b56:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007b64:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b66:	2300      	movs	r3, #0
 8007b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b6a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4313      	orrs	r3, r2
 8007b72:	d00e      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b74:	4b86      	ldr	r3, [pc, #536]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	4a85      	ldr	r2, [pc, #532]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b7e:	6113      	str	r3, [r2, #16]
 8007b80:	4b83      	ldr	r3, [pc, #524]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b82:	6919      	ldr	r1, [r3, #16]
 8007b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b8c:	4a80      	ldr	r2, [pc, #512]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ba4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4313      	orrs	r3, r2
 8007bac:	d009      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007bae:	4b78      	ldr	r3, [pc, #480]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bb2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bbc:	4a74      	ldr	r2, [pc, #464]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bbe:	430b      	orrs	r3, r1
 8007bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007bce:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bd4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	d00a      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bde:	4b6c      	ldr	r3, [pc, #432]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bee:	4a68      	ldr	r2, [pc, #416]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bf0:	430b      	orrs	r3, r1
 8007bf2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c06:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	d011      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c14:	3308      	adds	r3, #8
 8007c16:	2100      	movs	r1, #0
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f001 f99d 	bl	8008f58 <RCCEx_PLL2_Config>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007c24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	6239      	str	r1, [r7, #32]
 8007c40:	f003 0302 	and.w	r3, r3, #2
 8007c44:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c46:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	d011      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c54:	3308      	adds	r3, #8
 8007c56:	2101      	movs	r1, #1
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 f97d 	bl	8008f58 <RCCEx_PLL2_Config>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	61b9      	str	r1, [r7, #24]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	61fb      	str	r3, [r7, #28]
 8007c86:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	d011      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c94:	3308      	adds	r3, #8
 8007c96:	2102      	movs	r1, #2
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 f95d 	bl	8008f58 <RCCEx_PLL2_Config>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d003      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	6139      	str	r1, [r7, #16]
 8007cc0:	f003 0308 	and.w	r3, r3, #8
 8007cc4:	617b      	str	r3, [r7, #20]
 8007cc6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	d011      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd4:	3328      	adds	r3, #40	@ 0x28
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f001 f9ef 	bl	80090bc <RCCEx_PLL3_Config>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007ce4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	f003 0310 	and.w	r3, r3, #16
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	d011      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d14:	3328      	adds	r3, #40	@ 0x28
 8007d16:	2101      	movs	r1, #1
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f001 f9cf 	bl	80090bc <RCCEx_PLL3_Config>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007d24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	6039      	str	r1, [r7, #0]
 8007d40:	f003 0320 	and.w	r3, r3, #32
 8007d44:	607b      	str	r3, [r7, #4]
 8007d46:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	d011      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d54:	3328      	adds	r3, #40	@ 0x28
 8007d56:	2102      	movs	r1, #2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f001 f9af 	bl	80090bc <RCCEx_PLL3_Config>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007d64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007d74:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	e000      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d8e:	bf00      	nop
 8007d90:	58024400 	.word	0x58024400

08007d94 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b090      	sub	sp, #64	@ 0x40
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007da2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007da6:	430b      	orrs	r3, r1
 8007da8:	f040 8094 	bne.w	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007dac:	4b9b      	ldr	r3, [pc, #620]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	f200 8087 	bhi.w	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc4:	08007dd9 	.word	0x08007dd9
 8007dc8:	08007e01 	.word	0x08007e01
 8007dcc:	08007e29 	.word	0x08007e29
 8007dd0:	08007ec5 	.word	0x08007ec5
 8007dd4:	08007e51 	.word	0x08007e51
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007dd8:	4b90      	ldr	r3, [pc, #576]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007de4:	d108      	bne.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 ff62 	bl	8008cb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007df4:	f000 bc93 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dfc:	f000 bc8f 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e00:	4b86      	ldr	r3, [pc, #536]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e0c:	d108      	bne.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e0e:	f107 0318 	add.w	r3, r7, #24
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fca6 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e1c:	f000 bc7f 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e24:	f000 bc7b 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e28:	4b7c      	ldr	r3, [pc, #496]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e34:	d108      	bne.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e36:	f107 030c 	add.w	r3, r7, #12
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 fde6 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e44:	f000 bc6b 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e4c:	f000 bc67 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e50:	4b72      	ldr	r3, [pc, #456]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e58:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e5a:	4b70      	ldr	r3, [pc, #448]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0304 	and.w	r3, r3, #4
 8007e62:	2b04      	cmp	r3, #4
 8007e64:	d10c      	bne.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d109      	bne.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e6c:	4b6b      	ldr	r3, [pc, #428]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	08db      	lsrs	r3, r3, #3
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	4a6a      	ldr	r2, [pc, #424]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007e78:	fa22 f303 	lsr.w	r3, r2, r3
 8007e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e7e:	e01f      	b.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e80:	4b66      	ldr	r3, [pc, #408]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e8c:	d106      	bne.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e94:	d102      	bne.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e96:	4b63      	ldr	r3, [pc, #396]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e9a:	e011      	b.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e9c:	4b5f      	ldr	r3, [pc, #380]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ea4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ea8:	d106      	bne.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eb0:	d102      	bne.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eb6:	e003      	b.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007ebc:	f000 bc2f 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ec0:	f000 bc2d 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ec4:	4b59      	ldr	r3, [pc, #356]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec8:	f000 bc29 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ed0:	f000 bc25 	b.w	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007edc:	430b      	orrs	r3, r1
 8007ede:	f040 80a7 	bne.w	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007ee2:	4b4e      	ldr	r3, [pc, #312]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ee6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007eea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ef2:	d054      	beq.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007efa:	f200 808b 	bhi.w	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f00:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f04:	f000 8083 	beq.w	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f0e:	f200 8081 	bhi.w	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f18:	d02f      	beq.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f20:	d878      	bhi.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d004      	beq.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f2e:	d012      	beq.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007f30:	e070      	b.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f32:	4b3a      	ldr	r3, [pc, #232]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f3e:	d107      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 feb5 	bl	8008cb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f4e:	e3e6      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f54:	e3e3      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f56:	4b31      	ldr	r3, [pc, #196]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f62:	d107      	bne.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f64:	f107 0318 	add.w	r3, r7, #24
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fbfb 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f72:	e3d4      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f78:	e3d1      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f7a:	4b28      	ldr	r3, [pc, #160]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f86:	d107      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f88:	f107 030c 	add.w	r3, r7, #12
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fd3d 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f96:	e3c2      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f9c:	e3bf      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fa2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007fa6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d10c      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d109      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fba:	4b18      	ldr	r3, [pc, #96]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	08db      	lsrs	r3, r3, #3
 8007fc0:	f003 0303 	and.w	r3, r3, #3
 8007fc4:	4a16      	ldr	r2, [pc, #88]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fcc:	e01e      	b.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fce:	4b13      	ldr	r3, [pc, #76]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fda:	d106      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fe2:	d102      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fe8:	e010      	b.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fea:	4b0c      	ldr	r3, [pc, #48]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ff2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ff6:	d106      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ffe:	d102      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008000:	4b09      	ldr	r3, [pc, #36]	@ (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008004:	e002      	b.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800800a:	e388      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800800c:	e387      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800800e:	4b07      	ldr	r3, [pc, #28]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008012:	e384      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008018:	e381      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800801a:	bf00      	nop
 800801c:	58024400 	.word	0x58024400
 8008020:	03d09000 	.word	0x03d09000
 8008024:	003d0900 	.word	0x003d0900
 8008028:	017d7840 	.word	0x017d7840
 800802c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008034:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008038:	430b      	orrs	r3, r1
 800803a:	f040 809c 	bne.w	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800803e:	4b9e      	ldr	r3, [pc, #632]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008042:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008046:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800804e:	d054      	beq.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008056:	f200 808b 	bhi.w	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800805a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008060:	f000 8083 	beq.w	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008066:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800806a:	f200 8081 	bhi.w	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800806e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008070:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008074:	d02f      	beq.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008078:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800807c:	d878      	bhi.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800807e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008080:	2b00      	cmp	r3, #0
 8008082:	d004      	beq.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008086:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800808a:	d012      	beq.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800808c:	e070      	b.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800808e:	4b8a      	ldr	r3, [pc, #552]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008096:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800809a:	d107      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800809c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 fe07 	bl	8008cb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080aa:	e338      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b0:	e335      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080b2:	4b81      	ldr	r3, [pc, #516]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080be:	d107      	bne.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080c0:	f107 0318 	add.w	r3, r7, #24
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fb4d 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ce:	e326      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d4:	e323      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080d6:	4b78      	ldr	r3, [pc, #480]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080e2:	d107      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080e4:	f107 030c 	add.w	r3, r7, #12
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 fc8f 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080f2:	e314      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080f4:	2300      	movs	r3, #0
 80080f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080f8:	e311      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080fa:	4b6f      	ldr	r3, [pc, #444]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008102:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008104:	4b6c      	ldr	r3, [pc, #432]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0304 	and.w	r3, r3, #4
 800810c:	2b04      	cmp	r3, #4
 800810e:	d10c      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008112:	2b00      	cmp	r3, #0
 8008114:	d109      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008116:	4b68      	ldr	r3, [pc, #416]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	08db      	lsrs	r3, r3, #3
 800811c:	f003 0303 	and.w	r3, r3, #3
 8008120:	4a66      	ldr	r2, [pc, #408]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008122:	fa22 f303 	lsr.w	r3, r2, r3
 8008126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008128:	e01e      	b.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800812a:	4b63      	ldr	r3, [pc, #396]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008136:	d106      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800813e:	d102      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008140:	4b5f      	ldr	r3, [pc, #380]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008144:	e010      	b.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008146:	4b5c      	ldr	r3, [pc, #368]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800814e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008152:	d106      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008156:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800815a:	d102      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800815c:	4b59      	ldr	r3, [pc, #356]	@ (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800815e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008160:	e002      	b.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008166:	e2da      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008168:	e2d9      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800816a:	4b57      	ldr	r3, [pc, #348]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800816c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800816e:	e2d6      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008174:	e2d3      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800817a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800817e:	430b      	orrs	r3, r1
 8008180:	f040 80a7 	bne.w	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008184:	4b4c      	ldr	r3, [pc, #304]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008188:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800818c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800818e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008190:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008194:	d055      	beq.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008198:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800819c:	f200 8096 	bhi.w	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80081a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081a6:	f000 8084 	beq.w	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80081aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081b0:	f200 808c 	bhi.w	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80081b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081ba:	d030      	beq.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80081bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081c2:	f200 8083 	bhi.w	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80081c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80081cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081d2:	d012      	beq.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80081d4:	e07a      	b.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081d6:	4b38      	ldr	r3, [pc, #224]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081e2:	d107      	bne.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fd63 	bl	8008cb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081f2:	e294      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081f8:	e291      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081fa:	4b2f      	ldr	r3, [pc, #188]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008206:	d107      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008208:	f107 0318 	add.w	r3, r7, #24
 800820c:	4618      	mov	r0, r3
 800820e:	f000 faa9 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008216:	e282      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800821c:	e27f      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800821e:	4b26      	ldr	r3, [pc, #152]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008226:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800822a:	d107      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800822c:	f107 030c 	add.w	r3, r7, #12
 8008230:	4618      	mov	r0, r3
 8008232:	f000 fbeb 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800823a:	e270      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008240:	e26d      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008242:	4b1d      	ldr	r3, [pc, #116]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008246:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800824a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800824c:	4b1a      	ldr	r3, [pc, #104]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b04      	cmp	r3, #4
 8008256:	d10c      	bne.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825a:	2b00      	cmp	r3, #0
 800825c:	d109      	bne.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800825e:	4b16      	ldr	r3, [pc, #88]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	08db      	lsrs	r3, r3, #3
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	4a14      	ldr	r2, [pc, #80]	@ (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800826a:	fa22 f303 	lsr.w	r3, r2, r3
 800826e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008270:	e01e      	b.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008272:	4b11      	ldr	r3, [pc, #68]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800827a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800827e:	d106      	bne.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008282:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008286:	d102      	bne.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008288:	4b0d      	ldr	r3, [pc, #52]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800828a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800828c:	e010      	b.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800828e:	4b0a      	ldr	r3, [pc, #40]	@ (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008296:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800829a:	d106      	bne.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800829c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800829e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082a2:	d102      	bne.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082a4:	4b07      	ldr	r3, [pc, #28]	@ (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082a8:	e002      	b.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80082ae:	e236      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80082b0:	e235      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082b2:	4b05      	ldr	r3, [pc, #20]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80082b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b6:	e232      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80082b8:	58024400 	.word	0x58024400
 80082bc:	03d09000 	.word	0x03d09000
 80082c0:	003d0900 	.word	0x003d0900
 80082c4:	017d7840 	.word	0x017d7840
 80082c8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082d0:	e225      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80082d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082d6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80082da:	430b      	orrs	r3, r1
 80082dc:	f040 8085 	bne.w	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80082e0:	4b9c      	ldr	r3, [pc, #624]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80082e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082e4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80082e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80082ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082f0:	d06b      	beq.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80082f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082f8:	d874      	bhi.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80082fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008300:	d056      	beq.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008304:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008308:	d86c      	bhi.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800830a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008310:	d03b      	beq.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008314:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008318:	d864      	bhi.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800831a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008320:	d021      	beq.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008324:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008328:	d85c      	bhi.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800832a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832c:	2b00      	cmp	r3, #0
 800832e:	d004      	beq.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008336:	d004      	beq.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008338:	e054      	b.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800833a:	f7fe fb75 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 800833e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008340:	e1ed      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008342:	4b84      	ldr	r3, [pc, #528]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800834a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800834e:	d107      	bne.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008350:	f107 0318 	add.w	r3, r7, #24
 8008354:	4618      	mov	r0, r3
 8008356:	f000 fa05 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800835e:	e1de      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008360:	2300      	movs	r3, #0
 8008362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008364:	e1db      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008366:	4b7b      	ldr	r3, [pc, #492]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800836e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008372:	d107      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008374:	f107 030c 	add.w	r3, r7, #12
 8008378:	4618      	mov	r0, r3
 800837a:	f000 fb47 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008382:	e1cc      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008388:	e1c9      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800838a:	4b72      	ldr	r3, [pc, #456]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0304 	and.w	r3, r3, #4
 8008392:	2b04      	cmp	r3, #4
 8008394:	d109      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008396:	4b6f      	ldr	r3, [pc, #444]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	08db      	lsrs	r3, r3, #3
 800839c:	f003 0303 	and.w	r3, r3, #3
 80083a0:	4a6d      	ldr	r2, [pc, #436]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80083a2:	fa22 f303 	lsr.w	r3, r2, r3
 80083a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083a8:	e1b9      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ae:	e1b6      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80083b0:	4b68      	ldr	r3, [pc, #416]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083bc:	d102      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80083be:	4b67      	ldr	r3, [pc, #412]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80083c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083c2:	e1ac      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c8:	e1a9      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80083ca:	4b62      	ldr	r3, [pc, #392]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083d6:	d102      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80083d8:	4b61      	ldr	r3, [pc, #388]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80083da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083dc:	e19f      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e2:	e19c      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e8:	e199      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80083ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ee:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80083f2:	430b      	orrs	r3, r1
 80083f4:	d173      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80083f6:	4b57      	ldr	r3, [pc, #348]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80083fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008402:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008406:	d02f      	beq.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800840e:	d863      	bhi.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008412:	2b00      	cmp	r3, #0
 8008414:	d004      	beq.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800841c:	d012      	beq.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800841e:	e05b      	b.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008420:	4b4c      	ldr	r3, [pc, #304]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008428:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800842c:	d107      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800842e:	f107 0318 	add.w	r3, r7, #24
 8008432:	4618      	mov	r0, r3
 8008434:	f000 f996 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800843c:	e16f      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008442:	e16c      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008444:	4b43      	ldr	r3, [pc, #268]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800844c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008450:	d107      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008452:	f107 030c 	add.w	r3, r7, #12
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fad8 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008460:	e15d      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008466:	e15a      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008468:	4b3a      	ldr	r3, [pc, #232]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800846a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800846c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008470:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008472:	4b38      	ldr	r3, [pc, #224]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0304 	and.w	r3, r3, #4
 800847a:	2b04      	cmp	r3, #4
 800847c:	d10c      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800847e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008480:	2b00      	cmp	r3, #0
 8008482:	d109      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008484:	4b33      	ldr	r3, [pc, #204]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	08db      	lsrs	r3, r3, #3
 800848a:	f003 0303 	and.w	r3, r3, #3
 800848e:	4a32      	ldr	r2, [pc, #200]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008490:	fa22 f303 	lsr.w	r3, r2, r3
 8008494:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008496:	e01e      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008498:	4b2e      	ldr	r3, [pc, #184]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084a4:	d106      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80084a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084ac:	d102      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084ae:	4b2b      	ldr	r3, [pc, #172]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80084b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084b2:	e010      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084b4:	4b27      	ldr	r3, [pc, #156]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084c0:	d106      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80084c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084c8:	d102      	bne.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084ca:	4b25      	ldr	r3, [pc, #148]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80084cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084ce:	e002      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80084d4:	e123      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80084d6:	e122      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80084d8:	2300      	movs	r3, #0
 80084da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084dc:	e11f      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80084de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084e2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80084e6:	430b      	orrs	r3, r1
 80084e8:	d13c      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80084ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80084f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d004      	beq.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80084fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008500:	d012      	beq.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008502:	e023      	b.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008504:	4b13      	ldr	r3, [pc, #76]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800850c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008510:	d107      	bne.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008512:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008516:	4618      	mov	r0, r3
 8008518:	f000 fbcc 	bl	8008cb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800851c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008520:	e0fd      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008522:	2300      	movs	r3, #0
 8008524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008526:	e0fa      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008528:	4b0a      	ldr	r3, [pc, #40]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008530:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008534:	d107      	bne.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008536:	f107 0318 	add.w	r3, r7, #24
 800853a:	4618      	mov	r0, r3
 800853c:	f000 f912 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008540:	6a3b      	ldr	r3, [r7, #32]
 8008542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008544:	e0eb      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800854a:	e0e8      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008550:	e0e5      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008552:	bf00      	nop
 8008554:	58024400 	.word	0x58024400
 8008558:	03d09000 	.word	0x03d09000
 800855c:	003d0900 	.word	0x003d0900
 8008560:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008568:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800856c:	430b      	orrs	r3, r1
 800856e:	f040 8085 	bne.w	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008572:	4b6d      	ldr	r3, [pc, #436]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008576:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800857a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800857c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008582:	d06b      	beq.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008586:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800858a:	d874      	bhi.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800858c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008592:	d056      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800859a:	d86c      	bhi.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800859c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80085a2:	d03b      	beq.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80085a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80085aa:	d864      	bhi.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80085ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085b2:	d021      	beq.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80085b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ba:	d85c      	bhi.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80085bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d004      	beq.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80085c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085c8:	d004      	beq.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80085ca:	e054      	b.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80085cc:	f000 f8b4 	bl	8008738 <HAL_RCCEx_GetD3PCLK1Freq>
 80085d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085d2:	e0a4      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085d4:	4b54      	ldr	r3, [pc, #336]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085e0:	d107      	bne.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085e2:	f107 0318 	add.w	r3, r7, #24
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 f8bc 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085f0:	e095      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f6:	e092      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085f8:	4b4b      	ldr	r3, [pc, #300]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008600:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008604:	d107      	bne.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008606:	f107 030c 	add.w	r3, r7, #12
 800860a:	4618      	mov	r0, r3
 800860c:	f000 f9fe 	bl	8008a0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008614:	e083      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008616:	2300      	movs	r3, #0
 8008618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800861a:	e080      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800861c:	4b42      	ldr	r3, [pc, #264]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b04      	cmp	r3, #4
 8008626:	d109      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008628:	4b3f      	ldr	r3, [pc, #252]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	08db      	lsrs	r3, r3, #3
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	4a3e      	ldr	r2, [pc, #248]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008634:	fa22 f303 	lsr.w	r3, r2, r3
 8008638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800863a:	e070      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008640:	e06d      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008642:	4b39      	ldr	r3, [pc, #228]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800864a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800864e:	d102      	bne.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008650:	4b37      	ldr	r3, [pc, #220]	@ (8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008654:	e063      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008656:	2300      	movs	r3, #0
 8008658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800865a:	e060      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800865c:	4b32      	ldr	r3, [pc, #200]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008664:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008668:	d102      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800866a:	4b32      	ldr	r3, [pc, #200]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800866c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800866e:	e056      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008674:	e053      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800867a:	e050      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800867c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008680:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008684:	430b      	orrs	r3, r1
 8008686:	d148      	bne.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008688:	4b27      	ldr	r3, [pc, #156]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800868a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800868c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008690:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008694:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008698:	d02a      	beq.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800869a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086a0:	d838      	bhi.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80086a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d004      	beq.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80086a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086ae:	d00d      	beq.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80086b0:	e030      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086be:	d102      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80086c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80086c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086c4:	e02b      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ca:	e028      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086cc:	4b16      	ldr	r3, [pc, #88]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086d8:	d107      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 fae8 	bl	8008cb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086e8:	e019      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ee:	e016      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086fc:	d107      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086fe:	f107 0318 	add.w	r3, r7, #24
 8008702:	4618      	mov	r0, r3
 8008704:	f000 f82e 	bl	8008764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800870c:	e007      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008712:	e004      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008718:	e001      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800871a:	2300      	movs	r3, #0
 800871c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800871e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008720:	4618      	mov	r0, r3
 8008722:	3740      	adds	r7, #64	@ 0x40
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	58024400 	.word	0x58024400
 800872c:	03d09000 	.word	0x03d09000
 8008730:	003d0900 	.word	0x003d0900
 8008734:	017d7840 	.word	0x017d7840

08008738 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800873c:	f7fe f944 	bl	80069c8 <HAL_RCC_GetHCLKFreq>
 8008740:	4602      	mov	r2, r0
 8008742:	4b06      	ldr	r3, [pc, #24]	@ (800875c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	091b      	lsrs	r3, r3, #4
 8008748:	f003 0307 	and.w	r3, r3, #7
 800874c:	4904      	ldr	r1, [pc, #16]	@ (8008760 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800874e:	5ccb      	ldrb	r3, [r1, r3]
 8008750:	f003 031f 	and.w	r3, r3, #31
 8008754:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008758:	4618      	mov	r0, r3
 800875a:	bd80      	pop	{r7, pc}
 800875c:	58024400 	.word	0x58024400
 8008760:	0800a000 	.word	0x0800a000

08008764 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008764:	b480      	push	{r7}
 8008766:	b089      	sub	sp, #36	@ 0x24
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800876c:	4ba1      	ldr	r3, [pc, #644]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800876e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008770:	f003 0303 	and.w	r3, r3, #3
 8008774:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008776:	4b9f      	ldr	r3, [pc, #636]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800877a:	0b1b      	lsrs	r3, r3, #12
 800877c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008780:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008782:	4b9c      	ldr	r3, [pc, #624]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008786:	091b      	lsrs	r3, r3, #4
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800878e:	4b99      	ldr	r3, [pc, #612]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008792:	08db      	lsrs	r3, r3, #3
 8008794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	fb02 f303 	mul.w	r3, r2, r3
 800879e:	ee07 3a90 	vmov	s15, r3
 80087a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 8111 	beq.w	80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	f000 8083 	beq.w	80088c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	f200 80a1 	bhi.w	8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d003      	beq.n	80087d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d056      	beq.n	800887c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80087ce:	e099      	b.n	8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087d0:	4b88      	ldr	r3, [pc, #544]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0320 	and.w	r3, r3, #32
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d02d      	beq.n	8008838 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087dc:	4b85      	ldr	r3, [pc, #532]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	08db      	lsrs	r3, r3, #3
 80087e2:	f003 0303 	and.w	r3, r3, #3
 80087e6:	4a84      	ldr	r2, [pc, #528]	@ (80089f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80087e8:	fa22 f303 	lsr.w	r3, r2, r3
 80087ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	ee07 3a90 	vmov	s15, r3
 80087f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008806:	4b7b      	ldr	r3, [pc, #492]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008816:	ed97 6a03 	vldr	s12, [r7, #12]
 800881a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800881e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800882a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800882e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008832:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008836:	e087      	b.n	8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	ee07 3a90 	vmov	s15, r3
 800883e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008842:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008a00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884a:	4b6a      	ldr	r3, [pc, #424]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800884c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008852:	ee07 3a90 	vmov	s15, r3
 8008856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885a:	ed97 6a03 	vldr	s12, [r7, #12]
 800885e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800886a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800886e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800887a:	e065      	b.n	8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008886:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008a04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800888a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800888e:	4b59      	ldr	r3, [pc, #356]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008896:	ee07 3a90 	vmov	s15, r3
 800889a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800889e:	ed97 6a03 	vldr	s12, [r7, #12]
 80088a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088be:	e043      	b.n	8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	ee07 3a90 	vmov	s15, r3
 80088c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80088ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d2:	4b48      	ldr	r3, [pc, #288]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088da:	ee07 3a90 	vmov	s15, r3
 80088de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008902:	e021      	b.n	8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	ee07 3a90 	vmov	s15, r3
 800890a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008a04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008916:	4b37      	ldr	r3, [pc, #220]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008926:	ed97 6a03 	vldr	s12, [r7, #12]
 800892a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800892e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800893a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008946:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008948:	4b2a      	ldr	r3, [pc, #168]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800894a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800894c:	0a5b      	lsrs	r3, r3, #9
 800894e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800895e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008962:	edd7 6a07 	vldr	s13, [r7, #28]
 8008966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800896a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800896e:	ee17 2a90 	vmov	r2, s15
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008976:	4b1f      	ldr	r3, [pc, #124]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800897a:	0c1b      	lsrs	r3, r3, #16
 800897c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008980:	ee07 3a90 	vmov	s15, r3
 8008984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008988:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800898c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008990:	edd7 6a07 	vldr	s13, [r7, #28]
 8008994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800899c:	ee17 2a90 	vmov	r2, s15
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80089a4:	4b13      	ldr	r3, [pc, #76]	@ (80089f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a8:	0e1b      	lsrs	r3, r3, #24
 80089aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089ae:	ee07 3a90 	vmov	s15, r3
 80089b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089be:	edd7 6a07 	vldr	s13, [r7, #28]
 80089c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ca:	ee17 2a90 	vmov	r2, s15
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80089d2:	e008      	b.n	80089e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	609a      	str	r2, [r3, #8]
}
 80089e6:	bf00      	nop
 80089e8:	3724      	adds	r7, #36	@ 0x24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	58024400 	.word	0x58024400
 80089f8:	03d09000 	.word	0x03d09000
 80089fc:	46000000 	.word	0x46000000
 8008a00:	4c742400 	.word	0x4c742400
 8008a04:	4a742400 	.word	0x4a742400
 8008a08:	4bbebc20 	.word	0x4bbebc20

08008a0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b089      	sub	sp, #36	@ 0x24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a14:	4ba1      	ldr	r3, [pc, #644]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a18:	f003 0303 	and.w	r3, r3, #3
 8008a1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008a1e:	4b9f      	ldr	r3, [pc, #636]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a22:	0d1b      	lsrs	r3, r3, #20
 8008a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a2a:	4b9c      	ldr	r3, [pc, #624]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2e:	0a1b      	lsrs	r3, r3, #8
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008a36:	4b99      	ldr	r3, [pc, #612]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a3a:	08db      	lsrs	r3, r3, #3
 8008a3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	fb02 f303 	mul.w	r3, r2, r3
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 8111 	beq.w	8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	f000 8083 	beq.w	8008b68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	f200 80a1 	bhi.w	8008bac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d056      	beq.n	8008b24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008a76:	e099      	b.n	8008bac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a78:	4b88      	ldr	r3, [pc, #544]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0320 	and.w	r3, r3, #32
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d02d      	beq.n	8008ae0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a84:	4b85      	ldr	r3, [pc, #532]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	08db      	lsrs	r3, r3, #3
 8008a8a:	f003 0303 	and.w	r3, r3, #3
 8008a8e:	4a84      	ldr	r2, [pc, #528]	@ (8008ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008a90:	fa22 f303 	lsr.w	r3, r2, r3
 8008a94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	ee07 3a90 	vmov	s15, r3
 8008a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	ee07 3a90 	vmov	s15, r3
 8008aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aae:	4b7b      	ldr	r3, [pc, #492]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab6:	ee07 3a90 	vmov	s15, r3
 8008aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ac2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ada:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ade:	e087      	b.n	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	ee07 3a90 	vmov	s15, r3
 8008ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008af2:	4b6a      	ldr	r3, [pc, #424]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b22:	e065      	b.n	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	ee07 3a90 	vmov	s15, r3
 8008b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008cac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b36:	4b59      	ldr	r3, [pc, #356]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3e:	ee07 3a90 	vmov	s15, r3
 8008b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b66:	e043      	b.n	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	ee07 3a90 	vmov	s15, r3
 8008b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b7a:	4b48      	ldr	r3, [pc, #288]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b82:	ee07 3a90 	vmov	s15, r3
 8008b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008baa:	e021      	b.n	8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008cac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bbe:	4b37      	ldr	r3, [pc, #220]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc6:	ee07 3a90 	vmov	s15, r3
 8008bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bd2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf4:	0a5b      	lsrs	r3, r3, #9
 8008bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bfa:	ee07 3a90 	vmov	s15, r3
 8008bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c16:	ee17 2a90 	vmov	r2, s15
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c22:	0c1b      	lsrs	r3, r3, #16
 8008c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c28:	ee07 3a90 	vmov	s15, r3
 8008c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c44:	ee17 2a90 	vmov	r2, s15
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008c4c:	4b13      	ldr	r3, [pc, #76]	@ (8008c9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c50:	0e1b      	lsrs	r3, r3, #24
 8008c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c56:	ee07 3a90 	vmov	s15, r3
 8008c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c72:	ee17 2a90 	vmov	r2, s15
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008c7a:	e008      	b.n	8008c8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	609a      	str	r2, [r3, #8]
}
 8008c8e:	bf00      	nop
 8008c90:	3724      	adds	r7, #36	@ 0x24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	58024400 	.word	0x58024400
 8008ca0:	03d09000 	.word	0x03d09000
 8008ca4:	46000000 	.word	0x46000000
 8008ca8:	4c742400 	.word	0x4c742400
 8008cac:	4a742400 	.word	0x4a742400
 8008cb0:	4bbebc20 	.word	0x4bbebc20

08008cb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b089      	sub	sp, #36	@ 0x24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cbc:	4ba0      	ldr	r3, [pc, #640]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc0:	f003 0303 	and.w	r3, r3, #3
 8008cc4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008cc6:	4b9e      	ldr	r3, [pc, #632]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cca:	091b      	lsrs	r3, r3, #4
 8008ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cd0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008cd2:	4b9b      	ldr	r3, [pc, #620]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008cdc:	4b98      	ldr	r3, [pc, #608]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce0:	08db      	lsrs	r3, r3, #3
 8008ce2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	fb02 f303 	mul.w	r3, r2, r3
 8008cec:	ee07 3a90 	vmov	s15, r3
 8008cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 8111 	beq.w	8008f22 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	f000 8083 	beq.w	8008e0e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	f200 80a1 	bhi.w	8008e52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d056      	beq.n	8008dca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008d1c:	e099      	b.n	8008e52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d1e:	4b88      	ldr	r3, [pc, #544]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0320 	and.w	r3, r3, #32
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d02d      	beq.n	8008d86 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d2a:	4b85      	ldr	r3, [pc, #532]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	08db      	lsrs	r3, r3, #3
 8008d30:	f003 0303 	and.w	r3, r3, #3
 8008d34:	4a83      	ldr	r2, [pc, #524]	@ (8008f44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008d36:	fa22 f303 	lsr.w	r3, r2, r3
 8008d3a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	ee07 3a90 	vmov	s15, r3
 8008d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d54:	4b7a      	ldr	r3, [pc, #488]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5c:	ee07 3a90 	vmov	s15, r3
 8008d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d64:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d68:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008f48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d80:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d84:	e087      	b.n	8008e96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	ee07 3a90 	vmov	s15, r3
 8008d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d90:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008f4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d98:	4b69      	ldr	r3, [pc, #420]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008da0:	ee07 3a90 	vmov	s15, r3
 8008da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dac:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008f48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008db0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008db4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dc8:	e065      	b.n	8008e96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	ee07 3a90 	vmov	s15, r3
 8008dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008f50 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008dd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ddc:	4b58      	ldr	r3, [pc, #352]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008de4:	ee07 3a90 	vmov	s15, r3
 8008de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dec:	ed97 6a03 	vldr	s12, [r7, #12]
 8008df0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008f48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008df4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e0c:	e043      	b.n	8008e96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	ee07 3a90 	vmov	s15, r3
 8008e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e18:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e20:	4b47      	ldr	r3, [pc, #284]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e28:	ee07 3a90 	vmov	s15, r3
 8008e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e30:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e34:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008f48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e50:	e021      	b.n	8008e96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	ee07 3a90 	vmov	s15, r3
 8008e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008f4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e64:	4b36      	ldr	r3, [pc, #216]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e6c:	ee07 3a90 	vmov	s15, r3
 8008e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e74:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e78:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008f48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e94:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008e96:	4b2a      	ldr	r3, [pc, #168]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e9a:	0a5b      	lsrs	r3, r3, #9
 8008e9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ea0:	ee07 3a90 	vmov	s15, r3
 8008ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ebc:	ee17 2a90 	vmov	r2, s15
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ec8:	0c1b      	lsrs	r3, r3, #16
 8008eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ede:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eea:	ee17 2a90 	vmov	r2, s15
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008ef2:	4b13      	ldr	r3, [pc, #76]	@ (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ef6:	0e1b      	lsrs	r3, r3, #24
 8008ef8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008efc:	ee07 3a90 	vmov	s15, r3
 8008f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f18:	ee17 2a90 	vmov	r2, s15
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008f20:	e008      	b.n	8008f34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	609a      	str	r2, [r3, #8]
}
 8008f34:	bf00      	nop
 8008f36:	3724      	adds	r7, #36	@ 0x24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	58024400 	.word	0x58024400
 8008f44:	03d09000 	.word	0x03d09000
 8008f48:	46000000 	.word	0x46000000
 8008f4c:	4c742400 	.word	0x4c742400
 8008f50:	4a742400 	.word	0x4a742400
 8008f54:	4bbebc20 	.word	0x4bbebc20

08008f58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f66:	4b53      	ldr	r3, [pc, #332]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	d101      	bne.n	8008f76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e099      	b.n	80090aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008f76:	4b4f      	ldr	r3, [pc, #316]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a4e      	ldr	r2, [pc, #312]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008f7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f82:	f7f8 fa1d 	bl	80013c0 <HAL_GetTick>
 8008f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f88:	e008      	b.n	8008f9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f8a:	f7f8 fa19 	bl	80013c0 <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d901      	bls.n	8008f9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e086      	b.n	80090aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f9c:	4b45      	ldr	r3, [pc, #276]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1f0      	bne.n	8008f8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008fa8:	4b42      	ldr	r3, [pc, #264]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	031b      	lsls	r3, r3, #12
 8008fb6:	493f      	ldr	r1, [pc, #252]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	628b      	str	r3, [r1, #40]	@ 0x28
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	025b      	lsls	r3, r3, #9
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	431a      	orrs	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	041b      	lsls	r3, r3, #16
 8008fda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	061b      	lsls	r3, r3, #24
 8008fe8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008fec:	4931      	ldr	r1, [pc, #196]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ff2:	4b30      	ldr	r3, [pc, #192]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8008ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	492d      	ldr	r1, [pc, #180]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009000:	4313      	orrs	r3, r2
 8009002:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009004:	4b2b      	ldr	r3, [pc, #172]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009008:	f023 0220 	bic.w	r2, r3, #32
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	4928      	ldr	r1, [pc, #160]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009012:	4313      	orrs	r3, r2
 8009014:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009016:	4b27      	ldr	r3, [pc, #156]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800901a:	4a26      	ldr	r2, [pc, #152]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800901c:	f023 0310 	bic.w	r3, r3, #16
 8009020:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009022:	4b24      	ldr	r3, [pc, #144]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009024:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009026:	4b24      	ldr	r3, [pc, #144]	@ (80090b8 <RCCEx_PLL2_Config+0x160>)
 8009028:	4013      	ands	r3, r2
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	69d2      	ldr	r2, [r2, #28]
 800902e:	00d2      	lsls	r2, r2, #3
 8009030:	4920      	ldr	r1, [pc, #128]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009032:	4313      	orrs	r3, r2
 8009034:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009036:	4b1f      	ldr	r3, [pc, #124]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800903a:	4a1e      	ldr	r2, [pc, #120]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800903c:	f043 0310 	orr.w	r3, r3, #16
 8009040:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d106      	bne.n	8009056 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009048:	4b1a      	ldr	r3, [pc, #104]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800904a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800904c:	4a19      	ldr	r2, [pc, #100]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800904e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009052:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009054:	e00f      	b.n	8009076 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d106      	bne.n	800906a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800905c:	4b15      	ldr	r3, [pc, #84]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800905e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009060:	4a14      	ldr	r2, [pc, #80]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009066:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009068:	e005      	b.n	8009076 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800906a:	4b12      	ldr	r3, [pc, #72]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800906c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906e:	4a11      	ldr	r2, [pc, #68]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009070:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009074:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009076:	4b0f      	ldr	r3, [pc, #60]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a0e      	ldr	r2, [pc, #56]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800907c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009082:	f7f8 f99d 	bl	80013c0 <HAL_GetTick>
 8009086:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009088:	e008      	b.n	800909c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800908a:	f7f8 f999 	bl	80013c0 <HAL_GetTick>
 800908e:	4602      	mov	r2, r0
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	2b02      	cmp	r3, #2
 8009096:	d901      	bls.n	800909c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e006      	b.n	80090aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800909c:	4b05      	ldr	r3, [pc, #20]	@ (80090b4 <RCCEx_PLL2_Config+0x15c>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d0f0      	beq.n	800908a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	58024400 	.word	0x58024400
 80090b8:	ffff0007 	.word	0xffff0007

080090bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090ca:	4b53      	ldr	r3, [pc, #332]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80090cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ce:	f003 0303 	and.w	r3, r3, #3
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d101      	bne.n	80090da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e099      	b.n	800920e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80090da:	4b4f      	ldr	r3, [pc, #316]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a4e      	ldr	r2, [pc, #312]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80090e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090e6:	f7f8 f96b 	bl	80013c0 <HAL_GetTick>
 80090ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80090ec:	e008      	b.n	8009100 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090ee:	f7f8 f967 	bl	80013c0 <HAL_GetTick>
 80090f2:	4602      	mov	r2, r0
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d901      	bls.n	8009100 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090fc:	2303      	movs	r3, #3
 80090fe:	e086      	b.n	800920e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009100:	4b45      	ldr	r3, [pc, #276]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1f0      	bne.n	80090ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800910c:	4b42      	ldr	r3, [pc, #264]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 800910e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009110:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	051b      	lsls	r3, r3, #20
 800911a:	493f      	ldr	r1, [pc, #252]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 800911c:	4313      	orrs	r3, r2
 800911e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	3b01      	subs	r3, #1
 8009126:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	3b01      	subs	r3, #1
 8009130:	025b      	lsls	r3, r3, #9
 8009132:	b29b      	uxth	r3, r3
 8009134:	431a      	orrs	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	3b01      	subs	r3, #1
 800913c:	041b      	lsls	r3, r3, #16
 800913e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009142:	431a      	orrs	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	3b01      	subs	r3, #1
 800914a:	061b      	lsls	r3, r3, #24
 800914c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009150:	4931      	ldr	r1, [pc, #196]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009152:	4313      	orrs	r3, r2
 8009154:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009156:	4b30      	ldr	r3, [pc, #192]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	695b      	ldr	r3, [r3, #20]
 8009162:	492d      	ldr	r1, [pc, #180]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009164:	4313      	orrs	r3, r2
 8009166:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009168:	4b2b      	ldr	r3, [pc, #172]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 800916a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800916c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	4928      	ldr	r1, [pc, #160]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009176:	4313      	orrs	r3, r2
 8009178:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800917a:	4b27      	ldr	r3, [pc, #156]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 800917c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917e:	4a26      	ldr	r2, [pc, #152]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009184:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009186:	4b24      	ldr	r3, [pc, #144]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800918a:	4b24      	ldr	r3, [pc, #144]	@ (800921c <RCCEx_PLL3_Config+0x160>)
 800918c:	4013      	ands	r3, r2
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	69d2      	ldr	r2, [r2, #28]
 8009192:	00d2      	lsls	r2, r2, #3
 8009194:	4920      	ldr	r1, [pc, #128]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009196:	4313      	orrs	r3, r2
 8009198:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800919a:	4b1f      	ldr	r3, [pc, #124]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 800919c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919e:	4a1e      	ldr	r2, [pc, #120]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d106      	bne.n	80091ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80091ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b0:	4a19      	ldr	r2, [pc, #100]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80091b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091b8:	e00f      	b.n	80091da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d106      	bne.n	80091ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80091c0:	4b15      	ldr	r3, [pc, #84]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c4:	4a14      	ldr	r2, [pc, #80]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80091ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091cc:	e005      	b.n	80091da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80091ce:	4b12      	ldr	r3, [pc, #72]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d2:	4a11      	ldr	r2, [pc, #68]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80091d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80091da:	4b0f      	ldr	r3, [pc, #60]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a0e      	ldr	r2, [pc, #56]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 80091e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091e6:	f7f8 f8eb 	bl	80013c0 <HAL_GetTick>
 80091ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80091ec:	e008      	b.n	8009200 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80091ee:	f7f8 f8e7 	bl	80013c0 <HAL_GetTick>
 80091f2:	4602      	mov	r2, r0
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d901      	bls.n	8009200 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	e006      	b.n	800920e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009200:	4b05      	ldr	r3, [pc, #20]	@ (8009218 <RCCEx_PLL3_Config+0x15c>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d0f0      	beq.n	80091ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	58024400 	.word	0x58024400
 800921c:	ffff0007 	.word	0xffff0007

08009220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d101      	bne.n	8009232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e049      	b.n	80092c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d106      	bne.n	800924c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7f7 ff00 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2202      	movs	r2, #2
 8009250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3304      	adds	r3, #4
 800925c:	4619      	mov	r1, r3
 800925e:	4610      	mov	r0, r2
 8009260:	f000 fb38 	bl	80098d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
	...

080092d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d001      	beq.n	80092e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e056      	b.n	8009396 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2202      	movs	r2, #2
 80092ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a2b      	ldr	r2, [pc, #172]	@ (80093a4 <HAL_TIM_Base_Start+0xd4>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d02c      	beq.n	8009354 <HAL_TIM_Base_Start+0x84>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009302:	d027      	beq.n	8009354 <HAL_TIM_Base_Start+0x84>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a27      	ldr	r2, [pc, #156]	@ (80093a8 <HAL_TIM_Base_Start+0xd8>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d022      	beq.n	8009354 <HAL_TIM_Base_Start+0x84>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a26      	ldr	r2, [pc, #152]	@ (80093ac <HAL_TIM_Base_Start+0xdc>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d01d      	beq.n	8009354 <HAL_TIM_Base_Start+0x84>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a24      	ldr	r2, [pc, #144]	@ (80093b0 <HAL_TIM_Base_Start+0xe0>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d018      	beq.n	8009354 <HAL_TIM_Base_Start+0x84>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a23      	ldr	r2, [pc, #140]	@ (80093b4 <HAL_TIM_Base_Start+0xe4>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d013      	beq.n	8009354 <HAL_TIM_Base_Start+0x84>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a21      	ldr	r2, [pc, #132]	@ (80093b8 <HAL_TIM_Base_Start+0xe8>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d00e      	beq.n	8009354 <HAL_TIM_Base_Start+0x84>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a20      	ldr	r2, [pc, #128]	@ (80093bc <HAL_TIM_Base_Start+0xec>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d009      	beq.n	8009354 <HAL_TIM_Base_Start+0x84>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a1e      	ldr	r2, [pc, #120]	@ (80093c0 <HAL_TIM_Base_Start+0xf0>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d004      	beq.n	8009354 <HAL_TIM_Base_Start+0x84>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a1d      	ldr	r2, [pc, #116]	@ (80093c4 <HAL_TIM_Base_Start+0xf4>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d115      	bne.n	8009380 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	689a      	ldr	r2, [r3, #8]
 800935a:	4b1b      	ldr	r3, [pc, #108]	@ (80093c8 <HAL_TIM_Base_Start+0xf8>)
 800935c:	4013      	ands	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b06      	cmp	r3, #6
 8009364:	d015      	beq.n	8009392 <HAL_TIM_Base_Start+0xc2>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800936c:	d011      	beq.n	8009392 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f042 0201 	orr.w	r2, r2, #1
 800937c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800937e:	e008      	b.n	8009392 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f042 0201 	orr.w	r2, r2, #1
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	e000      	b.n	8009394 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009392:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	40010000 	.word	0x40010000
 80093a8:	40000400 	.word	0x40000400
 80093ac:	40000800 	.word	0x40000800
 80093b0:	40000c00 	.word	0x40000c00
 80093b4:	40010400 	.word	0x40010400
 80093b8:	40001800 	.word	0x40001800
 80093bc:	40014000 	.word	0x40014000
 80093c0:	4000e000 	.word	0x4000e000
 80093c4:	4000e400 	.word	0x4000e400
 80093c8:	00010007 	.word	0x00010007

080093cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e08f      	b.n	8009500 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d106      	bne.n	80093fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7f7 fdd7 	bl	8000fa8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2202      	movs	r2, #2
 80093fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6899      	ldr	r1, [r3, #8]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	4b3e      	ldr	r3, [pc, #248]	@ (8009508 <HAL_TIM_Encoder_Init+0x13c>)
 800940e:	400b      	ands	r3, r1
 8009410:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	3304      	adds	r3, #4
 800941a:	4619      	mov	r1, r3
 800941c:	4610      	mov	r0, r2
 800941e:	f000 fa59 	bl	80098d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6a1b      	ldr	r3, [r3, #32]
 8009438:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	4313      	orrs	r3, r2
 8009442:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	4b31      	ldr	r3, [pc, #196]	@ (800950c <HAL_TIM_Encoder_Init+0x140>)
 8009448:	4013      	ands	r3, r2
 800944a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	021b      	lsls	r3, r3, #8
 8009456:	4313      	orrs	r3, r2
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	4313      	orrs	r3, r2
 800945c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	4b2b      	ldr	r3, [pc, #172]	@ (8009510 <HAL_TIM_Encoder_Init+0x144>)
 8009462:	4013      	ands	r3, r2
 8009464:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	4b2a      	ldr	r3, [pc, #168]	@ (8009514 <HAL_TIM_Encoder_Init+0x148>)
 800946a:	4013      	ands	r3, r2
 800946c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	021b      	lsls	r3, r3, #8
 8009478:	4313      	orrs	r3, r2
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	4313      	orrs	r3, r2
 800947e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	011a      	lsls	r2, r3, #4
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	031b      	lsls	r3, r3, #12
 800948c:	4313      	orrs	r3, r2
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	4313      	orrs	r3, r2
 8009492:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800949a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80094a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	011b      	lsls	r3, r3, #4
 80094ae:	4313      	orrs	r3, r2
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	fffebff8 	.word	0xfffebff8
 800950c:	fffffcfc 	.word	0xfffffcfc
 8009510:	fffff3f3 	.word	0xfffff3f3
 8009514:	ffff0f0f 	.word	0xffff0f0f

08009518 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009528:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009530:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009538:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009540:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d110      	bne.n	800956a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009548:	7bfb      	ldrb	r3, [r7, #15]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d102      	bne.n	8009554 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800954e:	7b7b      	ldrb	r3, [r7, #13]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d001      	beq.n	8009558 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e089      	b.n	800966c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2202      	movs	r2, #2
 800955c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2202      	movs	r2, #2
 8009564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009568:	e031      	b.n	80095ce <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	2b04      	cmp	r3, #4
 800956e:	d110      	bne.n	8009592 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009570:	7bbb      	ldrb	r3, [r7, #14]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d102      	bne.n	800957c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009576:	7b3b      	ldrb	r3, [r7, #12]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d001      	beq.n	8009580 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e075      	b.n	800966c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009590:	e01d      	b.n	80095ce <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d108      	bne.n	80095aa <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009598:	7bbb      	ldrb	r3, [r7, #14]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d105      	bne.n	80095aa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800959e:	7b7b      	ldrb	r3, [r7, #13]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d102      	bne.n	80095aa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80095a4:	7b3b      	ldrb	r3, [r7, #12]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d001      	beq.n	80095ae <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e05e      	b.n	800966c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2202      	movs	r2, #2
 80095b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2202      	movs	r2, #2
 80095ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2202      	movs	r2, #2
 80095c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2202      	movs	r2, #2
 80095ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d003      	beq.n	80095dc <HAL_TIM_Encoder_Start_IT+0xc4>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	d010      	beq.n	80095fc <HAL_TIM_Encoder_Start_IT+0xe4>
 80095da:	e01f      	b.n	800961c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2201      	movs	r2, #1
 80095e2:	2100      	movs	r1, #0
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 fa27 	bl	8009a38 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68da      	ldr	r2, [r3, #12]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f042 0202 	orr.w	r2, r2, #2
 80095f8:	60da      	str	r2, [r3, #12]
      break;
 80095fa:	e02e      	b.n	800965a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2201      	movs	r2, #1
 8009602:	2104      	movs	r1, #4
 8009604:	4618      	mov	r0, r3
 8009606:	f000 fa17 	bl	8009a38 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68da      	ldr	r2, [r3, #12]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f042 0204 	orr.w	r2, r2, #4
 8009618:	60da      	str	r2, [r3, #12]
      break;
 800961a:	e01e      	b.n	800965a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2201      	movs	r2, #1
 8009622:	2100      	movs	r1, #0
 8009624:	4618      	mov	r0, r3
 8009626:	f000 fa07 	bl	8009a38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2201      	movs	r2, #1
 8009630:	2104      	movs	r1, #4
 8009632:	4618      	mov	r0, r3
 8009634:	f000 fa00 	bl	8009a38 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68da      	ldr	r2, [r3, #12]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f042 0202 	orr.w	r2, r2, #2
 8009646:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68da      	ldr	r2, [r3, #12]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f042 0204 	orr.w	r2, r2, #4
 8009656:	60da      	str	r2, [r3, #12]
      break;
 8009658:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f042 0201 	orr.w	r2, r2, #1
 8009668:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	f003 0302 	and.w	r3, r3, #2
 8009692:	2b00      	cmp	r3, #0
 8009694:	d020      	beq.n	80096d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f003 0302 	and.w	r3, r3, #2
 800969c:	2b00      	cmp	r3, #0
 800969e:	d01b      	beq.n	80096d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f06f 0202 	mvn.w	r2, #2
 80096a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	f003 0303 	and.w	r3, r3, #3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d003      	beq.n	80096c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7f6 fed8 	bl	8000474 <HAL_TIM_IC_CaptureCallback>
 80096c4:	e005      	b.n	80096d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f8e5 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f8ec 	bl	80098aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	f003 0304 	and.w	r3, r3, #4
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d020      	beq.n	8009724 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f003 0304 	and.w	r3, r3, #4
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d01b      	beq.n	8009724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f06f 0204 	mvn.w	r2, #4
 80096f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2202      	movs	r2, #2
 80096fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7f6 feb2 	bl	8000474 <HAL_TIM_IC_CaptureCallback>
 8009710:	e005      	b.n	800971e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f8bf 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f8c6 	bl	80098aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f003 0308 	and.w	r3, r3, #8
 800972a:	2b00      	cmp	r3, #0
 800972c:	d020      	beq.n	8009770 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f003 0308 	and.w	r3, r3, #8
 8009734:	2b00      	cmp	r3, #0
 8009736:	d01b      	beq.n	8009770 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f06f 0208 	mvn.w	r2, #8
 8009740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2204      	movs	r2, #4
 8009746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	f003 0303 	and.w	r3, r3, #3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7f6 fe8c 	bl	8000474 <HAL_TIM_IC_CaptureCallback>
 800975c:	e005      	b.n	800976a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f899 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f8a0 	bl	80098aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	f003 0310 	and.w	r3, r3, #16
 8009776:	2b00      	cmp	r3, #0
 8009778:	d020      	beq.n	80097bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f003 0310 	and.w	r3, r3, #16
 8009780:	2b00      	cmp	r3, #0
 8009782:	d01b      	beq.n	80097bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f06f 0210 	mvn.w	r2, #16
 800978c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2208      	movs	r2, #8
 8009792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7f6 fe66 	bl	8000474 <HAL_TIM_IC_CaptureCallback>
 80097a8:	e005      	b.n	80097b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f873 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f87a 	bl	80098aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00c      	beq.n	80097e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f003 0301 	and.w	r3, r3, #1
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d007      	beq.n	80097e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f06f 0201 	mvn.w	r2, #1
 80097d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f851 	bl	8009882 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d104      	bne.n	80097f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00c      	beq.n	800980e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d007      	beq.n	800980e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f9e1 	bl	8009bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00c      	beq.n	8009832 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800981e:	2b00      	cmp	r3, #0
 8009820:	d007      	beq.n	8009832 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800982a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f9d9 	bl	8009be4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00c      	beq.n	8009856 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009842:	2b00      	cmp	r3, #0
 8009844:	d007      	beq.n	8009856 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800984e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f834 	bl	80098be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	f003 0320 	and.w	r3, r3, #32
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00c      	beq.n	800987a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f003 0320 	and.w	r3, r3, #32
 8009866:	2b00      	cmp	r3, #0
 8009868:	d007      	beq.n	800987a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f06f 0220 	mvn.w	r2, #32
 8009872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f9a1 	bl	8009bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800987a:	bf00      	nop
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009882:	b480      	push	{r7}
 8009884:	b083      	sub	sp, #12
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800988a:	bf00      	nop
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800989e:	bf00      	nop
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b083      	sub	sp, #12
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098b2:	bf00      	nop
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
	...

080098d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a4a      	ldr	r2, [pc, #296]	@ (8009a10 <TIM_Base_SetConfig+0x13c>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d013      	beq.n	8009914 <TIM_Base_SetConfig+0x40>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098f2:	d00f      	beq.n	8009914 <TIM_Base_SetConfig+0x40>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a47      	ldr	r2, [pc, #284]	@ (8009a14 <TIM_Base_SetConfig+0x140>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d00b      	beq.n	8009914 <TIM_Base_SetConfig+0x40>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a46      	ldr	r2, [pc, #280]	@ (8009a18 <TIM_Base_SetConfig+0x144>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d007      	beq.n	8009914 <TIM_Base_SetConfig+0x40>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a45      	ldr	r2, [pc, #276]	@ (8009a1c <TIM_Base_SetConfig+0x148>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d003      	beq.n	8009914 <TIM_Base_SetConfig+0x40>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a44      	ldr	r2, [pc, #272]	@ (8009a20 <TIM_Base_SetConfig+0x14c>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d108      	bne.n	8009926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800991a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	4313      	orrs	r3, r2
 8009924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4a39      	ldr	r2, [pc, #228]	@ (8009a10 <TIM_Base_SetConfig+0x13c>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d027      	beq.n	800997e <TIM_Base_SetConfig+0xaa>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009934:	d023      	beq.n	800997e <TIM_Base_SetConfig+0xaa>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a36      	ldr	r2, [pc, #216]	@ (8009a14 <TIM_Base_SetConfig+0x140>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d01f      	beq.n	800997e <TIM_Base_SetConfig+0xaa>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a35      	ldr	r2, [pc, #212]	@ (8009a18 <TIM_Base_SetConfig+0x144>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d01b      	beq.n	800997e <TIM_Base_SetConfig+0xaa>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a34      	ldr	r2, [pc, #208]	@ (8009a1c <TIM_Base_SetConfig+0x148>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d017      	beq.n	800997e <TIM_Base_SetConfig+0xaa>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a33      	ldr	r2, [pc, #204]	@ (8009a20 <TIM_Base_SetConfig+0x14c>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d013      	beq.n	800997e <TIM_Base_SetConfig+0xaa>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a32      	ldr	r2, [pc, #200]	@ (8009a24 <TIM_Base_SetConfig+0x150>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d00f      	beq.n	800997e <TIM_Base_SetConfig+0xaa>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4a31      	ldr	r2, [pc, #196]	@ (8009a28 <TIM_Base_SetConfig+0x154>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d00b      	beq.n	800997e <TIM_Base_SetConfig+0xaa>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a30      	ldr	r2, [pc, #192]	@ (8009a2c <TIM_Base_SetConfig+0x158>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d007      	beq.n	800997e <TIM_Base_SetConfig+0xaa>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a2f      	ldr	r2, [pc, #188]	@ (8009a30 <TIM_Base_SetConfig+0x15c>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d003      	beq.n	800997e <TIM_Base_SetConfig+0xaa>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a2e      	ldr	r2, [pc, #184]	@ (8009a34 <TIM_Base_SetConfig+0x160>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d108      	bne.n	8009990 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	4313      	orrs	r3, r2
 800998e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	4313      	orrs	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	689a      	ldr	r2, [r3, #8]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a16      	ldr	r2, [pc, #88]	@ (8009a10 <TIM_Base_SetConfig+0x13c>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d00f      	beq.n	80099dc <TIM_Base_SetConfig+0x108>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a18      	ldr	r2, [pc, #96]	@ (8009a20 <TIM_Base_SetConfig+0x14c>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d00b      	beq.n	80099dc <TIM_Base_SetConfig+0x108>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a17      	ldr	r2, [pc, #92]	@ (8009a24 <TIM_Base_SetConfig+0x150>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d007      	beq.n	80099dc <TIM_Base_SetConfig+0x108>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a16      	ldr	r2, [pc, #88]	@ (8009a28 <TIM_Base_SetConfig+0x154>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d003      	beq.n	80099dc <TIM_Base_SetConfig+0x108>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a15      	ldr	r2, [pc, #84]	@ (8009a2c <TIM_Base_SetConfig+0x158>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d103      	bne.n	80099e4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	691a      	ldr	r2, [r3, #16]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d105      	bne.n	8009a02 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	f023 0201 	bic.w	r2, r3, #1
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	611a      	str	r2, [r3, #16]
  }
}
 8009a02:	bf00      	nop
 8009a04:	3714      	adds	r7, #20
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	40010000 	.word	0x40010000
 8009a14:	40000400 	.word	0x40000400
 8009a18:	40000800 	.word	0x40000800
 8009a1c:	40000c00 	.word	0x40000c00
 8009a20:	40010400 	.word	0x40010400
 8009a24:	40014000 	.word	0x40014000
 8009a28:	40014400 	.word	0x40014400
 8009a2c:	40014800 	.word	0x40014800
 8009a30:	4000e000 	.word	0x4000e000
 8009a34:	4000e400 	.word	0x4000e400

08009a38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	f003 031f 	and.w	r3, r3, #31
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6a1a      	ldr	r2, [r3, #32]
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	43db      	mvns	r3, r3
 8009a5a:	401a      	ands	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6a1a      	ldr	r2, [r3, #32]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f003 031f 	and.w	r3, r3, #31
 8009a6a:	6879      	ldr	r1, [r7, #4]
 8009a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a70:	431a      	orrs	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	621a      	str	r2, [r3, #32]
}
 8009a76:	bf00      	nop
 8009a78:	371c      	adds	r7, #28
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
	...

08009a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d101      	bne.n	8009a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a98:	2302      	movs	r3, #2
 8009a9a:	e077      	b.n	8009b8c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a35      	ldr	r2, [pc, #212]	@ (8009b98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d004      	beq.n	8009ad0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a34      	ldr	r2, [pc, #208]	@ (8009b9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d108      	bne.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009ad6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ae8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a25      	ldr	r2, [pc, #148]	@ (8009b98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d02c      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b0e:	d027      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a22      	ldr	r2, [pc, #136]	@ (8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d022      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a21      	ldr	r2, [pc, #132]	@ (8009ba4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d01d      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a1f      	ldr	r2, [pc, #124]	@ (8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d018      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a1a      	ldr	r2, [pc, #104]	@ (8009b9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d013      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8009bac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d00e      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a1a      	ldr	r2, [pc, #104]	@ (8009bb0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d009      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a18      	ldr	r2, [pc, #96]	@ (8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d004      	beq.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a17      	ldr	r2, [pc, #92]	@ (8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d10c      	bne.n	8009b7a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	40010000 	.word	0x40010000
 8009b9c:	40010400 	.word	0x40010400
 8009ba0:	40000400 	.word	0x40000400
 8009ba4:	40000800 	.word	0x40000800
 8009ba8:	40000c00 	.word	0x40000c00
 8009bac:	40001800 	.word	0x40001800
 8009bb0:	40014000 	.word	0x40014000
 8009bb4:	4000e000 	.word	0x4000e000
 8009bb8:	4000e400 	.word	0x4000e400

08009bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <checkint>:
 8009bf8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009bfc:	2b7e      	cmp	r3, #126	@ 0x7e
 8009bfe:	d910      	bls.n	8009c22 <checkint+0x2a>
 8009c00:	2b96      	cmp	r3, #150	@ 0x96
 8009c02:	d80c      	bhi.n	8009c1e <checkint+0x26>
 8009c04:	2201      	movs	r2, #1
 8009c06:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8009c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0e:	1e5a      	subs	r2, r3, #1
 8009c10:	4202      	tst	r2, r0
 8009c12:	d106      	bne.n	8009c22 <checkint+0x2a>
 8009c14:	4203      	tst	r3, r0
 8009c16:	bf0c      	ite	eq
 8009c18:	2002      	moveq	r0, #2
 8009c1a:	2001      	movne	r0, #1
 8009c1c:	4770      	bx	lr
 8009c1e:	2002      	movs	r0, #2
 8009c20:	4770      	bx	lr
 8009c22:	2000      	movs	r0, #0
 8009c24:	4770      	bx	lr
	...

08009c28 <powf>:
 8009c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c2a:	ee10 1a10 	vmov	r1, s0
 8009c2e:	ee10 4a90 	vmov	r4, s1
 8009c32:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 8009c36:	0063      	lsls	r3, r4, #1
 8009c38:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8009c3c:	eef0 7a40 	vmov.f32	s15, s0
 8009c40:	eeb0 7a60 	vmov.f32	s14, s1
 8009c44:	f103 30ff 	add.w	r0, r3, #4294967295
 8009c48:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 8009c4c:	d252      	bcs.n	8009cf4 <powf+0xcc>
 8009c4e:	4290      	cmp	r0, r2
 8009c50:	d258      	bcs.n	8009d04 <powf+0xdc>
 8009c52:	2000      	movs	r0, #0
 8009c54:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 8009c58:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 8009c5c:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8009c60:	0ddb      	lsrs	r3, r3, #23
 8009c62:	4a9d      	ldr	r2, [pc, #628]	@ (8009ed8 <powf+0x2b0>)
 8009c64:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 8009c68:	05db      	lsls	r3, r3, #23
 8009c6a:	1ac9      	subs	r1, r1, r3
 8009c6c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8009c70:	ee07 1a90 	vmov	s15, r1
 8009c74:	ed94 5b02 	vldr	d5, [r4, #8]
 8009c78:	ed94 4b00 	vldr	d4, [r4]
 8009c7c:	15db      	asrs	r3, r3, #23
 8009c7e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8009c82:	ee07 3a90 	vmov	s15, r3
 8009c86:	eea4 2b06 	vfma.f64	d2, d4, d6
 8009c8a:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 8009c8e:	ee22 4b02 	vmul.f64	d4, d2, d2
 8009c92:	ee24 0b04 	vmul.f64	d0, d4, d4
 8009c96:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8009c9a:	ee36 6b05 	vadd.f64	d6, d6, d5
 8009c9e:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 8009ca2:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 8009ca6:	eea2 1b05 	vfma.f64	d1, d2, d5
 8009caa:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 8009cae:	eea2 5b03 	vfma.f64	d5, d2, d3
 8009cb2:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 8009cb6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8009cba:	eea2 6b03 	vfma.f64	d6, d2, d3
 8009cbe:	eea4 6b05 	vfma.f64	d6, d4, d5
 8009cc2:	eea1 6b00 	vfma.f64	d6, d1, d0
 8009cc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009cca:	ee17 3a90 	vmov	r3, s15
 8009cce:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8009cd2:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	f0c0 80b8 	bcc.w	8009e4c <powf+0x224>
 8009cdc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8009eb8 <powf+0x290>
 8009ce0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce8:	dd79      	ble.n	8009dde <powf+0x1b6>
 8009cea:	b003      	add	sp, #12
 8009cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cf0:	f000 b920 	b.w	8009f34 <__math_oflowf>
 8009cf4:	4290      	cmp	r0, r2
 8009cf6:	d330      	bcc.n	8009d5a <powf+0x132>
 8009cf8:	b12b      	cbz	r3, 8009d06 <powf+0xde>
 8009cfa:	0049      	lsls	r1, r1, #1
 8009cfc:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 8009d00:	d808      	bhi.n	8009d14 <powf+0xec>
 8009d02:	e015      	b.n	8009d30 <powf+0x108>
 8009d04:	b953      	cbnz	r3, 8009d1c <powf+0xf4>
 8009d06:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 8009d0a:	0049      	lsls	r1, r1, #1
 8009d0c:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 8009d10:	f240 80ca 	bls.w	8009ea8 <powf+0x280>
 8009d14:	ee37 0a87 	vadd.f32	s0, s15, s14
 8009d18:	b003      	add	sp, #12
 8009d1a:	bd30      	pop	{r4, r5, pc}
 8009d1c:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8009d20:	d105      	bne.n	8009d2e <powf+0x106>
 8009d22:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8009d26:	0064      	lsls	r4, r4, #1
 8009d28:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009d2c:	e7f0      	b.n	8009d10 <powf+0xe8>
 8009d2e:	0049      	lsls	r1, r1, #1
 8009d30:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 8009d34:	d1ee      	bne.n	8009d14 <powf+0xec>
 8009d36:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8009d3a:	f000 80b5 	beq.w	8009ea8 <powf+0x280>
 8009d3e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8009d42:	ea6f 0404 	mvn.w	r4, r4
 8009d46:	bf34      	ite	cc
 8009d48:	2100      	movcc	r1, #0
 8009d4a:	2101      	movcs	r1, #1
 8009d4c:	0fe4      	lsrs	r4, r4, #31
 8009d4e:	42a1      	cmp	r1, r4
 8009d50:	f040 80ad 	bne.w	8009eae <powf+0x286>
 8009d54:	ee27 0a07 	vmul.f32	s0, s14, s14
 8009d58:	e7de      	b.n	8009d18 <powf+0xf0>
 8009d5a:	004d      	lsls	r5, r1, #1
 8009d5c:	1e6b      	subs	r3, r5, #1
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d31b      	bcc.n	8009d9a <powf+0x172>
 8009d62:	2900      	cmp	r1, #0
 8009d64:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009d68:	da0e      	bge.n	8009d88 <powf+0x160>
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f7ff ff44 	bl	8009bf8 <checkint>
 8009d70:	2801      	cmp	r0, #1
 8009d72:	d109      	bne.n	8009d88 <powf+0x160>
 8009d74:	eeb1 0a40 	vneg.f32	s0, s0
 8009d78:	b945      	cbnz	r5, 8009d8c <powf+0x164>
 8009d7a:	2c00      	cmp	r4, #0
 8009d7c:	dacc      	bge.n	8009d18 <powf+0xf0>
 8009d7e:	b003      	add	sp, #12
 8009d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d84:	f000 b8dc 	b.w	8009f40 <__math_divzerof>
 8009d88:	2000      	movs	r0, #0
 8009d8a:	e7f5      	b.n	8009d78 <powf+0x150>
 8009d8c:	2c00      	cmp	r4, #0
 8009d8e:	dac3      	bge.n	8009d18 <powf+0xf0>
 8009d90:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009d94:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009d98:	e7be      	b.n	8009d18 <powf+0xf0>
 8009d9a:	2900      	cmp	r1, #0
 8009d9c:	da1d      	bge.n	8009dda <powf+0x1b2>
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f7ff ff2a 	bl	8009bf8 <checkint>
 8009da4:	b920      	cbnz	r0, 8009db0 <powf+0x188>
 8009da6:	b003      	add	sp, #12
 8009da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dac:	f000 b8da 	b.w	8009f64 <__math_invalidf>
 8009db0:	1e43      	subs	r3, r0, #1
 8009db2:	4258      	negs	r0, r3
 8009db4:	4158      	adcs	r0, r3
 8009db6:	0400      	lsls	r0, r0, #16
 8009db8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8009dbc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8009dc0:	f4bf af48 	bcs.w	8009c54 <powf+0x2c>
 8009dc4:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8009edc <powf+0x2b4>
 8009dc8:	ee27 0aa6 	vmul.f32	s0, s15, s13
 8009dcc:	ee10 3a10 	vmov	r3, s0
 8009dd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009dd4:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 8009dd8:	e73c      	b.n	8009c54 <powf+0x2c>
 8009dda:	2000      	movs	r0, #0
 8009ddc:	e7ee      	b.n	8009dbc <powf+0x194>
 8009dde:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8009ec0 <powf+0x298>
 8009de2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dea:	dd0f      	ble.n	8009e0c <powf+0x1e4>
 8009dec:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 8009df0:	b1c0      	cbz	r0, 8009e24 <powf+0x1fc>
 8009df2:	9301      	str	r3, [sp, #4]
 8009df4:	eddd 6a01 	vldr	s13, [sp, #4]
 8009df8:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 8009dfc:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009e00:	eef4 6a46 	vcmp.f32	s13, s12
 8009e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e08:	f47f af6f 	bne.w	8009cea <powf+0xc2>
 8009e0c:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8009ec8 <powf+0x2a0>
 8009e10:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e18:	d80c      	bhi.n	8009e34 <powf+0x20c>
 8009e1a:	b003      	add	sp, #12
 8009e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e20:	f000 b87c 	b.w	8009f1c <__math_uflowf>
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	eddd 6a00 	vldr	s13, [sp]
 8009e2a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8009e2e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009e32:	e7e5      	b.n	8009e00 <powf+0x1d8>
 8009e34:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8009ed0 <powf+0x2a8>
 8009e38:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e40:	d504      	bpl.n	8009e4c <powf+0x224>
 8009e42:	b003      	add	sp, #12
 8009e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e48:	f000 b86e 	b.w	8009f28 <__math_may_uflowf>
 8009e4c:	4b24      	ldr	r3, [pc, #144]	@ (8009ee0 <powf+0x2b8>)
 8009e4e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8009e52:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 8009e56:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009e5a:	ee16 2a10 	vmov	r2, s12
 8009e5e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009e62:	f002 011f 	and.w	r1, r2, #31
 8009e66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009e6a:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 8009e6e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8009e72:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 8009e76:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8009e7a:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8009e7e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009e82:	686d      	ldr	r5, [r5, #4]
 8009e84:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 8009e88:	1880      	adds	r0, r0, r2
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	190a      	adds	r2, r1, r4
 8009e8e:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8009e92:	eea7 0b05 	vfma.f64	d0, d7, d5
 8009e96:	ec43 2b17 	vmov	d7, r2, r3
 8009e9a:	eea6 0b04 	vfma.f64	d0, d6, d4
 8009e9e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009ea2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009ea6:	e737      	b.n	8009d18 <powf+0xf0>
 8009ea8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009eac:	e734      	b.n	8009d18 <powf+0xf0>
 8009eae:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8009ee4 <powf+0x2bc>
 8009eb2:	e731      	b.n	8009d18 <powf+0xf0>
 8009eb4:	f3af 8000 	nop.w
 8009eb8:	ffd1d571 	.word	0xffd1d571
 8009ebc:	405fffff 	.word	0x405fffff
 8009ec0:	ffa3aae2 	.word	0xffa3aae2
 8009ec4:	405fffff 	.word	0x405fffff
 8009ec8:	00000000 	.word	0x00000000
 8009ecc:	c062c000 	.word	0xc062c000
 8009ed0:	00000000 	.word	0x00000000
 8009ed4:	c062a000 	.word	0xc062a000
 8009ed8:	0800a160 	.word	0x0800a160
 8009edc:	4b000000 	.word	0x4b000000
 8009ee0:	0800a018 	.word	0x0800a018
 8009ee4:	00000000 	.word	0x00000000

08009ee8 <with_errnof>:
 8009ee8:	b510      	push	{r4, lr}
 8009eea:	ed2d 8b02 	vpush	{d8}
 8009eee:	eeb0 8a40 	vmov.f32	s16, s0
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	f000 f84e 	bl	8009f94 <__errno>
 8009ef8:	eeb0 0a48 	vmov.f32	s0, s16
 8009efc:	ecbd 8b02 	vpop	{d8}
 8009f00:	6004      	str	r4, [r0, #0]
 8009f02:	bd10      	pop	{r4, pc}

08009f04 <xflowf>:
 8009f04:	b130      	cbz	r0, 8009f14 <xflowf+0x10>
 8009f06:	eef1 7a40 	vneg.f32	s15, s0
 8009f0a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009f0e:	2022      	movs	r0, #34	@ 0x22
 8009f10:	f7ff bfea 	b.w	8009ee8 <with_errnof>
 8009f14:	eef0 7a40 	vmov.f32	s15, s0
 8009f18:	e7f7      	b.n	8009f0a <xflowf+0x6>
	...

08009f1c <__math_uflowf>:
 8009f1c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009f24 <__math_uflowf+0x8>
 8009f20:	f7ff bff0 	b.w	8009f04 <xflowf>
 8009f24:	10000000 	.word	0x10000000

08009f28 <__math_may_uflowf>:
 8009f28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009f30 <__math_may_uflowf+0x8>
 8009f2c:	f7ff bfea 	b.w	8009f04 <xflowf>
 8009f30:	1a200000 	.word	0x1a200000

08009f34 <__math_oflowf>:
 8009f34:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009f3c <__math_oflowf+0x8>
 8009f38:	f7ff bfe4 	b.w	8009f04 <xflowf>
 8009f3c:	70000000 	.word	0x70000000

08009f40 <__math_divzerof>:
 8009f40:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8009f60 <__math_divzerof+0x20>
 8009f44:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009f48:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	f04f 0022 	mov.w	r0, #34	@ 0x22
 8009f52:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8009f56:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009f5a:	f7ff bfc5 	b.w	8009ee8 <with_errnof>
 8009f5e:	bf00      	nop
 8009f60:	00000000 	.word	0x00000000

08009f64 <__math_invalidf>:
 8009f64:	eef0 7a40 	vmov.f32	s15, s0
 8009f68:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009f6c:	eef4 7a67 	vcmp.f32	s15, s15
 8009f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f74:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8009f78:	d602      	bvs.n	8009f80 <__math_invalidf+0x1c>
 8009f7a:	2021      	movs	r0, #33	@ 0x21
 8009f7c:	f7ff bfb4 	b.w	8009ee8 <with_errnof>
 8009f80:	4770      	bx	lr

08009f82 <memset>:
 8009f82:	4402      	add	r2, r0
 8009f84:	4603      	mov	r3, r0
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d100      	bne.n	8009f8c <memset+0xa>
 8009f8a:	4770      	bx	lr
 8009f8c:	f803 1b01 	strb.w	r1, [r3], #1
 8009f90:	e7f9      	b.n	8009f86 <memset+0x4>
	...

08009f94 <__errno>:
 8009f94:	4b01      	ldr	r3, [pc, #4]	@ (8009f9c <__errno+0x8>)
 8009f96:	6818      	ldr	r0, [r3, #0]
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	24000010 	.word	0x24000010

08009fa0 <__libc_init_array>:
 8009fa0:	b570      	push	{r4, r5, r6, lr}
 8009fa2:	4d0d      	ldr	r5, [pc, #52]	@ (8009fd8 <__libc_init_array+0x38>)
 8009fa4:	4c0d      	ldr	r4, [pc, #52]	@ (8009fdc <__libc_init_array+0x3c>)
 8009fa6:	1b64      	subs	r4, r4, r5
 8009fa8:	10a4      	asrs	r4, r4, #2
 8009faa:	2600      	movs	r6, #0
 8009fac:	42a6      	cmp	r6, r4
 8009fae:	d109      	bne.n	8009fc4 <__libc_init_array+0x24>
 8009fb0:	4d0b      	ldr	r5, [pc, #44]	@ (8009fe0 <__libc_init_array+0x40>)
 8009fb2:	4c0c      	ldr	r4, [pc, #48]	@ (8009fe4 <__libc_init_array+0x44>)
 8009fb4:	f000 f818 	bl	8009fe8 <_init>
 8009fb8:	1b64      	subs	r4, r4, r5
 8009fba:	10a4      	asrs	r4, r4, #2
 8009fbc:	2600      	movs	r6, #0
 8009fbe:	42a6      	cmp	r6, r4
 8009fc0:	d105      	bne.n	8009fce <__libc_init_array+0x2e>
 8009fc2:	bd70      	pop	{r4, r5, r6, pc}
 8009fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fc8:	4798      	blx	r3
 8009fca:	3601      	adds	r6, #1
 8009fcc:	e7ee      	b.n	8009fac <__libc_init_array+0xc>
 8009fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fd2:	4798      	blx	r3
 8009fd4:	3601      	adds	r6, #1
 8009fd6:	e7f2      	b.n	8009fbe <__libc_init_array+0x1e>
 8009fd8:	0800a288 	.word	0x0800a288
 8009fdc:	0800a288 	.word	0x0800a288
 8009fe0:	0800a288 	.word	0x0800a288
 8009fe4:	0800a28c 	.word	0x0800a28c

08009fe8 <_init>:
 8009fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fea:	bf00      	nop
 8009fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fee:	bc08      	pop	{r3}
 8009ff0:	469e      	mov	lr, r3
 8009ff2:	4770      	bx	lr

08009ff4 <_fini>:
 8009ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff6:	bf00      	nop
 8009ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffa:	bc08      	pop	{r3}
 8009ffc:	469e      	mov	lr, r3
 8009ffe:	4770      	bx	lr
